"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@stream-io";
exports.ids = ["vendor-chunks/@stream-io"];
exports.modules = {

/***/ "(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js":
/*!***************************************************************!*\
  !*** ./node_modules/@stream-io/video-client/dist/index.es.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioSettingsDefaultDeviceEnum: () => (/* binding */ AudioSettingsDefaultDeviceEnum),\n/* harmony export */   AudioSettingsRequestDefaultDeviceEnum: () => (/* binding */ AudioSettingsRequestDefaultDeviceEnum),\n/* harmony export */   AxiosError: () => (/* reexport safe */ axios__WEBPACK_IMPORTED_MODULE_1__.AxiosError),\n/* harmony export */   Browsers: () => (/* binding */ browsers),\n/* harmony export */   Call: () => (/* binding */ Call),\n/* harmony export */   CallState: () => (/* binding */ CallState),\n/* harmony export */   CallType: () => (/* binding */ CallType),\n/* harmony export */   CallTypes: () => (/* binding */ CallTypes),\n/* harmony export */   CallingState: () => (/* binding */ CallingState),\n/* harmony export */   CameraManager: () => (/* binding */ CameraManager),\n/* harmony export */   CameraManagerState: () => (/* binding */ CameraManagerState),\n/* harmony export */   CreateDeviceRequestPushProviderEnum: () => (/* binding */ CreateDeviceRequestPushProviderEnum),\n/* harmony export */   DebounceType: () => (/* binding */ DebounceType),\n/* harmony export */   DynascaleManager: () => (/* binding */ DynascaleManager),\n/* harmony export */   ErrorFromResponse: () => (/* binding */ ErrorFromResponse),\n/* harmony export */   InputMediaDeviceManager: () => (/* binding */ InputMediaDeviceManager),\n/* harmony export */   InputMediaDeviceManagerState: () => (/* binding */ InputMediaDeviceManagerState),\n/* harmony export */   LayoutSettingsNameEnum: () => (/* binding */ LayoutSettingsNameEnum),\n/* harmony export */   LayoutSettingsRequestNameEnum: () => (/* binding */ LayoutSettingsRequestNameEnum),\n/* harmony export */   MicrophoneManager: () => (/* binding */ MicrophoneManager),\n/* harmony export */   MicrophoneManagerState: () => (/* binding */ MicrophoneManagerState),\n/* harmony export */   OwnCapability: () => (/* binding */ OwnCapability),\n/* harmony export */   RecordSettingsRequestModeEnum: () => (/* binding */ RecordSettingsRequestModeEnum),\n/* harmony export */   RecordSettingsRequestQualityEnum: () => (/* binding */ RecordSettingsRequestQualityEnum),\n/* harmony export */   RxUtils: () => (/* binding */ rxUtils),\n/* harmony export */   ScreenShareManager: () => (/* binding */ ScreenShareManager),\n/* harmony export */   ScreenShareState: () => (/* binding */ ScreenShareState),\n/* harmony export */   SfuEvents: () => (/* binding */ events),\n/* harmony export */   SfuModels: () => (/* binding */ models),\n/* harmony export */   SpeakerManager: () => (/* binding */ SpeakerManager),\n/* harmony export */   SpeakerState: () => (/* binding */ SpeakerState),\n/* harmony export */   StreamSfuClient: () => (/* binding */ StreamSfuClient),\n/* harmony export */   StreamVideoClient: () => (/* binding */ StreamVideoClient),\n/* harmony export */   StreamVideoReadOnlyStateStore: () => (/* binding */ StreamVideoReadOnlyStateStore),\n/* harmony export */   StreamVideoServerClient: () => (/* binding */ StreamVideoServerClient),\n/* harmony export */   StreamVideoWriteableStateStore: () => (/* binding */ StreamVideoWriteableStateStore),\n/* harmony export */   TranscriptionSettingsModeEnum: () => (/* binding */ TranscriptionSettingsModeEnum),\n/* harmony export */   TranscriptionSettingsRequestModeEnum: () => (/* binding */ TranscriptionSettingsRequestModeEnum),\n/* harmony export */   VideoSettingsCameraFacingEnum: () => (/* binding */ VideoSettingsCameraFacingEnum),\n/* harmony export */   VideoSettingsRequestCameraFacingEnum: () => (/* binding */ VideoSettingsRequestCameraFacingEnum),\n/* harmony export */   ViewportTracker: () => (/* binding */ ViewportTracker),\n/* harmony export */   VisibilityState: () => (/* binding */ VisibilityState),\n/* harmony export */   checkIfAudioOutputChangeSupported: () => (/* binding */ checkIfAudioOutputChangeSupported),\n/* harmony export */   combineComparators: () => (/* binding */ combineComparators),\n/* harmony export */   conditional: () => (/* binding */ conditional),\n/* harmony export */   createSoundDetector: () => (/* binding */ createSoundDetector),\n/* harmony export */   defaultSortPreset: () => (/* binding */ defaultSortPreset),\n/* harmony export */   descending: () => (/* binding */ descending),\n/* harmony export */   deviceIds$: () => (/* binding */ deviceIds$),\n/* harmony export */   disposeOfMediaStream: () => (/* binding */ disposeOfMediaStream),\n/* harmony export */   dominantSpeaker: () => (/* binding */ dominantSpeaker),\n/* harmony export */   getAudioDevices: () => (/* binding */ getAudioDevices),\n/* harmony export */   getAudioOutputDevices: () => (/* binding */ getAudioOutputDevices),\n/* harmony export */   getAudioStream: () => (/* binding */ getAudioStream),\n/* harmony export */   getClientDetails: () => (/* binding */ getClientDetails),\n/* harmony export */   getDeviceInfo: () => (/* binding */ getDeviceInfo),\n/* harmony export */   getLogger: () => (/* binding */ getLogger),\n/* harmony export */   getOSInfo: () => (/* binding */ getOSInfo),\n/* harmony export */   getScreenShareStream: () => (/* binding */ getScreenShareStream),\n/* harmony export */   getSdkInfo: () => (/* binding */ getSdkInfo),\n/* harmony export */   getVideoDevices: () => (/* binding */ getVideoDevices),\n/* harmony export */   getVideoStream: () => (/* binding */ getVideoStream),\n/* harmony export */   getWebRTCInfo: () => (/* binding */ getWebRTCInfo),\n/* harmony export */   livestreamOrAudioRoomSortPreset: () => (/* binding */ livestreamOrAudioRoomSortPreset),\n/* harmony export */   logLevels: () => (/* binding */ logLevels),\n/* harmony export */   logToConsole: () => (/* binding */ logToConsole),\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   noopComparator: () => (/* binding */ noopComparator),\n/* harmony export */   paginatedLayoutSortPreset: () => (/* binding */ paginatedLayoutSortPreset),\n/* harmony export */   pinned: () => (/* binding */ pinned),\n/* harmony export */   publishingAudio: () => (/* binding */ publishingAudio),\n/* harmony export */   publishingVideo: () => (/* binding */ publishingVideo),\n/* harmony export */   reactionType: () => (/* binding */ reactionType),\n/* harmony export */   role: () => (/* binding */ role),\n/* harmony export */   screenSharing: () => (/* binding */ screenSharing),\n/* harmony export */   setDeviceInfo: () => (/* binding */ setDeviceInfo),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),\n/* harmony export */   setLogger: () => (/* binding */ setLogger),\n/* harmony export */   setOSInfo: () => (/* binding */ setOSInfo),\n/* harmony export */   setSdkInfo: () => (/* binding */ setSdkInfo),\n/* harmony export */   setWebRTCInfo: () => (/* binding */ setWebRTCInfo),\n/* harmony export */   speakerLayoutSortPreset: () => (/* binding */ speakerLayoutSortPreset),\n/* harmony export */   speaking: () => (/* binding */ speaking)\n/* harmony export */ });\n/* harmony import */ var webrtc_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webrtc-adapter */ \"(ssr)/./node_modules/webrtc-adapter/src/js/adapter_core.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/message-type.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/json-typings.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/reflection-merge-partial.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/binary-format-contract.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/pb-long.js\");\n/* harmony import */ var _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @protobuf-ts/runtime-rpc */ \"(ssr)/./node_modules/@protobuf-ts/runtime-rpc/build/es2015/service-type.js\");\n/* harmony import */ var _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @protobuf-ts/runtime-rpc */ \"(ssr)/./node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-interceptor.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/index.js\");\n/* harmony import */ var _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @protobuf-ts/twirp-transport */ \"(ssr)/./node_modules/@protobuf-ts/twirp-transport/build/es2015/twirp-transport.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/cjs/index.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var sdp_transform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sdp-transform */ \"(ssr)/./node_modules/sdp-transform/lib/index.js\");\n/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ua-parser-js */ \"(ssr)/./node_modules/ua-parser-js/src/ua-parser.js\");\n/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(ua_parser_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! isomorphic-ws */ \"(ssr)/./node_modules/isomorphic-ws/node.js\");\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(isomorphic_ws__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jsonwebtoken */ \"(ssr)/./node_modules/jsonwebtoken/index.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var base64_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! base64-js */ \"(ssr)/./node_modules/base64-js/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @export\n */ const AudioSettingsDefaultDeviceEnum = {\n    SPEAKER: \"speaker\",\n    EARPIECE: \"earpiece\"\n};\n/**\n * @export\n */ const AudioSettingsRequestDefaultDeviceEnum = {\n    SPEAKER: \"speaker\",\n    EARPIECE: \"earpiece\"\n};\n/**\n * @export\n */ const CreateDeviceRequestPushProviderEnum = {\n    FIREBASE: \"firebase\",\n    APN: \"apn\",\n    HUAWEI: \"huawei\",\n    XIAOMI: \"xiaomi\"\n};\n/**\n * @export\n */ const LayoutSettingsNameEnum = {\n    SPOTLIGHT: \"spotlight\",\n    GRID: \"grid\",\n    SINGLE_PARTICIPANT: \"single-participant\",\n    MOBILE: \"mobile\",\n    CUSTOM: \"custom\"\n};\n/**\n * @export\n */ const LayoutSettingsRequestNameEnum = {\n    SPOTLIGHT: \"spotlight\",\n    GRID: \"grid\",\n    SINGLE_PARTICIPANT: \"single-participant\",\n    MOBILE: \"mobile\",\n    CUSTOM: \"custom\"\n};\n/**\n * All possibility of string to use\n * @export\n */ const OwnCapability = {\n    BLOCK_USERS: \"block-users\",\n    CREATE_CALL: \"create-call\",\n    CREATE_REACTION: \"create-reaction\",\n    END_CALL: \"end-call\",\n    JOIN_BACKSTAGE: \"join-backstage\",\n    JOIN_CALL: \"join-call\",\n    JOIN_ENDED_CALL: \"join-ended-call\",\n    MUTE_USERS: \"mute-users\",\n    PIN_FOR_EVERYONE: \"pin-for-everyone\",\n    READ_CALL: \"read-call\",\n    REMOVE_CALL_MEMBER: \"remove-call-member\",\n    SCREENSHARE: \"screenshare\",\n    SEND_AUDIO: \"send-audio\",\n    SEND_VIDEO: \"send-video\",\n    START_BROADCAST_CALL: \"start-broadcast-call\",\n    START_RECORD_CALL: \"start-record-call\",\n    START_TRANSCRIPTION_CALL: \"start-transcription-call\",\n    STOP_BROADCAST_CALL: \"stop-broadcast-call\",\n    STOP_RECORD_CALL: \"stop-record-call\",\n    STOP_TRANSCRIPTION_CALL: \"stop-transcription-call\",\n    UPDATE_CALL: \"update-call\",\n    UPDATE_CALL_MEMBER: \"update-call-member\",\n    UPDATE_CALL_PERMISSIONS: \"update-call-permissions\",\n    UPDATE_CALL_SETTINGS: \"update-call-settings\"\n};\n/**\n * @export\n */ const RecordSettingsRequestModeEnum = {\n    AVAILABLE: \"available\",\n    DISABLED: \"disabled\",\n    AUTO_ON: \"auto-on\"\n};\n/**\n * @export\n */ const RecordSettingsRequestQualityEnum = {\n    _360P: \"360p\",\n    _480P: \"480p\",\n    _720P: \"720p\",\n    _1080P: \"1080p\",\n    _1440P: \"1440p\"\n};\n/**\n * @export\n */ const TranscriptionSettingsModeEnum = {\n    AVAILABLE: \"available\",\n    DISABLED: \"disabled\",\n    AUTO_ON: \"auto-on\"\n};\n/**\n * @export\n */ const TranscriptionSettingsRequestModeEnum = {\n    AVAILABLE: \"available\",\n    DISABLED: \"disabled\",\n    AUTO_ON: \"auto-on\"\n};\n/**\n * @export\n */ const VideoSettingsCameraFacingEnum = {\n    FRONT: \"front\",\n    BACK: \"back\",\n    EXTERNAL: \"external\"\n};\n/**\n * @export\n */ const VideoSettingsRequestCameraFacingEnum = {\n    FRONT: \"front\",\n    BACK: \"back\",\n    EXTERNAL: \"external\"\n};\nclass ErrorFromResponse extends Error {\n}\n/**\n * `NullValue` is a singleton enumeration to represent the null value for the\n * `Value` type union.\n *\n *  The JSON representation for `NullValue` is JSON `null`.\n *\n * @generated from protobuf enum google.protobuf.NullValue\n */ var NullValue;\n(function(NullValue) {\n    /**\n     * Null value.\n     *\n     * @generated from protobuf enum value: NULL_VALUE = 0;\n     */ NullValue[NullValue[\"NULL_VALUE\"] = 0] = \"NULL_VALUE\";\n})(NullValue || (NullValue = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass Struct$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"google.protobuf.Struct\", [\n            {\n                no: 1,\n                name: \"fields\",\n                kind: \"map\",\n                K: 9 /*ScalarType.STRING*/ ,\n                V: {\n                    kind: \"message\",\n                    T: ()=>Value\n                }\n            }\n        ]);\n    }\n    /**\n     * Encode `Struct` to JSON object.\n     */ internalJsonWrite(message, options) {\n        let json = {};\n        for (let [k, v] of Object.entries(message.fields)){\n            json[k] = Value.toJson(v);\n        }\n        return json;\n    }\n    /**\n     * Decode `Struct` from JSON object.\n     */ internalJsonRead(json, options, target) {\n        if (!(0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.isJsonObject)(json)) throw new globalThis.Error(\"Unable to parse message \" + this.typeName + \" from JSON \" + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.typeofJsonValue)(json) + \".\");\n        if (!target) target = this.create();\n        for (let [k, v] of globalThis.Object.entries(json)){\n            target.fields[k] = Value.fromJson(v);\n        }\n        return target;\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.fields = {};\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* map<string, google.protobuf.Value> fields */ 1:\n                    this.binaryReadMap1(message.fields, reader, options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    binaryReadMap1(map, reader, options) {\n        let len = reader.uint32(), end = reader.pos + len, key, val;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case 1:\n                    key = reader.string();\n                    break;\n                case 2:\n                    val = Value.internalBinaryRead(reader, reader.uint32(), options);\n                    break;\n                default:\n                    throw new globalThis.Error(\"unknown map entry field for field google.protobuf.Struct.fields\");\n            }\n        }\n        map[key ?? \"\"] = val ?? Value.create();\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* map<string, google.protobuf.Value> fields = 1; */ for (let k of globalThis.Object.keys(message.fields)){\n            writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork().tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(k);\n            writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork();\n            Value.internalBinaryWrite(message.fields[k], writer, options);\n            writer.join().join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Struct\n */ const Struct = new Struct$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Value$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"google.protobuf.Value\", [\n            {\n                no: 1,\n                name: \"null_value\",\n                kind: \"enum\",\n                oneof: \"kind\",\n                T: ()=>[\n                        \"google.protobuf.NullValue\",\n                        NullValue\n                    ]\n            },\n            {\n                no: 2,\n                name: \"number_value\",\n                kind: \"scalar\",\n                oneof: \"kind\",\n                T: 1 /*ScalarType.DOUBLE*/ \n            },\n            {\n                no: 3,\n                name: \"string_value\",\n                kind: \"scalar\",\n                oneof: \"kind\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"bool_value\",\n                kind: \"scalar\",\n                oneof: \"kind\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 5,\n                name: \"struct_value\",\n                kind: \"message\",\n                oneof: \"kind\",\n                T: ()=>Struct\n            },\n            {\n                no: 6,\n                name: \"list_value\",\n                kind: \"message\",\n                oneof: \"kind\",\n                T: ()=>ListValue\n            }\n        ]);\n    }\n    /**\n     * Encode `Value` to JSON value.\n     */ internalJsonWrite(message, options) {\n        if (message.kind.oneofKind === undefined) throw new globalThis.Error();\n        switch(message.kind.oneofKind){\n            case undefined:\n                throw new globalThis.Error();\n            case \"boolValue\":\n                return message.kind.boolValue;\n            case \"nullValue\":\n                return null;\n            case \"numberValue\":\n                let numberValue = message.kind.numberValue;\n                if (typeof numberValue == \"number\" && !Number.isFinite(numberValue)) throw new globalThis.Error();\n                return numberValue;\n            case \"stringValue\":\n                return message.kind.stringValue;\n            case \"listValue\":\n                let listValueField = this.fields.find((f)=>f.no === 6);\n                if (listValueField?.kind !== \"message\") throw new globalThis.Error();\n                return listValueField.T().toJson(message.kind.listValue);\n            case \"structValue\":\n                let structValueField = this.fields.find((f)=>f.no === 5);\n                if (structValueField?.kind !== \"message\") throw new globalThis.Error();\n                return structValueField.T().toJson(message.kind.structValue);\n        }\n    }\n    /**\n     * Decode `Value` from JSON value.\n     */ internalJsonRead(json, options, target) {\n        if (!target) target = this.create();\n        switch(typeof json){\n            case \"number\":\n                target.kind = {\n                    oneofKind: \"numberValue\",\n                    numberValue: json\n                };\n                break;\n            case \"string\":\n                target.kind = {\n                    oneofKind: \"stringValue\",\n                    stringValue: json\n                };\n                break;\n            case \"boolean\":\n                target.kind = {\n                    oneofKind: \"boolValue\",\n                    boolValue: json\n                };\n                break;\n            case \"object\":\n                if (json === null) {\n                    target.kind = {\n                        oneofKind: \"nullValue\",\n                        nullValue: NullValue.NULL_VALUE\n                    };\n                } else if (globalThis.Array.isArray(json)) {\n                    target.kind = {\n                        oneofKind: \"listValue\",\n                        listValue: ListValue.fromJson(json)\n                    };\n                } else {\n                    target.kind = {\n                        oneofKind: \"structValue\",\n                        structValue: Struct.fromJson(json)\n                    };\n                }\n                break;\n            default:\n                throw new globalThis.Error(\"Unable to parse \" + this.typeName + \" from JSON \" + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.typeofJsonValue)(json));\n        }\n        return target;\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.kind = {\n            oneofKind: undefined\n        };\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* google.protobuf.NullValue null_value */ 1:\n                    message.kind = {\n                        oneofKind: \"nullValue\",\n                        nullValue: reader.int32()\n                    };\n                    break;\n                case /* double number_value */ 2:\n                    message.kind = {\n                        oneofKind: \"numberValue\",\n                        numberValue: reader.double()\n                    };\n                    break;\n                case /* string string_value */ 3:\n                    message.kind = {\n                        oneofKind: \"stringValue\",\n                        stringValue: reader.string()\n                    };\n                    break;\n                case /* bool bool_value */ 4:\n                    message.kind = {\n                        oneofKind: \"boolValue\",\n                        boolValue: reader.bool()\n                    };\n                    break;\n                case /* google.protobuf.Struct struct_value */ 5:\n                    message.kind = {\n                        oneofKind: \"structValue\",\n                        structValue: Struct.internalBinaryRead(reader, reader.uint32(), options, message.kind.structValue)\n                    };\n                    break;\n                case /* google.protobuf.ListValue list_value */ 6:\n                    message.kind = {\n                        oneofKind: \"listValue\",\n                        listValue: ListValue.internalBinaryRead(reader, reader.uint32(), options, message.kind.listValue)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* google.protobuf.NullValue null_value = 1; */ if (message.kind.oneofKind === \"nullValue\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.kind.nullValue);\n        /* double number_value = 2; */ if (message.kind.oneofKind === \"numberValue\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Bit64).double(message.kind.numberValue);\n        /* string string_value = 3; */ if (message.kind.oneofKind === \"stringValue\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.kind.stringValue);\n        /* bool bool_value = 4; */ if (message.kind.oneofKind === \"boolValue\") writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.kind.boolValue);\n        /* google.protobuf.Struct struct_value = 5; */ if (message.kind.oneofKind === \"structValue\") Struct.internalBinaryWrite(message.kind.structValue, writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* google.protobuf.ListValue list_value = 6; */ if (message.kind.oneofKind === \"listValue\") ListValue.internalBinaryWrite(message.kind.listValue, writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Value\n */ const Value = new Value$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ListValue$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"google.protobuf.ListValue\", [\n            {\n                no: 1,\n                name: \"values\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Value\n            }\n        ]);\n    }\n    /**\n     * Encode `ListValue` to JSON array.\n     */ internalJsonWrite(message, options) {\n        return message.values.map((v)=>Value.toJson(v));\n    }\n    /**\n     * Decode `ListValue` from JSON array.\n     */ internalJsonRead(json, options, target) {\n        if (!globalThis.Array.isArray(json)) throw new globalThis.Error(\"Unable to parse \" + this.typeName + \" from JSON \" + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.typeofJsonValue)(json));\n        if (!target) target = this.create();\n        let values = json.map((v)=>Value.fromJson(v));\n        target.values.push(...values);\n        return target;\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.values = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated google.protobuf.Value values */ 1:\n                    message.values.push(Value.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated google.protobuf.Value values = 1; */ for(let i = 0; i < message.values.length; i++)Value.internalBinaryWrite(message.values[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.ListValue\n */ const ListValue = new ListValue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Timestamp$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"google.protobuf.Timestamp\", [\n            {\n                no: 1,\n                name: \"seconds\",\n                kind: \"scalar\",\n                T: 3 /*ScalarType.INT64*/ \n            },\n            {\n                no: 2,\n                name: \"nanos\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n    /**\n     * Creates a new `Timestamp` for the current time.\n     */ now() {\n        const msg = this.create();\n        const ms = Date.now();\n        msg.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_13__.PbLong.from(Math.floor(ms / 1000)).toString();\n        msg.nanos = ms % 1000 * 1000000;\n        return msg;\n    }\n    /**\n     * Converts a `Timestamp` to a JavaScript Date.\n     */ toDate(message) {\n        return new Date(_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_13__.PbLong.from(message.seconds).toNumber() * 1000 + Math.ceil(message.nanos / 1000000));\n    }\n    /**\n     * Converts a JavaScript Date to a `Timestamp`.\n     */ fromDate(date) {\n        const msg = this.create();\n        const ms = date.getTime();\n        msg.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_13__.PbLong.from(Math.floor(ms / 1000)).toString();\n        msg.nanos = ms % 1000 * 1000000;\n        return msg;\n    }\n    /**\n     * In JSON format, the `Timestamp` type is encoded as a string\n     * in the RFC 3339 format.\n     */ internalJsonWrite(message, options) {\n        let ms = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_13__.PbLong.from(message.seconds).toNumber() * 1000;\n        if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) throw new Error(\"Unable to encode Timestamp to JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\");\n        if (message.nanos < 0) throw new Error(\"Unable to encode invalid Timestamp to JSON. Nanos must not be negative.\");\n        let z = \"Z\";\n        if (message.nanos > 0) {\n            let nanosStr = (message.nanos + 1000000000).toString().substring(1);\n            if (nanosStr.substring(3) === \"000000\") z = \".\" + nanosStr.substring(0, 3) + \"Z\";\n            else if (nanosStr.substring(6) === \"000\") z = \".\" + nanosStr.substring(0, 6) + \"Z\";\n            else z = \".\" + nanosStr + \"Z\";\n        }\n        return new Date(ms).toISOString().replace(\".000Z\", z);\n    }\n    /**\n     * In JSON format, the `Timestamp` type is encoded as a string\n     * in the RFC 3339 format.\n     */ internalJsonRead(json, options, target) {\n        if (typeof json !== \"string\") throw new Error(\"Unable to parse Timestamp from JSON \" + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.typeofJsonValue)(json) + \".\");\n        let matches = json.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);\n        if (!matches) throw new Error(\"Unable to parse Timestamp from JSON. Invalid format.\");\n        let ms = Date.parse(matches[1] + \"-\" + matches[2] + \"-\" + matches[3] + \"T\" + matches[4] + \":\" + matches[5] + \":\" + matches[6] + (matches[8] ? matches[8] : \"Z\"));\n        if (Number.isNaN(ms)) throw new Error(\"Unable to parse Timestamp from JSON. Invalid value.\");\n        if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) throw new globalThis.Error(\"Unable to parse Timestamp from JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\");\n        if (!target) target = this.create();\n        target.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_13__.PbLong.from(ms / 1000).toString();\n        target.nanos = 0;\n        if (matches[7]) target.nanos = parseInt(\"1\" + matches[7] + \"0\".repeat(9 - matches[7].length)) - 1000000000;\n        return target;\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.seconds = \"0\";\n        message.nanos = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* int64 seconds */ 1:\n                    message.seconds = reader.int64().toString();\n                    break;\n                case /* int32 nanos */ 2:\n                    message.nanos = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* int64 seconds = 1; */ if (message.seconds !== \"0\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int64(message.seconds);\n        /* int32 nanos = 2; */ if (message.nanos !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.nanos);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Timestamp\n */ const Timestamp = new Timestamp$Type();\n/**\n * @generated from protobuf enum stream.video.sfu.models.PeerType\n */ var PeerType;\n(function(PeerType) {\n    /**\n     * todo fix me (marcelo)\n     *\n     * @generated from protobuf enum value: PEER_TYPE_PUBLISHER_UNSPECIFIED = 0;\n     */ PeerType[PeerType[\"PUBLISHER_UNSPECIFIED\"] = 0] = \"PUBLISHER_UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: PEER_TYPE_SUBSCRIBER = 1;\n     */ PeerType[PeerType[\"SUBSCRIBER\"] = 1] = \"SUBSCRIBER\";\n})(PeerType || (PeerType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.ConnectionQuality\n */ var ConnectionQuality;\n(function(ConnectionQuality) {\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_UNSPECIFIED = 0;\n     */ ConnectionQuality[ConnectionQuality[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_POOR = 1;\n     */ ConnectionQuality[ConnectionQuality[\"POOR\"] = 1] = \"POOR\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_GOOD = 2;\n     */ ConnectionQuality[ConnectionQuality[\"GOOD\"] = 2] = \"GOOD\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_EXCELLENT = 3;\n     */ ConnectionQuality[ConnectionQuality[\"EXCELLENT\"] = 3] = \"EXCELLENT\";\n})(ConnectionQuality || (ConnectionQuality = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.VideoQuality\n */ var VideoQuality;\n(function(VideoQuality) {\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_LOW_UNSPECIFIED = 0;\n     */ VideoQuality[VideoQuality[\"LOW_UNSPECIFIED\"] = 0] = \"LOW_UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_MID = 1;\n     */ VideoQuality[VideoQuality[\"MID\"] = 1] = \"MID\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_HIGH = 2;\n     */ VideoQuality[VideoQuality[\"HIGH\"] = 2] = \"HIGH\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_OFF = 3;\n     */ VideoQuality[VideoQuality[\"OFF\"] = 3] = \"OFF\";\n})(VideoQuality || (VideoQuality = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackType\n */ var TrackType;\n(function(TrackType) {\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_UNSPECIFIED = 0;\n     */ TrackType[TrackType[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_AUDIO = 1;\n     */ TrackType[TrackType[\"AUDIO\"] = 1] = \"AUDIO\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_VIDEO = 2;\n     */ TrackType[TrackType[\"VIDEO\"] = 2] = \"VIDEO\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE = 3;\n     */ TrackType[TrackType[\"SCREEN_SHARE\"] = 3] = \"SCREEN_SHARE\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE_AUDIO = 4;\n     */ TrackType[TrackType[\"SCREEN_SHARE_AUDIO\"] = 4] = \"SCREEN_SHARE_AUDIO\";\n})(TrackType || (TrackType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.ErrorCode\n */ var ErrorCode;\n(function(ErrorCode) {\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_UNSPECIFIED = 0;\n     */ ErrorCode[ErrorCode[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_NOT_FOUND = 100;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_NOT_FOUND\"] = 100] = \"PUBLISH_TRACK_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACKS_MISMATCH = 101;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACKS_MISMATCH\"] = 101] = \"PUBLISH_TRACKS_MISMATCH\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_OUT_OF_ORDER = 102;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_OUT_OF_ORDER\"] = 102] = \"PUBLISH_TRACK_OUT_OF_ORDER\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND = 103;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND\"] = 103] = \"PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_LIVE_ENDED = 104;\n     */ ErrorCode[ErrorCode[\"LIVE_ENDED\"] = 104] = \"LIVE_ENDED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_NOT_FOUND = 200;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_NOT_FOUND\"] = 200] = \"PARTICIPANT_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING_OUT = 201;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATING_OUT\"] = 201] = \"PARTICIPANT_MIGRATING_OUT\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATION_FAILED = 202;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATION_FAILED\"] = 202] = \"PARTICIPANT_MIGRATION_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING = 203;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATING\"] = 203] = \"PARTICIPANT_MIGRATING\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_RECONNECT_FAILED = 204;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_RECONNECT_FAILED\"] = 204] = \"PARTICIPANT_RECONNECT_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MEDIA_TRANSPORT_FAILURE = 205;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MEDIA_TRANSPORT_FAILURE\"] = 205] = \"PARTICIPANT_MEDIA_TRANSPORT_FAILURE\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_CALL_NOT_FOUND = 300;\n     */ ErrorCode[ErrorCode[\"CALL_NOT_FOUND\"] = 300] = \"CALL_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_REQUEST_VALIDATION_FAILED = 400;\n     */ ErrorCode[ErrorCode[\"REQUEST_VALIDATION_FAILED\"] = 400] = \"REQUEST_VALIDATION_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_UNAUTHENTICATED = 401;\n     */ ErrorCode[ErrorCode[\"UNAUTHENTICATED\"] = 401] = \"UNAUTHENTICATED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PERMISSION_DENIED = 403;\n     */ ErrorCode[ErrorCode[\"PERMISSION_DENIED\"] = 403] = \"PERMISSION_DENIED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_TOO_MANY_REQUESTS = 429;\n     */ ErrorCode[ErrorCode[\"TOO_MANY_REQUESTS\"] = 429] = \"TOO_MANY_REQUESTS\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_INTERNAL_SERVER_ERROR = 500;\n     */ ErrorCode[ErrorCode[\"INTERNAL_SERVER_ERROR\"] = 500] = \"INTERNAL_SERVER_ERROR\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_SFU_SHUTTING_DOWN = 600;\n     */ ErrorCode[ErrorCode[\"SFU_SHUTTING_DOWN\"] = 600] = \"SFU_SHUTTING_DOWN\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_SFU_FULL = 700;\n     */ ErrorCode[ErrorCode[\"SFU_FULL\"] = 700] = \"SFU_FULL\";\n})(ErrorCode || (ErrorCode = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.SdkType\n */ var SdkType;\n(function(SdkType) {\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_UNSPECIFIED = 0;\n     */ SdkType[SdkType[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_REACT = 1;\n     */ SdkType[SdkType[\"REACT\"] = 1] = \"REACT\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_ANGULAR = 2;\n     */ SdkType[SdkType[\"ANGULAR\"] = 2] = \"ANGULAR\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_ANDROID = 3;\n     */ SdkType[SdkType[\"ANDROID\"] = 3] = \"ANDROID\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_IOS = 4;\n     */ SdkType[SdkType[\"IOS\"] = 4] = \"IOS\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_FLUTTER = 5;\n     */ SdkType[SdkType[\"FLUTTER\"] = 5] = \"FLUTTER\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_REACT_NATIVE = 6;\n     */ SdkType[SdkType[\"REACT_NATIVE\"] = 6] = \"REACT_NATIVE\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_UNITY = 7;\n     */ SdkType[SdkType[\"UNITY\"] = 7] = \"UNITY\";\n})(SdkType || (SdkType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackUnpublishReason\n */ var TrackUnpublishReason;\n(function(TrackUnpublishReason) {\n    /**\n     * Default value which is used when the specific reason\n     * for muting the track is not known.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_UNSPECIFIED = 0;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * Represents user muting their tracks.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_USER_MUTED = 1;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"USER_MUTED\"] = 1] = \"USER_MUTED\";\n    /**\n     * Represents muting the track because the permission to\n     * publish the track has been revoked.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_PERMISSION_REVOKED = 2;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"PERMISSION_REVOKED\"] = 2] = \"PERMISSION_REVOKED\";\n    /**\n     * Represents muting the track due to moderation actions.\n     * This is different from permission revoked because the\n     * participant can unmute themselves here whereas in case\n     * of \"permission revoke\" it is not possible until the\n     * call permissions are updated.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_MODERATION = 3;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"MODERATION\"] = 3] = \"MODERATION\";\n})(TrackUnpublishReason || (TrackUnpublishReason = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.GoAwayReason\n */ var GoAwayReason;\n(function(GoAwayReason) {\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_UNSPECIFIED = 0;\n     */ GoAwayReason[GoAwayReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_SHUTTING_DOWN = 1;\n     */ GoAwayReason[GoAwayReason[\"SHUTTING_DOWN\"] = 1] = \"SHUTTING_DOWN\";\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_REBALANCE = 2;\n     */ GoAwayReason[GoAwayReason[\"REBALANCE\"] = 2] = \"REBALANCE\";\n})(GoAwayReason || (GoAwayReason = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallState$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.CallState\", [\n            {\n                no: 1,\n                name: \"participants\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Participant\n            },\n            {\n                no: 2,\n                name: \"started_at\",\n                kind: \"message\",\n                T: ()=>Timestamp\n            },\n            {\n                no: 3,\n                name: \"participant_count\",\n                kind: \"message\",\n                T: ()=>ParticipantCount\n            },\n            {\n                no: 4,\n                name: \"pins\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Pin\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.participants = [];\n        message.pins = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated stream.video.sfu.models.Participant participants */ 1:\n                    message.participants.push(Participant.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* google.protobuf.Timestamp started_at */ 2:\n                    message.startedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startedAt);\n                    break;\n                case /* stream.video.sfu.models.ParticipantCount participant_count */ 3:\n                    message.participantCount = ParticipantCount.internalBinaryRead(reader, reader.uint32(), options, message.participantCount);\n                    break;\n                case /* repeated stream.video.sfu.models.Pin pins */ 4:\n                    message.pins.push(Pin.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated stream.video.sfu.models.Participant participants = 1; */ for(let i = 0; i < message.participants.length; i++)Participant.internalBinaryWrite(message.participants[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* google.protobuf.Timestamp started_at = 2; */ if (message.startedAt) Timestamp.internalBinaryWrite(message.startedAt, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.ParticipantCount participant_count = 3; */ if (message.participantCount) ParticipantCount.internalBinaryWrite(message.participantCount, writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* repeated stream.video.sfu.models.Pin pins = 4; */ for(let i = 0; i < message.pins.length; i++)Pin.internalBinaryWrite(message.pins[i], writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallState\n */ const CallState$1 = new CallState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantCount$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.ParticipantCount\", [\n            {\n                no: 1,\n                name: \"total\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 2,\n                name: \"anonymous\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.total = 0;\n        message.anonymous = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* uint32 total */ 1:\n                    message.total = reader.uint32();\n                    break;\n                case /* uint32 anonymous */ 2:\n                    message.anonymous = reader.uint32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* uint32 total = 1; */ if (message.total !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.total);\n        /* uint32 anonymous = 2; */ if (message.anonymous !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.anonymous);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ParticipantCount\n */ const ParticipantCount = new ParticipantCount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Pin$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Pin\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Pin\n */ const Pin = new Pin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Participant$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Participant\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"published_tracks\",\n                kind: \"enum\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 4,\n                name: \"joined_at\",\n                kind: \"message\",\n                T: ()=>Timestamp\n            },\n            {\n                no: 5,\n                name: \"track_lookup_prefix\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 6,\n                name: \"connection_quality\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.ConnectionQuality\",\n                        ConnectionQuality,\n                        \"CONNECTION_QUALITY_\"\n                    ]\n            },\n            {\n                no: 7,\n                name: \"is_speaking\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 8,\n                name: \"is_dominant_speaker\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 9,\n                name: \"audio_level\",\n                kind: \"scalar\",\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 10,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 11,\n                name: \"image\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 12,\n                name: \"custom\",\n                kind: \"message\",\n                T: ()=>Struct\n            },\n            {\n                no: 13,\n                name: \"roles\",\n                kind: \"scalar\",\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.publishedTracks = [];\n        message.trackLookupPrefix = \"\";\n        message.connectionQuality = 0;\n        message.isSpeaking = false;\n        message.isDominantSpeaker = false;\n        message.audioLevel = 0;\n        message.name = \"\";\n        message.image = \"\";\n        message.roles = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* repeated stream.video.sfu.models.TrackType published_tracks */ 3:\n                    if (wireType === _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited) for(let e = reader.int32() + reader.pos; reader.pos < e;)message.publishedTracks.push(reader.int32());\n                    else message.publishedTracks.push(reader.int32());\n                    break;\n                case /* google.protobuf.Timestamp joined_at */ 4:\n                    message.joinedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.joinedAt);\n                    break;\n                case /* string track_lookup_prefix */ 5:\n                    message.trackLookupPrefix = reader.string();\n                    break;\n                case /* stream.video.sfu.models.ConnectionQuality connection_quality */ 6:\n                    message.connectionQuality = reader.int32();\n                    break;\n                case /* bool is_speaking */ 7:\n                    message.isSpeaking = reader.bool();\n                    break;\n                case /* bool is_dominant_speaker */ 8:\n                    message.isDominantSpeaker = reader.bool();\n                    break;\n                case /* float audio_level */ 9:\n                    message.audioLevel = reader.float();\n                    break;\n                case /* string name */ 10:\n                    message.name = reader.string();\n                    break;\n                case /* string image */ 11:\n                    message.image = reader.string();\n                    break;\n                case /* google.protobuf.Struct custom */ 12:\n                    message.custom = Struct.internalBinaryRead(reader, reader.uint32(), options, message.custom);\n                    break;\n                case /* repeated string roles */ 13:\n                    message.roles.push(reader.string());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* repeated stream.video.sfu.models.TrackType published_tracks = 3; */ if (message.publishedTracks.length) {\n            writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork();\n            for(let i = 0; i < message.publishedTracks.length; i++)writer.int32(message.publishedTracks[i]);\n            writer.join();\n        }\n        /* google.protobuf.Timestamp joined_at = 4; */ if (message.joinedAt) Timestamp.internalBinaryWrite(message.joinedAt, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* string track_lookup_prefix = 5; */ if (message.trackLookupPrefix !== \"\") writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.trackLookupPrefix);\n        /* stream.video.sfu.models.ConnectionQuality connection_quality = 6; */ if (message.connectionQuality !== 0) writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.connectionQuality);\n        /* bool is_speaking = 7; */ if (message.isSpeaking !== false) writer.tag(7, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.isSpeaking);\n        /* bool is_dominant_speaker = 8; */ if (message.isDominantSpeaker !== false) writer.tag(8, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.isDominantSpeaker);\n        /* float audio_level = 9; */ if (message.audioLevel !== 0) writer.tag(9, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Bit32).float(message.audioLevel);\n        /* string name = 10; */ if (message.name !== \"\") writer.tag(10, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.name);\n        /* string image = 11; */ if (message.image !== \"\") writer.tag(11, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.image);\n        /* google.protobuf.Struct custom = 12; */ if (message.custom) Struct.internalBinaryWrite(message.custom, writer.tag(12, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* repeated string roles = 13; */ for(let i = 0; i < message.roles.length; i++)writer.tag(13, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.roles[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Participant\n */ const Participant = new Participant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StreamQuality$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.StreamQuality\", [\n            {\n                no: 1,\n                name: \"video_quality\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.VideoQuality\",\n                        VideoQuality,\n                        \"VIDEO_QUALITY_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.videoQuality = 0;\n        message.userId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.VideoQuality video_quality */ 1:\n                    message.videoQuality = reader.int32();\n                    break;\n                case /* string user_id */ 2:\n                    message.userId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.VideoQuality video_quality = 1; */ if (message.videoQuality !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.videoQuality);\n        /* string user_id = 2; */ if (message.userId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.StreamQuality\n */ const StreamQuality = new StreamQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoDimension$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.VideoDimension\", [\n            {\n                no: 1,\n                name: \"width\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 2,\n                name: \"height\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.width = 0;\n        message.height = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* uint32 width */ 1:\n                    message.width = reader.uint32();\n                    break;\n                case /* uint32 height */ 2:\n                    message.height = reader.uint32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* uint32 width = 1; */ if (message.width !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.width);\n        /* uint32 height = 2; */ if (message.height !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.height);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoDimension\n */ const VideoDimension = new VideoDimension$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.VideoLayer\", [\n            {\n                no: 1,\n                name: \"rid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"video_dimension\",\n                kind: \"message\",\n                T: ()=>VideoDimension\n            },\n            {\n                no: 4,\n                name: \"bitrate\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 5,\n                name: \"fps\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 6,\n                name: \"quality\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.VideoQuality\",\n                        VideoQuality,\n                        \"VIDEO_QUALITY_\"\n                    ]\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.rid = \"\";\n        message.bitrate = 0;\n        message.fps = 0;\n        message.quality = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string rid */ 1:\n                    message.rid = reader.string();\n                    break;\n                case /* stream.video.sfu.models.VideoDimension video_dimension */ 2:\n                    message.videoDimension = VideoDimension.internalBinaryRead(reader, reader.uint32(), options, message.videoDimension);\n                    break;\n                case /* uint32 bitrate */ 4:\n                    message.bitrate = reader.uint32();\n                    break;\n                case /* uint32 fps */ 5:\n                    message.fps = reader.uint32();\n                    break;\n                case /* stream.video.sfu.models.VideoQuality quality */ 6:\n                    message.quality = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string rid = 1; */ if (message.rid !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.rid);\n        /* stream.video.sfu.models.VideoDimension video_dimension = 2; */ if (message.videoDimension) VideoDimension.internalBinaryWrite(message.videoDimension, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* uint32 bitrate = 4; */ if (message.bitrate !== 0) writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.bitrate);\n        /* uint32 fps = 5; */ if (message.fps !== 0) writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.fps);\n        /* stream.video.sfu.models.VideoQuality quality = 6; */ if (message.quality !== 0) writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.quality);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoLayer\n */ const VideoLayer = new VideoLayer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Codec$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Codec\", [\n            {\n                no: 1,\n                name: \"payload_type\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 2,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"fmtp_line\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"clock_rate\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 5,\n                name: \"encoding_parameters\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 6,\n                name: \"feedbacks\",\n                kind: \"scalar\",\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.payloadType = 0;\n        message.name = \"\";\n        message.fmtpLine = \"\";\n        message.clockRate = 0;\n        message.encodingParameters = \"\";\n        message.feedbacks = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* uint32 payload_type */ 1:\n                    message.payloadType = reader.uint32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* string fmtp_line */ 3:\n                    message.fmtpLine = reader.string();\n                    break;\n                case /* uint32 clock_rate */ 4:\n                    message.clockRate = reader.uint32();\n                    break;\n                case /* string encoding_parameters */ 5:\n                    message.encodingParameters = reader.string();\n                    break;\n                case /* repeated string feedbacks */ 6:\n                    message.feedbacks.push(reader.string());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* uint32 payload_type = 1; */ if (message.payloadType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.payloadType);\n        /* string name = 2; */ if (message.name !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.name);\n        /* string fmtp_line = 3; */ if (message.fmtpLine !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.fmtpLine);\n        /* uint32 clock_rate = 4; */ if (message.clockRate !== 0) writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.clockRate);\n        /* string encoding_parameters = 5; */ if (message.encodingParameters !== \"\") writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.encodingParameters);\n        /* repeated string feedbacks = 6; */ for(let i = 0; i < message.feedbacks.length; i++)writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.feedbacks[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Codec\n */ const Codec = new Codec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nlet ICETrickle$Type$1 = class ICETrickle$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.ICETrickle\", [\n            {\n                no: 1,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"ice_candidate\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.peerType = 0;\n        message.iceCandidate = \"\";\n        message.sessionId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.PeerType peer_type */ 1:\n                    message.peerType = reader.int32();\n                    break;\n                case /* string ice_candidate */ 2:\n                    message.iceCandidate = reader.string();\n                    break;\n                case /* string session_id */ 3:\n                    message.sessionId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.PeerType peer_type = 1; */ if (message.peerType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.peerType);\n        /* string ice_candidate = 2; */ if (message.iceCandidate !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.iceCandidate);\n        /* string session_id = 3; */ if (message.sessionId !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n};\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ICETrickle\n */ const ICETrickle$1 = new ICETrickle$Type$1();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackInfo$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.TrackInfo\", [\n            {\n                no: 1,\n                name: \"track_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"track_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 5,\n                name: \"layers\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>VideoLayer\n            },\n            {\n                no: 6,\n                name: \"mid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 7,\n                name: \"dtx\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 8,\n                name: \"stereo\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 9,\n                name: \"red\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.trackId = \"\";\n        message.trackType = 0;\n        message.layers = [];\n        message.mid = \"\";\n        message.dtx = false;\n        message.stereo = false;\n        message.red = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string track_id */ 1:\n                    message.trackId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.TrackType track_type */ 2:\n                    message.trackType = reader.int32();\n                    break;\n                case /* repeated stream.video.sfu.models.VideoLayer layers */ 5:\n                    message.layers.push(VideoLayer.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* string mid */ 6:\n                    message.mid = reader.string();\n                    break;\n                case /* bool dtx */ 7:\n                    message.dtx = reader.bool();\n                    break;\n                case /* bool stereo */ 8:\n                    message.stereo = reader.bool();\n                    break;\n                case /* bool red */ 9:\n                    message.red = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string track_id = 1; */ if (message.trackId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.trackId);\n        /* stream.video.sfu.models.TrackType track_type = 2; */ if (message.trackType !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.trackType);\n        /* repeated stream.video.sfu.models.VideoLayer layers = 5; */ for(let i = 0; i < message.layers.length; i++)VideoLayer.internalBinaryWrite(message.layers[i], writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* string mid = 6; */ if (message.mid !== \"\") writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.mid);\n        /* bool dtx = 7; */ if (message.dtx !== false) writer.tag(7, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.dtx);\n        /* bool stereo = 8; */ if (message.stereo !== false) writer.tag(8, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.stereo);\n        /* bool red = 9; */ if (message.red !== false) writer.tag(9, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.red);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.TrackInfo\n */ const TrackInfo = new TrackInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Call$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Call\", [\n            {\n                no: 1,\n                name: \"type\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"created_by_user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"host_user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 5,\n                name: \"custom\",\n                kind: \"message\",\n                T: ()=>Struct\n            },\n            {\n                no: 6,\n                name: \"created_at\",\n                kind: \"message\",\n                T: ()=>Timestamp\n            },\n            {\n                no: 7,\n                name: \"updated_at\",\n                kind: \"message\",\n                T: ()=>Timestamp\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.type = \"\";\n        message.id = \"\";\n        message.createdByUserId = \"\";\n        message.hostUserId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string type */ 1:\n                    message.type = reader.string();\n                    break;\n                case /* string id */ 2:\n                    message.id = reader.string();\n                    break;\n                case /* string created_by_user_id */ 3:\n                    message.createdByUserId = reader.string();\n                    break;\n                case /* string host_user_id */ 4:\n                    message.hostUserId = reader.string();\n                    break;\n                case /* google.protobuf.Struct custom */ 5:\n                    message.custom = Struct.internalBinaryRead(reader, reader.uint32(), options, message.custom);\n                    break;\n                case /* google.protobuf.Timestamp created_at */ 6:\n                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);\n                    break;\n                case /* google.protobuf.Timestamp updated_at */ 7:\n                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string type = 1; */ if (message.type !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.type);\n        /* string id = 2; */ if (message.id !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.id);\n        /* string created_by_user_id = 3; */ if (message.createdByUserId !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.createdByUserId);\n        /* string host_user_id = 4; */ if (message.hostUserId !== \"\") writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.hostUserId);\n        /* google.protobuf.Struct custom = 5; */ if (message.custom) Struct.internalBinaryWrite(message.custom, writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* google.protobuf.Timestamp created_at = 6; */ if (message.createdAt) Timestamp.internalBinaryWrite(message.createdAt, writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* google.protobuf.Timestamp updated_at = 7; */ if (message.updatedAt) Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(7, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Call\n */ const Call$1 = new Call$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nlet Error$Type$1 = class Error$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Error\", [\n            {\n                no: 1,\n                name: \"code\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.ErrorCode\",\n                        ErrorCode,\n                        \"ERROR_CODE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"message\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"should_retry\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.code = 0;\n        message.message = \"\";\n        message.shouldRetry = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.ErrorCode code */ 1:\n                    message.code = reader.int32();\n                    break;\n                case /* string message */ 2:\n                    message.message = reader.string();\n                    break;\n                case /* bool should_retry */ 3:\n                    message.shouldRetry = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.ErrorCode code = 1; */ if (message.code !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.code);\n        /* string message = 2; */ if (message.message !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.message);\n        /* bool should_retry = 3; */ if (message.shouldRetry !== false) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.shouldRetry);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n};\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Error\n */ const Error$2 = new Error$Type$1();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ClientDetails$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.ClientDetails\", [\n            {\n                no: 1,\n                name: \"sdk\",\n                kind: \"message\",\n                T: ()=>Sdk\n            },\n            {\n                no: 2,\n                name: \"os\",\n                kind: \"message\",\n                T: ()=>OS\n            },\n            {\n                no: 3,\n                name: \"browser\",\n                kind: \"message\",\n                T: ()=>Browser\n            },\n            {\n                no: 4,\n                name: \"device\",\n                kind: \"message\",\n                T: ()=>Device\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Sdk sdk */ 1:\n                    message.sdk = Sdk.internalBinaryRead(reader, reader.uint32(), options, message.sdk);\n                    break;\n                case /* stream.video.sfu.models.OS os */ 2:\n                    message.os = OS.internalBinaryRead(reader, reader.uint32(), options, message.os);\n                    break;\n                case /* stream.video.sfu.models.Browser browser */ 3:\n                    message.browser = Browser.internalBinaryRead(reader, reader.uint32(), options, message.browser);\n                    break;\n                case /* stream.video.sfu.models.Device device */ 4:\n                    message.device = Device.internalBinaryRead(reader, reader.uint32(), options, message.device);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Sdk sdk = 1; */ if (message.sdk) Sdk.internalBinaryWrite(message.sdk, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.OS os = 2; */ if (message.os) OS.internalBinaryWrite(message.os, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.Browser browser = 3; */ if (message.browser) Browser.internalBinaryWrite(message.browser, writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.Device device = 4; */ if (message.device) Device.internalBinaryWrite(message.device, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ClientDetails\n */ const ClientDetails = new ClientDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Sdk$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Sdk\", [\n            {\n                no: 1,\n                name: \"type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.SdkType\",\n                        SdkType,\n                        \"SDK_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"major\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"minor\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"patch\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.type = 0;\n        message.major = \"\";\n        message.minor = \"\";\n        message.patch = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.SdkType type */ 1:\n                    message.type = reader.int32();\n                    break;\n                case /* string major */ 2:\n                    message.major = reader.string();\n                    break;\n                case /* string minor */ 3:\n                    message.minor = reader.string();\n                    break;\n                case /* string patch */ 4:\n                    message.patch = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.SdkType type = 1; */ if (message.type !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.type);\n        /* string major = 2; */ if (message.major !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.major);\n        /* string minor = 3; */ if (message.minor !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.minor);\n        /* string patch = 4; */ if (message.patch !== \"\") writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.patch);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Sdk\n */ const Sdk = new Sdk$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass OS$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.OS\", [\n            {\n                no: 1,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"architecture\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.name = \"\";\n        message.version = \"\";\n        message.architecture = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* string version */ 2:\n                    message.version = reader.string();\n                    break;\n                case /* string architecture */ 3:\n                    message.architecture = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string name = 1; */ if (message.name !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.name);\n        /* string version = 2; */ if (message.version !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.version);\n        /* string architecture = 3; */ if (message.architecture !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.architecture);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.OS\n */ const OS = new OS$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Browser$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Browser\", [\n            {\n                no: 1,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.name = \"\";\n        message.version = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* string version */ 2:\n                    message.version = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string name = 1; */ if (message.name !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.name);\n        /* string version = 2; */ if (message.version !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.version);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Browser\n */ const Browser = new Browser$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Device$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Device\", [\n            {\n                no: 1,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.name = \"\";\n        message.version = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* string version */ 2:\n                    message.version = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string name = 1; */ if (message.name !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.name);\n        /* string version = 2; */ if (message.version !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.version);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Device\n */ const Device = new Device$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrants$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.CallGrants\", [\n            {\n                no: 1,\n                name: \"can_publish_audio\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 2,\n                name: \"can_publish_video\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 3,\n                name: \"can_screenshare\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.canPublishAudio = false;\n        message.canPublishVideo = false;\n        message.canScreenshare = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* bool can_publish_audio */ 1:\n                    message.canPublishAudio = reader.bool();\n                    break;\n                case /* bool can_publish_video */ 2:\n                    message.canPublishVideo = reader.bool();\n                    break;\n                case /* bool can_screenshare */ 3:\n                    message.canScreenshare = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* bool can_publish_audio = 1; */ if (message.canPublishAudio !== false) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.canPublishAudio);\n        /* bool can_publish_video = 2; */ if (message.canPublishVideo !== false) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.canPublishVideo);\n        /* bool can_screenshare = 3; */ if (message.canScreenshare !== false) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.canScreenshare);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallGrants\n */ const CallGrants = new CallGrants$Type();\nvar models = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Browser: Browser,\n    Call: Call$1,\n    CallGrants: CallGrants,\n    CallState: CallState$1,\n    ClientDetails: ClientDetails,\n    Codec: Codec,\n    get ConnectionQuality () {\n        return ConnectionQuality;\n    },\n    Device: Device,\n    Error: Error$2,\n    get ErrorCode () {\n        return ErrorCode;\n    },\n    get GoAwayReason () {\n        return GoAwayReason;\n    },\n    ICETrickle: ICETrickle$1,\n    OS: OS,\n    Participant: Participant,\n    ParticipantCount: ParticipantCount,\n    get PeerType () {\n        return PeerType;\n    },\n    Pin: Pin,\n    Sdk: Sdk,\n    get SdkType () {\n        return SdkType;\n    },\n    StreamQuality: StreamQuality,\n    TrackInfo: TrackInfo,\n    get TrackType () {\n        return TrackType;\n    },\n    get TrackUnpublishReason () {\n        return TrackUnpublishReason;\n    },\n    VideoDimension: VideoDimension,\n    VideoLayer: VideoLayer,\n    get VideoQuality () {\n        return VideoQuality;\n    }\n});\n/* eslint-disable */ // @generated by protobuf-ts 2.9.3 with parameter long_type_string,client_generic,server_none,eslint_disable\n// @generated from protobuf file \"video/sfu/signal_rpc/signal.proto\" (package \"stream.video.sfu.signal\", syntax proto3)\n// tslint:disable\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SendStatsRequest\", [\n            {\n                no: 1,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"subscriber_stats\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"publisher_stats\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"webrtc_version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 5,\n                name: \"sdk\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 6,\n                name: \"sdk_version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sessionId = \"\";\n        message.subscriberStats = \"\";\n        message.publisherStats = \"\";\n        message.webrtcVersion = \"\";\n        message.sdk = \"\";\n        message.sdkVersion = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string session_id */ 1:\n                    message.sessionId = reader.string();\n                    break;\n                case /* string subscriber_stats */ 2:\n                    message.subscriberStats = reader.string();\n                    break;\n                case /* string publisher_stats */ 3:\n                    message.publisherStats = reader.string();\n                    break;\n                case /* string webrtc_version */ 4:\n                    message.webrtcVersion = reader.string();\n                    break;\n                case /* string sdk */ 5:\n                    message.sdk = reader.string();\n                    break;\n                case /* string sdk_version */ 6:\n                    message.sdkVersion = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string session_id = 1; */ if (message.sessionId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* string subscriber_stats = 2; */ if (message.subscriberStats !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.subscriberStats);\n        /* string publisher_stats = 3; */ if (message.publisherStats !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.publisherStats);\n        /* string webrtc_version = 4; */ if (message.webrtcVersion !== \"\") writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.webrtcVersion);\n        /* string sdk = 5; */ if (message.sdk !== \"\") writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sdk);\n        /* string sdk_version = 6; */ if (message.sdkVersion !== \"\") writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sdkVersion);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsRequest\n */ const SendStatsRequest = new SendStatsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SendStatsResponse\", [\n            {\n                no: 1,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 1:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 1; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsResponse\n */ const SendStatsResponse = new SendStatsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.ICERestartRequest\", [\n            {\n                no: 1,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sessionId = \"\";\n        message.peerType = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string session_id */ 1:\n                    message.sessionId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.PeerType peer_type */ 2:\n                    message.peerType = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string session_id = 1; */ if (message.sessionId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* stream.video.sfu.models.PeerType peer_type = 2; */ if (message.peerType !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.peerType);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartRequest\n */ const ICERestartRequest = new ICERestartRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.ICERestartResponse\", [\n            {\n                no: 1,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 1:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 1; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartResponse\n */ const ICERestartResponse = new ICERestartResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.UpdateMuteStatesRequest\", [\n            {\n                no: 1,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"mute_states\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackMuteState\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sessionId = \"\";\n        message.muteStates = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string session_id */ 1:\n                    message.sessionId = reader.string();\n                    break;\n                case /* repeated stream.video.sfu.signal.TrackMuteState mute_states */ 3:\n                    message.muteStates.push(TrackMuteState.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string session_id = 1; */ if (message.sessionId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* repeated stream.video.sfu.signal.TrackMuteState mute_states = 3; */ for(let i = 0; i < message.muteStates.length; i++)TrackMuteState.internalBinaryWrite(message.muteStates[i], writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesRequest\n */ const UpdateMuteStatesRequest = new UpdateMuteStatesRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.UpdateMuteStatesResponse\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesResponse\n */ const UpdateMuteStatesResponse = new UpdateMuteStatesResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackMuteState$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.TrackMuteState\", [\n            {\n                no: 1,\n                name: \"track_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"muted\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.trackType = 0;\n        message.muted = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.TrackType track_type */ 1:\n                    message.trackType = reader.int32();\n                    break;\n                case /* bool muted */ 2:\n                    message.muted = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.TrackType track_type = 1; */ if (message.trackType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.trackType);\n        /* bool muted = 2; */ if (message.muted !== false) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.muted);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackMuteState\n */ const TrackMuteState = new TrackMuteState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioMuteChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.AudioMuteChanged\", [\n            {\n                no: 1,\n                name: \"muted\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.muted = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* bool muted */ 1:\n                    message.muted = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* bool muted = 1; */ if (message.muted !== false) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.muted);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.AudioMuteChanged\n */ new AudioMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoMuteChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.VideoMuteChanged\", [\n            {\n                no: 2,\n                name: \"muted\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.muted = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* bool muted */ 2:\n                    message.muted = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* bool muted = 2; */ if (message.muted !== false) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.muted);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.VideoMuteChanged\n */ new VideoMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.UpdateSubscriptionsRequest\", [\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"tracks\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackSubscriptionDetails\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sessionId = \"\";\n        message.tracks = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* repeated stream.video.sfu.signal.TrackSubscriptionDetails tracks */ 3:\n                    message.tracks.push(TrackSubscriptionDetails.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* repeated stream.video.sfu.signal.TrackSubscriptionDetails tracks = 3; */ for(let i = 0; i < message.tracks.length; i++)TrackSubscriptionDetails.internalBinaryWrite(message.tracks[i], writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsRequest\n */ const UpdateSubscriptionsRequest = new UpdateSubscriptionsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.UpdateSubscriptionsResponse\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsResponse\n */ const UpdateSubscriptionsResponse = new UpdateSubscriptionsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackSubscriptionDetails$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.TrackSubscriptionDetails\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"track_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 4,\n                name: \"dimension\",\n                kind: \"message\",\n                T: ()=>VideoDimension\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.trackType = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.TrackType track_type */ 3:\n                    message.trackType = reader.int32();\n                    break;\n                case /* stream.video.sfu.models.VideoDimension dimension */ 4:\n                    message.dimension = VideoDimension.internalBinaryRead(reader, reader.uint32(), options, message.dimension);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* stream.video.sfu.models.TrackType track_type = 3; */ if (message.trackType !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.trackType);\n        /* stream.video.sfu.models.VideoDimension dimension = 4; */ if (message.dimension) VideoDimension.internalBinaryWrite(message.dimension, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackSubscriptionDetails\n */ const TrackSubscriptionDetails = new TrackSubscriptionDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SendAnswerRequest\", [\n            {\n                no: 1,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.peerType = 0;\n        message.sdp = \"\";\n        message.sessionId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.PeerType peer_type */ 1:\n                    message.peerType = reader.int32();\n                    break;\n                case /* string sdp */ 2:\n                    message.sdp = reader.string();\n                    break;\n                case /* string session_id */ 3:\n                    message.sessionId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.PeerType peer_type = 1; */ if (message.peerType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.peerType);\n        /* string sdp = 2; */ if (message.sdp !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sdp);\n        /* string session_id = 3; */ if (message.sessionId !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerRequest\n */ const SendAnswerRequest = new SendAnswerRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SendAnswerResponse\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerResponse\n */ const SendAnswerResponse = new SendAnswerResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickleResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.ICETrickleResponse\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICETrickleResponse\n */ const ICETrickleResponse = new ICETrickleResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SetPublisherRequest\", [\n            {\n                no: 1,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"tracks\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackInfo\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sdp = \"\";\n        message.sessionId = \"\";\n        message.tracks = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string sdp */ 1:\n                    message.sdp = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* repeated stream.video.sfu.models.TrackInfo tracks */ 3:\n                    message.tracks.push(TrackInfo.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string sdp = 1; */ if (message.sdp !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sdp);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* repeated stream.video.sfu.models.TrackInfo tracks = 3; */ for(let i = 0; i < message.tracks.length; i++)TrackInfo.internalBinaryWrite(message.tracks[i], writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherRequest\n */ const SetPublisherRequest = new SetPublisherRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SetPublisherResponse\", [\n            {\n                no: 1,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"ice_restart\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sdp = \"\";\n        message.sessionId = \"\";\n        message.iceRestart = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string sdp */ 1:\n                    message.sdp = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* bool ice_restart */ 3:\n                    message.iceRestart = reader.bool();\n                    break;\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string sdp = 1; */ if (message.sdp !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sdp);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* bool ice_restart = 3; */ if (message.iceRestart !== false) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.iceRestart);\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherResponse\n */ const SetPublisherResponse = new SetPublisherResponse$Type();\n/**\n * @generated ServiceType for protobuf service stream.video.sfu.signal.SignalServer\n */ const SignalServer = new _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_14__.ServiceType(\"stream.video.sfu.signal.SignalServer\", [\n    {\n        name: \"SetPublisher\",\n        options: {},\n        I: SetPublisherRequest,\n        O: SetPublisherResponse\n    },\n    {\n        name: \"SendAnswer\",\n        options: {},\n        I: SendAnswerRequest,\n        O: SendAnswerResponse\n    },\n    {\n        name: \"IceTrickle\",\n        options: {},\n        I: ICETrickle$1,\n        O: ICETrickleResponse\n    },\n    {\n        name: \"UpdateSubscriptions\",\n        options: {},\n        I: UpdateSubscriptionsRequest,\n        O: UpdateSubscriptionsResponse\n    },\n    {\n        name: \"UpdateMuteStates\",\n        options: {},\n        I: UpdateMuteStatesRequest,\n        O: UpdateMuteStatesResponse\n    },\n    {\n        name: \"IceRestart\",\n        options: {},\n        I: ICERestartRequest,\n        O: ICERestartResponse\n    },\n    {\n        name: \"SendStats\",\n        options: {},\n        I: SendStatsRequest,\n        O: SendStatsResponse\n    }\n]);\n/**\n * @generated from protobuf enum stream.video.sfu.event.VideoLayerSetting.Priority\n */ var VideoLayerSetting_Priority;\n(function(VideoLayerSetting_Priority) {\n    /**\n     * @generated from protobuf enum value: PRIORITY_HIGH_UNSPECIFIED = 0;\n     */ VideoLayerSetting_Priority[VideoLayerSetting_Priority[\"HIGH_UNSPECIFIED\"] = 0] = \"HIGH_UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: PRIORITY_LOW = 1;\n     */ VideoLayerSetting_Priority[VideoLayerSetting_Priority[\"LOW\"] = 1] = \"LOW\";\n    /**\n     * @generated from protobuf enum value: PRIORITY_MEDIUM = 2;\n     */ VideoLayerSetting_Priority[VideoLayerSetting_Priority[\"MEDIUM\"] = 2] = \"MEDIUM\";\n    /**\n     * @generated from protobuf enum value: PRIORITY_VERY_LOW = 3;\n     */ VideoLayerSetting_Priority[VideoLayerSetting_Priority[\"VERY_LOW\"] = 3] = \"VERY_LOW\";\n})(VideoLayerSetting_Priority || (VideoLayerSetting_Priority = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuEvent$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.SfuEvent\", [\n            {\n                no: 1,\n                name: \"subscriber_offer\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>SubscriberOffer\n            },\n            {\n                no: 2,\n                name: \"publisher_answer\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>PublisherAnswer\n            },\n            {\n                no: 3,\n                name: \"connection_quality_changed\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ConnectionQualityChanged\n            },\n            {\n                no: 4,\n                name: \"audio_level_changed\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>AudioLevelChanged\n            },\n            {\n                no: 5,\n                name: \"ice_trickle\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ICETrickle$1\n            },\n            {\n                no: 6,\n                name: \"change_publish_quality\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ChangePublishQuality\n            },\n            {\n                no: 10,\n                name: \"participant_joined\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ParticipantJoined\n            },\n            {\n                no: 11,\n                name: \"participant_left\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ParticipantLeft\n            },\n            {\n                no: 12,\n                name: \"dominant_speaker_changed\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>DominantSpeakerChanged\n            },\n            {\n                no: 13,\n                name: \"join_response\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>JoinResponse\n            },\n            {\n                no: 14,\n                name: \"health_check_response\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>HealthCheckResponse\n            },\n            {\n                no: 16,\n                name: \"track_published\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>TrackPublished\n            },\n            {\n                no: 17,\n                name: \"track_unpublished\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>TrackUnpublished\n            },\n            {\n                no: 18,\n                name: \"error\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>Error$1\n            },\n            {\n                no: 19,\n                name: \"call_grants_updated\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>CallGrantsUpdated\n            },\n            {\n                no: 20,\n                name: \"go_away\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>GoAway\n            },\n            {\n                no: 21,\n                name: \"ice_restart\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ICERestart\n            },\n            {\n                no: 22,\n                name: \"pins_updated\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>PinsChanged\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.eventPayload = {\n            oneofKind: undefined\n        };\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.event.SubscriberOffer subscriber_offer */ 1:\n                    message.eventPayload = {\n                        oneofKind: \"subscriberOffer\",\n                        subscriberOffer: SubscriberOffer.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.subscriberOffer)\n                    };\n                    break;\n                case /* stream.video.sfu.event.PublisherAnswer publisher_answer */ 2:\n                    message.eventPayload = {\n                        oneofKind: \"publisherAnswer\",\n                        publisherAnswer: PublisherAnswer.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.publisherAnswer)\n                    };\n                    break;\n                case /* stream.video.sfu.event.ConnectionQualityChanged connection_quality_changed */ 3:\n                    message.eventPayload = {\n                        oneofKind: \"connectionQualityChanged\",\n                        connectionQualityChanged: ConnectionQualityChanged.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.connectionQualityChanged)\n                    };\n                    break;\n                case /* stream.video.sfu.event.AudioLevelChanged audio_level_changed */ 4:\n                    message.eventPayload = {\n                        oneofKind: \"audioLevelChanged\",\n                        audioLevelChanged: AudioLevelChanged.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.audioLevelChanged)\n                    };\n                    break;\n                case /* stream.video.sfu.models.ICETrickle ice_trickle */ 5:\n                    message.eventPayload = {\n                        oneofKind: \"iceTrickle\",\n                        iceTrickle: ICETrickle$1.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.iceTrickle)\n                    };\n                    break;\n                case /* stream.video.sfu.event.ChangePublishQuality change_publish_quality */ 6:\n                    message.eventPayload = {\n                        oneofKind: \"changePublishQuality\",\n                        changePublishQuality: ChangePublishQuality.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.changePublishQuality)\n                    };\n                    break;\n                case /* stream.video.sfu.event.ParticipantJoined participant_joined */ 10:\n                    message.eventPayload = {\n                        oneofKind: \"participantJoined\",\n                        participantJoined: ParticipantJoined.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.participantJoined)\n                    };\n                    break;\n                case /* stream.video.sfu.event.ParticipantLeft participant_left */ 11:\n                    message.eventPayload = {\n                        oneofKind: \"participantLeft\",\n                        participantLeft: ParticipantLeft.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.participantLeft)\n                    };\n                    break;\n                case /* stream.video.sfu.event.DominantSpeakerChanged dominant_speaker_changed */ 12:\n                    message.eventPayload = {\n                        oneofKind: \"dominantSpeakerChanged\",\n                        dominantSpeakerChanged: DominantSpeakerChanged.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.dominantSpeakerChanged)\n                    };\n                    break;\n                case /* stream.video.sfu.event.JoinResponse join_response */ 13:\n                    message.eventPayload = {\n                        oneofKind: \"joinResponse\",\n                        joinResponse: JoinResponse.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.joinResponse)\n                    };\n                    break;\n                case /* stream.video.sfu.event.HealthCheckResponse health_check_response */ 14:\n                    message.eventPayload = {\n                        oneofKind: \"healthCheckResponse\",\n                        healthCheckResponse: HealthCheckResponse.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.healthCheckResponse)\n                    };\n                    break;\n                case /* stream.video.sfu.event.TrackPublished track_published */ 16:\n                    message.eventPayload = {\n                        oneofKind: \"trackPublished\",\n                        trackPublished: TrackPublished.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.trackPublished)\n                    };\n                    break;\n                case /* stream.video.sfu.event.TrackUnpublished track_unpublished */ 17:\n                    message.eventPayload = {\n                        oneofKind: \"trackUnpublished\",\n                        trackUnpublished: TrackUnpublished.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.trackUnpublished)\n                    };\n                    break;\n                case /* stream.video.sfu.event.Error error */ 18:\n                    message.eventPayload = {\n                        oneofKind: \"error\",\n                        error: Error$1.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.error)\n                    };\n                    break;\n                case /* stream.video.sfu.event.CallGrantsUpdated call_grants_updated */ 19:\n                    message.eventPayload = {\n                        oneofKind: \"callGrantsUpdated\",\n                        callGrantsUpdated: CallGrantsUpdated.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.callGrantsUpdated)\n                    };\n                    break;\n                case /* stream.video.sfu.event.GoAway go_away */ 20:\n                    message.eventPayload = {\n                        oneofKind: \"goAway\",\n                        goAway: GoAway.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.goAway)\n                    };\n                    break;\n                case /* stream.video.sfu.event.ICERestart ice_restart */ 21:\n                    message.eventPayload = {\n                        oneofKind: \"iceRestart\",\n                        iceRestart: ICERestart.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.iceRestart)\n                    };\n                    break;\n                case /* stream.video.sfu.event.PinsChanged pins_updated */ 22:\n                    message.eventPayload = {\n                        oneofKind: \"pinsUpdated\",\n                        pinsUpdated: PinsChanged.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.pinsUpdated)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.event.SubscriberOffer subscriber_offer = 1; */ if (message.eventPayload.oneofKind === \"subscriberOffer\") SubscriberOffer.internalBinaryWrite(message.eventPayload.subscriberOffer, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.PublisherAnswer publisher_answer = 2; */ if (message.eventPayload.oneofKind === \"publisherAnswer\") PublisherAnswer.internalBinaryWrite(message.eventPayload.publisherAnswer, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.ConnectionQualityChanged connection_quality_changed = 3; */ if (message.eventPayload.oneofKind === \"connectionQualityChanged\") ConnectionQualityChanged.internalBinaryWrite(message.eventPayload.connectionQualityChanged, writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.AudioLevelChanged audio_level_changed = 4; */ if (message.eventPayload.oneofKind === \"audioLevelChanged\") AudioLevelChanged.internalBinaryWrite(message.eventPayload.audioLevelChanged, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.ICETrickle ice_trickle = 5; */ if (message.eventPayload.oneofKind === \"iceTrickle\") ICETrickle$1.internalBinaryWrite(message.eventPayload.iceTrickle, writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.ChangePublishQuality change_publish_quality = 6; */ if (message.eventPayload.oneofKind === \"changePublishQuality\") ChangePublishQuality.internalBinaryWrite(message.eventPayload.changePublishQuality, writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.ParticipantJoined participant_joined = 10; */ if (message.eventPayload.oneofKind === \"participantJoined\") ParticipantJoined.internalBinaryWrite(message.eventPayload.participantJoined, writer.tag(10, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.ParticipantLeft participant_left = 11; */ if (message.eventPayload.oneofKind === \"participantLeft\") ParticipantLeft.internalBinaryWrite(message.eventPayload.participantLeft, writer.tag(11, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.DominantSpeakerChanged dominant_speaker_changed = 12; */ if (message.eventPayload.oneofKind === \"dominantSpeakerChanged\") DominantSpeakerChanged.internalBinaryWrite(message.eventPayload.dominantSpeakerChanged, writer.tag(12, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.JoinResponse join_response = 13; */ if (message.eventPayload.oneofKind === \"joinResponse\") JoinResponse.internalBinaryWrite(message.eventPayload.joinResponse, writer.tag(13, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.HealthCheckResponse health_check_response = 14; */ if (message.eventPayload.oneofKind === \"healthCheckResponse\") HealthCheckResponse.internalBinaryWrite(message.eventPayload.healthCheckResponse, writer.tag(14, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.TrackPublished track_published = 16; */ if (message.eventPayload.oneofKind === \"trackPublished\") TrackPublished.internalBinaryWrite(message.eventPayload.trackPublished, writer.tag(16, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.TrackUnpublished track_unpublished = 17; */ if (message.eventPayload.oneofKind === \"trackUnpublished\") TrackUnpublished.internalBinaryWrite(message.eventPayload.trackUnpublished, writer.tag(17, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.Error error = 18; */ if (message.eventPayload.oneofKind === \"error\") Error$1.internalBinaryWrite(message.eventPayload.error, writer.tag(18, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.CallGrantsUpdated call_grants_updated = 19; */ if (message.eventPayload.oneofKind === \"callGrantsUpdated\") CallGrantsUpdated.internalBinaryWrite(message.eventPayload.callGrantsUpdated, writer.tag(19, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.GoAway go_away = 20; */ if (message.eventPayload.oneofKind === \"goAway\") GoAway.internalBinaryWrite(message.eventPayload.goAway, writer.tag(20, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.ICERestart ice_restart = 21; */ if (message.eventPayload.oneofKind === \"iceRestart\") ICERestart.internalBinaryWrite(message.eventPayload.iceRestart, writer.tag(21, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.PinsChanged pins_updated = 22; */ if (message.eventPayload.oneofKind === \"pinsUpdated\") PinsChanged.internalBinaryWrite(message.eventPayload.pinsUpdated, writer.tag(22, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuEvent\n */ const SfuEvent = new SfuEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PinsChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.PinsChanged\", [\n            {\n                no: 1,\n                name: \"pins\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Pin\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.pins = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated stream.video.sfu.models.Pin pins */ 1:\n                    message.pins.push(Pin.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated stream.video.sfu.models.Pin pins = 1; */ for(let i = 0; i < message.pins.length; i++)Pin.internalBinaryWrite(message.pins[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PinsChanged\n */ const PinsChanged = new PinsChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Error$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.Error\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Error\n */ const Error$1 = new Error$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickle$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ICETrickle\", [\n            {\n                no: 1,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"ice_candidate\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.peerType = 0;\n        message.iceCandidate = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.PeerType peer_type */ 1:\n                    message.peerType = reader.int32();\n                    break;\n                case /* string ice_candidate */ 2:\n                    message.iceCandidate = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.PeerType peer_type = 1; */ if (message.peerType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.peerType);\n        /* string ice_candidate = 2; */ if (message.iceCandidate !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.iceCandidate);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICETrickle\n */ const ICETrickle = new ICETrickle$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestart$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ICERestart\", [\n            {\n                no: 1,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.peerType = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.PeerType peer_type */ 1:\n                    message.peerType = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.PeerType peer_type = 1; */ if (message.peerType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.peerType);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICERestart\n */ const ICERestart = new ICERestart$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.SfuRequest\", [\n            {\n                no: 1,\n                name: \"join_request\",\n                kind: \"message\",\n                oneof: \"requestPayload\",\n                T: ()=>JoinRequest\n            },\n            {\n                no: 2,\n                name: \"health_check_request\",\n                kind: \"message\",\n                oneof: \"requestPayload\",\n                T: ()=>HealthCheckRequest\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.requestPayload = {\n            oneofKind: undefined\n        };\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.event.JoinRequest join_request */ 1:\n                    message.requestPayload = {\n                        oneofKind: \"joinRequest\",\n                        joinRequest: JoinRequest.internalBinaryRead(reader, reader.uint32(), options, message.requestPayload.joinRequest)\n                    };\n                    break;\n                case /* stream.video.sfu.event.HealthCheckRequest health_check_request */ 2:\n                    message.requestPayload = {\n                        oneofKind: \"healthCheckRequest\",\n                        healthCheckRequest: HealthCheckRequest.internalBinaryRead(reader, reader.uint32(), options, message.requestPayload.healthCheckRequest)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.event.JoinRequest join_request = 1; */ if (message.requestPayload.oneofKind === \"joinRequest\") JoinRequest.internalBinaryWrite(message.requestPayload.joinRequest, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.HealthCheckRequest health_check_request = 2; */ if (message.requestPayload.oneofKind === \"healthCheckRequest\") HealthCheckRequest.internalBinaryWrite(message.requestPayload.healthCheckRequest, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuRequest\n */ const SfuRequest = new SfuRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.HealthCheckRequest\", []);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message, writer, options) {\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckRequest\n */ const HealthCheckRequest = new HealthCheckRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.HealthCheckResponse\", [\n            {\n                no: 1,\n                name: \"participant_count\",\n                kind: \"message\",\n                T: ()=>ParticipantCount\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.ParticipantCount participant_count */ 1:\n                    message.participantCount = ParticipantCount.internalBinaryRead(reader, reader.uint32(), options, message.participantCount);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.ParticipantCount participant_count = 1; */ if (message.participantCount) ParticipantCount.internalBinaryWrite(message.participantCount, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckResponse\n */ const HealthCheckResponse = new HealthCheckResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackPublished$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.TrackPublished\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 4,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.type = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.TrackType type */ 3:\n                    message.type = reader.int32();\n                    break;\n                case /* stream.video.sfu.models.Participant participant */ 4:\n                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* stream.video.sfu.models.TrackType type = 3; */ if (message.type !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.type);\n        /* stream.video.sfu.models.Participant participant = 4; */ if (message.participant) Participant.internalBinaryWrite(message.participant, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackPublished\n */ const TrackPublished = new TrackPublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackUnpublished$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.TrackUnpublished\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 4,\n                name: \"cause\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackUnpublishReason\",\n                        TrackUnpublishReason,\n                        \"TRACK_UNPUBLISH_REASON_\"\n                    ]\n            },\n            {\n                no: 5,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.type = 0;\n        message.cause = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.TrackType type */ 3:\n                    message.type = reader.int32();\n                    break;\n                case /* stream.video.sfu.models.TrackUnpublishReason cause */ 4:\n                    message.cause = reader.int32();\n                    break;\n                case /* stream.video.sfu.models.Participant participant */ 5:\n                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* stream.video.sfu.models.TrackType type = 3; */ if (message.type !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.type);\n        /* stream.video.sfu.models.TrackUnpublishReason cause = 4; */ if (message.cause !== 0) writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.cause);\n        /* stream.video.sfu.models.Participant participant = 5; */ if (message.participant) Participant.internalBinaryWrite(message.participant, writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackUnpublished\n */ const TrackUnpublished = new TrackUnpublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.JoinRequest\", [\n            {\n                no: 1,\n                name: \"token\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"subscriber_sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"client_details\",\n                kind: \"message\",\n                T: ()=>ClientDetails\n            },\n            {\n                no: 5,\n                name: \"migration\",\n                kind: \"message\",\n                T: ()=>Migration\n            },\n            {\n                no: 6,\n                name: \"fast_reconnect\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.token = \"\";\n        message.sessionId = \"\";\n        message.subscriberSdp = \"\";\n        message.fastReconnect = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string token */ 1:\n                    message.token = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* string subscriber_sdp */ 3:\n                    message.subscriberSdp = reader.string();\n                    break;\n                case /* stream.video.sfu.models.ClientDetails client_details */ 4:\n                    message.clientDetails = ClientDetails.internalBinaryRead(reader, reader.uint32(), options, message.clientDetails);\n                    break;\n                case /* stream.video.sfu.event.Migration migration */ 5:\n                    message.migration = Migration.internalBinaryRead(reader, reader.uint32(), options, message.migration);\n                    break;\n                case /* bool fast_reconnect */ 6:\n                    message.fastReconnect = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string token = 1; */ if (message.token !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.token);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* string subscriber_sdp = 3; */ if (message.subscriberSdp !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.subscriberSdp);\n        /* stream.video.sfu.models.ClientDetails client_details = 4; */ if (message.clientDetails) ClientDetails.internalBinaryWrite(message.clientDetails, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.Migration migration = 5; */ if (message.migration) Migration.internalBinaryWrite(message.migration, writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* bool fast_reconnect = 6; */ if (message.fastReconnect !== false) writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.fastReconnect);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinRequest\n */ const JoinRequest = new JoinRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Migration$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.Migration\", [\n            {\n                no: 1,\n                name: \"from_sfu_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"announced_tracks\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackInfo\n            },\n            {\n                no: 3,\n                name: \"subscriptions\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackSubscriptionDetails\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.fromSfuId = \"\";\n        message.announcedTracks = [];\n        message.subscriptions = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string from_sfu_id */ 1:\n                    message.fromSfuId = reader.string();\n                    break;\n                case /* repeated stream.video.sfu.models.TrackInfo announced_tracks */ 2:\n                    message.announcedTracks.push(TrackInfo.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated stream.video.sfu.signal.TrackSubscriptionDetails subscriptions */ 3:\n                    message.subscriptions.push(TrackSubscriptionDetails.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string from_sfu_id = 1; */ if (message.fromSfuId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.fromSfuId);\n        /* repeated stream.video.sfu.models.TrackInfo announced_tracks = 2; */ for(let i = 0; i < message.announcedTracks.length; i++)TrackInfo.internalBinaryWrite(message.announcedTracks[i], writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* repeated stream.video.sfu.signal.TrackSubscriptionDetails subscriptions = 3; */ for(let i = 0; i < message.subscriptions.length; i++)TrackSubscriptionDetails.internalBinaryWrite(message.subscriptions[i], writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Migration\n */ const Migration = new Migration$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.JoinResponse\", [\n            {\n                no: 1,\n                name: \"call_state\",\n                kind: \"message\",\n                T: ()=>CallState$1\n            },\n            {\n                no: 2,\n                name: \"reconnected\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.reconnected = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.CallState call_state */ 1:\n                    message.callState = CallState$1.internalBinaryRead(reader, reader.uint32(), options, message.callState);\n                    break;\n                case /* bool reconnected */ 2:\n                    message.reconnected = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.CallState call_state = 1; */ if (message.callState) CallState$1.internalBinaryWrite(message.callState, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* bool reconnected = 2; */ if (message.reconnected !== false) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.reconnected);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinResponse\n */ const JoinResponse = new JoinResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantJoined$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ParticipantJoined\", [\n            {\n                no: 1,\n                name: \"call_cid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.callCid = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string call_cid */ 1:\n                    message.callCid = reader.string();\n                    break;\n                case /* stream.video.sfu.models.Participant participant */ 2:\n                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string call_cid = 1; */ if (message.callCid !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.callCid);\n        /* stream.video.sfu.models.Participant participant = 2; */ if (message.participant) Participant.internalBinaryWrite(message.participant, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantJoined\n */ const ParticipantJoined = new ParticipantJoined$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantLeft$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ParticipantLeft\", [\n            {\n                no: 1,\n                name: \"call_cid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.callCid = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string call_cid */ 1:\n                    message.callCid = reader.string();\n                    break;\n                case /* stream.video.sfu.models.Participant participant */ 2:\n                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string call_cid = 1; */ if (message.callCid !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.callCid);\n        /* stream.video.sfu.models.Participant participant = 2; */ if (message.participant) Participant.internalBinaryWrite(message.participant, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantLeft\n */ const ParticipantLeft = new ParticipantLeft$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscriberOffer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.SubscriberOffer\", [\n            {\n                no: 1,\n                name: \"ice_restart\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 2,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.iceRestart = false;\n        message.sdp = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* bool ice_restart */ 1:\n                    message.iceRestart = reader.bool();\n                    break;\n                case /* string sdp */ 2:\n                    message.sdp = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* bool ice_restart = 1; */ if (message.iceRestart !== false) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.iceRestart);\n        /* string sdp = 2; */ if (message.sdp !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sdp);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SubscriberOffer\n */ const SubscriberOffer = new SubscriberOffer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PublisherAnswer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.PublisherAnswer\", [\n            {\n                no: 1,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sdp = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string sdp */ 1:\n                    message.sdp = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string sdp = 1; */ if (message.sdp !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sdp);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PublisherAnswer\n */ const PublisherAnswer = new PublisherAnswer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ConnectionQualityChanged\", [\n            {\n                no: 1,\n                name: \"connection_quality_updates\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>ConnectionQualityInfo\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.connectionQualityUpdates = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated stream.video.sfu.event.ConnectionQualityInfo connection_quality_updates */ 1:\n                    message.connectionQualityUpdates.push(ConnectionQualityInfo.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated stream.video.sfu.event.ConnectionQualityInfo connection_quality_updates = 1; */ for(let i = 0; i < message.connectionQualityUpdates.length; i++)ConnectionQualityInfo.internalBinaryWrite(message.connectionQualityUpdates[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityChanged\n */ const ConnectionQualityChanged = new ConnectionQualityChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityInfo$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ConnectionQualityInfo\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"connection_quality\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.ConnectionQuality\",\n                        ConnectionQuality,\n                        \"CONNECTION_QUALITY_\"\n                    ]\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.connectionQuality = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.ConnectionQuality connection_quality */ 3:\n                    message.connectionQuality = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* stream.video.sfu.models.ConnectionQuality connection_quality = 3; */ if (message.connectionQuality !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.connectionQuality);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityInfo\n */ const ConnectionQualityInfo = new ConnectionQualityInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DominantSpeakerChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.DominantSpeakerChanged\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.DominantSpeakerChanged\n */ const DominantSpeakerChanged = new DominantSpeakerChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevel$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.AudioLevel\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"level\",\n                kind: \"scalar\",\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 4,\n                name: \"is_speaking\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.level = 0;\n        message.isSpeaking = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* float level */ 3:\n                    message.level = reader.float();\n                    break;\n                case /* bool is_speaking */ 4:\n                    message.isSpeaking = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* float level = 3; */ if (message.level !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Bit32).float(message.level);\n        /* bool is_speaking = 4; */ if (message.isSpeaking !== false) writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.isSpeaking);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevel\n */ const AudioLevel = new AudioLevel$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevelChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.AudioLevelChanged\", [\n            {\n                no: 1,\n                name: \"audio_levels\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>AudioLevel\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.audioLevels = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated stream.video.sfu.event.AudioLevel audio_levels */ 1:\n                    message.audioLevels.push(AudioLevel.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated stream.video.sfu.event.AudioLevel audio_levels = 1; */ for(let i = 0; i < message.audioLevels.length; i++)AudioLevel.internalBinaryWrite(message.audioLevels[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevelChanged\n */ const AudioLevelChanged = new AudioLevelChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioMediaRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.AudioMediaRequest\", [\n            {\n                no: 1,\n                name: \"channel_count\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.channelCount = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* int32 channel_count */ 1:\n                    message.channelCount = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* int32 channel_count = 1; */ if (message.channelCount !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.channelCount);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioMediaRequest\n */ const AudioMediaRequest = new AudioMediaRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioSender$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.AudioSender\", [\n            {\n                no: 1,\n                name: \"media_request\",\n                kind: \"message\",\n                T: ()=>AudioMediaRequest\n            },\n            {\n                no: 2,\n                name: \"codec\",\n                kind: \"message\",\n                T: ()=>Codec\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.event.AudioMediaRequest media_request */ 1:\n                    message.mediaRequest = AudioMediaRequest.internalBinaryRead(reader, reader.uint32(), options, message.mediaRequest);\n                    break;\n                case /* stream.video.sfu.models.Codec codec */ 2:\n                    message.codec = Codec.internalBinaryRead(reader, reader.uint32(), options, message.codec);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.event.AudioMediaRequest media_request = 1; */ if (message.mediaRequest) AudioMediaRequest.internalBinaryWrite(message.mediaRequest, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.Codec codec = 2; */ if (message.codec) Codec.internalBinaryWrite(message.codec, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioSender\n */ const AudioSender = new AudioSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoMediaRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.VideoMediaRequest\", [\n            {\n                no: 1,\n                name: \"ideal_height\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 2,\n                name: \"ideal_width\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 3,\n                name: \"ideal_frame_rate\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.idealHeight = 0;\n        message.idealWidth = 0;\n        message.idealFrameRate = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* int32 ideal_height */ 1:\n                    message.idealHeight = reader.int32();\n                    break;\n                case /* int32 ideal_width */ 2:\n                    message.idealWidth = reader.int32();\n                    break;\n                case /* int32 ideal_frame_rate */ 3:\n                    message.idealFrameRate = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* int32 ideal_height = 1; */ if (message.idealHeight !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.idealHeight);\n        /* int32 ideal_width = 2; */ if (message.idealWidth !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.idealWidth);\n        /* int32 ideal_frame_rate = 3; */ if (message.idealFrameRate !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.idealFrameRate);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoMediaRequest\n */ const VideoMediaRequest = new VideoMediaRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayerSetting$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.VideoLayerSetting\", [\n            {\n                no: 1,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"active\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 3,\n                name: \"max_bitrate\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 4,\n                name: \"scale_resolution_down_by\",\n                kind: \"scalar\",\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 5,\n                name: \"priority\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.event.VideoLayerSetting.Priority\",\n                        VideoLayerSetting_Priority,\n                        \"PRIORITY_\"\n                    ]\n            },\n            {\n                no: 6,\n                name: \"codec\",\n                kind: \"message\",\n                T: ()=>Codec\n            },\n            {\n                no: 7,\n                name: \"max_framerate\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.name = \"\";\n        message.active = false;\n        message.maxBitrate = 0;\n        message.scaleResolutionDownBy = 0;\n        message.priority = 0;\n        message.maxFramerate = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* bool active */ 2:\n                    message.active = reader.bool();\n                    break;\n                case /* int32 max_bitrate */ 3:\n                    message.maxBitrate = reader.int32();\n                    break;\n                case /* float scale_resolution_down_by */ 4:\n                    message.scaleResolutionDownBy = reader.float();\n                    break;\n                case /* stream.video.sfu.event.VideoLayerSetting.Priority priority */ 5:\n                    message.priority = reader.int32();\n                    break;\n                case /* stream.video.sfu.models.Codec codec */ 6:\n                    message.codec = Codec.internalBinaryRead(reader, reader.uint32(), options, message.codec);\n                    break;\n                case /* uint32 max_framerate */ 7:\n                    message.maxFramerate = reader.uint32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string name = 1; */ if (message.name !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.name);\n        /* bool active = 2; */ if (message.active !== false) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.active);\n        /* int32 max_bitrate = 3; */ if (message.maxBitrate !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.maxBitrate);\n        /* float scale_resolution_down_by = 4; */ if (message.scaleResolutionDownBy !== 0) writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Bit32).float(message.scaleResolutionDownBy);\n        /* stream.video.sfu.event.VideoLayerSetting.Priority priority = 5; */ if (message.priority !== 0) writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.priority);\n        /* stream.video.sfu.models.Codec codec = 6; */ if (message.codec) Codec.internalBinaryWrite(message.codec, writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* uint32 max_framerate = 7; */ if (message.maxFramerate !== 0) writer.tag(7, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.maxFramerate);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoLayerSetting\n */ const VideoLayerSetting = new VideoLayerSetting$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoSender$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.VideoSender\", [\n            {\n                no: 1,\n                name: \"media_request\",\n                kind: \"message\",\n                T: ()=>VideoMediaRequest\n            },\n            {\n                no: 2,\n                name: \"codec\",\n                kind: \"message\",\n                T: ()=>Codec\n            },\n            {\n                no: 3,\n                name: \"layers\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>VideoLayerSetting\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.layers = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.event.VideoMediaRequest media_request */ 1:\n                    message.mediaRequest = VideoMediaRequest.internalBinaryRead(reader, reader.uint32(), options, message.mediaRequest);\n                    break;\n                case /* stream.video.sfu.models.Codec codec */ 2:\n                    message.codec = Codec.internalBinaryRead(reader, reader.uint32(), options, message.codec);\n                    break;\n                case /* repeated stream.video.sfu.event.VideoLayerSetting layers */ 3:\n                    message.layers.push(VideoLayerSetting.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.event.VideoMediaRequest media_request = 1; */ if (message.mediaRequest) VideoMediaRequest.internalBinaryWrite(message.mediaRequest, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.Codec codec = 2; */ if (message.codec) Codec.internalBinaryWrite(message.codec, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* repeated stream.video.sfu.event.VideoLayerSetting layers = 3; */ for(let i = 0; i < message.layers.length; i++)VideoLayerSetting.internalBinaryWrite(message.layers[i], writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoSender\n */ const VideoSender = new VideoSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangePublishQuality$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ChangePublishQuality\", [\n            {\n                no: 1,\n                name: \"audio_senders\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>AudioSender\n            },\n            {\n                no: 2,\n                name: \"video_senders\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>VideoSender\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.audioSenders = [];\n        message.videoSenders = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated stream.video.sfu.event.AudioSender audio_senders */ 1:\n                    message.audioSenders.push(AudioSender.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated stream.video.sfu.event.VideoSender video_senders */ 2:\n                    message.videoSenders.push(VideoSender.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated stream.video.sfu.event.AudioSender audio_senders = 1; */ for(let i = 0; i < message.audioSenders.length; i++)AudioSender.internalBinaryWrite(message.audioSenders[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* repeated stream.video.sfu.event.VideoSender video_senders = 2; */ for(let i = 0; i < message.videoSenders.length; i++)VideoSender.internalBinaryWrite(message.videoSenders[i], writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishQuality\n */ const ChangePublishQuality = new ChangePublishQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrantsUpdated$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.CallGrantsUpdated\", [\n            {\n                no: 1,\n                name: \"current_grants\",\n                kind: \"message\",\n                T: ()=>CallGrants\n            },\n            {\n                no: 2,\n                name: \"message\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.message = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.CallGrants current_grants */ 1:\n                    message.currentGrants = CallGrants.internalBinaryRead(reader, reader.uint32(), options, message.currentGrants);\n                    break;\n                case /* string message */ 2:\n                    message.message = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.CallGrants current_grants = 1; */ if (message.currentGrants) CallGrants.internalBinaryWrite(message.currentGrants, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* string message = 2; */ if (message.message !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.message);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.CallGrantsUpdated\n */ const CallGrantsUpdated = new CallGrantsUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GoAway$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.GoAway\", [\n            {\n                no: 1,\n                name: \"reason\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.GoAwayReason\",\n                        GoAwayReason,\n                        \"GO_AWAY_REASON_\"\n                    ]\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.reason = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.GoAwayReason reason */ 1:\n                    message.reason = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.GoAwayReason reason = 1; */ if (message.reason !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.reason);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.GoAway\n */ const GoAway = new GoAway$Type();\nvar events = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    AudioLevel: AudioLevel,\n    AudioLevelChanged: AudioLevelChanged,\n    AudioMediaRequest: AudioMediaRequest,\n    AudioSender: AudioSender,\n    CallGrantsUpdated: CallGrantsUpdated,\n    ChangePublishQuality: ChangePublishQuality,\n    ConnectionQualityChanged: ConnectionQualityChanged,\n    ConnectionQualityInfo: ConnectionQualityInfo,\n    DominantSpeakerChanged: DominantSpeakerChanged,\n    Error: Error$1,\n    GoAway: GoAway,\n    HealthCheckRequest: HealthCheckRequest,\n    HealthCheckResponse: HealthCheckResponse,\n    ICERestart: ICERestart,\n    ICETrickle: ICETrickle,\n    JoinRequest: JoinRequest,\n    JoinResponse: JoinResponse,\n    Migration: Migration,\n    ParticipantJoined: ParticipantJoined,\n    ParticipantLeft: ParticipantLeft,\n    PinsChanged: PinsChanged,\n    PublisherAnswer: PublisherAnswer,\n    SfuEvent: SfuEvent,\n    SfuRequest: SfuRequest,\n    SubscriberOffer: SubscriberOffer,\n    TrackPublished: TrackPublished,\n    TrackUnpublished: TrackUnpublished,\n    VideoLayerSetting: VideoLayerSetting,\n    get VideoLayerSetting_Priority () {\n        return VideoLayerSetting_Priority;\n    },\n    VideoMediaRequest: VideoMediaRequest,\n    VideoSender: VideoSender\n});\nvar VisibilityState;\n(function(VisibilityState) {\n    VisibilityState[\"UNKNOWN\"] = \"UNKNOWN\";\n    VisibilityState[\"VISIBLE\"] = \"VISIBLE\";\n    VisibilityState[\"INVISIBLE\"] = \"INVISIBLE\";\n})(VisibilityState || (VisibilityState = {}));\nvar DebounceType;\n(function(DebounceType) {\n    DebounceType[DebounceType[\"IMMEDIATE\"] = 20] = \"IMMEDIATE\";\n    DebounceType[DebounceType[\"FAST\"] = 100] = \"FAST\";\n    DebounceType[DebounceType[\"MEDIUM\"] = 600] = \"MEDIUM\";\n    DebounceType[DebounceType[\"SLOW\"] = 1200] = \"SLOW\";\n})(DebounceType || (DebounceType = {}));\n/**\n * @generated from protobuf service stream.video.sfu.signal.SignalServer\n */ class SignalServerClient {\n    constructor(_transport){\n        this._transport = _transport;\n        this.typeName = SignalServer.typeName;\n        this.methods = SignalServer.methods;\n        this.options = SignalServer.options;\n    }\n    /**\n     * SetPublisher sends the WebRTC offer for the peer connection used to publish A/V\n     *\n     * @generated from protobuf rpc: SetPublisher(stream.video.sfu.signal.SetPublisherRequest) returns (stream.video.sfu.signal.SetPublisherResponse);\n     */ setPublisher(input, options) {\n        const method = this.methods[0], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_15__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * answer is sent by the client to the SFU after receiving a subscriber_offer.\n     *\n     * @generated from protobuf rpc: SendAnswer(stream.video.sfu.signal.SendAnswerRequest) returns (stream.video.sfu.signal.SendAnswerResponse);\n     */ sendAnswer(input, options) {\n        const method = this.methods[1], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_15__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * SendICECandidate sends an ICE candidate to the client\n     *\n     * @generated from protobuf rpc: IceTrickle(stream.video.sfu.models.ICETrickle) returns (stream.video.sfu.signal.ICETrickleResponse);\n     */ iceTrickle(input, options) {\n        const method = this.methods[2], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_15__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * UpdateSubscribers is used to notify the SFU about the list of video subscriptions\n     * TODO: sync subscriptions based on this + update tracks using the dimension info sent by the user\n     *\n     * @generated from protobuf rpc: UpdateSubscriptions(stream.video.sfu.signal.UpdateSubscriptionsRequest) returns (stream.video.sfu.signal.UpdateSubscriptionsResponse);\n     */ updateSubscriptions(input, options) {\n        const method = this.methods[3], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_15__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: UpdateMuteStates(stream.video.sfu.signal.UpdateMuteStatesRequest) returns (stream.video.sfu.signal.UpdateMuteStatesResponse);\n     */ updateMuteStates(input, options) {\n        const method = this.methods[4], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_15__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: IceRestart(stream.video.sfu.signal.ICERestartRequest) returns (stream.video.sfu.signal.ICERestartResponse);\n     */ iceRestart(input, options) {\n        const method = this.methods[5], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_15__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: SendStats(stream.video.sfu.signal.SendStatsRequest) returns (stream.video.sfu.signal.SendStatsResponse);\n     */ sendStats(input, options) {\n        const method = this.methods[6], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_15__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n}\nconst defaultOptions = {\n    baseUrl: \"\",\n    sendJson: true,\n    timeout: 5 * 1000,\n    jsonOptions: {\n        ignoreUnknownFields: true\n    }\n};\nconst withHeaders = (headers)=>{\n    return {\n        interceptUnary (next, method, input, options) {\n            options.meta = {\n                ...options.meta,\n                ...headers\n            };\n            return next(method, input, options);\n        }\n    };\n};\n/**\n * Creates new SignalServerClient instance.\n *\n * @param options the twirp options.\n */ const createSignalClient = (options)=>{\n    const transport = new _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_16__.TwirpFetchTransport({\n        ...defaultOptions,\n        ...options\n    });\n    return new SignalServerClient(transport);\n};\n/**\n * Checks whether we are using React Native\n */ const isReactNative = ()=>{\n    if (typeof navigator === \"undefined\") return false;\n    return navigator.product?.toLowerCase() === \"reactnative\";\n};\n// log levels, sorted by verbosity\nconst logLevels = Object.freeze({\n    trace: 0,\n    debug: 1,\n    info: 2,\n    warn: 3,\n    error: 4\n});\nlet logger$4;\nlet level = \"info\";\nconst logToConsole = (logLevel, message, ...args)=>{\n    let logMethod;\n    switch(logLevel){\n        case \"error\":\n            logMethod = console.error;\n            break;\n        case \"warn\":\n            if (isReactNative()) {\n                message = `WARN: ${message}`;\n                logMethod = console.info;\n                break;\n            }\n            logMethod = console.warn;\n            break;\n        case \"info\":\n            logMethod = console.info;\n            break;\n        case \"trace\":\n            logMethod = console.trace;\n            break;\n        default:\n            logMethod = console.log;\n            break;\n    }\n    logMethod(message, ...args);\n};\nconst setLogger = (l, lvl)=>{\n    logger$4 = l;\n    if (lvl) {\n        setLogLevel(lvl);\n    }\n};\nconst setLogLevel = (l)=>{\n    level = l;\n};\nconst getLogger = (withTags)=>{\n    const loggerMethod = logger$4 || logToConsole;\n    const tags = (withTags || []).join(\":\");\n    const result = (logLevel, message, ...args)=>{\n        if (logLevels[logLevel] >= logLevels[level]) {\n            loggerMethod(logLevel, `[${tags}]: ${message}`, ...args);\n        }\n    };\n    return result;\n};\nconst getPreferredCodecs = (kind, preferredCodec, codecToRemove)=>{\n    const logger = getLogger([\n        \"codecs\"\n    ]);\n    if (!(\"getCapabilities\" in RTCRtpSender)) {\n        logger?.(\"warn\", \"RTCRtpSender.getCapabilities is not supported\");\n        return;\n    }\n    const cap = RTCRtpSender.getCapabilities(kind);\n    if (!cap) return;\n    const matched = [];\n    const partialMatched = [];\n    const unmatched = [];\n    cap.codecs.forEach((c)=>{\n        const codec = c.mimeType.toLowerCase();\n        logger?.(\"debug\", `Found supported codec: ${codec}`);\n        const shouldRemoveCodec = codecToRemove && codec === `${kind}/${codecToRemove.toLowerCase()}`;\n        if (shouldRemoveCodec) return;\n        const matchesCodec = codec === `${kind}/${preferredCodec.toLowerCase()}`;\n        if (!matchesCodec) {\n            unmatched.push(c);\n            return;\n        }\n        // for h264 codecs that have sdpFmtpLine available, use only if the\n        // profile-level-id is 42e01f for cross-browser compatibility\n        if (codec === \"h264\") {\n            if (c.sdpFmtpLine && c.sdpFmtpLine.includes(\"profile-level-id=42e01f\")) {\n                matched.push(c);\n            } else {\n                partialMatched.push(c);\n            }\n            return;\n        }\n        matched.push(c);\n    });\n    const result = [\n        ...matched,\n        ...partialMatched,\n        ...unmatched\n    ];\n    logger?.(\"info\", `Preffered codecs: `, result);\n    return result;\n};\nconst getGenericSdp = async (direction)=>{\n    const tempPc = new RTCPeerConnection();\n    tempPc.addTransceiver(\"video\", {\n        direction\n    });\n    tempPc.addTransceiver(\"audio\", {\n        direction\n    });\n    const offer = await tempPc.createOffer();\n    let sdp = offer.sdp ?? \"\";\n    tempPc.getTransceivers().forEach((t)=>{\n        t.stop();\n    });\n    tempPc.close();\n    return sdp;\n};\nconst sfuEventKinds = {\n    subscriberOffer: undefined,\n    publisherAnswer: undefined,\n    connectionQualityChanged: undefined,\n    audioLevelChanged: undefined,\n    iceTrickle: undefined,\n    changePublishQuality: undefined,\n    participantJoined: undefined,\n    participantLeft: undefined,\n    dominantSpeakerChanged: undefined,\n    joinResponse: undefined,\n    healthCheckResponse: undefined,\n    trackPublished: undefined,\n    trackUnpublished: undefined,\n    error: undefined,\n    callGrantsUpdated: undefined,\n    goAway: undefined,\n    iceRestart: undefined,\n    pinsUpdated: undefined\n};\nconst isSfuEvent = (eventName)=>{\n    return Object.prototype.hasOwnProperty.call(sfuEventKinds, eventName);\n};\nclass Dispatcher {\n    constructor(){\n        this.logger = getLogger([\n            \"Dispatcher\"\n        ]);\n        this.subscribers = {};\n        this.dispatch = (message)=>{\n            const eventKind = message.eventPayload.oneofKind;\n            if (!eventKind) return;\n            const payload = message.eventPayload[eventKind];\n            this.logger(\"debug\", `Dispatching ${eventKind}`, payload);\n            const listeners = this.subscribers[eventKind];\n            if (!listeners) return;\n            for (const fn of listeners){\n                try {\n                    fn(payload);\n                } catch (e) {\n                    this.logger(\"warn\", \"Listener failed with error\", e);\n                }\n            }\n        };\n        this.on = (eventName, fn)=>{\n            var _a;\n            ((_a = this.subscribers)[eventName] ?? (_a[eventName] = [])).push(fn);\n            return ()=>{\n                this.off(eventName, fn);\n            };\n        };\n        this.off = (eventName, fn)=>{\n            this.subscribers[eventName] = (this.subscribers[eventName] || []).filter((f)=>f !== fn);\n        };\n        this.offAll = (eventName)=>{\n            if (eventName) {\n                this.subscribers[eventName] = [];\n            } else {\n                this.subscribers = {};\n            }\n        };\n    }\n}\n/**\n * A buffer for ICE Candidates. Used for ICE Trickle:\n * - https://bloggeek.me/webrtcglossary/trickle-ice/\n */ class IceTrickleBuffer {\n    constructor(){\n        this.subscriberCandidates = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.ReplaySubject();\n        this.publisherCandidates = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.ReplaySubject();\n        this.logger = getLogger([\n            \"sfu-client\"\n        ]);\n        this.push = (iceTrickle)=>{\n            if (iceTrickle.peerType === PeerType.SUBSCRIBER) {\n                this.subscriberCandidates.next(iceTrickle);\n            } else if (iceTrickle.peerType === PeerType.PUBLISHER_UNSPECIFIED) {\n                this.publisherCandidates.next(iceTrickle);\n            } else {\n                this.logger(\"warn\", `ICETrickle, Unknown peer type`, iceTrickle);\n            }\n        };\n    }\n}\nfunction getIceCandidate(candidate) {\n    if (!candidate.usernameFragment) {\n        // react-native-webrtc doesn't include usernameFragment in the candidate\n        const splittedCandidate = candidate.candidate.split(\" \");\n        const ufragIndex = splittedCandidate.findIndex((s)=>s === \"ufrag\") + 1;\n        const usernameFragment = splittedCandidate[ufragIndex];\n        return JSON.stringify({\n            ...candidate,\n            usernameFragment\n        });\n    } else {\n        return JSON.stringify(candidate.toJSON());\n    }\n}\nlet sdkInfo;\nlet osInfo;\nlet deviceInfo;\nlet webRtcInfo;\nconst setSdkInfo = (info)=>{\n    sdkInfo = info;\n};\nconst getSdkInfo = ()=>{\n    return sdkInfo;\n};\nconst setOSInfo = (info)=>{\n    osInfo = info;\n};\nconst getOSInfo = ()=>{\n    return osInfo;\n};\nconst setDeviceInfo = (info)=>{\n    deviceInfo = info;\n};\nconst getDeviceInfo = ()=>{\n    return deviceInfo;\n};\nconst getWebRTCInfo = ()=>{\n    return webRtcInfo;\n};\nconst setWebRTCInfo = (info)=>{\n    webRtcInfo = info;\n};\nconst getClientDetails = ()=>{\n    if (isReactNative()) {\n        // Since RN doesn't support web, sharing browser info is not required\n        return {\n            sdk: getSdkInfo(),\n            os: getOSInfo(),\n            device: getDeviceInfo()\n        };\n    }\n    const userAgent = new ua_parser_js__WEBPACK_IMPORTED_MODULE_3__.UAParser(navigator.userAgent);\n    const { browser, os, device, cpu } = userAgent.getResult();\n    return {\n        sdk: getSdkInfo(),\n        browser: {\n            name: browser.name || navigator.userAgent,\n            version: browser.version || \"\"\n        },\n        os: {\n            name: os.name || \"\",\n            version: os.version || \"\",\n            architecture: cpu.architecture || \"\"\n        },\n        device: {\n            name: [\n                device.vendor,\n                device.model,\n                device.type\n            ].filter(Boolean).join(\" \"),\n            version: \"\"\n        }\n    };\n};\nconst DEFAULT_BITRATE = 1250000;\nconst defaultTargetResolution = {\n    bitrate: DEFAULT_BITRATE,\n    width: 1280,\n    height: 720\n};\n/**\n * Determines the most optimal video layers for simulcasting\n * for the given track.\n *\n * @param videoTrack the video track to find optimal layers for.\n * @param targetResolution the expected target resolution.\n */ const findOptimalVideoLayers = (videoTrack, targetResolution = defaultTargetResolution)=>{\n    const optimalVideoLayers = [];\n    const settings = videoTrack.getSettings();\n    const { width: w = 0, height: h = 0 } = settings;\n    const isRNIos = isReactNative() && getOSInfo()?.name.toLowerCase() === \"ios\";\n    const maxBitrate = getComputedMaxBitrate(targetResolution, w, h);\n    let downscaleFactor = 1;\n    [\n        \"f\",\n        \"h\",\n        \"q\"\n    ].forEach((rid)=>{\n        // Reversing the order [f, h, q] to [q, h, f] as Chrome uses encoding index\n        // when deciding which layer to disable when CPU or bandwidth is constrained.\n        // Encodings should be ordered in increasing spatial resolution order.\n        optimalVideoLayers.unshift({\n            active: true,\n            rid,\n            width: Math.round(w / downscaleFactor),\n            height: Math.round(h / downscaleFactor),\n            maxBitrate: Math.round(maxBitrate / downscaleFactor),\n            scaleResolutionDownBy: downscaleFactor,\n            // Simulcast on iOS React-Native requires all encodings to share the same framerate\n            maxFramerate: {\n                f: 30,\n                h: isRNIos ? 30 : 25,\n                q: isRNIos ? 30 : 20\n            }[rid]\n        });\n        downscaleFactor *= 2;\n    });\n    // for simplicity, we start with all layers enabled, then this function\n    // will clear/reassign the layers that are not needed\n    return withSimulcastConstraints(settings, optimalVideoLayers);\n};\n/**\n * Computes the maximum bitrate for a given resolution.\n * If the current resolution is lower than the target resolution,\n * we want to proportionally reduce the target bitrate.\n * If the current resolution is higher than the target resolution,\n * we want to use the target bitrate.\n *\n * @param targetResolution the target resolution.\n * @param currentWidth the current width of the track.\n * @param currentHeight the current height of the track.\n */ const getComputedMaxBitrate = (targetResolution, currentWidth, currentHeight)=>{\n    // if the current resolution is lower than the target resolution,\n    // we want to proportionally reduce the target bitrate\n    const { width: targetWidth, height: targetHeight } = targetResolution;\n    if (currentWidth < targetWidth || currentHeight < targetHeight) {\n        const currentPixels = currentWidth * currentHeight;\n        const targetPixels = targetWidth * targetHeight;\n        const reductionFactor = currentPixels / targetPixels;\n        return Math.round(targetResolution.bitrate * reductionFactor);\n    }\n    return targetResolution.bitrate;\n};\n/**\n * Browsers have different simulcast constraints for different video resolutions.\n *\n * This function modifies the provided list of video layers according to the\n * current implementation of simulcast constraints in the Chromium based browsers.\n *\n * https://chromium.googlesource.com/external/webrtc/+/refs/heads/main/media/engine/simulcast.cc#90\n */ const withSimulcastConstraints = (settings, optimalVideoLayers)=>{\n    let layers;\n    const size = Math.max(settings.width || 0, settings.height || 0);\n    if (size <= 320) {\n        // provide only one layer 320x240 (q), the one with the highest quality\n        layers = optimalVideoLayers.filter((layer)=>layer.rid === \"f\");\n    } else if (size <= 640) {\n        // provide two layers, 160x120 (q) and 640x480 (h)\n        layers = optimalVideoLayers.filter((layer)=>layer.rid !== \"h\");\n    } else {\n        // provide three layers for sizes > 640x480\n        layers = optimalVideoLayers;\n    }\n    const ridMapping = [\n        \"q\",\n        \"h\",\n        \"f\"\n    ];\n    return layers.map((layer, index)=>({\n            ...layer,\n            rid: ridMapping[index]\n        }));\n};\nconst findOptimalScreenSharingLayers = (videoTrack, preferences)=>{\n    const settings = videoTrack.getSettings();\n    return [\n        {\n            active: true,\n            rid: \"q\",\n            width: settings.width || 0,\n            height: settings.height || 0,\n            scaleResolutionDownBy: 1,\n            maxBitrate: preferences?.maxBitrate ?? 3000000,\n            maxFramerate: preferences?.maxFramerate ?? 30\n        }\n    ];\n};\nconst trackTypeToParticipantStreamKey = (trackType)=>{\n    switch(trackType){\n        case TrackType.SCREEN_SHARE:\n            return \"screenShareStream\";\n        case TrackType.SCREEN_SHARE_AUDIO:\n            return \"screenShareAudioStream\";\n        case TrackType.VIDEO:\n            return \"videoStream\";\n        case TrackType.AUDIO:\n            return \"audioStream\";\n        case TrackType.UNSPECIFIED:\n            throw new Error(\"Track type is unspecified\");\n        default:\n            const exhaustiveTrackTypeCheck = trackType;\n            throw new Error(`Unknown track type: ${exhaustiveTrackTypeCheck}`);\n    }\n};\nconst muteTypeToTrackType = (muteType)=>{\n    switch(muteType){\n        case \"audio\":\n            return TrackType.AUDIO;\n        case \"video\":\n            return TrackType.VIDEO;\n        case \"screenshare\":\n            return TrackType.SCREEN_SHARE;\n        case \"screenshare_audio\":\n            return TrackType.SCREEN_SHARE_AUDIO;\n        default:\n            const exhaustiveMuteTypeCheck = muteType;\n            throw new Error(`Unknown mute type: ${exhaustiveMuteTypeCheck}`);\n    }\n};\n/**\n * Checks if the provided update is a function patch.\n *\n * @param update the value to check.\n */ const isFunctionPatch = (update)=>typeof update === \"function\";\n/**\n * Gets the current value of an observable, or undefined if the observable has\n * not emitted a value yet.\n *\n * @param observable$ the observable to get the value from.\n */ const getCurrentValue = (observable$)=>{\n    let value;\n    let err = undefined;\n    (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.combineLatest)([\n        observable$\n    ]).subscribe({\n        next: ([v])=>{\n            value = v;\n        },\n        error: (e)=>{\n            err = e;\n        }\n    }).unsubscribe();\n    if (err) throw err;\n    return value;\n};\n/**\n * Updates the value of the provided Subject.\n * An `update` can either be a new value or a function which takes\n * the current value and returns a new value.\n *\n * @param subject the subject to update.\n * @param update the update to apply to the subject.\n * @return the updated value.\n */ const setCurrentValue = (subject, update)=>{\n    const next = isFunctionPatch(update) ? update(getCurrentValue(subject)) : update;\n    subject.next(next);\n    return next;\n};\n/**\n * Creates a subscription and returns a function to unsubscribe.\n *\n * @param observable the observable to subscribe to.\n * @param handler the handler to call when the observable emits a value.\n */ const createSubscription = (observable, handler)=>{\n    const subscription = observable.subscribe(handler);\n    return ()=>{\n        subscription.unsubscribe();\n    };\n};\nvar rxUtils = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    createSubscription: createSubscription,\n    getCurrentValue: getCurrentValue,\n    setCurrentValue: setCurrentValue\n});\n/**\n * Creates a new combined {@link Comparator<T>} which sorts items by the given comparators.\n * The comparators are applied in the order they are given (left -> right).\n *\n * @param comparators the comparators to use for sorting.\n * @returns a combined {@link Comparator<T>}.\n */ const combineComparators = (...comparators)=>{\n    return (a, b)=>{\n        for (const comparator of comparators){\n            const result = comparator(a, b);\n            if (result !== 0) return result;\n        }\n        return 0;\n    };\n};\n/**\n * Creates a new comparator which sorts items in descending order.\n *\n * @example\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const byValueDesc = descending(byValue);\n *\n * @param comparator the comparator to wrap.\n */ const descending = (comparator)=>{\n    return (a, b)=>comparator(b, a);\n};\n/**\n * Creates a new comparator which conditionally applies the given comparator.\n *\n * @example\n * const shouldSortByValue = (a, b) => a % 2 === 0; // return false to turn it off\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const comparator = conditional(shouldSortByValue)(byValue);\n *\n * @param predicate the predicate to use for determining whether to apply the comparator.\n */ const conditional = (predicate)=>{\n    return (comparator)=>{\n        return (a, b)=>{\n            if (!predicate(a, b)) return 0;\n            return comparator(a, b);\n        };\n    };\n};\n/**\n * A no-op comparator which always returns 0.\n */ const noopComparator = ()=>{\n    return ()=>0;\n};\n/**\n * A comparator which sorts participants by the fact that they are the dominant speaker or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const dominantSpeaker = (a, b)=>{\n    if (a.isDominantSpeaker && !b.isDominantSpeaker) return -1;\n    if (!a.isDominantSpeaker && b.isDominantSpeaker) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by the fact that they are speaking or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const speaking = (a, b)=>{\n    if (a.isSpeaking && !b.isSpeaking) return -1;\n    if (!a.isSpeaking && b.isSpeaking) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by screen sharing status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const screenSharing = (a, b)=>{\n    if (hasScreenShare(a) && !hasScreenShare(b)) return -1;\n    if (!hasScreenShare(a) && hasScreenShare(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by video status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const publishingVideo = (a, b)=>{\n    if (hasVideo(a) && !hasVideo(b)) return -1;\n    if (!hasVideo(a) && hasVideo(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by audio status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const publishingAudio = (a, b)=>{\n    if (hasAudio(a) && !hasAudio(b)) return -1;\n    if (!hasAudio(a) && hasAudio(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which prioritizes participants who are pinned.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const pinned = (a, b)=>{\n    if (a.pin && b.pin) {\n        if (!a.pin.isLocalPin && b.pin.isLocalPin) return -1;\n        if (a.pin.isLocalPin && !b.pin.isLocalPin) return 1;\n        if (a.pin.pinnedAt > b.pin.pinnedAt) return -1;\n        if (a.pin.pinnedAt < b.pin.pinnedAt) return 1;\n    }\n    if (a.pin && !b.pin) return -1;\n    if (!a.pin && b.pin) return 1;\n    return 0;\n};\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific reaction.\n *\n * @param type the reaction type.\n */ const reactionType = (type)=>{\n    return (a, b)=>{\n        if (a.reaction?.type === type && b.reaction?.type !== type) return -1;\n        if (a.reaction?.type !== type && b.reaction?.type === type) return 1;\n        return 0;\n    };\n};\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific role.\n *\n * @param roles the roles to prioritize.\n */ const role = (...roles)=>(a, b)=>{\n        if (hasAnyRole(a, roles) && !hasAnyRole(b, roles)) return -1;\n        if (!hasAnyRole(a, roles) && hasAnyRole(b, roles)) return 1;\n        return 0;\n    };\n/**\n * A comparator which sorts participants by name.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const name = (a, b)=>{\n    if (a.name < b.name) return -1;\n    if (a.name > b.name) return 1;\n    return 0;\n};\nconst hasAnyRole = (p, roles)=>(p.roles || []).some((r)=>roles.includes(r));\nconst hasScreenShare = (p)=>p.publishedTracks.includes(TrackType.SCREEN_SHARE);\nconst hasVideo = (p)=>p.publishedTracks.includes(TrackType.VIDEO);\nconst hasAudio = (p)=>p.publishedTracks.includes(TrackType.AUDIO);\n// a comparator decorator which applies the decorated comparator only if the\n// participant is invisible.\n// This ensures stable sorting when all participants are visible.\nconst ifInvisibleBy = conditional((a, b)=>a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE);\n/**\n * A comparator that applies the decorated comparator when a participant is\n * either invisible or its visibility state isn't known.\n * For visible participants, it ensures stable sorting.\n */ const ifInvisibleOrUnknownBy = conditional((a, b)=>a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || a.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN || b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || b.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN);\n/**\n * The default sorting preset.\n */ const defaultSortPreset = combineComparators(pinned, screenSharing, ifInvisibleBy(combineComparators(dominantSpeaker, speaking, reactionType(\"raised-hand\"), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for speaker layout.\n */ const speakerLayoutSortPreset = combineComparators(pinned, screenSharing, dominantSpeaker, ifInvisibleBy(combineComparators(speaking, reactionType(\"raised-hand\"), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for layouts that don't render all participants but\n * instead, render them in pages.\n */ const paginatedLayoutSortPreset = combineComparators(pinned, ifInvisibleOrUnknownBy(combineComparators(dominantSpeaker, speaking, reactionType(\"raised-hand\"), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for livestreams and audio rooms.\n */ const livestreamOrAudioRoomSortPreset = combineComparators(ifInvisibleBy(combineComparators(dominantSpeaker, speaking, reactionType(\"raised-hand\"), publishingVideo, publishingAudio)), role(\"admin\", \"host\", \"speaker\"));\n/**\n * Represents the state of the current call.\n */ var CallingState;\n(function(CallingState) {\n    /**\n     * The call is in an unknown state.\n     */ CallingState[\"UNKNOWN\"] = \"unknown\";\n    /**\n     * The call is in an idle state.\n     */ CallingState[\"IDLE\"] = \"idle\";\n    /**\n     * The call is in the process of ringing.\n     * (User hasn't accepted nor rejected the call yet.)\n     */ CallingState[\"RINGING\"] = \"ringing\";\n    /**\n     * The call is in the process of joining.\n     */ CallingState[\"JOINING\"] = \"joining\";\n    /**\n     * The call is currently active.\n     */ CallingState[\"JOINED\"] = \"joined\";\n    /**\n     * The call has been left.\n     */ CallingState[\"LEFT\"] = \"left\";\n    /**\n     * The call is in the process of reconnecting.\n     */ CallingState[\"RECONNECTING\"] = \"reconnecting\";\n    /**\n     * The call is in the process of migrating from one node to another.\n     */ CallingState[\"MIGRATING\"] = \"migrating\";\n    /**\n     * The call has failed to reconnect.\n     */ CallingState[\"RECONNECTING_FAILED\"] = \"reconnecting-failed\";\n    /**\n     * The call is in offline mode.\n     */ CallingState[\"OFFLINE\"] = \"offline\";\n})(CallingState || (CallingState = {}));\n/**\n * Returns the default egress object - when no egress data is available.\n */ const defaultEgress = {\n    broadcasting: false,\n    hls: {\n        playlist_url: \"\"\n    },\n    rtmps: []\n};\n/**\n * Holds the state of the current call.\n * @react You don't have to use this class directly, as we are exposing the state through Hooks.\n */ class CallState {\n    /**\n     * Creates a new instance of the CallState class.\n     *\n     */ constructor(){\n        this.backstageSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(true);\n        this.blockedUserIdsSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject([]);\n        this.createdAtSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(new Date());\n        this.endedAtSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.startsAtSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.updatedAtSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(new Date());\n        this.createdBySubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.customSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject({});\n        this.egressSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.ingressSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.recordingSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(false);\n        this.sessionSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.settingsSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.transcribingSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(false);\n        this.endedBySubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.thumbnailsSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.membersSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject([]);\n        this.ownCapabilitiesSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject([]);\n        this.callingStateSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(CallingState.UNKNOWN);\n        this.startedAtSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.participantCountSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(0);\n        this.anonymousParticipantCountSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(0);\n        this.participantsSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject([]);\n        this.callStatsReportSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        /**\n         * A list of comparators that are used to sort the participants.\n         *\n         * @private\n         */ this.sortParticipantsBy = defaultSortPreset;\n        /**\n         * Sets the list of criteria that are used to sort the participants.\n         * To disable sorting, you can pass `noopComparator()`.\n         *\n         * @param comparator the comparator to use to sort the participants.\n         */ this.setSortParticipantsBy = (comparator)=>{\n            this.sortParticipantsBy = comparator;\n            // trigger re-sorting of participants\n            this.setCurrentValue(this.participantsSubject, (ps)=>ps);\n        };\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @internal\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n        /**\n         * Sets the number of participants in the current call.\n         *\n         * @internal\n         * @param count the number of participants.\n         */ this.setParticipantCount = (count)=>{\n            return this.setCurrentValue(this.participantCountSubject, count);\n        };\n        /**\n         * Sets the time the call session actually started.\n         *\n         * @internal\n         * @param startedAt the time the call session actually started.\n         */ this.setStartedAt = (startedAt)=>{\n            return this.setCurrentValue(this.startedAtSubject, startedAt);\n        };\n        /**\n         * Sets the number of anonymous participants in the current call.\n         *\n         * @internal\n         * @param count the number of anonymous participants.\n         */ this.setAnonymousParticipantCount = (count)=>{\n            return this.setCurrentValue(this.anonymousParticipantCountSubject, count);\n        };\n        /**\n         * Sets the list of participants in the current call.\n         *\n         * @internal\n         *\n         * @param participants the list of participants.\n         */ this.setParticipants = (participants)=>{\n            return this.setCurrentValue(this.participantsSubject, participants);\n        };\n        /**\n         * Sets the calling state.\n         *\n         * @internal\n         * @param state the new calling state.\n         */ this.setCallingState = (state)=>{\n            return this.setCurrentValue(this.callingStateSubject, state);\n        };\n        /**\n         * Sets the call stats report.\n         *\n         * @internal\n         * @param report the report to set.\n         */ this.setCallStatsReport = (report)=>{\n            return this.setCurrentValue(this.callStatsReportSubject, report);\n        };\n        /**\n         * Sets the members of the current call.\n         *\n         * @internal\n         * @param members the members to set.\n         */ this.setMembers = (members)=>{\n            this.setCurrentValue(this.membersSubject, members);\n        };\n        /**\n         * Sets the own capabilities.\n         *\n         * @internal\n         * @param capabilities the capabilities to set.\n         */ this.setOwnCapabilities = (capabilities)=>{\n            return this.setCurrentValue(this.ownCapabilitiesSubject, capabilities);\n        };\n        /**\n         * Will try to find the participant with the given sessionId in the current call.\n         *\n         * @param sessionId the sessionId of the participant to find.\n         * @returns the participant with the given sessionId or undefined if not found.\n         */ this.findParticipantBySessionId = (sessionId)=>{\n            return this.participants.find((p)=>p.sessionId === sessionId);\n        };\n        /**\n         * Returns a new lookup table of participants indexed by their session ID.\n         */ this.getParticipantLookupBySessionId = ()=>{\n            return this.participants.reduce((lookupTable, participant)=>{\n                lookupTable[participant.sessionId] = participant;\n                return lookupTable;\n            }, {});\n        };\n        /**\n         * Updates a participant in the current call identified by the given `sessionId`.\n         * If the participant can't be found, this operation is no-op.\n         *\n         * @internal\n         *\n         * @param sessionId the session ID of the participant to update.\n         * @param patch the patch to apply to the participant.\n         * @returns the updated participant or `undefined` if the participant couldn't be found.\n         */ this.updateParticipant = (sessionId, patch)=>{\n            const participant = this.findParticipantBySessionId(sessionId);\n            if (!participant) {\n                this.logger(\"warn\", `Participant with sessionId ${sessionId} not found`);\n                return;\n            }\n            const thePatch = typeof patch === \"function\" ? patch(participant) : patch;\n            const updatedParticipant = {\n                // FIXME OL: this is not a deep merge, we might want to revisit this\n                ...participant,\n                ...thePatch\n            };\n            return this.setParticipants((participants)=>participants.map((p)=>p.sessionId === sessionId ? updatedParticipant : p));\n        };\n        /**\n         * Updates a participant in the current call identified by the given `sessionId`.\n         * If a participant with matching `sessionId` can't be found, the provided\n         * `participant` is added to the list of participants.\n         *\n         * @param sessionId the session ID of the participant to update.\n         * @param participant the participant to update or add.\n         */ this.updateOrAddParticipant = (sessionId, participant)=>{\n            if (!this.findParticipantBySessionId(sessionId)) {\n                return this.setParticipants((participants)=>[\n                        ...participants,\n                        participant\n                    ]);\n            }\n            return this.setParticipants((participants)=>participants.map((p)=>{\n                    if (p.sessionId === sessionId) {\n                        return {\n                            ...p,\n                            ...participant\n                        };\n                    }\n                    return p;\n                }));\n        };\n        /**\n         * Updates all participants in the current call whose session ID is in the given `sessionIds`.\n         * If no patches are provided, this operation is no-op.\n         *\n         * @internal\n         *\n         * @param patch the patch to apply to the participants.\n         * @returns all participants, with all patch applied.\n         */ this.updateParticipants = (patch)=>{\n            if (Object.keys(patch).length === 0) return;\n            return this.setParticipants((participants)=>participants.map((p)=>{\n                    const thePatch = patch[p.sessionId];\n                    if (thePatch) {\n                        return {\n                            ...p,\n                            ...thePatch\n                        };\n                    }\n                    return p;\n                }));\n        };\n        /**\n         * Updates the call state with the data received from the server.\n         *\n         * @internal\n         *\n         * @param event the video event that our backend sent us.\n         */ this.updateFromEvent = (event)=>{\n            const update = this.eventHandlers[event.type];\n            if (update) {\n                update(event);\n            }\n        };\n        /**\n         * Updates the participant pinned state with server side pinning data.\n         *\n         * @param pins the latest pins from the server.\n         */ this.setServerSidePins = (pins)=>{\n            const pinsLookup = pins.reduce((lookup, pin)=>{\n                lookup[pin.sessionId] = Date.now();\n                return lookup;\n            }, {});\n            return this.setParticipants((participants)=>participants.map((participant)=>{\n                    const serverSidePinnedAt = pinsLookup[participant.sessionId];\n                    // the participant is newly pinned\n                    if (serverSidePinnedAt) {\n                        return {\n                            ...participant,\n                            pin: {\n                                isLocalPin: false,\n                                pinnedAt: serverSidePinnedAt\n                            }\n                        };\n                    }\n                    // the participant is no longer pinned server side\n                    // we need to reset the pin\n                    if (participant.pin && !participant.pin.isLocalPin) {\n                        return {\n                            ...participant,\n                            pin: undefined\n                        };\n                    }\n                    // no changes to be applied\n                    return participant;\n                }));\n        };\n        /**\n         * Updates the call state with the data received from the server.\n         *\n         * @internal\n         *\n         * @param call the call response from the server.\n         */ this.updateFromCallResponse = (call)=>{\n            this.setCurrentValue(this.backstageSubject, call.backstage);\n            this.setCurrentValue(this.blockedUserIdsSubject, call.blocked_user_ids);\n            this.setCurrentValue(this.createdAtSubject, new Date(call.created_at));\n            this.setCurrentValue(this.updatedAtSubject, new Date(call.updated_at));\n            this.setCurrentValue(this.startsAtSubject, call.starts_at ? new Date(call.starts_at) : undefined);\n            this.setCurrentValue(this.endedAtSubject, call.ended_at ? new Date(call.ended_at) : undefined);\n            this.setCurrentValue(this.createdBySubject, call.created_by);\n            this.setCurrentValue(this.customSubject, call.custom);\n            this.setCurrentValue(this.egressSubject, call.egress);\n            this.setCurrentValue(this.ingressSubject, call.ingress);\n            this.setCurrentValue(this.recordingSubject, call.recording);\n            this.setCurrentValue(this.sessionSubject, call.session);\n            this.setCurrentValue(this.settingsSubject, call.settings);\n            this.setCurrentValue(this.transcribingSubject, call.transcribing);\n            this.setCurrentValue(this.thumbnailsSubject, call.thumbnails);\n        };\n        this.updateFromMemberRemoved = (event)=>{\n            this.setCurrentValue(this.membersSubject, (members)=>members.filter((m)=>event.members.indexOf(m.user_id) === -1));\n        };\n        this.updateFromMemberAdded = (event)=>{\n            this.setCurrentValue(this.membersSubject, (members)=>[\n                    ...members,\n                    ...event.members\n                ]);\n        };\n        this.updateFromHLSBroadcastStopped = ()=>{\n            this.setCurrentValue(this.egressSubject, (egress = defaultEgress)=>({\n                    ...egress,\n                    broadcasting: false\n                }));\n        };\n        this.updateFromHLSBroadcastingFailed = ()=>{\n            this.setCurrentValue(this.egressSubject, (egress = defaultEgress)=>({\n                    ...egress,\n                    broadcasting: false\n                }));\n        };\n        this.updateFromHLSBroadcastStarted = (event)=>{\n            this.setCurrentValue(this.egressSubject, (egress = defaultEgress)=>({\n                    ...egress,\n                    broadcasting: true,\n                    hls: {\n                        ...egress.hls,\n                        playlist_url: event.hls_playlist_url\n                    }\n                }));\n        };\n        this.updateFromSessionParticipantLeft = (event)=>{\n            this.setCurrentValue(this.sessionSubject, (session)=>{\n                if (!session) {\n                    this.logger(\"warn\", `Received call.session_participant_left event but no session is available.`, event);\n                    return session;\n                }\n                const { participants, participants_count_by_role } = session;\n                const { user, user_session_id } = event.participant;\n                return {\n                    ...session,\n                    participants: participants.filter((p)=>p.user_session_id !== user_session_id),\n                    participants_count_by_role: {\n                        ...participants_count_by_role,\n                        [user.role]: Math.max(0, (participants_count_by_role[user.role] || 0) - 1)\n                    }\n                };\n            });\n        };\n        this.updateFromSessionParticipantJoined = (event)=>{\n            this.setCurrentValue(this.sessionSubject, (session)=>{\n                if (!session) {\n                    this.logger(\"warn\", `Received call.session_participant_joined event but no session is available.`, event);\n                    return session;\n                }\n                const { participants, participants_count_by_role } = session;\n                const { user, user_session_id } = event.participant;\n                // It could happen that the backend delivers the same participant more than once.\n                // Once with the call.session_started event and once again with the\n                // call.session_participant_joined event. In this case,\n                // we should update the existing participant and prevent duplicating it.\n                let shouldInsertParticipant = true;\n                const updatedParticipants = participants.map((p)=>{\n                    if (p.user_session_id === user_session_id) {\n                        shouldInsertParticipant = false;\n                        return event.participant;\n                    }\n                    return p;\n                });\n                if (shouldInsertParticipant) {\n                    // this is a new array, we can safely push the new participant\n                    updatedParticipants.push(event.participant);\n                }\n                // If we are updating an existing participant, we don't want to increment\n                // the participant_by_role count.\n                const increment = shouldInsertParticipant ? 1 : 0;\n                return {\n                    ...session,\n                    participants: updatedParticipants,\n                    participants_count_by_role: {\n                        ...participants_count_by_role,\n                        [user.role]: (participants_count_by_role[user.role] || 0) + increment\n                    }\n                };\n            });\n        };\n        this.updateMembers = (event)=>{\n            this.setCurrentValue(this.membersSubject, (members)=>members.map((member)=>{\n                    const memberUpdate = event.members.find((m)=>m.user_id === member.user_id);\n                    return memberUpdate ? memberUpdate : member;\n                }));\n        };\n        this.updateParticipantReaction = (event)=>{\n            const { user, custom, type, emoji_code } = event.reaction;\n            this.setParticipants((participants)=>{\n                return participants.map((p)=>{\n                    // skip if the reaction is not for this participant\n                    if (p.userId !== user.id) return p;\n                    // update the participant with the new reaction\n                    return {\n                        ...p,\n                        reaction: {\n                            type,\n                            emoji_code,\n                            custom\n                        }\n                    };\n                });\n            });\n        };\n        this.unblockUser = (event)=>{\n            this.setCurrentValue(this.blockedUserIdsSubject, (current)=>{\n                if (!current) return current;\n                return current.filter((id)=>id !== event.user.id);\n            });\n        };\n        this.blockUser = (event)=>{\n            this.setCurrentValue(this.blockedUserIdsSubject, (current)=>[\n                    ...current || [],\n                    event.user.id\n                ]);\n        };\n        this.updateOwnCapabilities = (event)=>{\n            if (event.user.id === this.localParticipant?.userId) {\n                this.setCurrentValue(this.ownCapabilitiesSubject, event.own_capabilities);\n            }\n        };\n        this.logger = getLogger([\n            \"CallState\"\n        ]);\n        this.participants$ = this.participantsSubject.asObservable().pipe(// maintain stable-sort by mutating the participants stored\n        // in the original subject\n        (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.map)((ps)=>ps.sort(this.sortParticipantsBy)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.localParticipant$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.map)((participants)=>participants.find((p)=>p.isLocalParticipant)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.remoteParticipants$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.map)((participants)=>participants.filter((p)=>!p.isLocalParticipant)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.pinnedParticipants$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.map)((participants)=>participants.filter((p)=>!!p.pin)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.dominantSpeaker$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.map)((participants)=>participants.find((p)=>p.isDominantSpeaker)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.hasOngoingScreenShare$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.map)((participants)=>participants.some((p)=>p.publishedTracks.includes(TrackType.SCREEN_SHARE))), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.startedAt$ = this.startedAtSubject.asObservable();\n        this.participantCount$ = this.participantCountSubject.asObservable();\n        this.anonymousParticipantCount$ = this.anonymousParticipantCountSubject.asObservable();\n        this.callStatsReport$ = this.callStatsReportSubject.asObservable();\n        this.members$ = this.membersSubject.asObservable();\n        this.ownCapabilities$ = this.ownCapabilitiesSubject.asObservable();\n        this.callingState$ = this.callingStateSubject.asObservable();\n        this.backstage$ = this.backstageSubject.asObservable();\n        this.blockedUserIds$ = this.blockedUserIdsSubject.asObservable();\n        this.createdAt$ = this.createdAtSubject.asObservable();\n        this.endedAt$ = this.endedAtSubject.asObservable();\n        this.startsAt$ = this.startsAtSubject.asObservable();\n        this.updatedAt$ = this.updatedAtSubject.asObservable();\n        this.createdBy$ = this.createdBySubject.asObservable();\n        this.custom$ = this.customSubject.asObservable();\n        this.egress$ = this.egressSubject.asObservable();\n        this.ingress$ = this.ingressSubject.asObservable();\n        this.recording$ = this.recordingSubject.asObservable();\n        this.session$ = this.sessionSubject.asObservable();\n        this.settings$ = this.settingsSubject.asObservable();\n        this.transcribing$ = this.transcribingSubject.asObservable();\n        this.endedBy$ = this.endedBySubject.asObservable();\n        this.thumbnails$ = this.thumbnailsSubject.asObservable();\n        this.eventHandlers = {\n            // these events are not updating the call state:\n            \"call.permission_request\": undefined,\n            \"call.recording_failed\": undefined,\n            \"call.recording_ready\": undefined,\n            \"call.user_muted\": undefined,\n            \"connection.error\": undefined,\n            \"connection.ok\": undefined,\n            \"health.check\": undefined,\n            custom: undefined,\n            // events that update call state:\n            \"call.accepted\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.blocked_user\": this.blockUser,\n            \"call.created\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.ended\": (e)=>{\n                this.updateFromCallResponse(e.call);\n                this.setCurrentValue(this.endedBySubject, e.user);\n            },\n            \"call.hls_broadcasting_failed\": this.updateFromHLSBroadcastingFailed,\n            \"call.hls_broadcasting_started\": this.updateFromHLSBroadcastStarted,\n            \"call.hls_broadcasting_stopped\": this.updateFromHLSBroadcastStopped,\n            \"call.live_started\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.member_added\": this.updateFromMemberAdded,\n            \"call.member_removed\": this.updateFromMemberRemoved,\n            \"call.member_updated_permission\": this.updateMembers,\n            \"call.member_updated\": this.updateMembers,\n            \"call.notification\": (e)=>{\n                this.updateFromCallResponse(e.call);\n                this.setMembers(e.members);\n            },\n            \"call.permissions_updated\": this.updateOwnCapabilities,\n            \"call.reaction_new\": this.updateParticipantReaction,\n            \"call.recording_started\": ()=>this.setCurrentValue(this.recordingSubject, true),\n            \"call.recording_stopped\": ()=>this.setCurrentValue(this.recordingSubject, false),\n            \"call.rejected\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.ring\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.session_ended\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.session_participant_joined\": this.updateFromSessionParticipantJoined,\n            \"call.session_participant_left\": this.updateFromSessionParticipantLeft,\n            \"call.session_started\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.unblocked_user\": this.unblockUser,\n            \"call.updated\": (e)=>this.updateFromCallResponse(e.call)\n        };\n    }\n    /**\n     * The server-side counted number of participants connected to the current call.\n     * This number includes the anonymous participants as well.\n     */ get participantCount() {\n        return this.getCurrentValue(this.participantCount$);\n    }\n    /**\n     * The time the call session actually started.\n     * Useful for displaying the call duration.\n     */ get startedAt() {\n        return this.getCurrentValue(this.startedAt$);\n    }\n    /**\n     * The server-side counted number of anonymous participants connected to the current call.\n     * This number includes the anonymous participants as well.\n     */ get anonymousParticipantCount() {\n        return this.getCurrentValue(this.anonymousParticipantCount$);\n    }\n    /**\n     * The list of participants in the current call.\n     */ get participants() {\n        return this.getCurrentValue(this.participants$);\n    }\n    /**\n     * The local participant in the current call.\n     */ get localParticipant() {\n        return this.getCurrentValue(this.localParticipant$);\n    }\n    /**\n     * The list of remote participants in the current call.\n     */ get remoteParticipants() {\n        return this.getCurrentValue(this.remoteParticipants$);\n    }\n    /**\n     * The dominant speaker in the current call.\n     */ get dominantSpeaker() {\n        return this.getCurrentValue(this.dominantSpeaker$);\n    }\n    /**\n     * The list of pinned participants in the current call.\n     */ get pinnedParticipants() {\n        return this.getCurrentValue(this.pinnedParticipants$);\n    }\n    /**\n     * Tell if there is an ongoing screen share in this call.\n     */ get hasOngoingScreenShare() {\n        return this.getCurrentValue(this.hasOngoingScreenShare$);\n    }\n    /**\n     * The calling state.\n     */ get callingState() {\n        return this.getCurrentValue(this.callingState$);\n    }\n    /**\n     * The call stats report.\n     */ get callStatsReport() {\n        return this.getCurrentValue(this.callStatsReport$);\n    }\n    /**\n     * The members of the current call.\n     */ get members() {\n        return this.getCurrentValue(this.members$);\n    }\n    /**\n     * The capabilities of the current user for the current call.\n     */ get ownCapabilities() {\n        return this.getCurrentValue(this.ownCapabilities$);\n    }\n    /**\n     * The backstage state.\n     */ get backstage() {\n        return this.getCurrentValue(this.backstage$);\n    }\n    /**\n     * Will provide the list of blocked user IDs.\n     */ get blockedUserIds() {\n        return this.getCurrentValue(this.blockedUserIds$);\n    }\n    /**\n     * Will provide the time when this call has been created.\n     */ get createdAt() {\n        return this.getCurrentValue(this.createdAt$);\n    }\n    /**\n     * Will provide the time when this call has been ended.\n     */ get endedAt() {\n        return this.getCurrentValue(this.endedAt$);\n    }\n    /**\n     * Will provide the time when this call has been scheduled to start.\n     */ get startsAt() {\n        return this.getCurrentValue(this.startsAt$);\n    }\n    /**\n     * Will provide the time when this call has been updated.\n     */ get updatedAt() {\n        return this.getCurrentValue(this.updatedAt$);\n    }\n    /**\n     * Will provide the user who created this call.\n     */ get createdBy() {\n        return this.getCurrentValue(this.createdBy$);\n    }\n    /**\n     * Will provide the custom data of this call.\n     */ get custom() {\n        return this.getCurrentValue(this.custom$);\n    }\n    /**\n     * Will provide the egress data of this call.\n     */ get egress() {\n        return this.getCurrentValue(this.egress$);\n    }\n    /**\n     * Will provide the ingress data of this call.\n     */ get ingress() {\n        return this.getCurrentValue(this.ingress$);\n    }\n    /**\n     * Will provide the recording state of this call.\n     */ get recording() {\n        return this.getCurrentValue(this.recording$);\n    }\n    /**\n     * Will provide the session data of this call.\n     */ get session() {\n        return this.getCurrentValue(this.session$);\n    }\n    /**\n     * Will provide the settings of this call.\n     */ get settings() {\n        return this.getCurrentValue(this.settings$);\n    }\n    /**\n     * Will provide the transcribing state of this call.\n     */ get transcribing() {\n        return this.getCurrentValue(this.transcribing$);\n    }\n    /**\n     * Will provide the user who ended this call.\n     */ get endedBy() {\n        return this.getCurrentValue(this.endedBy$);\n    }\n    /**\n     * Will provide the thumbnails of this call, if enabled in the call settings.\n     */ get thumbnails() {\n        return this.getCurrentValue(this.thumbnails$);\n    }\n}\nclass StreamVideoWriteableStateStore {\n    constructor(){\n        /**\n         * A store keeping data of a successfully connected user over WS to the coordinator server.\n         */ this.connectedUserSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        /**\n         * A list of {@link Call} objects created/tracked by this client.\n         */ this.callsSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject([]);\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n        /**\n         * Sets the currently connected user.\n         *\n         * @internal\n         * @param user the user to set as connected.\n         */ this.setConnectedUser = (user)=>{\n            return this.setCurrentValue(this.connectedUserSubject, user);\n        };\n        /**\n         * Sets the list of {@link Call} objects created/tracked by this client.\n         * @param calls\n         */ this.setCalls = (calls)=>{\n            return this.setCurrentValue(this.callsSubject, calls);\n        };\n        /**\n         * Adds a {@link Call} object to the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param call the call to add.\n         */ this.registerCall = (call)=>{\n            if (!this.calls.find((c)=>c.cid === call.cid)) {\n                this.setCalls((calls)=>[\n                        ...calls,\n                        call\n                    ]);\n            }\n        };\n        /**\n         * Removes a {@link Call} object from the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param call the call to remove\n         */ this.unregisterCall = (call)=>{\n            return this.setCalls((calls)=>calls.filter((c)=>c !== call));\n        };\n        /**\n         * Finds a {@link Call} object in the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param type the type of call to find.\n         * @param id the id of the call to find.\n         */ this.findCall = (type, id)=>{\n            return this.calls.find((c)=>c.type === type && c.id === id);\n        };\n        this.connectedUserSubject.subscribe(async (user)=>{\n            // leave all calls when the user disconnects.\n            if (!user) {\n                const logger = getLogger([\n                    \"client-state\"\n                ]);\n                for (const call of this.calls){\n                    if (call.state.callingState === CallingState.LEFT) continue;\n                    logger(\"info\", `User disconnected, leaving call: ${call.cid}`);\n                    await call.leave({\n                        reason: \"client.disconnectUser() called\"\n                    }).catch((err)=>{\n                        logger(\"error\", `Error leaving call: ${call.cid}`, err);\n                    });\n                }\n            }\n        });\n    }\n    /**\n     * The currently connected user.\n     */ get connectedUser() {\n        return this.getCurrentValue(this.connectedUserSubject);\n    }\n    /**\n     * A list of {@link Call} objects created/tracked by this client.\n     */ get calls() {\n        return this.getCurrentValue(this.callsSubject);\n    }\n}\n/**\n * A reactive store that exposes state variables in a reactive manner.\n * You can subscribe to changes of the different state variables.\n * This central store contains all the state variables related to [`StreamVideoClient`](./StreamVideClient.md) and [`Call`](./Call.md).\n */ class StreamVideoReadOnlyStateStore {\n    constructor(store){\n        /**\n         * This method allows you the get the current value of a state variable.\n         *\n         * @param observable the observable to get the current value of.\n         * @returns the current value of the observable.\n         */ this.getCurrentValue = getCurrentValue;\n        // convert and expose subjects as observables\n        this.connectedUser$ = store.connectedUserSubject.asObservable();\n        this.calls$ = store.callsSubject.asObservable();\n    }\n    /**\n     * The current user connected over WS to the backend.\n     */ get connectedUser() {\n        return getCurrentValue(this.connectedUser$);\n    }\n    /**\n     * A list of {@link Call} objects created/tracked by this client.\n     */ get calls() {\n        return getCurrentValue(this.calls$);\n    }\n}\nconst getRtpMap = (line)=>{\n    // Example: a=rtpmap:110 opus/48000/2\n    const rtpRegex = /^a=rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/;\n    // The first captured group is the payload type number, the second captured group is the encoding name, the third captured group is the clock rate, and the fourth captured group is any additional parameters.\n    const rtpMatch = rtpRegex.exec(line);\n    if (rtpMatch) {\n        return {\n            original: rtpMatch[0],\n            payload: rtpMatch[1],\n            codec: rtpMatch[2]\n        };\n    }\n};\nconst getFmtp = (line)=>{\n    // Example: a=fmtp:111 minptime=10; useinbandfec=1\n    const fmtpRegex = /^a=fmtp:(\\d*) (.*)/;\n    const fmtpMatch = fmtpRegex.exec(line);\n    // The first captured group is the payload type number, the second captured group is any additional parameters.\n    if (fmtpMatch) {\n        return {\n            original: fmtpMatch[0],\n            payload: fmtpMatch[1],\n            config: fmtpMatch[2]\n        };\n    }\n};\n/**\n * gets the media section for the specified media type.\n * The media section contains the media type, port, codec, and payload type.\n * Example: m=video 9 UDP/TLS/RTP/SAVPF 100 101 96 97 35 36 102 125 127\n */ const getMedia = (line, mediaType)=>{\n    const regex = new RegExp(`(m=${mediaType} \\\\d+ [\\\\w/]+) ([\\\\d\\\\s]+)`);\n    const match = regex.exec(line);\n    if (match) {\n        return {\n            original: match[0],\n            mediaWithPorts: match[1],\n            codecOrder: match[2]\n        };\n    }\n};\nconst getMediaSection = (sdp, mediaType)=>{\n    let media;\n    const rtpMap = [];\n    const fmtp = [];\n    let isTheRequiredMediaSection = false;\n    sdp.split(/(\\r\\n|\\r|\\n)/).forEach((line)=>{\n        const isValidLine = /^([a-z])=(.*)/.test(line);\n        if (!isValidLine) return;\n        /*\n          NOTE: according to https://www.rfc-editor.org/rfc/rfc8866.pdf\n          Each media description starts with an \"m=\" line and continues to the next media description or the end of the whole session description, whichever comes first\n        */ const type = line[0];\n        if (type === \"m\") {\n            const _media = getMedia(line, mediaType);\n            isTheRequiredMediaSection = !!_media;\n            if (_media) {\n                media = _media;\n            }\n        } else if (isTheRequiredMediaSection && type === \"a\") {\n            const rtpMapLine = getRtpMap(line);\n            const fmtpLine = getFmtp(line);\n            if (rtpMapLine) {\n                rtpMap.push(rtpMapLine);\n            } else if (fmtpLine) {\n                fmtp.push(fmtpLine);\n            }\n        }\n    });\n    if (media) {\n        return {\n            media,\n            rtpMap,\n            fmtp\n        };\n    }\n};\n/**\n * Gets the fmtp line corresponding to opus\n */ const getOpusFmtp = (sdp)=>{\n    const section = getMediaSection(sdp, \"audio\");\n    const rtpMap = section?.rtpMap.find((r)=>r.codec.toLowerCase() === \"opus\");\n    const codecId = rtpMap?.payload;\n    if (codecId) {\n        return section?.fmtp.find((f)=>f.payload === codecId);\n    }\n};\n/**\n * Returns an SDP with DTX enabled or disabled.\n */ const toggleDtx = (sdp, enable)=>{\n    const opusFmtp = getOpusFmtp(sdp);\n    if (opusFmtp) {\n        const matchDtx = /usedtx=(\\d)/.exec(opusFmtp.config);\n        const requiredDtxConfig = `usedtx=${enable ? \"1\" : \"0\"}`;\n        if (matchDtx) {\n            const newFmtp = opusFmtp.original.replace(/usedtx=(\\d)/, requiredDtxConfig);\n            return sdp.replace(opusFmtp.original, newFmtp);\n        } else {\n            const newFmtp = `${opusFmtp.original};${requiredDtxConfig}`;\n            return sdp.replace(opusFmtp.original, newFmtp);\n        }\n    }\n    return sdp;\n};\n/**\n * Enables high-quality audio through SDP munging for the given trackMid.\n *\n * @param sdp the SDP to munge.\n * @param trackMid the trackMid.\n * @param maxBitrate the max bitrate to set.\n */ const enableHighQualityAudio = (sdp, trackMid, maxBitrate = 510000)=>{\n    maxBitrate = Math.max(Math.min(maxBitrate, 510000), 96000);\n    const parsedSdp = sdp_transform__WEBPACK_IMPORTED_MODULE_2__.parse(sdp);\n    const audioMedia = parsedSdp.media.find((m)=>m.type === \"audio\" && String(m.mid) === trackMid);\n    if (!audioMedia) return sdp;\n    const opusRtp = audioMedia.rtp.find((r)=>r.codec === \"opus\");\n    if (!opusRtp) return sdp;\n    const opusFmtp = audioMedia.fmtp.find((f)=>f.payload === opusRtp.payload);\n    if (!opusFmtp) return sdp;\n    // enable stereo, if not already enabled\n    if (opusFmtp.config.match(/stereo=(\\d)/)) {\n        opusFmtp.config = opusFmtp.config.replace(/stereo=(\\d)/, \"stereo=1\");\n    } else {\n        opusFmtp.config = `${opusFmtp.config};stereo=1`;\n    }\n    // set maxaveragebitrate, to the given value\n    if (opusFmtp.config.match(/maxaveragebitrate=(\\d*)/)) {\n        opusFmtp.config = opusFmtp.config.replace(/maxaveragebitrate=(\\d*)/, `maxaveragebitrate=${maxBitrate}`);\n    } else {\n        opusFmtp.config = `${opusFmtp.config};maxaveragebitrate=${maxBitrate}`;\n    }\n    return sdp_transform__WEBPACK_IMPORTED_MODULE_2__.write(parsedSdp);\n};\nconst logger$3 = getLogger([\n    \"Publisher\"\n]);\n/**\n * The `Publisher` is responsible for publishing/unpublishing media streams to/from the SFU\n * @internal\n */ class Publisher {\n    /**\n     * Returns the current connection configuration.\n     *\n     * @internal\n     */ get connectionConfiguration() {\n        if (this.pc.getConfiguration) return this.pc.getConfiguration();\n        return this._connectionConfiguration;\n    }\n    /**\n     * Constructs a new `Publisher` instance.\n     *\n     * @param connectionConfig the connection configuration to use.\n     * @param sfuClient the SFU client to use.\n     * @param state the call state to use.\n     * @param dispatcher the dispatcher to use.\n     * @param isDtxEnabled whether DTX is enabled.\n     * @param isRedEnabled whether RED is enabled.\n     * @param iceRestartDelay the delay in milliseconds to wait before restarting ICE once connection goes to `disconnected` state.\n     */ constructor({ connectionConfig, sfuClient, dispatcher, state, isDtxEnabled, isRedEnabled, iceRestartDelay = 2500 }){\n        this.transceiverRegistry = {\n            [TrackType.AUDIO]: undefined,\n            [TrackType.VIDEO]: undefined,\n            [TrackType.SCREEN_SHARE]: undefined,\n            [TrackType.SCREEN_SHARE_AUDIO]: undefined,\n            [TrackType.UNSPECIFIED]: undefined\n        };\n        this.publishOptionsPerTrackType = new Map();\n        /**\n         * An array maintaining the order how transceivers were added to the peer connection.\n         * This is needed because some browsers (Firefox) don't reliably report\n         * trackId and `mid` parameters.\n         *\n         * @private\n         */ this.transceiverInitOrder = [];\n        this.trackKindMapping = {\n            [TrackType.AUDIO]: \"audio\",\n            [TrackType.VIDEO]: \"video\",\n            [TrackType.SCREEN_SHARE]: \"video\",\n            [TrackType.SCREEN_SHARE_AUDIO]: \"audio\",\n            [TrackType.UNSPECIFIED]: undefined\n        };\n        this.trackLayersCache = {\n            [TrackType.AUDIO]: undefined,\n            [TrackType.VIDEO]: undefined,\n            [TrackType.SCREEN_SHARE]: undefined,\n            [TrackType.SCREEN_SHARE_AUDIO]: undefined,\n            [TrackType.UNSPECIFIED]: undefined\n        };\n        this.isIceRestarting = false;\n        this.createPeerConnection = (connectionConfig)=>{\n            const pc = new RTCPeerConnection(connectionConfig);\n            this._connectionConfiguration = connectionConfig;\n            pc.addEventListener(\"icecandidate\", this.onIceCandidate);\n            pc.addEventListener(\"negotiationneeded\", this.onNegotiationNeeded);\n            pc.addEventListener(\"icecandidateerror\", this.onIceCandidateError);\n            pc.addEventListener(\"iceconnectionstatechange\", this.onIceConnectionStateChange);\n            pc.addEventListener(\"icegatheringstatechange\", this.onIceGatheringStateChange);\n            pc.addEventListener(\"signalingstatechange\", this.onSignalingStateChange);\n            return pc;\n        };\n        /**\n         * Closes the publisher PeerConnection and cleans up the resources.\n         */ this.close = ({ stopTracks = true } = {})=>{\n            if (stopTracks) {\n                this.stopPublishing();\n                Object.keys(this.transceiverRegistry).forEach((trackType)=>{\n                    // @ts-ignore\n                    this.transceiverRegistry[trackType] = undefined;\n                });\n                Object.keys(this.trackLayersCache).forEach((trackType)=>{\n                    // @ts-ignore\n                    this.trackLayersCache[trackType] = undefined;\n                });\n            }\n            clearTimeout(this.iceRestartTimeout);\n            this.unsubscribeOnIceRestart();\n            this.pc.removeEventListener(\"negotiationneeded\", this.onNegotiationNeeded);\n            this.pc.close();\n        };\n        /**\n         * Starts publishing the given track of the given media stream.\n         *\n         * Consecutive calls to this method will replace the stream.\n         * The previous stream will be stopped.\n         *\n         * @param mediaStream the media stream to publish.\n         * @param track the track to publish.\n         * @param trackType the track type to publish.\n         * @param opts the optional publish options to use.\n         */ this.publishStream = async (mediaStream, track, trackType, opts = {})=>{\n            if (track.readyState === \"ended\") {\n                throw new Error(`Can't publish a track that has ended already.`);\n            }\n            let transceiver = this.pc.getTransceivers().find((t)=>t === this.transceiverRegistry[trackType] && t.sender.track && t.sender.track?.kind === this.trackKindMapping[trackType]);\n            /**\n             * An event handler which listens for the 'ended' event on the track.\n             * Once the track has ended, it will notify the SFU and update the state.\n             */ const handleTrackEnded = async ()=>{\n                logger$3(\"info\", `Track ${TrackType[trackType]} has ended, notifying the SFU`);\n                await this.notifyTrackMuteStateChanged(mediaStream, trackType, true);\n                // clean-up, this event listener needs to run only once.\n                track.removeEventListener(\"ended\", handleTrackEnded);\n            };\n            if (!transceiver) {\n                const { settings } = this.state;\n                const targetResolution = settings?.video.target_resolution;\n                const videoEncodings = trackType === TrackType.VIDEO ? findOptimalVideoLayers(track, targetResolution) : trackType === TrackType.SCREEN_SHARE ? findOptimalScreenSharingLayers(track, opts.screenShareSettings) : undefined;\n                let preferredCodec = opts.preferredCodec;\n                if (!preferredCodec && trackType === TrackType.VIDEO) {\n                    if (isReactNative()) {\n                        const osName = getOSInfo()?.name.toLowerCase();\n                        if (osName === \"ipados\") {\n                            // in ipads it was noticed that if vp8 codec is used\n                            // then the bytes sent is 0 in the outbound-rtp\n                            // so we are forcing h264 codec for ipads\n                            preferredCodec = \"H264\";\n                        } else if (osName === \"android\") {\n                            preferredCodec = \"VP8\";\n                        }\n                    }\n                }\n                const codecPreferences = this.getCodecPreferences(trackType, preferredCodec);\n                // listen for 'ended' event on the track as it might be ended abruptly\n                // by an external factor as permission revokes, device disconnected, etc.\n                // keep in mind that `track.stop()` doesn't trigger this event.\n                track.addEventListener(\"ended\", handleTrackEnded);\n                if (!track.enabled) {\n                    track.enabled = true;\n                }\n                transceiver = this.pc.addTransceiver(track, {\n                    direction: \"sendonly\",\n                    streams: trackType === TrackType.VIDEO || trackType === TrackType.SCREEN_SHARE ? [\n                        mediaStream\n                    ] : undefined,\n                    sendEncodings: videoEncodings\n                });\n                logger$3(\"debug\", `Added ${TrackType[trackType]} transceiver`);\n                this.transceiverInitOrder.push(trackType);\n                this.transceiverRegistry[trackType] = transceiver;\n                this.publishOptionsPerTrackType.set(trackType, opts);\n                if (\"setCodecPreferences\" in transceiver && codecPreferences) {\n                    logger$3(\"info\", `Setting ${TrackType[trackType]} codec preferences`, codecPreferences);\n                    transceiver.setCodecPreferences(codecPreferences);\n                }\n            } else {\n                const previousTrack = transceiver.sender.track;\n                // don't stop the track if we are re-publishing the same track\n                if (previousTrack && previousTrack !== track) {\n                    previousTrack.stop();\n                    previousTrack.removeEventListener(\"ended\", handleTrackEnded);\n                    track.addEventListener(\"ended\", handleTrackEnded);\n                }\n                if (!track.enabled) {\n                    track.enabled = true;\n                }\n                await transceiver.sender.replaceTrack(track);\n            }\n            await this.notifyTrackMuteStateChanged(mediaStream, trackType, false);\n        };\n        /**\n         * Stops publishing the given track type to the SFU, if it is currently being published.\n         * Underlying track will be stopped and removed from the publisher.\n         * @param trackType the track type to unpublish.\n         * @param stopTrack specifies whether track should be stopped or just disabled\n         */ this.unpublishStream = async (trackType, stopTrack)=>{\n            const transceiver = this.pc.getTransceivers().find((t)=>t === this.transceiverRegistry[trackType] && t.sender.track);\n            if (transceiver && transceiver.sender.track && (stopTrack ? transceiver.sender.track.readyState === \"live\" : transceiver.sender.track.enabled)) {\n                stopTrack ? transceiver.sender.track.stop() : transceiver.sender.track.enabled = false;\n                // We don't need to notify SFU if unpublishing in response to remote soft mute\n                if (this.state.localParticipant?.publishedTracks.includes(trackType)) {\n                    await this.notifyTrackMuteStateChanged(undefined, trackType, true);\n                }\n            }\n        };\n        /**\n         * Returns true if the given track type is currently being published to the SFU.\n         *\n         * @param trackType the track type to check.\n         */ this.isPublishing = (trackType)=>{\n            const transceiverForTrackType = this.transceiverRegistry[trackType];\n            if (transceiverForTrackType && transceiverForTrackType.sender) {\n                const sender = transceiverForTrackType.sender;\n                return !!sender.track && sender.track.readyState === \"live\" && sender.track.enabled;\n            }\n            return false;\n        };\n        /**\n         * Returns true if the given track type is currently live\n         *\n         * @param trackType the track type to check.\n         */ this.isLive = (trackType)=>{\n            const transceiverForTrackType = this.transceiverRegistry[trackType];\n            if (transceiverForTrackType && transceiverForTrackType.sender) {\n                const sender = transceiverForTrackType.sender;\n                return !!sender.track && sender.track.readyState === \"live\";\n            }\n            return false;\n        };\n        this.notifyTrackMuteStateChanged = async (mediaStream, trackType, isMuted)=>{\n            await this.sfuClient.updateMuteState(trackType, isMuted);\n            const audioOrVideoOrScreenShareStream = trackTypeToParticipantStreamKey(trackType);\n            if (isMuted) {\n                this.state.updateParticipant(this.sfuClient.sessionId, (p)=>({\n                        publishedTracks: p.publishedTracks.filter((t)=>t !== trackType),\n                        [audioOrVideoOrScreenShareStream]: undefined\n                    }));\n            } else {\n                this.state.updateParticipant(this.sfuClient.sessionId, (p)=>{\n                    return {\n                        publishedTracks: p.publishedTracks.includes(trackType) ? p.publishedTracks : [\n                            ...p.publishedTracks,\n                            trackType\n                        ],\n                        [audioOrVideoOrScreenShareStream]: mediaStream\n                    };\n                });\n            }\n        };\n        /**\n         * Stops publishing all tracks and stop all tracks.\n         */ this.stopPublishing = ()=>{\n            logger$3(\"debug\", \"Stopping publishing all tracks\");\n            this.pc.getSenders().forEach((s)=>{\n                s.track?.stop();\n                if (this.pc.signalingState !== \"closed\") {\n                    this.pc.removeTrack(s);\n                }\n            });\n        };\n        this.updateVideoPublishQuality = async (enabledLayers)=>{\n            logger$3(\"info\", \"Update publish quality, requested layers by SFU:\", enabledLayers);\n            const videoSender = this.transceiverRegistry[TrackType.VIDEO]?.sender;\n            if (!videoSender) {\n                logger$3(\"warn\", \"Update publish quality, no video sender found.\");\n                return;\n            }\n            const params = videoSender.getParameters();\n            if (params.encodings.length === 0) {\n                logger$3(\"warn\", \"Update publish quality, No suitable video encoding quality found\");\n                return;\n            }\n            let changed = false;\n            let enabledRids = enabledLayers.filter((ly)=>ly.active).map((ly)=>ly.name);\n            params.encodings.forEach((enc)=>{\n                // flip 'active' flag only when necessary\n                const shouldEnable = enabledRids.includes(enc.rid);\n                if (shouldEnable !== enc.active) {\n                    enc.active = shouldEnable;\n                    changed = true;\n                }\n                if (shouldEnable) {\n                    let layer = enabledLayers.find((vls)=>vls.name === enc.rid);\n                    if (layer !== undefined) {\n                        if (layer.scaleResolutionDownBy >= 1 && layer.scaleResolutionDownBy !== enc.scaleResolutionDownBy) {\n                            logger$3(\"debug\", \"[dynascale]: setting scaleResolutionDownBy from server\", \"layer\", layer.name, \"scale-resolution-down-by\", layer.scaleResolutionDownBy);\n                            enc.scaleResolutionDownBy = layer.scaleResolutionDownBy;\n                            changed = true;\n                        }\n                        if (layer.maxBitrate > 0 && layer.maxBitrate !== enc.maxBitrate) {\n                            logger$3(\"debug\", \"[dynascale] setting max-bitrate from the server\", \"layer\", layer.name, \"max-bitrate\", layer.maxBitrate);\n                            enc.maxBitrate = layer.maxBitrate;\n                            changed = true;\n                        }\n                        if (layer.maxFramerate > 0 && layer.maxFramerate !== enc.maxFramerate) {\n                            logger$3(\"debug\", \"[dynascale]: setting maxFramerate from server\", \"layer\", layer.name, \"max-framerate\", layer.maxFramerate);\n                            enc.maxFramerate = layer.maxFramerate;\n                            changed = true;\n                        }\n                    }\n                }\n            });\n            const activeLayers = params.encodings.filter((e)=>e.active);\n            if (changed) {\n                await videoSender.setParameters(params);\n                logger$3(\"info\", `Update publish quality, enabled rids: `, activeLayers);\n            } else {\n                logger$3(\"info\", `Update publish quality, no change: `, activeLayers);\n            }\n        };\n        /**\n         * Returns the result of the `RTCPeerConnection.getStats()` method\n         * @param selector\n         * @returns\n         */ this.getStats = (selector)=>{\n            return this.pc.getStats(selector);\n        };\n        this.getCodecPreferences = (trackType, preferredCodec)=>{\n            if (trackType === TrackType.VIDEO) {\n                return getPreferredCodecs(\"video\", preferredCodec || \"vp8\");\n            }\n            if (trackType === TrackType.AUDIO) {\n                const defaultAudioCodec = this.isRedEnabled ? \"red\" : \"opus\";\n                const codecToRemove = !this.isRedEnabled ? \"red\" : undefined;\n                return getPreferredCodecs(\"audio\", preferredCodec ?? defaultAudioCodec, codecToRemove);\n            }\n        };\n        this.onIceCandidate = async (e)=>{\n            const { candidate } = e;\n            if (!candidate) {\n                logger$3(\"debug\", \"null ice candidate\");\n                return;\n            }\n            await this.sfuClient.iceTrickle({\n                iceCandidate: getIceCandidate(candidate),\n                peerType: PeerType.PUBLISHER_UNSPECIFIED\n            });\n        };\n        /**\n         * Sets the SFU client to use.\n         *\n         * @param sfuClient the SFU client to use.\n         */ this.setSfuClient = (sfuClient)=>{\n            this.sfuClient = sfuClient;\n        };\n        /**\n         * Performs a migration of this publisher instance to a new SFU.\n         *\n         * Initiates a new `iceRestart` offer/answer exchange with the new SFU.\n         *\n         * @param sfuClient the new SFU client to migrate to.\n         * @param connectionConfig the new connection configuration to use.\n         */ this.migrateTo = async (sfuClient, connectionConfig)=>{\n            this.sfuClient = sfuClient;\n            this.pc.setConfiguration(connectionConfig);\n            this._connectionConfiguration = connectionConfig;\n            const shouldRestartIce = this.pc.iceConnectionState === \"connected\";\n            if (shouldRestartIce) {\n                // negotiate only if there are tracks to publish\n                await this.negotiate({\n                    iceRestart: true\n                });\n            }\n        };\n        /**\n         * Restarts the ICE connection and renegotiates with the SFU.\n         */ this.restartIce = async ()=>{\n            logger$3(\"debug\", \"Restarting ICE connection\");\n            const signalingState = this.pc.signalingState;\n            if (this.isIceRestarting || signalingState === \"have-local-offer\") {\n                logger$3(\"debug\", \"ICE restart is already in progress\");\n                return;\n            }\n            await this.negotiate({\n                iceRestart: true\n            });\n        };\n        this.onNegotiationNeeded = async ()=>{\n            await this.negotiate();\n        };\n        /**\n         * Initiates a new offer/answer exchange with the currently connected SFU.\n         *\n         * @param options the optional offer options to use.\n         */ this.negotiate = async (options)=>{\n            this.isIceRestarting = options?.iceRestart ?? false;\n            const offer = await this.pc.createOffer(options);\n            let sdp = this.mungeCodecs(offer.sdp);\n            if (sdp && this.isPublishing(TrackType.SCREEN_SHARE_AUDIO)) {\n                const transceiver = this.transceiverRegistry[TrackType.SCREEN_SHARE_AUDIO];\n                if (transceiver && transceiver.sender.track) {\n                    const mid = transceiver.mid ?? this.extractMid(sdp, transceiver.sender.track, TrackType.SCREEN_SHARE_AUDIO);\n                    sdp = enableHighQualityAudio(sdp, mid);\n                }\n            }\n            // set the munged SDP back to the offer\n            offer.sdp = sdp;\n            const trackInfos = this.getCurrentTrackInfos(offer.sdp);\n            if (trackInfos.length === 0) {\n                throw new Error(`Can't initiate negotiation without announcing any tracks`);\n            }\n            await this.pc.setLocalDescription(offer);\n            const { response } = await this.sfuClient.setPublisher({\n                sdp: offer.sdp || \"\",\n                tracks: trackInfos\n            });\n            try {\n                await this.pc.setRemoteDescription({\n                    type: \"answer\",\n                    sdp: response.sdp\n                });\n            } catch (e) {\n                logger$3(\"error\", `setRemoteDescription error`, {\n                    sdp: response.sdp,\n                    error: e\n                });\n            }\n            this.isIceRestarting = false;\n            this.sfuClient.iceTrickleBuffer.publisherCandidates.subscribe(async (candidate)=>{\n                try {\n                    const iceCandidate = JSON.parse(candidate.iceCandidate);\n                    await this.pc.addIceCandidate(iceCandidate);\n                } catch (e) {\n                    logger$3(\"warn\", `ICE candidate error`, [\n                        e,\n                        candidate\n                    ]);\n                }\n            });\n        };\n        this.mungeCodecs = (sdp)=>{\n            if (sdp) {\n                sdp = toggleDtx(sdp, this.isDtxEnabled);\n            }\n            return sdp;\n        };\n        this.extractMid = (sdp, track, trackType)=>{\n            if (!sdp) {\n                logger$3(\"warn\", \"No SDP found. Returning empty mid\");\n                return \"\";\n            }\n            logger$3(\"debug\", `No 'mid' found for track. Trying to find it from the Offer SDP`);\n            const parsedSdp = sdp_transform__WEBPACK_IMPORTED_MODULE_2__.parse(sdp);\n            const media = parsedSdp.media.find((m)=>{\n                return m.type === track.kind && // if `msid` is not present, we assume that the track is the first one\n                (m.msid?.includes(track.id) ?? true);\n            });\n            if (typeof media?.mid === \"undefined\") {\n                logger$3(\"debug\", `No mid found in SDP for track type ${track.kind} and id ${track.id}. Attempting to find a heuristic mid`);\n                const heuristicMid = this.transceiverInitOrder.indexOf(trackType);\n                if (heuristicMid !== -1) {\n                    return String(heuristicMid);\n                }\n                logger$3(\"debug\", \"No heuristic mid found. Returning empty mid\");\n                return \"\";\n            }\n            return String(media.mid);\n        };\n        this.getCurrentTrackInfos = (sdp)=>{\n            sdp = sdp || this.pc.localDescription?.sdp;\n            const { settings } = this.state;\n            const targetResolution = settings?.video.target_resolution;\n            return this.pc.getTransceivers().filter((t)=>t.direction === \"sendonly\" && t.sender.track).map((transceiver)=>{\n                const trackType = Number(Object.keys(this.transceiverRegistry).find((key)=>this.transceiverRegistry[key] === transceiver));\n                const track = transceiver.sender.track;\n                let optimalLayers;\n                if (track.readyState === \"live\") {\n                    const publishOpts = this.publishOptionsPerTrackType.get(trackType);\n                    optimalLayers = trackType === TrackType.VIDEO ? findOptimalVideoLayers(track, targetResolution) : trackType === TrackType.SCREEN_SHARE ? findOptimalScreenSharingLayers(track, publishOpts?.screenShareSettings) : [];\n                    this.trackLayersCache[trackType] = optimalLayers;\n                } else {\n                    // we report the last known optimal layers for ended tracks\n                    optimalLayers = this.trackLayersCache[trackType] || [];\n                    logger$3(\"debug\", `Track ${TrackType[trackType]} is ended. Announcing last known optimal layers`, optimalLayers);\n                }\n                const layers = optimalLayers.map((optimalLayer)=>({\n                        rid: optimalLayer.rid || \"\",\n                        bitrate: optimalLayer.maxBitrate || 0,\n                        fps: optimalLayer.maxFramerate || 0,\n                        quality: this.ridToVideoQuality(optimalLayer.rid || \"\"),\n                        videoDimension: {\n                            width: optimalLayer.width,\n                            height: optimalLayer.height\n                        }\n                    }));\n                const isAudioTrack = [\n                    TrackType.AUDIO,\n                    TrackType.SCREEN_SHARE_AUDIO\n                ].includes(trackType);\n                const trackSettings = track.getSettings();\n                const isStereo = isAudioTrack && trackSettings.channelCount === 2;\n                return {\n                    trackId: track.id,\n                    layers: layers,\n                    trackType,\n                    mid: transceiver.mid ?? this.extractMid(sdp, track, trackType),\n                    stereo: isStereo,\n                    dtx: isAudioTrack && this.isDtxEnabled,\n                    red: isAudioTrack && this.isRedEnabled\n                };\n            });\n        };\n        this.onIceCandidateError = (e)=>{\n            const errorMessage = e instanceof RTCPeerConnectionIceErrorEvent && `${e.errorCode}: ${e.errorText}`;\n            const iceState = this.pc.iceConnectionState;\n            const logLevel = iceState === \"connected\" || iceState === \"checking\" ? \"debug\" : \"warn\";\n            logger$3(logLevel, `ICE Candidate error`, errorMessage);\n        };\n        this.onIceConnectionStateChange = ()=>{\n            const state = this.pc.iceConnectionState;\n            logger$3(\"debug\", `ICE Connection state changed to`, state);\n            const hasNetworkConnection = this.state.callingState !== CallingState.OFFLINE;\n            if (state === \"failed\") {\n                logger$3(\"warn\", `Attempting to restart ICE`);\n                this.restartIce().catch((e)=>{\n                    logger$3(\"error\", `ICE restart error`, e);\n                });\n            } else if (state === \"disconnected\" && hasNetworkConnection) {\n                // when in `disconnected` state, the browser may recover automatically,\n                // hence, we delay the ICE restart\n                logger$3(\"warn\", `Scheduling ICE restart in ${this.iceRestartDelay} ms.`);\n                this.iceRestartTimeout = setTimeout(()=>{\n                    // check if the state is still `disconnected` or `failed`\n                    // as the connection may have recovered (or failed) in the meantime\n                    if (this.pc.iceConnectionState === \"disconnected\" || this.pc.iceConnectionState === \"failed\") {\n                        this.restartIce().catch((e)=>{\n                            logger$3(\"error\", `ICE restart error`, e);\n                        });\n                    } else {\n                        logger$3(\"debug\", `Scheduled ICE restart: connection recovered, canceled.`);\n                    }\n                }, this.iceRestartDelay);\n            }\n        };\n        this.onIceGatheringStateChange = ()=>{\n            logger$3(\"debug\", `ICE Gathering State`, this.pc.iceGatheringState);\n        };\n        this.onSignalingStateChange = ()=>{\n            logger$3(\"debug\", `Signaling state changed`, this.pc.signalingState);\n        };\n        this.ridToVideoQuality = (rid)=>{\n            return rid === \"q\" ? VideoQuality.LOW_UNSPECIFIED : rid === \"h\" ? VideoQuality.MID : VideoQuality.HIGH; // default to HIGH\n        };\n        this.pc = this.createPeerConnection(connectionConfig);\n        this.sfuClient = sfuClient;\n        this.state = state;\n        this.isDtxEnabled = isDtxEnabled;\n        this.isRedEnabled = isRedEnabled;\n        this.iceRestartDelay = iceRestartDelay;\n        this.unsubscribeOnIceRestart = dispatcher.on(\"iceRestart\", async (iceRestart)=>{\n            if (iceRestart.peerType !== PeerType.PUBLISHER_UNSPECIFIED) return;\n            await this.restartIce();\n        });\n    }\n}\nconst logger$2 = getLogger([\n    \"Subscriber\"\n]);\n/**\n * A wrapper around the `RTCPeerConnection` that handles the incoming\n * media streams from the SFU.\n */ class Subscriber {\n    /**\n     * Returns the current connection configuration.\n     *\n     * @internal\n     */ get connectionConfiguration() {\n        if (this.pc.getConfiguration) return this.pc.getConfiguration();\n        return this._connectionConfiguration;\n    }\n    /**\n     * Constructs a new `Subscriber` instance.\n     *\n     * @param sfuClient the SFU client to use.\n     * @param dispatcher the dispatcher to use.\n     * @param state the state of the call.\n     * @param connectionConfig the connection configuration to use.\n     * @param iceRestartDelay the delay in milliseconds to wait before restarting ICE when connection goes to `disconnected` state.\n     */ constructor({ sfuClient, dispatcher, state, connectionConfig, iceRestartDelay = 2500 }){\n        this.isIceRestarting = false;\n        /**\n         * Creates a new `RTCPeerConnection` instance with the given configuration.\n         *\n         * @param connectionConfig the connection configuration to use.\n         */ this.createPeerConnection = (connectionConfig)=>{\n            const pc = new RTCPeerConnection(connectionConfig);\n            this._connectionConfiguration = connectionConfig;\n            pc.addEventListener(\"icecandidate\", this.onIceCandidate);\n            pc.addEventListener(\"track\", this.handleOnTrack);\n            pc.addEventListener(\"icecandidateerror\", this.onIceCandidateError);\n            pc.addEventListener(\"iceconnectionstatechange\", this.onIceConnectionStateChange);\n            pc.addEventListener(\"icegatheringstatechange\", this.onIceGatheringStateChange);\n            return pc;\n        };\n        /**\n         * Closes the `RTCPeerConnection` and unsubscribes from the dispatcher.\n         */ this.close = ()=>{\n            clearTimeout(this.iceRestartTimeout);\n            this.unregisterOnSubscriberOffer();\n            this.unregisterOnIceRestart();\n            this.pc.close();\n        };\n        /**\n         * Returns the result of the `RTCPeerConnection.getStats()` method\n         * @param selector\n         * @returns\n         */ this.getStats = (selector)=>{\n            return this.pc.getStats(selector);\n        };\n        /**\n         * Sets the SFU client to use.\n         *\n         * @param sfuClient the SFU client to use.\n         */ this.setSfuClient = (sfuClient)=>{\n            this.sfuClient = sfuClient;\n        };\n        /**\n         * Migrates the subscriber to a new SFU client.\n         *\n         * @param sfuClient the new SFU client to migrate to.\n         * @param connectionConfig the new connection configuration to use.\n         */ this.migrateTo = (sfuClient, connectionConfig)=>{\n            this.setSfuClient(sfuClient);\n            // when migrating, we want to keep the previous subscriber open\n            // until the new one is connected\n            const previousPC = this.pc;\n            // we keep a record of previously available video tracks\n            // so that we can monitor when they become available on the new\n            // subscriber and close the previous one.\n            const trackIdsToMigrate = new Set();\n            previousPC.getReceivers().forEach((r)=>{\n                if (r.track.kind === \"video\") {\n                    trackIdsToMigrate.add(r.track.id);\n                }\n            });\n            // set up a new subscriber peer connection, configured to connect\n            // to the new SFU node\n            const pc = this.createPeerConnection(connectionConfig);\n            let migrationTimeoutId;\n            const cleanupMigration = ()=>{\n                previousPC.close();\n                clearTimeout(migrationTimeoutId);\n            };\n            // When migrating, we want to keep track of the video tracks\n            // that are migrating to the new subscriber.\n            // Once all of them are available, we can close the previous subscriber.\n            const handleTrackMigration = (e)=>{\n                logger$2(\"debug\", `[Migration]: Migrated track: ${e.track.id}, ${e.track.kind}`);\n                trackIdsToMigrate.delete(e.track.id);\n                if (trackIdsToMigrate.size === 0) {\n                    logger$2(\"debug\", `[Migration]: Migration complete`);\n                    pc.removeEventListener(\"track\", handleTrackMigration);\n                    cleanupMigration();\n                }\n            };\n            // When migrating, we want to keep track of the connection state\n            // of the new subscriber.\n            // Once it is connected, we give it a 2-second grace period to receive\n            // all the video tracks that are migrating from the previous subscriber.\n            // After this threshold, we abruptly close the previous subscriber.\n            const handleConnectionStateChange = ()=>{\n                if (pc.connectionState === \"connected\") {\n                    migrationTimeoutId = setTimeout(()=>{\n                        pc.removeEventListener(\"track\", handleTrackMigration);\n                        cleanupMigration();\n                    }, 2000);\n                    pc.removeEventListener(\"connectionstatechange\", handleConnectionStateChange);\n                }\n            };\n            pc.addEventListener(\"track\", handleTrackMigration);\n            pc.addEventListener(\"connectionstatechange\", handleConnectionStateChange);\n            // replace the PeerConnection instance\n            this.pc = pc;\n        };\n        /**\n         * Restarts the ICE connection and renegotiates with the SFU.\n         */ this.restartIce = async ()=>{\n            logger$2(\"debug\", \"Restarting ICE connection\");\n            if (this.pc.signalingState === \"have-remote-offer\") {\n                logger$2(\"debug\", \"ICE restart is already in progress\");\n                return;\n            }\n            const previousIsIceRestarting = this.isIceRestarting;\n            try {\n                this.isIceRestarting = true;\n                await this.sfuClient.iceRestart({\n                    peerType: PeerType.SUBSCRIBER\n                });\n            } catch (e) {\n                // restore the previous state, as our intent for restarting ICE failed\n                this.isIceRestarting = previousIsIceRestarting;\n                throw e;\n            }\n        };\n        this.handleOnTrack = (e)=>{\n            const [primaryStream] = e.streams;\n            // example: `e3f6aaf8-b03d-4911-be36-83f47d37a76a:TRACK_TYPE_VIDEO`\n            const [trackId, trackType] = primaryStream.id.split(\":\");\n            const participantToUpdate = this.state.participants.find((p)=>p.trackLookupPrefix === trackId);\n            logger$2(\"debug\", `[onTrack]: Got remote ${trackType} track for userId: ${participantToUpdate?.userId}`, e.track.id, e.track);\n            if (!participantToUpdate) {\n                logger$2(\"error\", `[onTrack]: Received track for unknown participant: ${trackId}`, e);\n                return;\n            }\n            e.track.addEventListener(\"mute\", ()=>{\n                logger$2(\"info\", `[onTrack]: Track muted: ${participantToUpdate.userId} ${trackType}:${trackId}`);\n            });\n            e.track.addEventListener(\"unmute\", ()=>{\n                logger$2(\"info\", `[onTrack]: Track unmuted: ${participantToUpdate.userId} ${trackType}:${trackId}`);\n            });\n            e.track.addEventListener(\"ended\", ()=>{\n                logger$2(\"info\", `[onTrack]: Track ended: ${participantToUpdate.userId} ${trackType}:${trackId}`);\n            });\n            const streamKindProp = {\n                TRACK_TYPE_AUDIO: \"audioStream\",\n                TRACK_TYPE_VIDEO: \"videoStream\",\n                TRACK_TYPE_SCREEN_SHARE: \"screenShareStream\",\n                TRACK_TYPE_SCREEN_SHARE_AUDIO: \"screenShareAudioStream\"\n            }[trackType];\n            if (!streamKindProp) {\n                logger$2(\"error\", `Unknown track type: ${trackType}`);\n                return;\n            }\n            const previousStream = participantToUpdate[streamKindProp];\n            if (previousStream) {\n                logger$2(\"info\", `[onTrack]: Cleaning up previous remote ${e.track.kind} tracks for userId: ${participantToUpdate.userId}`);\n                previousStream.getTracks().forEach((t)=>{\n                    t.stop();\n                    previousStream.removeTrack(t);\n                });\n            }\n            this.state.updateParticipant(participantToUpdate.sessionId, {\n                [streamKindProp]: primaryStream\n            });\n        };\n        this.onIceCandidate = async (e)=>{\n            const { candidate } = e;\n            if (!candidate) {\n                logger$2(\"debug\", \"null ice candidate\");\n                return;\n            }\n            await this.sfuClient.iceTrickle({\n                iceCandidate: getIceCandidate(candidate),\n                peerType: PeerType.SUBSCRIBER\n            });\n        };\n        this.negotiate = async (subscriberOffer)=>{\n            logger$2(\"info\", `Received subscriberOffer`, subscriberOffer);\n            await this.pc.setRemoteDescription({\n                type: \"offer\",\n                sdp: subscriberOffer.sdp\n            });\n            this.sfuClient.iceTrickleBuffer.subscriberCandidates.subscribe(async (candidate)=>{\n                try {\n                    const iceCandidate = JSON.parse(candidate.iceCandidate);\n                    await this.pc.addIceCandidate(iceCandidate);\n                } catch (e) {\n                    logger$2(\"warn\", `ICE candidate error`, [\n                        e,\n                        candidate\n                    ]);\n                }\n            });\n            const answer = await this.pc.createAnswer();\n            await this.pc.setLocalDescription(answer);\n            await this.sfuClient.sendAnswer({\n                peerType: PeerType.SUBSCRIBER,\n                sdp: answer.sdp || \"\"\n            });\n            this.isIceRestarting = false;\n        };\n        this.onIceConnectionStateChange = ()=>{\n            const state = this.pc.iceConnectionState;\n            logger$2(\"debug\", `ICE connection state changed`, state);\n            // do nothing when ICE is restarting\n            if (this.isIceRestarting) return;\n            const hasNetworkConnection = this.state.callingState !== CallingState.OFFLINE;\n            if (state === \"failed\") {\n                logger$2(\"warn\", `Attempting to restart ICE`);\n                this.restartIce().catch((e)=>{\n                    logger$2(\"error\", `ICE restart failed`, e);\n                });\n            } else if (state === \"disconnected\" && hasNetworkConnection) {\n                // when in `disconnected` state, the browser may recover automatically,\n                // hence, we delay the ICE restart\n                logger$2(\"warn\", `Scheduling ICE restart in ${this.iceRestartDelay} ms.`);\n                this.iceRestartTimeout = setTimeout(()=>{\n                    // check if the state is still `disconnected` or `failed`\n                    // as the connection may have recovered (or failed) in the meantime\n                    if (this.pc.iceConnectionState === \"disconnected\" || this.pc.iceConnectionState === \"failed\") {\n                        this.restartIce().catch((e)=>{\n                            logger$2(\"error\", `ICE restart failed`, e);\n                        });\n                    } else {\n                        logger$2(\"debug\", `Scheduled ICE restart: connection recovered, canceled.`);\n                    }\n                }, 5000);\n            }\n        };\n        this.onIceGatheringStateChange = ()=>{\n            logger$2(\"debug\", `ICE gathering state changed`, this.pc.iceGatheringState);\n        };\n        this.onIceCandidateError = (e)=>{\n            const errorMessage = e instanceof RTCPeerConnectionIceErrorEvent && `${e.errorCode}: ${e.errorText}`;\n            const iceState = this.pc.iceConnectionState;\n            const logLevel = iceState === \"connected\" || iceState === \"checking\" ? \"debug\" : \"warn\";\n            logger$2(logLevel, `ICE Candidate error`, errorMessage);\n        };\n        this.sfuClient = sfuClient;\n        this.state = state;\n        this.iceRestartDelay = iceRestartDelay;\n        this.pc = this.createPeerConnection(connectionConfig);\n        this.unregisterOnSubscriberOffer = dispatcher.on(\"subscriberOffer\", async (subscriberOffer)=>{\n            await this.negotiate(subscriberOffer);\n        });\n        this.unregisterOnIceRestart = dispatcher.on(\"iceRestart\", async (iceRestart)=>{\n            if (iceRestart.peerType !== PeerType.SUBSCRIBER) return;\n            await this.restartIce();\n        });\n    }\n}\nconst createWebSocketSignalChannel = (opts)=>{\n    const logger = getLogger([\n        \"sfu-client\"\n    ]);\n    const { endpoint, onMessage } = opts;\n    const ws = new (isomorphic_ws__WEBPACK_IMPORTED_MODULE_4___default())(endpoint);\n    ws.binaryType = \"arraybuffer\"; // do we need this?\n    ws.addEventListener(\"error\", (e)=>{\n        logger(\"error\", \"Signaling WS channel error\", e);\n    });\n    ws.addEventListener(\"close\", (e)=>{\n        logger(\"info\", \"Signaling WS channel is closed\", e);\n    });\n    ws.addEventListener(\"open\", (e)=>{\n        logger(\"info\", \"Signaling WS channel is open\", e);\n    });\n    ws.addEventListener(\"message\", (e)=>{\n        try {\n            const message = e.data instanceof ArrayBuffer ? SfuEvent.fromBinary(new Uint8Array(e.data)) : SfuEvent.fromJsonString(e.data.toString());\n            onMessage(message);\n        } catch (err) {\n            logger(\"error\", \"Failed to decode a message. Check whether the Proto models match.\", {\n                event: e,\n                error: err\n            });\n        }\n    });\n    return ws;\n};\nconst sleep = (m)=>new Promise((r)=>setTimeout(r, m));\nfunction isFunction(value) {\n    return value && (Object.prototype.toString.call(value) === \"[object Function]\" || \"function\" === typeof value || value instanceof Function);\n}\n/**\n * A map of known error codes.\n */ const KnownCodes = {\n    TOKEN_EXPIRED: 40,\n    WS_CLOSED_SUCCESS: 1000,\n    WS_CLOSED_ABRUPTLY: 1006,\n    WS_POLICY_VIOLATION: 1008\n};\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */ function retryInterval(numberOfFailures) {\n    // try to reconnect in 0.25-5 seconds (random to spread out the load from failures)\n    const max = Math.min(500 + numberOfFailures * 2000, 5000);\n    const min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 5000);\n    return Math.floor(Math.random() * (max - min) + min);\n}\nfunction randomId() {\n    return generateUUIDv4();\n}\nfunction hex(bytes) {\n    let s = \"\";\n    for(let i = 0; i < bytes.length; i++){\n        s += bytes[i].toString(16).padStart(2, \"0\");\n    }\n    return s;\n}\n// https://tools.ietf.org/html/rfc4122\nfunction generateUUIDv4() {\n    const bytes = getRandomBytes(16);\n    bytes[6] = bytes[6] & 0x0f | 0x40; // version\n    bytes[8] = bytes[8] & 0xbf | 0x80; // variant\n    return hex(bytes.subarray(0, 4)) + \"-\" + hex(bytes.subarray(4, 6)) + \"-\" + hex(bytes.subarray(6, 8)) + \"-\" + hex(bytes.subarray(8, 10)) + \"-\" + hex(bytes.subarray(10, 16));\n}\nfunction getRandomValuesWithMathRandom(bytes) {\n    const max = Math.pow(2, 8 * bytes.byteLength / bytes.length);\n    for(let i = 0; i < bytes.length; i++){\n        bytes[i] = Math.random() * max;\n    }\n}\nconst getRandomValues = (()=>{\n    if (typeof crypto !== \"undefined\" && typeof crypto?.getRandomValues !== \"undefined\") {\n        return crypto.getRandomValues.bind(crypto);\n    } else if (typeof msCrypto !== \"undefined\") {\n        return msCrypto.getRandomValues.bind(msCrypto);\n    } else {\n        return getRandomValuesWithMathRandom;\n    }\n})();\nfunction getRandomBytes(length) {\n    const bytes = new Uint8Array(length);\n    getRandomValues(bytes);\n    return bytes;\n}\nfunction convertErrorToJson(err) {\n    const jsonObj = {};\n    if (!err) return jsonObj;\n    try {\n        Object.getOwnPropertyNames(err).forEach((key)=>{\n            jsonObj[key] = Object.getOwnPropertyDescriptor(err, key);\n        });\n    } catch (_) {\n        return {\n            error: \"failed to serialize the error\"\n        };\n    }\n    return jsonObj;\n}\n/**\n * isOnline safely return the navigator.online value for browser env\n * if navigator is not in global object, it always return true\n */ function isOnline(logger) {\n    const nav = typeof navigator !== \"undefined\" ? navigator :  false ? 0 : undefined;\n    if (!nav) {\n        logger(\"warn\", \"isOnline failed to access window.navigator and assume browser is online\");\n        return true;\n    }\n    // RN navigator has undefined for onLine\n    if (typeof nav.onLine !== \"boolean\") {\n        return true;\n    }\n    return nav.onLine;\n}\n/**\n * listenForConnectionChanges - Adds an event listener fired on browser going online or offline\n */ function addConnectionEventListeners(cb) {\n    if (false) {}\n}\nfunction removeConnectionEventListeners(cb) {\n    if (false) {}\n}\n/**\n * The client used for exchanging information with the SFU.\n */ class StreamSfuClient {\n    /**\n     * Constructs a new SFU client.\n     *\n     * @param dispatcher the event dispatcher to use.\n     * @param sfuServer the SFU server to connect to.\n     * @param token the JWT token to use for authentication.\n     * @param sessionId the `sessionId` of the currently connected participant.\n     */ constructor({ dispatcher, sfuServer, token, sessionId }){\n        /**\n         * A buffer for ICE Candidates that are received before\n         * the PeerConnections are ready to handle them.\n         */ this.iceTrickleBuffer = new IceTrickleBuffer();\n        /**\n         * A flag indicating whether the client is currently migrating away\n         * from this SFU.\n         */ this.isMigratingAway = false;\n        /**\n         * A flag indicating that the client connection is broken for the current\n         * client and that a fast-reconnect with a new client should be attempted.\n         */ this.isFastReconnecting = false;\n        this.pingIntervalInMs = 10 * 1000;\n        this.unhealthyTimeoutInMs = this.pingIntervalInMs + 5 * 1000;\n        this.close = (code, reason)=>{\n            this.logger(\"debug\", `Closing SFU WS connection: ${code} - ${reason}`);\n            if (this.signalWs.readyState !== this.signalWs.CLOSED) {\n                this.signalWs.close(code, `js-client: ${reason}`);\n            }\n            this.unsubscribeIceTrickle();\n            clearInterval(this.keepAliveInterval);\n            clearTimeout(this.connectionCheckTimeout);\n        };\n        this.updateSubscriptions = async (subscriptions)=>{\n            return retryable(()=>this.rpc.updateSubscriptions({\n                    sessionId: this.sessionId,\n                    tracks: subscriptions\n                }), this.logger);\n        };\n        this.setPublisher = async (data)=>{\n            return retryable(()=>this.rpc.setPublisher({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.sendAnswer = async (data)=>{\n            return retryable(()=>this.rpc.sendAnswer({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.iceTrickle = async (data)=>{\n            return retryable(()=>this.rpc.iceTrickle({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.iceRestart = async (data)=>{\n            return retryable(()=>this.rpc.iceRestart({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.updateMuteState = async (trackType, muted)=>{\n            return this.updateMuteStates({\n                muteStates: [\n                    {\n                        trackType,\n                        muted\n                    }\n                ]\n            });\n        };\n        this.updateMuteStates = async (data)=>{\n            return retryable(()=>this.rpc.updateMuteStates({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.sendStats = async (stats)=>{\n            return retryable(()=>this.rpc.sendStats({\n                    ...stats,\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.join = async (data)=>{\n            const joinRequest = JoinRequest.create({\n                ...data,\n                sessionId: this.sessionId,\n                token: this.token\n            });\n            return this.send(SfuRequest.create({\n                requestPayload: {\n                    oneofKind: \"joinRequest\",\n                    joinRequest\n                }\n            }));\n        };\n        this.send = async (message)=>{\n            return this.signalReady.then((signal)=>{\n                if (signal.readyState !== signal.OPEN) return;\n                this.logger(\"debug\", `Sending message to: ${this.edgeName}`, SfuRequest.toJson(message));\n                signal.send(SfuRequest.toBinary(message));\n            });\n        };\n        this.keepAlive = ()=>{\n            clearInterval(this.keepAliveInterval);\n            this.keepAliveInterval = setInterval(()=>{\n                this.logger(\"trace\", \"Sending healthCheckRequest to SFU\");\n                const message = SfuRequest.create({\n                    requestPayload: {\n                        oneofKind: \"healthCheckRequest\",\n                        healthCheckRequest: {}\n                    }\n                });\n                this.send(message).catch((e)=>{\n                    this.logger(\"error\", \"Error sending healthCheckRequest to SFU\", e);\n                });\n            }, this.pingIntervalInMs);\n        };\n        this.scheduleConnectionCheck = ()=>{\n            clearTimeout(this.connectionCheckTimeout);\n            this.connectionCheckTimeout = setTimeout(()=>{\n                if (this.lastMessageTimestamp) {\n                    const timeSinceLastMessage = new Date().getTime() - this.lastMessageTimestamp.getTime();\n                    if (timeSinceLastMessage > this.unhealthyTimeoutInMs) {\n                        this.close(StreamSfuClient.ERROR_CONNECTION_UNHEALTHY, `SFU connection unhealthy. Didn't receive any message for ${this.unhealthyTimeoutInMs}ms`);\n                    }\n                }\n            }, this.unhealthyTimeoutInMs);\n        };\n        this.sessionId = sessionId || generateUUIDv4();\n        this.sfuServer = sfuServer;\n        this.edgeName = sfuServer.edge_name;\n        this.token = token;\n        this.logger = getLogger([\n            \"sfu-client\"\n        ]);\n        const logInterceptor = {\n            interceptUnary: (next, method, input, options)=>{\n                this.logger(\"trace\", `Calling SFU RPC method ${method.name}`, {\n                    input,\n                    options\n                });\n                return next(method, input, options);\n            }\n        };\n        this.rpc = createSignalClient({\n            baseUrl: sfuServer.url,\n            interceptors: [\n                withHeaders({\n                    Authorization: `Bearer ${token}`\n                }),\n                logInterceptor\n            ]\n        });\n        // Special handling for the ICETrickle kind of events.\n        // These events might be triggered by the SFU before the initial RTC\n        // connection is established. In that case, those events (ICE candidates)\n        // need to be buffered and later added to the appropriate PeerConnection\n        // once the remoteDescription is known and set.\n        this.unsubscribeIceTrickle = dispatcher.on(\"iceTrickle\", (iceTrickle)=>{\n            this.iceTrickleBuffer.push(iceTrickle);\n        });\n        this.signalWs = createWebSocketSignalChannel({\n            endpoint: sfuServer.ws_endpoint,\n            onMessage: (message)=>{\n                this.lastMessageTimestamp = new Date();\n                this.scheduleConnectionCheck();\n                dispatcher.dispatch(message);\n            }\n        });\n        this.signalReady = new Promise((resolve)=>{\n            const onOpen = ()=>{\n                this.signalWs.removeEventListener(\"open\", onOpen);\n                this.keepAlive();\n                resolve(this.signalWs);\n            };\n            this.signalWs.addEventListener(\"open\", onOpen);\n        });\n    }\n}\n/**\n * The normal closure code. Used for controlled shutdowns.\n */ StreamSfuClient.NORMAL_CLOSURE = 1000;\n/**\n * The error code used when the SFU connection is unhealthy.\n * Usually, this means that no message has been received from the SFU for\n * a certain amount of time (`connectionCheckTimeout`).\n */ StreamSfuClient.ERROR_CONNECTION_UNHEALTHY = 4001;\n/**\n * The error code used when the SFU connection is broken.\n * Usually, this means that the WS connection has been closed unexpectedly.\n * This error code is used to announce a fast-reconnect.\n */ StreamSfuClient.ERROR_CONNECTION_BROKEN = 4002; // used in fast-reconnects\nconst MAX_RETRIES = 5;\n/**\n * Creates a closure which wraps the given RPC call and retries invoking\n * the RPC until it succeeds or the maximum number of retries is reached.\n *\n * Between each retry, there would be a random delay in order to avoid\n * request bursts towards the SFU.\n *\n * @param rpc the closure around the RPC call to execute.\n * @param logger a logger instance to use.\n * @param <I> the type of the request object.\n * @param <O> the type of the response object.\n */ const retryable = async (rpc, logger)=>{\n    let retryAttempt = 0;\n    let rpcCallResult;\n    do {\n        // don't delay the first invocation\n        if (retryAttempt > 0) {\n            await sleep(retryInterval(retryAttempt));\n        }\n        rpcCallResult = await rpc();\n        logger(\"trace\", `SFU RPC response received for ${rpcCallResult.method.name}`, rpcCallResult);\n        // if the RPC call failed, log the error and retry\n        if (rpcCallResult.response.error) {\n            logger(\"error\", `SFU RPC Error (${rpcCallResult.method.name}):`, rpcCallResult.response.error);\n        }\n        retryAttempt++;\n    }while (rpcCallResult.response.error?.shouldRetry && retryAttempt < MAX_RETRIES);\n    if (rpcCallResult.response.error) {\n        throw rpcCallResult.response.error;\n    }\n    return rpcCallResult;\n};\n/**\n * Event handler that watched the delivery of `call.accepted`.\n * Once the event is received, the call is joined.\n */ const watchCallAccepted = (call)=>{\n    return async function onCallAccepted(event) {\n        // We want to discard the event if it's from the current user\n        if (event.user.id === call.currentUserId) return;\n        const { state } = call;\n        if (event.call.created_by.id === call.currentUserId && state.callingState === CallingState.RINGING) {\n            await call.join();\n        }\n    };\n};\n/**\n * Event handler that watches delivery of `call.rejected` Websocket event.\n * Once the event is received, the call is left.\n */ const watchCallRejected = (call)=>{\n    return async function onCallRejected(event) {\n        // We want to discard the event if it's from the current user\n        if (event.user.id === call.currentUserId) return;\n        const { call: eventCall } = event;\n        const { session: callSession } = eventCall;\n        if (!callSession) {\n            call.logger(\"warn\", \"No call session provided. Ignoring call.rejected event.\", event);\n            return;\n        }\n        const rejectedBy = callSession.rejected_by;\n        const { members, callingState } = call.state;\n        if (callingState !== CallingState.RINGING) {\n            call.logger(\"info\", \"Call is not in ringing mode (it is either accepted or rejected already). Ignoring call.rejected event.\", event);\n            return;\n        }\n        if (call.isCreatedByMe) {\n            const everyoneElseRejected = members.filter((m)=>m.user_id !== call.currentUserId).every((m)=>rejectedBy[m.user_id]);\n            if (everyoneElseRejected) {\n                call.logger(\"info\", \"everyone rejected, leaving the call\");\n                await call.leave({\n                    reason: \"ring: everyone rejected\"\n                });\n            }\n        } else {\n            if (rejectedBy[eventCall.created_by.id]) {\n                call.logger(\"info\", \"call creator rejected, leaving call\");\n                await call.leave({\n                    reason: \"ring: creator rejected\"\n                });\n            }\n        }\n    };\n};\n/**\n * Event handler that watches the delivery of `call.ended` Websocket event.\n */ const watchCallEnded = (call)=>{\n    return async function onCallEnded() {\n        const { callingState } = call.state;\n        if (callingState === CallingState.RINGING || callingState === CallingState.JOINED || callingState === CallingState.JOINING) {\n            await call.leave({\n                reason: \"call.ended event received\"\n            });\n        }\n    };\n};\n/**\n * Event handler that watches for `callGrantsUpdated` events.\n *\n * @param state the call state to update.\n */ const watchCallGrantsUpdated = (state)=>{\n    return function onCallGrantsUpdated(event) {\n        const { currentGrants } = event;\n        if (currentGrants) {\n            const { canPublishAudio, canPublishVideo, canScreenshare } = currentGrants;\n            const update = {\n                [OwnCapability.SEND_AUDIO]: canPublishAudio,\n                [OwnCapability.SEND_VIDEO]: canPublishVideo,\n                [OwnCapability.SCREENSHARE]: canScreenshare\n            };\n            const nextCapabilities = state.ownCapabilities.filter((capability)=>update[capability] !== false);\n            Object.entries(update).forEach(([capability, value])=>{\n                if (value && !nextCapabilities.includes(capability)) {\n                    nextCapabilities.push(capability);\n                }\n            });\n            state.setOwnCapabilities(nextCapabilities);\n        }\n    };\n};\nconst logger$1 = getLogger([\n    \"events\"\n]);\n/**\n * An event responder which handles the `changePublishQuality` event.\n */ const watchChangePublishQuality = (dispatcher, call)=>{\n    return dispatcher.on(\"changePublishQuality\", (e)=>{\n        const { videoSenders } = e;\n        videoSenders.forEach((videoSender)=>{\n            const { layers } = videoSender;\n            call.updatePublishQuality(layers.filter((l)=>l.active));\n        });\n    });\n};\nconst watchConnectionQualityChanged = (dispatcher, state)=>{\n    return dispatcher.on(\"connectionQualityChanged\", (e)=>{\n        const { connectionQualityUpdates } = e;\n        if (!connectionQualityUpdates) return;\n        state.updateParticipants(connectionQualityUpdates.reduce((patches, update)=>{\n            const { sessionId, connectionQuality } = update;\n            patches[sessionId] = {\n                connectionQuality\n            };\n            return patches;\n        }, {}));\n    });\n};\n/**\n * Updates the approximate number of participants in the call by peeking at the\n * health check events that our SFU sends.\n */ const watchParticipantCountChanged = (dispatcher, state)=>{\n    return dispatcher.on(\"healthCheckResponse\", (e)=>{\n        const { participantCount } = e;\n        if (participantCount) {\n            state.setParticipantCount(participantCount.total);\n            state.setAnonymousParticipantCount(participantCount.anonymous);\n        }\n    });\n};\nconst watchLiveEnded = (dispatcher, call)=>{\n    return dispatcher.on(\"error\", (e)=>{\n        if (e.error && e.error.code !== ErrorCode.LIVE_ENDED) return;\n        if (!call.permissionsContext.hasPermission(OwnCapability.JOIN_BACKSTAGE)) {\n            call.leave({\n                reason: \"live ended\"\n            }).catch((err)=>{\n                logger$1(\"error\", \"Failed to leave call after live ended\", err);\n            });\n        }\n    });\n};\n/**\n * Watches and logs the errors reported by the currently connected SFU.\n */ const watchSfuErrorReports = (dispatcher)=>{\n    return dispatcher.on(\"error\", (e)=>{\n        if (!e.error) return;\n        const { error } = e;\n        logger$1(\"error\", \"SFU reported error\", {\n            code: ErrorCode[error.code],\n            message: error.message,\n            shouldRetry: error.shouldRetry\n        });\n    });\n};\n/**\n * Watches for `pinsUpdated` events and updates the pinned state of participants\n * in the call.\n */ const watchPinsUpdated = (state)=>{\n    return function onPinsUpdated(e) {\n        const { pins } = e;\n        state.setServerSidePins(pins);\n    };\n};\n/**\n * An event handler that handles soft mutes.\n *\n * @param call the call.\n */ const handleRemoteSoftMute = (call)=>{\n    return call.on(\"trackUnpublished\", async (event)=>{\n        const { cause, type, sessionId } = event;\n        const { localParticipant } = call.state;\n        if (cause === TrackUnpublishReason.MODERATION && sessionId === localParticipant?.sessionId) {\n            const logger = call.logger;\n            logger(\"info\", `Local participant's ${TrackType[type]} track is muted remotely`);\n            try {\n                if (type === TrackType.VIDEO) {\n                    await call.camera.disable();\n                } else if (type === TrackType.AUDIO) {\n                    await call.microphone.disable();\n                } else {\n                    logger(\"warn\", \"Unsupported track type to soft mute\", TrackType[type]);\n                }\n                if (call.publisher?.isPublishing(type)) {\n                    await call.stopPublish(type);\n                }\n            } catch (error) {\n                logger(\"error\", \"Failed to stop publishing\", error);\n            }\n        }\n    });\n};\n/**\n * An event responder which handles the `participantJoined` event.\n */ const watchParticipantJoined = (state)=>{\n    return function onParticipantJoined(e) {\n        const { participant } = e;\n        if (!participant) return;\n        // `state.updateOrAddParticipant` acts as a safeguard against\n        // potential duplicate events from the SFU.\n        //\n        // Although the SFU should not send duplicate events, we have seen\n        // some race conditions in the past during the `join-flow` where\n        // the SFU would send participant info as part of the `join`\n        // response and then follow up with a `participantJoined` event for\n        // already announced participants.\n        state.updateOrAddParticipant(participant.sessionId, Object.assign(participant, {\n            viewportVisibilityState: {\n                videoTrack: VisibilityState.UNKNOWN,\n                screenShareTrack: VisibilityState.UNKNOWN\n            }\n        }));\n    };\n};\n/**\n * An event responder which handles the `participantLeft` event.\n */ const watchParticipantLeft = (state)=>{\n    return function onParticipantLeft(e) {\n        const { participant } = e;\n        if (!participant) return;\n        state.setParticipants((participants)=>participants.filter((p)=>p.sessionId !== participant.sessionId));\n    };\n};\n/**\n * An event responder which handles the `trackPublished` event.\n * The SFU will send this event when a participant publishes a track.\n */ const watchTrackPublished = (state)=>{\n    return function onTrackPublished(e) {\n        const { type, sessionId, participant } = e;\n        // An optimization for large calls.\n        // After a certain threshold, the SFU would stop emitting `participantJoined`\n        // events, and instead, it would only provide the participant's information\n        // once they start publishing a track.\n        if (participant) {\n            state.updateOrAddParticipant(sessionId, participant);\n        } else {\n            state.updateParticipant(sessionId, (p)=>({\n                    publishedTracks: [\n                        ...p.publishedTracks,\n                        type\n                    ].filter(unique)\n                }));\n        }\n    };\n};\n/**\n * An event responder which handles the `trackUnpublished` event.\n * The SFU will send this event when a participant unpublishes a track.\n */ const watchTrackUnpublished = (state)=>{\n    return function onTrackUnpublished(e) {\n        const { type, sessionId, participant } = e;\n        // An optimization for large calls. See `watchTrackPublished`.\n        if (participant) {\n            state.updateOrAddParticipant(sessionId, participant);\n        } else {\n            state.updateParticipant(sessionId, (p)=>({\n                    publishedTracks: p.publishedTracks.filter((t)=>t !== type)\n                }));\n        }\n    };\n};\nconst unique = (v, i, arr)=>arr.indexOf(v) === i;\n/**\n * Watches for `dominantSpeakerChanged` events.\n */ const watchDominantSpeakerChanged = (dispatcher, state)=>{\n    return dispatcher.on(\"dominantSpeakerChanged\", (e)=>{\n        const { sessionId } = e;\n        if (sessionId === state.dominantSpeaker?.sessionId) return;\n        state.setParticipants((participants)=>participants.map((participant)=>{\n                // mark the new dominant speaker\n                if (participant.sessionId === sessionId) {\n                    return {\n                        ...participant,\n                        isDominantSpeaker: true\n                    };\n                }\n                // unmark the old dominant speaker\n                if (participant.isDominantSpeaker) {\n                    return {\n                        ...participant,\n                        isDominantSpeaker: false\n                    };\n                }\n                return participant; // no change\n            }));\n    });\n};\n/**\n * Watches for `audioLevelChanged` events.\n */ const watchAudioLevelChanged = (dispatcher, state)=>{\n    return dispatcher.on(\"audioLevelChanged\", (e)=>{\n        const { audioLevels } = e;\n        state.updateParticipants(audioLevels.reduce((patches, current)=>{\n            patches[current.sessionId] = {\n                audioLevel: current.level,\n                isSpeaking: current.isSpeaking\n            };\n            return patches;\n        }, {}));\n    });\n};\n/**\n * Registers the default event handlers for a call during its lifecycle.\n *\n * @param call the call to register event handlers for.\n * @param state the call state.\n * @param dispatcher the dispatcher.\n */ const registerEventHandlers = (call, state, dispatcher)=>{\n    const eventHandlers = [\n        call.on(\"call.ended\", watchCallEnded(call)),\n        watchLiveEnded(dispatcher, call),\n        watchSfuErrorReports(dispatcher),\n        watchChangePublishQuality(dispatcher, call),\n        watchConnectionQualityChanged(dispatcher, state),\n        watchParticipantCountChanged(dispatcher, state),\n        call.on(\"participantJoined\", watchParticipantJoined(state)),\n        call.on(\"participantLeft\", watchParticipantLeft(state)),\n        call.on(\"trackPublished\", watchTrackPublished(state)),\n        call.on(\"trackUnpublished\", watchTrackUnpublished(state)),\n        watchAudioLevelChanged(dispatcher, state),\n        watchDominantSpeakerChanged(dispatcher, state),\n        call.on(\"callGrantsUpdated\", watchCallGrantsUpdated(state)),\n        call.on(\"pinsUpdated\", watchPinsUpdated(state)),\n        handleRemoteSoftMute(call)\n    ];\n    if (call.ringing) {\n        // these events are only relevant when the call is ringing\n        eventHandlers.push(registerRingingCallEventHandlers(call));\n    }\n    return ()=>{\n        eventHandlers.forEach((unsubscribe)=>unsubscribe());\n    };\n};\n/**\n * Registers event handlers for a call that is of ringing type.\n *\n * @param call the call to register event handlers for.\n */ const registerRingingCallEventHandlers = (call)=>{\n    const coordinatorRingEvents = {\n        \"call.accepted\": watchCallAccepted(call),\n        \"call.rejected\": watchCallRejected(call)\n    };\n    const eventHandlers = Object.keys(coordinatorRingEvents).map((event)=>{\n        const eventName = event;\n        return call.on(eventName, coordinatorRingEvents[eventName]);\n    });\n    return ()=>{\n        eventHandlers.forEach((unsubscribe)=>unsubscribe());\n    };\n};\n/**\n * Collects all necessary information to join a call, talks to the coordinator\n * and returns the necessary information to join the call.\n *\n * @param httpClient the http client to use.\n * @param type the type of the call.\n * @param id the id of the call.\n * @param data the data for the call.\n */ const join = async (httpClient, type, id, data)=>{\n    const { call, credentials, members, own_capabilities, stats_options } = await doJoin(httpClient, type, id, data);\n    return {\n        connectionConfig: toRtcConfiguration(credentials.ice_servers),\n        sfuServer: credentials.server,\n        token: credentials.token,\n        metadata: call,\n        members,\n        ownCapabilities: own_capabilities,\n        statsOptions: stats_options\n    };\n};\nconst doJoin = async (httpClient, type, id, data)=>{\n    const location = await httpClient.getLocationHint();\n    const request = {\n        ...data,\n        location\n    };\n    return httpClient.post(`/call/${type}/${id}/join`, request);\n};\nconst toRtcConfiguration = (config)=>{\n    if (!config || config.length === 0) return undefined;\n    const rtcConfig = {\n        iceServers: config.map((ice)=>({\n                urls: ice.urls,\n                username: ice.username,\n                credential: ice.password\n            }))\n    };\n    return rtcConfig;\n};\n/**\n * Flatten the stats report into an array of stats objects.\n *\n * @param report the report to flatten.\n */ const flatten$1 = (report)=>{\n    const stats = [];\n    report.forEach((s)=>{\n        stats.push(s);\n    });\n    return stats;\n};\n/**\n * Creates a new StatsReporter instance that collects metrics about the ongoing call and reports them to the state store\n */ const createStatsReporter = ({ subscriber, publisher, state, pollingIntervalInMs = 2000 })=>{\n    const logger = getLogger([\n        \"stats\"\n    ]);\n    const getRawStatsForTrack = async (kind, selector)=>{\n        if (kind === \"subscriber\" && subscriber) {\n            return subscriber.getStats(selector);\n        } else if (kind === \"publisher\" && publisher) {\n            return publisher.getStats(selector);\n        } else {\n            logger(\"warn\", `Can't retrieve RTC stats for ${kind}`);\n            return undefined;\n        }\n    };\n    const getStatsForStream = async (kind, mediaStream)=>{\n        const pc = kind === \"subscriber\" ? subscriber : publisher;\n        const statsForStream = [];\n        for (let track of mediaStream.getTracks()){\n            const report = await pc.getStats(track);\n            const stats = transform(report, {\n                // @ts-ignore\n                trackKind: track.kind,\n                kind\n            });\n            statsForStream.push(stats);\n        }\n        return statsForStream;\n    };\n    const startReportingStatsFor = (sessionId)=>{\n        sessionIdsToTrack.add(sessionId);\n        void run();\n    };\n    const stopReportingStatsFor = (sessionId)=>{\n        sessionIdsToTrack.delete(sessionId);\n        void run();\n    };\n    const sessionIdsToTrack = new Set();\n    /**\n     * The main stats reporting loop.\n     */ const run = async ()=>{\n        const participantStats = {};\n        const sessionIds = new Set(sessionIdsToTrack);\n        if (sessionIds.size > 0) {\n            for (let participant of state.participants){\n                if (!sessionIds.has(participant.sessionId)) continue;\n                const kind = participant.isLocalParticipant ? \"publisher\" : \"subscriber\";\n                try {\n                    const mergedStream = new MediaStream([\n                        ...participant.videoStream?.getVideoTracks() || [],\n                        ...participant.audioStream?.getAudioTracks() || []\n                    ]);\n                    participantStats[participant.sessionId] = await getStatsForStream(kind, mergedStream);\n                    mergedStream.getTracks().forEach((t)=>{\n                        mergedStream.removeTrack(t);\n                    });\n                } catch (e) {\n                    logger(\"error\", `Failed to collect stats for ${kind} if ${participant.userId}`, e);\n                }\n            }\n        }\n        const [subscriberStats, publisherStats] = await Promise.all([\n            subscriber.getStats().then((report)=>transform(report, {\n                    kind: \"subscriber\",\n                    trackKind: \"video\"\n                })).then(aggregate),\n            publisher.getStats().then((report)=>transform(report, {\n                    kind: \"publisher\",\n                    trackKind: \"video\"\n                })).then(aggregate)\n        ]);\n        const [subscriberRawStats, publisherRawStats] = await Promise.all([\n            getRawStatsForTrack(\"subscriber\"),\n            getRawStatsForTrack(\"publisher\")\n        ]);\n        state.setCallStatsReport({\n            datacenter: publisher.sfuClient.edgeName,\n            publisherStats,\n            subscriberStats,\n            subscriberRawStats,\n            publisherRawStats,\n            participants: participantStats,\n            timestamp: Date.now()\n        });\n    };\n    let timeoutId;\n    if (pollingIntervalInMs > 0) {\n        const loop = async ()=>{\n            await run().catch((e)=>{\n                logger(\"debug\", \"Failed to collect stats\", e);\n            });\n            timeoutId = setTimeout(loop, pollingIntervalInMs);\n        };\n        void loop();\n    }\n    const stop = ()=>{\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n    };\n    return {\n        getRawStatsForTrack,\n        getStatsForStream,\n        startReportingStatsFor,\n        stopReportingStatsFor,\n        stop\n    };\n};\n/**\n * Transforms raw RTC stats into a slimmer and uniform across browsers format.\n *\n * @param report the report to transform.\n * @param opts the transform options.\n */ const transform = (report, opts)=>{\n    const { trackKind, kind } = opts;\n    const direction = kind === \"subscriber\" ? \"inbound-rtp\" : \"outbound-rtp\";\n    const stats = flatten$1(report);\n    const streams = stats.filter((stat)=>stat.type === direction && stat.kind === trackKind).map((stat)=>{\n        const rtcStreamStats = stat;\n        const codec = stats.find((s)=>s.type === \"codec\" && s.id === rtcStreamStats.codecId); // FIXME OL: incorrect type!\n        const transport = stats.find((s)=>s.type === \"transport\" && s.id === rtcStreamStats.transportId);\n        let roundTripTime;\n        if (transport && transport.dtlsState === \"connected\") {\n            const candidatePair = stats.find((s)=>s.type === \"candidate-pair\" && s.id === transport.selectedCandidatePairId);\n            roundTripTime = candidatePair?.currentRoundTripTime;\n        }\n        return {\n            bytesSent: rtcStreamStats.bytesSent,\n            bytesReceived: rtcStreamStats.bytesReceived,\n            codec: codec?.mimeType,\n            currentRoundTripTime: roundTripTime,\n            frameHeight: rtcStreamStats.frameHeight,\n            frameWidth: rtcStreamStats.frameWidth,\n            framesPerSecond: rtcStreamStats.framesPerSecond,\n            jitter: rtcStreamStats.jitter,\n            kind: rtcStreamStats.kind,\n            // @ts-ignore: available in Chrome only, TS doesn't recognize this\n            qualityLimitationReason: rtcStreamStats.qualityLimitationReason,\n            rid: rtcStreamStats.rid,\n            ssrc: rtcStreamStats.ssrc\n        };\n    });\n    return {\n        rawStats: report,\n        streams,\n        timestamp: Date.now()\n    };\n};\n/**\n * Aggregates generic stats.\n *\n * @param stats the stats to aggregate.\n */ const aggregate = (stats)=>{\n    const aggregatedStats = {\n        rawReport: stats,\n        totalBytesSent: 0,\n        totalBytesReceived: 0,\n        averageJitterInMs: 0,\n        averageRoundTripTimeInMs: 0,\n        qualityLimitationReasons: \"none\",\n        highestFrameWidth: 0,\n        highestFrameHeight: 0,\n        highestFramesPerSecond: 0,\n        timestamp: Date.now()\n    };\n    let maxArea = -1;\n    const area = (w, h)=>w * h;\n    const qualityLimitationReasons = new Set();\n    const streams = stats.streams;\n    const report = streams.reduce((acc, stream)=>{\n        acc.totalBytesSent += stream.bytesSent || 0;\n        acc.totalBytesReceived += stream.bytesReceived || 0;\n        acc.averageJitterInMs += stream.jitter || 0;\n        acc.averageRoundTripTimeInMs += stream.currentRoundTripTime || 0;\n        // naive calculation of the highest resolution\n        const streamArea = area(stream.frameWidth || 0, stream.frameHeight || 0);\n        if (streamArea > maxArea) {\n            acc.highestFrameWidth = stream.frameWidth || 0;\n            acc.highestFrameHeight = stream.frameHeight || 0;\n            acc.highestFramesPerSecond = stream.framesPerSecond || 0;\n            maxArea = streamArea;\n        }\n        qualityLimitationReasons.add(stream.qualityLimitationReason || \"\");\n        return acc;\n    }, aggregatedStats);\n    if (streams.length > 0) {\n        report.averageJitterInMs = Math.round(report.averageJitterInMs / streams.length * 1000);\n        report.averageRoundTripTimeInMs = Math.round(report.averageRoundTripTimeInMs / streams.length * 1000);\n    }\n    const qualityLimitationReason = [\n        qualityLimitationReasons.has(\"cpu\") && \"cpu\",\n        qualityLimitationReasons.has(\"bandwidth\") && \"bandwidth\",\n        qualityLimitationReasons.has(\"other\") && \"other\"\n    ].filter(Boolean).join(\", \");\n    if (qualityLimitationReason) {\n        report.qualityLimitationReasons = qualityLimitationReason;\n    }\n    return report;\n};\nclass SfuStatsReporter {\n    constructor(sfuClient, { options, clientDetails, subscriber, publisher }){\n        this.logger = getLogger([\n            \"SfuStatsReporter\"\n        ]);\n        this.run = async ()=>{\n            const [subscriberStats, publisherStats] = await Promise.all([\n                this.subscriber.getStats().then(flatten$1).then(JSON.stringify),\n                this.publisher.getStats().then(flatten$1).then(JSON.stringify)\n            ]);\n            await this.sfuClient.sendStats({\n                sdk: this.sdkName,\n                sdkVersion: this.sdkVersion,\n                webrtcVersion: this.webRTCVersion,\n                subscriberStats,\n                publisherStats\n            });\n        };\n        this.start = ()=>{\n            if (this.options.reporting_interval_ms <= 0) return;\n            this.intervalId = setInterval(()=>{\n                this.run().catch((err)=>{\n                    this.logger(\"warn\", \"Failed to report stats\", err);\n                });\n            }, this.options.reporting_interval_ms);\n        };\n        this.stop = ()=>{\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n        };\n        this.sfuClient = sfuClient;\n        this.options = options;\n        this.subscriber = subscriber;\n        this.publisher = publisher;\n        const webRTCInfo = getWebRTCInfo();\n        const { sdk, browser } = clientDetails;\n        this.sdkName = sdk && sdk.type === SdkType.REACT ? \"stream-react\" : sdk && sdk.type === SdkType.REACT_NATIVE ? \"stream-react-native\" : \"stream-js\";\n        this.sdkVersion = sdk ? `${sdk.major}.${sdk.minor}.${sdk.patch}` : \"0.0.0-development\";\n        // The WebRTC version if passed from the SDK, it is taken else the browser info is sent.\n        this.webRTCVersion = webRTCInfo?.version || `${browser?.name || \"\"}-${browser?.version || \"\"}` || \"N/A\";\n    }\n}\nconst DEFAULT_THRESHOLD = 0.35;\nclass ViewportTracker {\n    constructor(){\n        /**\n         * @private\n         */ this.elementHandlerMap = new Map();\n        /**\n         * @private\n         */ this.observer = null;\n        // in React children render before viewport is set, add\n        // them to the queue and observe them once the observer is ready\n        /**\n         * @private\n         */ this.queueSet = new Set();\n        /**\n         * Method to set scrollable viewport as root for the IntersectionObserver, returns\n         * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n         *\n         * @param viewportElement\n         * @param options\n         * @returns Unobserve\n         */ this.setViewport = (viewportElement, options)=>{\n            const cleanup = ()=>{\n                this.observer?.disconnect();\n                this.observer = null;\n                this.elementHandlerMap.clear();\n            };\n            this.observer = new IntersectionObserver((entries)=>{\n                entries.forEach((entry)=>{\n                    const handler = this.elementHandlerMap.get(entry.target);\n                    handler?.(entry);\n                });\n            }, {\n                root: viewportElement,\n                ...options,\n                threshold: options?.threshold ?? DEFAULT_THRESHOLD\n            });\n            if (this.queueSet.size) {\n                this.queueSet.forEach(([queueElement, queueHandler])=>{\n                    // check if element which requested observation is\n                    // a child of a viewport element, skip if isn't\n                    if (!viewportElement.contains(queueElement)) return;\n                    this.observer.observe(queueElement);\n                    this.elementHandlerMap.set(queueElement, queueHandler);\n                });\n                this.queueSet.clear();\n            }\n            return cleanup;\n        };\n        /**\n         * Method to set element to observe and handler to be triggered whenever IntersectionObserver\n         * detects a possible change in element's visibility within specified viewport, returns\n         * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n         *\n         * @param element\n         * @param handler\n         * @returns Unobserve\n         */ this.observe = (element, handler)=>{\n            const queueItem = [\n                element,\n                handler\n            ];\n            const cleanup = ()=>{\n                this.elementHandlerMap.delete(element);\n                this.observer?.unobserve(element);\n                this.queueSet.delete(queueItem);\n            };\n            if (this.elementHandlerMap.has(element)) return cleanup;\n            if (!this.observer) {\n                this.queueSet.add(queueItem);\n                return cleanup;\n            }\n            if (this.observer.root.contains(element)) {\n                this.elementHandlerMap.set(element, handler);\n                this.observer.observe(element);\n            }\n            return cleanup;\n        };\n    }\n}\n/**\n * Checks whether the current browser is Safari.\n */ const isSafari = ()=>{\n    if (typeof navigator === \"undefined\") return false;\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent || \"\");\n};\n/**\n * Checks whether the current browser is Firefox.\n */ const isFirefox = ()=>{\n    if (typeof navigator === \"undefined\") return false;\n    return navigator.userAgent?.includes(\"Firefox\");\n};\n/**\n * Checks whether the current browser is Google Chrome.\n */ const isChrome = ()=>{\n    if (typeof navigator === \"undefined\") return false;\n    return navigator.userAgent?.includes(\"Chrome\");\n};\nvar browsers = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    isChrome: isChrome,\n    isFirefox: isFirefox,\n    isSafari: isSafari\n});\nconst DEFAULT_VIEWPORT_VISIBILITY_STATE = {\n    videoTrack: VisibilityState.UNKNOWN,\n    screenShareTrack: VisibilityState.UNKNOWN\n};\n/**\n * A manager class that handles dynascale related tasks like:\n *\n * - binding video elements to session ids\n * - binding audio elements to session ids\n * - tracking element visibility\n * - updating subscriptions based on viewport visibility\n * - updating subscriptions based on video element dimensions\n * - updating subscriptions based on published tracks\n */ class DynascaleManager {\n    /**\n     * Creates a new DynascaleManager instance.\n     *\n     * @param call the call to manage.\n     */ constructor(call){\n        /**\n         * The viewport tracker instance.\n         */ this.viewportTracker = new ViewportTracker();\n        this.logger = getLogger([\n            \"DynascaleManager\"\n        ]);\n        /**\n         * Will begin tracking the given element for visibility changes within the\n         * configured viewport element (`call.setViewport`).\n         *\n         * @param element the element to track.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         * @returns Untrack.\n         */ this.trackElementVisibility = (element, sessionId, trackType)=>{\n            const cleanup = this.viewportTracker.observe(element, (entry)=>{\n                this.call.state.updateParticipant(sessionId, (participant)=>{\n                    const previousVisibilityState = participant.viewportVisibilityState ?? DEFAULT_VIEWPORT_VISIBILITY_STATE;\n                    // observer triggers when the element is \"moved\" to be a fullscreen element\n                    // keep it VISIBLE if that happens to prevent fullscreen with placeholder\n                    const isVisible = entry.isIntersecting || document.fullscreenElement === element ? VisibilityState.VISIBLE : VisibilityState.INVISIBLE;\n                    return {\n                        ...participant,\n                        viewportVisibilityState: {\n                            ...previousVisibilityState,\n                            [trackType]: isVisible\n                        }\n                    };\n                });\n            });\n            return ()=>{\n                cleanup();\n                // reset visibility state to UNKNOWN upon cleanup\n                // so that the layouts that are not actively observed\n                // can still function normally (runtime layout switching)\n                this.call.state.updateParticipant(sessionId, (participant)=>{\n                    const previousVisibilityState = participant.viewportVisibilityState ?? DEFAULT_VIEWPORT_VISIBILITY_STATE;\n                    return {\n                        ...participant,\n                        viewportVisibilityState: {\n                            ...previousVisibilityState,\n                            [trackType]: VisibilityState.UNKNOWN\n                        }\n                    };\n                });\n            };\n        };\n        /**\n         * Sets the viewport element to track bound video elements for visibility.\n         *\n         * @param element the viewport element.\n         */ this.setViewport = (element)=>{\n            return this.viewportTracker.setViewport(element);\n        };\n        /**\n         * Binds a DOM <video> element to the given session id.\n         * This method will make sure that the video element will play\n         * the correct video stream for the given session id.\n         *\n         * Under the hood, it would also keep track of the video element dimensions\n         * and update the subscription accordingly in order to optimize the bandwidth.\n         *\n         * If a \"viewport\" is configured, the video element will be automatically\n         * tracked for visibility and the subscription will be updated accordingly.\n         *\n         * @param videoElement the video element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         */ this.bindVideoElement = (videoElement, sessionId, trackType)=>{\n            const boundParticipant = this.call.state.findParticipantBySessionId(sessionId);\n            if (!boundParticipant) return;\n            const requestTrackWithDimensions = (debounceType, dimension)=>{\n                if (dimension && (dimension.width === 0 || dimension.height === 0)) {\n                    // ignore 0x0 dimensions. this can happen when the video element\n                    // is not visible (e.g., has display: none).\n                    // we treat this as \"unsubscription\" as we don't want to keep\n                    // consuming bandwidth for a video that is not visible on the screen.\n                    this.logger(\"debug\", `Ignoring 0x0 dimension`, boundParticipant);\n                    dimension = undefined;\n                }\n                this.call.updateSubscriptionsPartial(trackType, {\n                    [sessionId]: {\n                        dimension\n                    }\n                }, debounceType);\n            };\n            const participant$ = this.call.state.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.map)((participants)=>participants.find((participant)=>participant.sessionId === sessionId)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.takeWhile)((participant)=>!!participant), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)({\n                bufferSize: 1,\n                refCount: true\n            }));\n            /**\n             * Since the video elements are now being removed from the DOM (React SDK) upon\n             * visibility change, this subscription is not in use an stays here only for the\n             * plain JS integrations where integrators might choose not to remove the video\n             * elements from the DOM.\n             */ // keep copy for resize observer handler\n            let viewportVisibilityState;\n            const viewportVisibilityStateSubscription = boundParticipant.isLocalParticipant ? null : participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.map)((p)=>p.viewportVisibilityState?.[trackType]), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.distinctUntilChanged)()).subscribe((nextViewportVisibilityState)=>{\n                // skip initial trigger\n                if (!viewportVisibilityState) {\n                    viewportVisibilityState = nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n                    return;\n                }\n                viewportVisibilityState = nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n                if (nextViewportVisibilityState === VisibilityState.INVISIBLE) {\n                    return requestTrackWithDimensions(DebounceType.MEDIUM, undefined);\n                }\n                requestTrackWithDimensions(DebounceType.MEDIUM, {\n                    width: videoElement.clientWidth,\n                    height: videoElement.clientHeight\n                });\n            });\n            let lastDimensions;\n            const resizeObserver = boundParticipant.isLocalParticipant ? null : new ResizeObserver(()=>{\n                const currentDimensions = `${videoElement.clientWidth},${videoElement.clientHeight}`;\n                // skip initial trigger\n                if (!lastDimensions) {\n                    lastDimensions = currentDimensions;\n                    return;\n                }\n                if (lastDimensions === currentDimensions || viewportVisibilityState === VisibilityState.INVISIBLE) {\n                    return;\n                }\n                requestTrackWithDimensions(DebounceType.SLOW, {\n                    width: videoElement.clientWidth,\n                    height: videoElement.clientHeight\n                });\n                lastDimensions = currentDimensions;\n            });\n            resizeObserver?.observe(videoElement);\n            // element renders and gets bound - track subscription gets\n            // triggered first other ones get skipped on initial subscriptions\n            const publishedTracksSubscription = boundParticipant.isLocalParticipant ? null : participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.distinctUntilKeyChanged)(\"publishedTracks\"), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.map)((p)=>p.publishedTracks.includes(trackType === \"videoTrack\" ? TrackType.VIDEO : TrackType.SCREEN_SHARE)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.distinctUntilChanged)()).subscribe((isPublishing)=>{\n                if (isPublishing) {\n                    // the participant just started to publish a track\n                    requestTrackWithDimensions(DebounceType.FAST, {\n                        width: videoElement.clientWidth,\n                        height: videoElement.clientHeight\n                    });\n                } else {\n                    // the participant just stopped publishing a track\n                    requestTrackWithDimensions(DebounceType.FAST, undefined);\n                }\n            });\n            videoElement.autoplay = true;\n            videoElement.playsInline = true;\n            // explicitly marking the element as muted will allow autoplay to work\n            // without prior user interaction:\n            // https://developer.mozilla.org/en-US/docs/Web/Media/Autoplay_guide\n            videoElement.muted = true;\n            const streamSubscription = participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.distinctUntilKeyChanged)(trackType === \"videoTrack\" ? \"videoStream\" : \"screenShareStream\")).subscribe((p)=>{\n                const source = trackType === \"videoTrack\" ? p.videoStream : p.screenShareStream;\n                if (videoElement.srcObject === source) return;\n                videoElement.srcObject = source ?? null;\n                if (isSafari() || isFirefox()) {\n                    setTimeout(()=>{\n                        videoElement.srcObject = source ?? null;\n                        videoElement.play().catch((e)=>{\n                            this.logger(\"warn\", `Failed to play stream`, e);\n                        });\n                    // we add extra delay until we attempt to force-play\n                    // the participant's media stream in Firefox and Safari,\n                    // as they seem to have some timing issues\n                    }, 25);\n                }\n            });\n            return ()=>{\n                requestTrackWithDimensions(DebounceType.FAST, undefined);\n                viewportVisibilityStateSubscription?.unsubscribe();\n                publishedTracksSubscription?.unsubscribe();\n                streamSubscription.unsubscribe();\n                resizeObserver?.disconnect();\n            };\n        };\n        /**\n         * Binds a DOM <audio> element to the given session id.\n         *\n         * This method will make sure that the audio element will\n         * play the correct audio stream for the given session id.\n         *\n         * @param audioElement the audio element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of audio.\n         * @returns a cleanup function that will unbind the audio element.\n         */ this.bindAudioElement = (audioElement, sessionId, trackType)=>{\n            const participant = this.call.state.findParticipantBySessionId(sessionId);\n            if (!participant || participant.isLocalParticipant) return;\n            const participant$ = this.call.state.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.map)((participants)=>participants.find((p)=>p.sessionId === sessionId)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.takeWhile)((p)=>!!p), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)({\n                bufferSize: 1,\n                refCount: true\n            }));\n            const updateMediaStreamSubscription = participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.distinctUntilKeyChanged)(trackType === \"screenShareAudioTrack\" ? \"screenShareAudioStream\" : \"audioStream\")).subscribe((p)=>{\n                const source = trackType === \"screenShareAudioTrack\" ? p.screenShareAudioStream : p.audioStream;\n                if (audioElement.srcObject === source) return;\n                setTimeout(()=>{\n                    audioElement.srcObject = source ?? null;\n                    if (audioElement.srcObject) {\n                        audioElement.play().catch((e)=>{\n                            this.logger(\"warn\", `Failed to play stream`, e);\n                        });\n                        // audio output device shall be set after the audio element is played\n                        // otherwise, the browser will not pick it up, and will always\n                        // play audio through the system's default device\n                        const { selectedDevice } = this.call.speaker.state;\n                        if (selectedDevice && \"setSinkId\" in audioElement) {\n                            // @ts-expect-error setSinkId is not yet in the lib\n                            audioElement.setSinkId(selectedDevice);\n                        }\n                    }\n                });\n            });\n            const sinkIdSubscription = !(\"setSinkId\" in audioElement) ? null : this.call.speaker.state.selectedDevice$.subscribe((deviceId)=>{\n                if (deviceId) {\n                    // @ts-expect-error setSinkId is not yet in the lib\n                    audioElement.setSinkId(deviceId);\n                }\n            });\n            const volumeSubscription = (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.combineLatest)([\n                this.call.speaker.state.volume$,\n                participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.distinctUntilKeyChanged)(\"audioVolume\"))\n            ]).subscribe(([volume, p])=>{\n                audioElement.volume = p.audioVolume ?? volume;\n            });\n            audioElement.autoplay = true;\n            return ()=>{\n                sinkIdSubscription?.unsubscribe();\n                volumeSubscription.unsubscribe();\n                updateMediaStreamSubscription.unsubscribe();\n            };\n        };\n        this.call = call;\n    }\n}\n/**\n * Stores the permissions for the current user and exposes\n * a few helper methods which make it easier to work with permissions.\n *\n * This is an internal class meant to be used in combination with\n * a {@link Call} instance.\n *\n * @internal\n */ class PermissionsContext {\n    constructor(){\n        this.permissions = [];\n        /**\n         * Sets the permissions for the current user.\n         *\n         * @param permissions the permissions to set.\n         */ this.setPermissions = (permissions)=>{\n            this.permissions = permissions || [];\n        };\n        /**\n         * Sets the settings for the bound call.\n         * @param settings\n         */ this.setCallSettings = (settings)=>{\n            this.settings = settings;\n        };\n        /**\n         * Checks if the current user has a specific permission.\n         *\n         * @param permission the permission to check for.\n         */ this.hasPermission = (permission)=>{\n            return this.permissions.includes(permission);\n        };\n        /**\n         * Checks if the current user can request a specific permission\n         * within the call.\n         *\n         * @param permission the permission to check for.\n         * @param settings the call settings to check against (optional).\n         */ this.canRequest = (permission, settings = this.settings)=>{\n            if (!settings) return false;\n            const { audio, video, screensharing } = settings;\n            switch(permission){\n                case OwnCapability.SEND_AUDIO:\n                    return audio.access_request_enabled;\n                case OwnCapability.SEND_VIDEO:\n                    return video.access_request_enabled;\n                case OwnCapability.SCREENSHARE:\n                    return screensharing.access_request_enabled;\n                default:\n                    return false;\n            }\n        };\n    }\n}\n/**\n * Represents a call type.\n */ class CallType {\n    /**\n     * Constructs a new CallType.\n     *\n     * @param name the name of the call type.\n     * @param options the options for the call type.\n     */ constructor(name, options = {\n        sortParticipantsBy: defaultSortPreset\n    }){\n        this.name = name;\n        this.options = options;\n    }\n}\n/**\n * A registry of {@link CallType}s.\n * You can register and unregister call types.\n */ class CallTypesRegistry {\n    /**\n     * Constructs a new CallTypesRegistry.\n     *\n     * @param callTypes the initial call types to register.\n     */ constructor(callTypes){\n        /**\n         * Registers a new call type.\n         *\n         * @param callType the call type to register.\n         */ this.register = (callType)=>{\n            this.callTypes[callType.name] = callType;\n        };\n        /**\n         * Unregisters a call type.\n         *\n         * @param name the name of the call type to unregister.\n         */ this.unregister = (name)=>{\n            delete this.callTypes[name];\n        };\n        /**\n         * Gets a call type by name.\n         *\n         * @param name the name of the call type to get.\n         */ this.get = (name)=>{\n            if (!this.callTypes[name]) {\n                this.register(new CallType(name));\n            }\n            return this.callTypes[name];\n        };\n        this.callTypes = callTypes.reduce((acc, callType)=>{\n            acc[callType.name] = callType;\n            return acc;\n        }, {});\n    }\n}\n/**\n * The default call types registry.\n * You can use this instance to dynamically register and unregister call types.\n */ const CallTypes = new CallTypesRegistry([\n    new CallType(\"default\", {\n        sortParticipantsBy: defaultSortPreset\n    }),\n    new CallType(\"development\", {\n        sortParticipantsBy: defaultSortPreset\n    }),\n    new CallType(\"livestream\", {\n        sortParticipantsBy: livestreamOrAudioRoomSortPreset\n    }),\n    new CallType(\"audio_room\", {\n        sortParticipantsBy: livestreamOrAudioRoomSortPreset\n    })\n]);\n/**\n * Returns an Observable that emits the list of available devices\n * that meet the given constraints.\n *\n * @param constraints the constraints to use when requesting the devices.\n * @param kind the kind of devices to enumerate.\n */ const getDevices = (constraints, kind)=>{\n    return new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.Observable((subscriber)=>{\n        const enumerate = async ()=>{\n            let devices = await navigator.mediaDevices.enumerateDevices();\n            // some browsers report empty device labels (Firefox).\n            // in that case, we need to request permissions (via getUserMedia)\n            // to be able to get the device labels\n            const needsGetUserMedia = devices.some((device)=>device.kind === kind && device.label === \"\");\n            if (needsGetUserMedia) {\n                let mediaStream;\n                try {\n                    mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\n                    devices = await navigator.mediaDevices.enumerateDevices();\n                } finally{\n                    if (mediaStream) disposeOfMediaStream(mediaStream);\n                }\n            }\n            return devices;\n        };\n        enumerate().then((devices)=>{\n            // notify subscribers and complete\n            subscriber.next(devices);\n            subscriber.complete();\n        }).catch((error)=>{\n            const logger = getLogger([\n                \"devices\"\n            ]);\n            logger(\"error\", \"Failed to enumerate devices\", error);\n            subscriber.error(error);\n        });\n    });\n};\n/**\n * [Tells if the browser supports audio output change on 'audio' elements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId).\n *\n *  */ const checkIfAudioOutputChangeSupported = ()=>{\n    if (typeof document === \"undefined\") return false;\n    const element = document.createElement(\"audio\");\n    return \"setSinkId\" in element;\n};\n/**\n * The default constraints used to request audio devices.\n */ const audioDeviceConstraints = {\n    audio: {\n        autoGainControl: true,\n        noiseSuppression: true,\n        echoCancellation: true\n    }\n};\n/**\n * The default constraints used to request video devices.\n */ const videoDeviceConstraints = {\n    video: {\n        width: 1280,\n        height: 720\n    }\n};\n/**\n * Creates a memoized observable instance\n * that will be created only once and shared between all callers.\n *\n * @param create a function that creates an Observable.\n */ const memoizedObservable = (create)=>{\n    let memoized;\n    return ()=>{\n        if (!memoized) memoized = create();\n        return memoized;\n    };\n};\nconst getDeviceChangeObserver = memoizedObservable(()=>{\n    // Audio and video devices are requested in two separate requests.\n    // That way, users will be presented with two separate prompts\n    // -> they can give access to just camera, or just microphone\n    return new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.Observable((subscriber)=>{\n        // 'addEventListener' is not available in React Native\n        if (!navigator.mediaDevices.addEventListener) return;\n        const notify = ()=>subscriber.next();\n        navigator.mediaDevices.addEventListener(\"devicechange\", notify);\n        return ()=>{\n            navigator.mediaDevices.removeEventListener(\"devicechange\", notify);\n        };\n    }).pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.debounceTime)(500), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.concatMap)(()=>(0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.from)(navigator.mediaDevices.enumerateDevices())), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)(1));\n});\nconst getAudioDevicesObserver = memoizedObservable(()=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.merge)(getDevices(audioDeviceConstraints, \"audioinput\"), getDeviceChangeObserver()).pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)(1));\n});\nconst getAudioOutputDevicesObserver = memoizedObservable(()=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.merge)(getDevices(audioDeviceConstraints, \"audiooutput\"), getDeviceChangeObserver()).pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)(1));\n});\nconst getVideoDevicesObserver = memoizedObservable(()=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.merge)(getDevices(videoDeviceConstraints, \"videoinput\"), getDeviceChangeObserver()).pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)(1));\n});\n/**\n * Prompts the user for a permission to use audio devices (if not already granted) and lists the available 'audioinput' devices, if devices are added/removed the list is updated.\n */ const getAudioDevices = ()=>{\n    return getAudioDevicesObserver().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.map)((values)=>values.filter((d)=>d.kind === \"audioinput\")));\n};\n/**\n * Prompts the user for a permission to use video devices (if not already granted) and lists the available 'videoinput' devices, if devices are added/removed the list is updated.\n */ const getVideoDevices = ()=>{\n    return getVideoDevicesObserver().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.map)((values)=>values.filter((d)=>d.kind === \"videoinput\")));\n};\n/**\n * Prompts the user for a permission to use audio devices (if not already granted) and lists the available 'audiooutput' devices, if devices are added/removed the list is updated. Selecting 'audiooutput' device only makes sense if [the browser has support for changing audio output on 'audio' elements](#checkifaudiooutputchangesupported)\n */ const getAudioOutputDevices = ()=>{\n    return getAudioOutputDevicesObserver().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.map)((values)=>values.filter((d)=>d.kind === \"audiooutput\")));\n};\nconst getStream = async (constraints)=>{\n    try {\n        return await navigator.mediaDevices.getUserMedia(constraints);\n    } catch (e) {\n        getLogger([\n            \"devices\"\n        ])(\"error\", `Failed get user media`, {\n            error: e,\n            constraints: constraints\n        });\n        throw e;\n    }\n};\n/**\n * Returns an audio media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n * @param trackConstraints the constraints to use when requesting the stream.\n * @returns the new `MediaStream` fulfilling the given constraints.\n */ const getAudioStream = async (trackConstraints)=>{\n    const constraints = {\n        audio: {\n            ...audioDeviceConstraints.audio,\n            ...trackConstraints\n        }\n    };\n    return getStream(constraints);\n};\n/**\n * Returns a video media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n * @param trackConstraints the constraints to use when requesting the stream.\n * @returns a new `MediaStream` fulfilling the given constraints.\n */ const getVideoStream = async (trackConstraints)=>{\n    const constraints = {\n        video: {\n            ...videoDeviceConstraints.video,\n            ...trackConstraints\n        }\n    };\n    return getStream(constraints);\n};\n/**\n * Prompts the user for a permission to share a screen.\n * If the user grants the permission, a screen sharing stream is returned. Throws otherwise.\n *\n * The callers of this API are responsible to handle the possible errors.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n *\n * @param options any additional options to pass to the [`getDisplayMedia`](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia) API.\n */ const getScreenShareStream = async (options)=>{\n    try {\n        return await navigator.mediaDevices.getDisplayMedia({\n            video: true,\n            audio: {\n                channelCount: {\n                    ideal: 2\n                },\n                echoCancellation: false,\n                autoGainControl: false,\n                noiseSuppression: false\n            },\n            // @ts-expect-error - not present in types yet\n            systemAudio: \"include\",\n            ...options\n        });\n    } catch (e) {\n        getLogger([\n            \"devices\"\n        ])(\"error\", \"Failed to get screen share stream\", e);\n        throw e;\n    }\n};\nconst deviceIds$ = typeof navigator !== \"undefined\" && typeof navigator.mediaDevices !== \"undefined\" ? memoizedObservable(()=>(0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.merge)((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.from)(navigator.mediaDevices.enumerateDevices()), getDeviceChangeObserver()).pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)(1)))() : undefined;\n/**\n * Deactivates MediaStream (stops and removes tracks) to be later garbage collected\n *\n * @param stream MediaStream\n * @returns void\n */ const disposeOfMediaStream = (stream)=>{\n    if (!stream.active) return;\n    stream.getTracks().forEach((track)=>{\n        track.stop();\n        stream.removeTrack(track);\n    });\n    // @ts-expect-error release() is present in react-native-webrtc and must be called to dispose the stream\n    if (typeof stream.release === \"function\") {\n        // @ts-expect-error\n        stream.release();\n    }\n};\nclass InputMediaDeviceManager {\n    constructor(call, state, trackType){\n        this.call = call;\n        this.state = state;\n        this.trackType = trackType;\n        /**\n         * if true, stops the media stream when call is left\n         */ this.stopOnLeave = true;\n        this.subscriptions = [];\n        this.isTrackStoppedDueToTrackEnd = false;\n        this.removeSubscriptions = ()=>{\n            this.subscriptions.forEach((s)=>s.unsubscribe());\n        };\n        this.logger = getLogger([\n            `${TrackType[trackType].toLowerCase()} manager`\n        ]);\n        if (deviceIds$ && !isReactNative() && (this.trackType === TrackType.AUDIO || this.trackType === TrackType.VIDEO)) {\n            this.handleDisconnectedOrReplacedDevices();\n        }\n    }\n    /**\n     * Lists the available audio/video devices\n     *\n     * Note: It prompts the user for a permission to use devices (if not already granted)\n     *\n     * @returns an Observable that will be updated if a device is connected or disconnected\n     */ listDevices() {\n        return this.getDevices();\n    }\n    /**\n     * Starts stream.\n     */ async enable() {\n        if (this.state.status === \"enabled\") return;\n        this.enablePromise = this.unmuteStream();\n        try {\n            await this.enablePromise;\n            this.state.setStatus(\"enabled\");\n            this.enablePromise = undefined;\n        } catch (error) {\n            this.enablePromise = undefined;\n            throw error;\n        }\n    }\n    /**\n     * Stops or pauses the stream based on state.disableMode\n     * @param {boolean} [forceStop=false] when true, stops the tracks regardless of the state.disableMode\n     */ async disable(forceStop = false) {\n        this.state.prevStatus = this.state.status;\n        if (!forceStop && this.state.status === \"disabled\") return;\n        const stopTracks = forceStop || this.state.disableMode === \"stop-tracks\";\n        this.disablePromise = this.muteStream(stopTracks);\n        try {\n            await this.disablePromise;\n            this.state.setStatus(\"disabled\");\n            this.disablePromise = undefined;\n        } catch (error) {\n            this.disablePromise = undefined;\n            throw error;\n        }\n    }\n    /**\n     * If status was previously enabled, it will re-enable the device.\n     */ async resume() {\n        if (this.state.prevStatus === \"enabled\" && this.state.status === \"disabled\") {\n            await this.enable();\n        }\n    }\n    /**\n     * If the current device status is disabled, it will enable the device,\n     * else it will disable it.\n     */ async toggle() {\n        if (this.state.status === \"enabled\") {\n            return this.disable();\n        } else {\n            return this.enable();\n        }\n    }\n    /**\n     * Will set the default constraints for the device.\n     *\n     * @param constraints the constraints to set.\n     */ setDefaultConstraints(constraints) {\n        this.state.setDefaultConstraints(constraints);\n    }\n    /**\n     * Selects a device.\n     *\n     * Note: This method is not supported in React Native\n     * @param deviceId the device id to select.\n     */ async select(deviceId) {\n        if (isReactNative()) {\n            throw new Error(\"This method is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for reference.\");\n        }\n        if (deviceId === this.state.selectedDevice) {\n            return;\n        }\n        this.state.setDevice(deviceId);\n        await this.applySettingsToStream();\n    }\n    async applySettingsToStream() {\n        if (this.state.status === \"enabled\") {\n            await this.muteStream();\n            await this.unmuteStream();\n        }\n    }\n    getTracks() {\n        return this.state.mediaStream?.getTracks() ?? [];\n    }\n    async muteStream(stopTracks = true) {\n        if (!this.state.mediaStream) return;\n        this.logger(\"debug\", `${stopTracks ? \"Stopping\" : \"Disabling\"} stream`);\n        if (this.call.state.callingState === CallingState.JOINED) {\n            await this.stopPublishStream(stopTracks);\n        }\n        this.muteLocalStream(stopTracks);\n        const allEnded = this.getTracks().every((t)=>t.readyState === \"ended\");\n        if (allEnded) {\n            if (this.state.mediaStream && // @ts-expect-error release() is present in react-native-webrtc\n            typeof this.state.mediaStream.release === \"function\") {\n                // @ts-expect-error called to dispose the stream in RN\n                this.state.mediaStream.release();\n            }\n            this.state.setMediaStream(undefined);\n        }\n    }\n    muteTracks() {\n        this.getTracks().forEach((track)=>{\n            if (track.enabled) track.enabled = false;\n        });\n    }\n    unmuteTracks() {\n        this.getTracks().forEach((track)=>{\n            if (!track.enabled) track.enabled = true;\n        });\n    }\n    stopTracks() {\n        this.getTracks().forEach((track)=>{\n            if (track.readyState === \"live\") track.stop();\n        });\n    }\n    muteLocalStream(stopTracks) {\n        if (!this.state.mediaStream) {\n            return;\n        }\n        if (stopTracks) {\n            this.stopTracks();\n        } else {\n            this.muteTracks();\n        }\n    }\n    async unmuteStream() {\n        this.logger(\"debug\", \"Starting stream\");\n        let stream;\n        if (this.state.mediaStream && this.getTracks().every((t)=>t.readyState === \"live\")) {\n            stream = this.state.mediaStream;\n            this.unmuteTracks();\n        } else {\n            const defaultConstraints = this.state.defaultConstraints;\n            const constraints = {\n                ...defaultConstraints,\n                deviceId: this.state.selectedDevice\n            };\n            stream = await this.getStream(constraints);\n        }\n        if (this.call.state.callingState === CallingState.JOINED) {\n            await this.publishStream(stream);\n        }\n        if (this.state.mediaStream !== stream) {\n            this.state.setMediaStream(stream);\n            this.getTracks().forEach((track)=>{\n                track.addEventListener(\"ended\", async ()=>{\n                    if (this.enablePromise) {\n                        await this.enablePromise;\n                    }\n                    if (this.disablePromise) {\n                        await this.disablePromise;\n                    }\n                    if (this.state.status === \"enabled\") {\n                        this.isTrackStoppedDueToTrackEnd = true;\n                        setTimeout(()=>{\n                            this.isTrackStoppedDueToTrackEnd = false;\n                        }, 2000);\n                        await this.disable();\n                    }\n                });\n            });\n        }\n    }\n    get mediaDeviceKind() {\n        if (this.trackType === TrackType.AUDIO) {\n            return \"audioinput\";\n        }\n        if (this.trackType === TrackType.VIDEO) {\n            return \"videoinput\";\n        }\n        return \"\";\n    }\n    handleDisconnectedOrReplacedDevices() {\n        this.subscriptions.push((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.combineLatest)([\n            deviceIds$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.pairwise)()),\n            this.state.selectedDevice$\n        ]).subscribe(async ([[prevDevices, currentDevices], deviceId])=>{\n            if (!deviceId) {\n                return;\n            }\n            if (this.enablePromise) {\n                await this.enablePromise;\n            }\n            if (this.disablePromise) {\n                await this.disablePromise;\n            }\n            let isDeviceDisconnected = false;\n            let isDeviceReplaced = false;\n            const currentDevice = this.findDeviceInList(currentDevices, deviceId);\n            const prevDevice = this.findDeviceInList(prevDevices, deviceId);\n            if (!currentDevice && prevDevice) {\n                isDeviceDisconnected = true;\n            } else if (currentDevice && prevDevice && currentDevice.deviceId === prevDevice.deviceId && currentDevice.groupId !== prevDevice.groupId) {\n                isDeviceReplaced = true;\n            }\n            if (isDeviceDisconnected) {\n                await this.disable();\n                this.select(undefined);\n            }\n            if (isDeviceReplaced) {\n                if (this.isTrackStoppedDueToTrackEnd && this.state.status === \"disabled\") {\n                    await this.enable();\n                    this.isTrackStoppedDueToTrackEnd = false;\n                } else {\n                    await this.applySettingsToStream();\n                }\n            }\n        }));\n    }\n    findDeviceInList(devices, deviceId) {\n        return devices.find((d)=>d.deviceId === deviceId && d.kind === this.mediaDeviceKind);\n    }\n}\nclass InputMediaDeviceManagerState {\n    /**\n     * Constructs new InputMediaDeviceManagerState instance.\n     *\n     * @param disableMode the disable mode to use.\n     * @param permissionName the permission name to use for querying.\n     * `undefined` means no permission is required.\n     */ constructor(disableMode = \"stop-tracks\", permissionName = undefined){\n        this.disableMode = disableMode;\n        this.permissionName = permissionName;\n        this.statusSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.mediaStreamSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.selectedDeviceSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.defaultConstraintsSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        /**\n         * An Observable that emits the current media stream, or `undefined` if the device is currently disabled.\n         *\n         */ this.mediaStream$ = this.mediaStreamSubject.asObservable();\n        /**\n         * An Observable that emits the currently selected device\n         */ this.selectedDevice$ = this.selectedDeviceSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.distinctUntilChanged)());\n        /**\n         * An Observable that emits the device status\n         */ this.status$ = this.statusSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.distinctUntilChanged)());\n        /**\n         * The default constraints for the device.\n         */ this.defaultConstraints$ = this.defaultConstraintsSubject.asObservable();\n        /**\n         * An observable that will emit `true` if browser/system permission\n         * is granted, `false` otherwise.\n         */ this.hasBrowserPermission$ = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.Observable((subscriber)=>{\n            const notifyGranted = ()=>subscriber.next(true);\n            const permissionsAPIAvailable = !!navigator?.permissions?.query;\n            if (isReactNative() || !this.permissionName || !permissionsAPIAvailable) {\n                getLogger([\n                    \"devices\"\n                ])(\"warn\", `Permissions can't be queried. Assuming granted.`);\n                return notifyGranted();\n            }\n            let permissionState;\n            const notify = ()=>{\n                subscriber.next(// In some browsers, the 'change' event doesn't reliably emit and hence,\n                // permissionState stays in 'prompt' state forever.\n                // Typically, this happens when a user grants one-time permission.\n                // Instead of checking if a permission is granted, we check if it isn't denied\n                permissionState.state !== \"denied\");\n            };\n            navigator.permissions.query({\n                name: this.permissionName\n            }).then((permissionStatus)=>{\n                permissionState = permissionStatus;\n                permissionState.addEventListener(\"change\", notify);\n                notify();\n            }).catch(()=>{\n                // permission doesn't exist or can't be queried -> assume it's granted\n                // an example would be Firefox,\n                // where neither camera microphone permission can be queried\n                notifyGranted();\n            });\n            return ()=>{\n                permissionState?.removeEventListener(\"change\", notify);\n            };\n        }).pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)(1));\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @internal\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n    }\n    /**\n     * The device status\n     */ get status() {\n        return this.getCurrentValue(this.status$);\n    }\n    /**\n     * The currently selected device\n     */ get selectedDevice() {\n        return this.getCurrentValue(this.selectedDevice$);\n    }\n    /**\n     * The current media stream, or `undefined` if the device is currently disabled.\n     */ get mediaStream() {\n        return this.getCurrentValue(this.mediaStream$);\n    }\n    /**\n     * @internal\n     * @param status\n     */ setStatus(status) {\n        this.setCurrentValue(this.statusSubject, status);\n    }\n    /**\n     * @internal\n     * @param stream the stream to set.\n     */ setMediaStream(stream) {\n        this.setCurrentValue(this.mediaStreamSubject, stream);\n        if (stream) {\n            this.setDevice(this.getDeviceIdFromStream(stream));\n        }\n    }\n    /**\n     * @internal\n     * @param deviceId the device id to set.\n     */ setDevice(deviceId) {\n        this.setCurrentValue(this.selectedDeviceSubject, deviceId);\n    }\n    /**\n     * Gets the default constraints for the device.\n     */ get defaultConstraints() {\n        return this.getCurrentValue(this.defaultConstraints$);\n    }\n    /**\n     * Sets the default constraints for the device.\n     *\n     * @internal\n     * @param constraints the constraints to set.\n     */ setDefaultConstraints(constraints) {\n        this.setCurrentValue(this.defaultConstraintsSubject, constraints);\n    }\n}\nclass CameraManagerState extends InputMediaDeviceManagerState {\n    constructor(){\n        super(\"stop-tracks\", // `camera` is not in the W3C standard yet,\n        // but it's supported by Chrome and Safari.\n        \"camera\");\n        this.directionSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        this.direction$ = this.directionSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.distinctUntilChanged)());\n    }\n    /**\n     * The preferred camera direction\n     * front - means the camera facing the user\n     * back - means the camera facing the environment\n     */ get direction() {\n        return this.getCurrentValue(this.direction$);\n    }\n    /**\n     * @internal\n     */ setDirection(direction) {\n        this.setCurrentValue(this.directionSubject, direction);\n    }\n    /**\n     * @internal\n     */ setMediaStream(stream) {\n        super.setMediaStream(stream);\n        if (stream) {\n            // RN getSettings() doesn't return facingMode, so we don't verify camera direction\n            const direction = isReactNative() ? this.direction : stream.getVideoTracks()[0]?.getSettings().facingMode === \"environment\" ? \"back\" : \"front\";\n            this.setDirection(direction);\n        }\n    }\n    getDeviceIdFromStream(stream) {\n        return stream.getVideoTracks()[0]?.getSettings().deviceId;\n    }\n}\nclass CameraManager extends InputMediaDeviceManager {\n    constructor(call){\n        super(call, new CameraManagerState(), TrackType.VIDEO);\n        this.targetResolution = {\n            width: 1280,\n            height: 720\n        };\n    }\n    /**\n     * Select the camera direction.\n     *\n     * @param direction the direction of the camera to select.\n     */ async selectDirection(direction) {\n        this.state.setDirection(direction);\n        // Providing both device id and direction doesn't work, so we deselect the device\n        this.state.setDevice(undefined);\n        await this.applySettingsToStream();\n    }\n    /**\n     * Flips the camera direction: if it's front it will change to back, if it's back, it will change to front.\n     *\n     * Note: if there is no available camera with the desired direction, this method will do nothing.\n     * @returns\n     */ async flip() {\n        const newDirection = this.state.direction === \"front\" ? \"back\" : \"front\";\n        await this.selectDirection(newDirection);\n    }\n    /**\n     * @internal\n     */ async selectTargetResolution(resolution) {\n        this.targetResolution.height = resolution.height;\n        this.targetResolution.width = resolution.width;\n        if (this.enablePromise) {\n            try {\n                await this.enablePromise;\n            } catch (error) {\n                // couldn't enable device, target resolution will be applied the next time user attempts to start the device\n                this.logger(\"warn\", \"could not apply target resolution\", error);\n            }\n        }\n        if (this.state.status === \"enabled\") {\n            const { width, height } = this.state.mediaStream.getVideoTracks()[0]?.getSettings();\n            if (width !== this.targetResolution.width || height !== this.targetResolution.height) {\n                await this.applySettingsToStream();\n                this.logger(\"debug\", `${width}x${height} target resolution applied to media stream`);\n            }\n        }\n    }\n    /**\n     * Sets the preferred codec for encoding the video.\n     *\n     * @internal internal use only, not part of the public API.\n     * @param codec the codec to use for encoding the video.\n     */ setPreferredCodec(codec) {\n        this.preferredCodec = codec;\n    }\n    getDevices() {\n        return getVideoDevices();\n    }\n    getStream(constraints) {\n        constraints.width = this.targetResolution.width;\n        constraints.height = this.targetResolution.height;\n        // We can't set both device id and facing mode\n        // Device id has higher priority\n        if (!constraints.deviceId && this.state.direction) {\n            constraints.facingMode = this.state.direction === \"front\" ? \"user\" : \"environment\";\n        }\n        return getVideoStream(constraints);\n    }\n    publishStream(stream) {\n        return this.call.publishVideoStream(stream, {\n            preferredCodec: this.preferredCodec\n        });\n    }\n    stopPublishStream(stopTracks) {\n        return this.call.stopPublish(TrackType.VIDEO, stopTracks);\n    }\n}\nclass MicrophoneManagerState extends InputMediaDeviceManagerState {\n    constructor(){\n        super(\"disable-tracks\", // `microphone` is not in the W3C standard yet,\n        // but it's supported by Chrome and Safari.\n        \"microphone\");\n        this.speakingWhileMutedSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(false);\n        this.speakingWhileMuted$ = this.speakingWhileMutedSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.distinctUntilChanged)());\n    }\n    /**\n     * `true` if the user's microphone is muted but they'are speaking.\n     *\n     * This feature is not available in the React Native SDK.\n     */ get speakingWhileMuted() {\n        return this.getCurrentValue(this.speakingWhileMuted$);\n    }\n    /**\n     * @internal\n     */ setSpeakingWhileMuted(isSpeaking) {\n        this.setCurrentValue(this.speakingWhileMutedSubject, isSpeaking);\n    }\n    getDeviceIdFromStream(stream) {\n        return stream.getAudioTracks()[0]?.getSettings().deviceId;\n    }\n}\nconst DETECTION_FREQUENCY_IN_MS = 500;\nconst AUDIO_LEVEL_THRESHOLD$1 = 150;\nconst FFT_SIZE = 128;\n/**\n * Creates a new sound detector.\n *\n * @param audioStream the audio stream to observe. Depending on the provided configuration, this stream might be destroyed when the sound detector is stopped.\n * @param onSoundDetectedStateChanged a callback which is called when the sound state changes.\n * @param options custom options for the sound detector.\n * @returns a clean-up function which once invoked stops the sound detector.\n */ const createSoundDetector = (audioStream, onSoundDetectedStateChanged, options = {})=>{\n    const { detectionFrequencyInMs = DETECTION_FREQUENCY_IN_MS, audioLevelThreshold = AUDIO_LEVEL_THRESHOLD$1, fftSize = FFT_SIZE, destroyStreamOnStop = true } = options;\n    const audioContext = new AudioContext();\n    const analyser = audioContext.createAnalyser();\n    analyser.fftSize = fftSize;\n    const microphone = audioContext.createMediaStreamSource(audioStream);\n    microphone.connect(analyser);\n    const intervalId = setInterval(()=>{\n        const data = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(data);\n        const isSoundDetected = data.some((value)=>value >= audioLevelThreshold);\n        const averagedDataValue = data.reduce((pv, cv)=>pv + cv, 0) / data.length;\n        const percentage = averagedDataValue > audioLevelThreshold ? 100 : Math.round(averagedDataValue / audioLevelThreshold * 100);\n        // When the track is disabled, it takes time for the buffer to empty\n        // This check will ensure that we don't send anything if the track is disabled\n        if (audioStream.getAudioTracks()[0]?.enabled) {\n            onSoundDetectedStateChanged({\n                isSoundDetected,\n                audioLevel: percentage\n            });\n        } else {\n            onSoundDetectedStateChanged({\n                isSoundDetected: false,\n                audioLevel: 0\n            });\n        }\n    }, detectionFrequencyInMs);\n    return async function stop() {\n        clearInterval(intervalId);\n        // clean-up the AudioContext elements\n        microphone.disconnect();\n        analyser.disconnect();\n        await audioContext.close();\n        // stop the stream\n        if (destroyStreamOnStop) {\n            audioStream.getTracks().forEach((track)=>{\n                track.stop();\n                audioStream.removeTrack(track);\n            });\n        }\n    };\n};\n/**\n * Flatten the stats report into an array of stats objects.\n *\n * @param report the report to flatten.\n */ const flatten = (report)=>{\n    const stats = [];\n    report.forEach((s)=>{\n        stats.push(s);\n    });\n    return stats;\n};\nconst AUDIO_LEVEL_THRESHOLD = 0.2;\nclass RNSpeechDetector {\n    constructor(){\n        this.pc1 = new RTCPeerConnection({});\n        this.pc2 = new RTCPeerConnection({});\n    }\n    /**\n     * Starts the speech detection.\n     */ async start() {\n        try {\n            const audioStream = await navigator.mediaDevices.getUserMedia({\n                audio: true\n            });\n            this.pc1.addEventListener(\"icecandidate\", async (e)=>{\n                await this.pc2.addIceCandidate(e.candidate);\n            });\n            this.pc2.addEventListener(\"icecandidate\", async (e)=>{\n                await this.pc1.addIceCandidate(e.candidate);\n            });\n            audioStream.getTracks().forEach((track)=>this.pc1.addTrack(track, audioStream));\n            const offer = await this.pc1.createOffer({});\n            await this.pc2.setRemoteDescription(offer);\n            await this.pc1.setLocalDescription(offer);\n            const answer = await this.pc2.createAnswer();\n            await this.pc1.setRemoteDescription(answer);\n            await this.pc2.setLocalDescription(answer);\n            const audioTracks = audioStream.getAudioTracks();\n            // We need to mute the audio track for this temporary stream, or else you will hear yourself twice while in the call.\n            audioTracks.forEach((track)=>track.enabled = false);\n        } catch (error) {\n            console.error(\"Error connecting and negotiating between PeerConnections:\", error);\n        }\n    }\n    /**\n     * Stops the speech detection and releases all allocated resources.\n     */ stop() {\n        this.pc1.close();\n        this.pc2.close();\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n        }\n    }\n    /**\n     * Public method that detects the audio levels and returns the status.\n     */ onSpeakingDetectedStateChange(onSoundDetectedStateChanged) {\n        this.intervalId = setInterval(async ()=>{\n            const stats = await this.pc1.getStats();\n            const report = flatten(stats);\n            // Audio levels are present inside stats of type `media-source` and of kind `audio`\n            const audioMediaSourceStats = report.find((stat)=>stat.type === \"media-source\" && stat.kind === \"audio\");\n            if (audioMediaSourceStats) {\n                const { audioLevel } = audioMediaSourceStats;\n                if (audioLevel) {\n                    if (audioLevel >= AUDIO_LEVEL_THRESHOLD) {\n                        onSoundDetectedStateChanged({\n                            isSoundDetected: true,\n                            audioLevel\n                        });\n                    } else {\n                        onSoundDetectedStateChanged({\n                            isSoundDetected: false,\n                            audioLevel: 0\n                        });\n                    }\n                }\n            }\n        }, 1000);\n        return ()=>{\n            clearInterval(this.intervalId);\n        };\n    }\n}\nclass MicrophoneManager extends InputMediaDeviceManager {\n    constructor(call){\n        super(call, new MicrophoneManagerState(), TrackType.AUDIO);\n        (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.combineLatest)([\n            this.call.state.callingState$,\n            this.call.state.ownCapabilities$,\n            this.state.selectedDevice$,\n            this.state.status$\n        ]).subscribe(async ([callingState, ownCapabilities, deviceId, status])=>{\n            if (callingState !== CallingState.JOINED) {\n                if (callingState === CallingState.LEFT) {\n                    await this.stopSpeakingWhileMutedDetection();\n                }\n                return;\n            }\n            if (ownCapabilities.includes(OwnCapability.SEND_AUDIO)) {\n                if (status === \"disabled\") {\n                    await this.startSpeakingWhileMutedDetection(deviceId);\n                } else {\n                    await this.stopSpeakingWhileMutedDetection();\n                }\n            } else {\n                await this.stopSpeakingWhileMutedDetection();\n            }\n        });\n    }\n    getDevices() {\n        return getAudioDevices();\n    }\n    getStream(constraints) {\n        return getAudioStream(constraints);\n    }\n    publishStream(stream) {\n        return this.call.publishAudioStream(stream);\n    }\n    stopPublishStream(stopTracks) {\n        return this.call.stopPublish(TrackType.AUDIO, stopTracks);\n    }\n    async startSpeakingWhileMutedDetection(deviceId) {\n        await this.stopSpeakingWhileMutedDetection();\n        if (isReactNative()) {\n            this.rnSpeechDetector = new RNSpeechDetector();\n            await this.rnSpeechDetector.start();\n            const unsubscribe = this.rnSpeechDetector?.onSpeakingDetectedStateChange((event)=>{\n                this.state.setSpeakingWhileMuted(event.isSoundDetected);\n            });\n            this.soundDetectorCleanup = ()=>{\n                unsubscribe();\n                this.rnSpeechDetector?.stop();\n                this.rnSpeechDetector = undefined;\n            };\n        } else {\n            // Need to start a new stream that's not connected to publisher\n            const stream = await this.getStream({\n                deviceId\n            });\n            this.soundDetectorCleanup = createSoundDetector(stream, (event)=>{\n                this.state.setSpeakingWhileMuted(event.isSoundDetected);\n            });\n        }\n    }\n    async stopSpeakingWhileMutedDetection() {\n        if (!this.soundDetectorCleanup) {\n            return;\n        }\n        this.state.setSpeakingWhileMuted(false);\n        try {\n            await this.soundDetectorCleanup();\n        } finally{\n            this.soundDetectorCleanup = undefined;\n        }\n    }\n}\nclass ScreenShareState extends InputMediaDeviceManagerState {\n    constructor(){\n        super(...arguments);\n        this.audioEnabledSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(true);\n        this.settingsSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(undefined);\n        /**\n         * An Observable that emits the current screen share audio status.\n         */ this.audioEnabled$ = this.audioEnabledSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.distinctUntilChanged)());\n        /**\n         * An Observable that emits the current screen share settings.\n         */ this.settings$ = this.settingsSubject.asObservable();\n        /**\n         * @internal\n         */ this.getDeviceIdFromStream = (stream)=>{\n            const [track] = stream.getTracks();\n            return track?.getSettings().deviceId;\n        };\n    }\n    /**\n     * The current screen share audio status.\n     */ get audioEnabled() {\n        return this.getCurrentValue(this.audioEnabled$);\n    }\n    /**\n     * Set the current screen share audio status.\n     */ setAudioEnabled(isEnabled) {\n        this.setCurrentValue(this.audioEnabledSubject, isEnabled);\n    }\n    /**\n     * The current screen share settings.\n     */ get settings() {\n        return this.getCurrentValue(this.settings$);\n    }\n    /**\n     * Set the current screen share settings.\n     *\n     * @param settings the screen share settings to set.\n     */ setSettings(settings) {\n        this.setCurrentValue(this.settingsSubject, settings);\n    }\n}\nclass ScreenShareManager extends InputMediaDeviceManager {\n    constructor(call){\n        super(call, new ScreenShareState(), TrackType.SCREEN_SHARE);\n    }\n    /**\n     * Will enable screen share audio options on supported platforms.\n     *\n     * Note: for ongoing screen share, audio won't be enabled until you\n     * re-publish the screen share stream.\n     */ enableScreenShareAudio() {\n        this.state.setAudioEnabled(true);\n    }\n    /**\n     * Will disable screen share audio options on supported platforms.\n     */ async disableScreenShareAudio() {\n        this.state.setAudioEnabled(false);\n        if (this.call.publisher?.isPublishing(TrackType.SCREEN_SHARE_AUDIO)) {\n            await this.call.stopPublish(TrackType.SCREEN_SHARE_AUDIO, true);\n        }\n    }\n    /**\n     * Returns the current screen share settings.\n     */ getSettings() {\n        return this.state.settings;\n    }\n    /**\n     * Sets the current screen share settings.\n     *\n     * @param settings the settings to set.\n     */ setSettings(settings) {\n        this.state.setSettings(settings);\n    }\n    getDevices() {\n        return (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.of)([]); // there are no devices to be listed for Screen Share\n    }\n    getStream(constraints) {\n        if (!this.state.audioEnabled) {\n            constraints.audio = false;\n        }\n        return getScreenShareStream(constraints);\n    }\n    publishStream(stream) {\n        return this.call.publishScreenShareStream(stream, {\n            screenShareSettings: this.state.settings\n        });\n    }\n    async stopPublishStream(stopTracks) {\n        await this.call.stopPublish(TrackType.SCREEN_SHARE, stopTracks);\n        await this.call.stopPublish(TrackType.SCREEN_SHARE_AUDIO, stopTracks);\n    }\n    /**\n     * Overrides the default `select` method to throw an error.\n     *\n     * @param deviceId ignored.\n     */ async select(deviceId) {\n        throw new Error(\"This method is not supported in for Screen Share\");\n    }\n}\nclass SpeakerState {\n    constructor(){\n        this.selectedDeviceSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(\"\");\n        this.volumeSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(1);\n        /**\n         * [Tells if the browser supports audio output change on 'audio' elements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId).\n         */ this.isDeviceSelectionSupported = checkIfAudioOutputChangeSupported();\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @internal\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n        this.selectedDevice$ = this.selectedDeviceSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.distinctUntilChanged)());\n        this.volume$ = this.volumeSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.distinctUntilChanged)());\n    }\n    /**\n     * The currently selected device\n     *\n     * Note: this feature is not supported in React Native\n     */ get selectedDevice() {\n        return this.getCurrentValue(this.selectedDevice$);\n    }\n    /**\n     * The currently selected volume\n     *\n     * Note: this feature is not supported in React Native\n     */ get volume() {\n        return this.getCurrentValue(this.volume$);\n    }\n    /**\n     * @internal\n     * @param deviceId\n     */ setDevice(deviceId) {\n        this.setCurrentValue(this.selectedDeviceSubject, deviceId);\n    }\n    /**\n     * @internal\n     * @param volume\n     */ setVolume(volume) {\n        this.setCurrentValue(this.volumeSubject, volume);\n    }\n}\nclass SpeakerManager {\n    constructor(call){\n        this.state = new SpeakerState();\n        this.subscriptions = [];\n        this.removeSubscriptions = ()=>{\n            this.subscriptions.forEach((s)=>s.unsubscribe());\n        };\n        this.call = call;\n        if (deviceIds$ && !isReactNative()) {\n            this.subscriptions.push((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.combineLatest)([\n                deviceIds$,\n                this.state.selectedDevice$\n            ]).subscribe(([devices, deviceId])=>{\n                if (!deviceId) {\n                    return;\n                }\n                const device = devices.find((d)=>d.deviceId === deviceId && d.kind === \"audiooutput\");\n                if (!device) {\n                    this.select(\"\");\n                }\n            }));\n        }\n    }\n    /**\n     * Lists the available audio output devices\n     *\n     * Note: It prompts the user for a permission to use devices (if not already granted)\n     * Note: This method is not supported in React Native\n     *\n     * @returns an Observable that will be updated if a device is connected or disconnected\n     */ listDevices() {\n        if (isReactNative()) {\n            throw new Error(\"This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details\");\n        }\n        return getAudioOutputDevices();\n    }\n    /**\n     * Select a device.\n     *\n     * Note: This method is not supported in React Native\n     *\n     * @param deviceId empty string means the system default\n     */ select(deviceId) {\n        if (isReactNative()) {\n            throw new Error(\"This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details\");\n        }\n        this.state.setDevice(deviceId);\n    }\n    /**\n     * Set the volume of the audio elements\n     * @param volume a number between 0 and 1.\n     *\n     * Note: This method is not supported in React Native\n     */ setVolume(volume) {\n        if (isReactNative()) {\n            throw new Error(\"This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details\");\n        }\n        if (volume && (volume < 0 || volume > 1)) {\n            throw new Error(\"Volume must be between 0 and 1\");\n        }\n        this.state.setVolume(volume);\n    }\n    /**\n     * Set the volume of a participant.\n     *\n     * Note: This method is not supported in React Native.\n     *\n     * @param sessionId the participant's session id.\n     * @param volume a number between 0 and 1. Set it to `undefined` to use the default volume.\n     */ setParticipantVolume(sessionId, volume) {\n        if (isReactNative()) {\n            throw new Error(\"This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details\");\n        }\n        if (volume && (volume < 0 || volume > 1)) {\n            throw new Error(\"Volume must be between 0 and 1, or undefined\");\n        }\n        this.call.state.updateParticipant(sessionId, {\n            audioVolume: volume\n        });\n    }\n}\n/**\n * An object representation of a `Call`.\n */ class Call {\n    /**\n     * Constructs a new `Call` instance.\n     *\n     * NOTE: Don't call the constructor directly, instead\n     * Use the [`StreamVideoClient.call`](./StreamVideoClient.md/#call)\n     * method to construct a `Call` instance.\n     */ constructor({ type, id, streamClient, members, ownCapabilities, sortParticipantsBy, clientStore, ringing = false, watching = false }){\n        /**\n         * The state of this call.\n         */ this.state = new CallState();\n        /**\n         * The DynascaleManager instance.\n         */ this.dynascaleManager = new DynascaleManager(this);\n        /**\n         * The permissions context of this call.\n         */ this.permissionsContext = new PermissionsContext();\n        /**\n         * The event dispatcher instance dedicated to this Call instance.\n         * @private\n         */ this.dispatcher = new Dispatcher();\n        this.trackSubscriptionsSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject({\n            type: DebounceType.MEDIUM,\n            data: []\n        });\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 10;\n        /**\n         * A list hooks/functions to invoke when the call is left.\n         * A typical use case is to clean up some global event handlers.\n         * @private\n         */ this.leaveCallHooks = new Set();\n        this.streamClientEventHandlers = new Map();\n        /**\n         * You can subscribe to WebSocket events provided by the API. To remove a subscription, call the `off` method.\n         * Please note that subscribing to WebSocket events is an advanced use-case.\n         * For most use-cases, it should be enough to watch for state changes.\n         *\n         * @param eventName the event name.\n         * @param fn the event handler.\n         */ this.on = (eventName, fn)=>{\n            if (isSfuEvent(eventName)) {\n                return this.dispatcher.on(eventName, fn);\n            }\n            const offHandler = this.streamClient.on(eventName, (e)=>{\n                const event = e;\n                if (event.call_cid && event.call_cid === this.cid) {\n                    fn(event);\n                }\n            });\n            // keep the 'off' reference returned by the stream client\n            this.streamClientEventHandlers.set(fn, offHandler);\n            return ()=>{\n                this.off(eventName, fn);\n            };\n        };\n        /**\n         * Remove subscription for WebSocket events that were created by the `on` method.\n         *\n         * @param eventName the event name.\n         * @param fn the event handler.\n         */ this.off = (eventName, fn)=>{\n            if (isSfuEvent(eventName)) {\n                return this.dispatcher.off(eventName, fn);\n            }\n            // unsubscribe from the stream client event by using the 'off' reference\n            const registeredOffHandler = this.streamClientEventHandlers.get(fn);\n            if (registeredOffHandler) {\n                registeredOffHandler();\n            }\n        };\n        /**\n         * Leave the call and stop the media streams that were published by the call.\n         */ this.leave = async ({ reject = false, reason = \"user is leaving the call\" } = {})=>{\n            const callingState = this.state.callingState;\n            if (callingState === CallingState.LEFT) {\n                throw new Error(\"Cannot leave call that has already been left.\");\n            }\n            if (callingState === CallingState.JOINING) {\n                await this.assertCallJoined();\n            }\n            if (this.ringing) {\n                // I'm the one who started the call, so I should cancel it.\n                const hasOtherParticipants = this.state.remoteParticipants.length > 0;\n                if (this.isCreatedByMe && !hasOtherParticipants) {\n                    // Signals other users that I have cancelled my call to them\n                    // before they accepted it.\n                    await this.reject();\n                } else if (reject && callingState === CallingState.RINGING) {\n                    // Signals other users that I have rejected the incoming call.\n                    await this.reject();\n                }\n            }\n            this.statsReporter?.stop();\n            this.statsReporter = undefined;\n            this.sfuStatsReporter?.stop();\n            this.sfuStatsReporter = undefined;\n            this.subscriber?.close();\n            this.subscriber = undefined;\n            this.publisher?.close();\n            this.publisher = undefined;\n            this.sfuClient?.close(StreamSfuClient.NORMAL_CLOSURE, reason);\n            this.sfuClient = undefined;\n            this.dispatcher.offAll();\n            this.state.setCallingState(CallingState.LEFT);\n            // Call all leave call hooks, e.g. to clean up global event handlers\n            this.leaveCallHooks.forEach((hook)=>hook());\n            this.clientStore.unregisterCall(this);\n            this.camera.removeSubscriptions();\n            this.microphone.removeSubscriptions();\n            this.screenShare.removeSubscriptions();\n            this.speaker.removeSubscriptions();\n            const stopOnLeavePromises = [];\n            if (this.camera.stopOnLeave) {\n                stopOnLeavePromises.push(this.camera.disable(true));\n            }\n            if (this.microphone.stopOnLeave) {\n                stopOnLeavePromises.push(this.microphone.disable(true));\n            }\n            if (this.screenShare.stopOnLeave) {\n                stopOnLeavePromises.push(this.screenShare.disable(true));\n            }\n            await Promise.all(stopOnLeavePromises);\n        };\n        /**\n         * Loads the information about the call.\n         *\n         * @param params.ring if set to true, a `call.ring` event will be sent to the call members.\n         * @param params.notify if set to true, a `call.notification` event will be sent to the call members.\n         * @param params.members_limit the total number of members to return as part of the response.\n         */ this.get = async (params)=>{\n            const response = await this.streamClient.get(this.streamClientBasePath, params);\n            if (params?.ring && !this.ringing) {\n                this.ringingSubject.next(true);\n            }\n            this.state.updateFromCallResponse(response.call);\n            this.state.setMembers(response.members);\n            this.state.setOwnCapabilities(response.own_capabilities);\n            if (this.streamClient._hasConnectionID()) {\n                this.watching = true;\n                this.clientStore.registerCall(this);\n            }\n            this.applyDeviceConfig();\n            return response;\n        };\n        /**\n         * Loads the information about the call and creates it if it doesn't exist.\n         *\n         * @param data the data to create the call with.\n         */ this.getOrCreate = async (data)=>{\n            const response = await this.streamClient.post(this.streamClientBasePath, data);\n            if (data?.ring && !this.ringing) {\n                this.ringingSubject.next(true);\n            }\n            this.state.updateFromCallResponse(response.call);\n            this.state.setMembers(response.members);\n            this.state.setOwnCapabilities(response.own_capabilities);\n            if (this.streamClient._hasConnectionID()) {\n                this.watching = true;\n                this.clientStore.registerCall(this);\n            }\n            this.applyDeviceConfig();\n            return response;\n        };\n        /**\n         * Creates a call\n         *\n         * @param data the data to create the call with.\n         */ this.create = async (data)=>{\n            return this.getOrCreate(data);\n        };\n        /**\n         * A shortcut for {@link Call.get} with `ring` parameter set to `true`.\n         * Will send a `call.ring` event to the call members.\n         */ this.ring = async ()=>{\n            return await this.get({\n                ring: true\n            });\n        };\n        /**\n         * A shortcut for {@link Call.get} with `notify` parameter set to `true`.\n         * Will send a `call.notification` event to the call members.\n         */ this.notify = async ()=>{\n            return await this.get({\n                notify: true\n            });\n        };\n        /**\n         * Marks the incoming call as accepted.\n         *\n         * This method should be used only for \"ringing\" call flows.\n         * {@link Call.join} invokes this method automatically for you when joining a call.\n         * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n         */ this.accept = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/accept`);\n        };\n        /**\n         * Marks the incoming call as rejected.\n         *\n         * This method should be used only for \"ringing\" call flows.\n         * {@link Call.leave} invokes this method automatically for you when you leave or reject this call.\n         * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n         */ this.reject = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/reject`);\n        };\n        /**\n         * Will start to watch for call related WebSocket events and initiate a call session with the server.\n         *\n         * @returns a promise which resolves once the call join-flow has finished.\n         */ this.join = async (data)=>{\n            const callingState = this.state.callingState;\n            if ([\n                CallingState.JOINED,\n                CallingState.JOINING\n            ].includes(callingState)) {\n                this.logger(\"warn\", \"Join method called twice, you should only call this once\");\n                throw new Error(`Illegal State: Already joined.`);\n            }\n            if (callingState === CallingState.LEFT) {\n                throw new Error(\"Illegal State: Cannot join already left call. Create a new Call instance to join a call.\");\n            }\n            const isMigrating = callingState === CallingState.MIGRATING;\n            const isReconnecting = callingState === CallingState.RECONNECTING;\n            this.state.setCallingState(CallingState.JOINING);\n            this.logger(\"debug\", \"Starting join flow\");\n            if (data?.ring && !this.ringing) {\n                this.ringingSubject.next(true);\n            }\n            if (this.ringing && !this.isCreatedByMe) {\n                // signals other users that I have accepted the incoming call.\n                await this.accept();\n            }\n            let sfuServer;\n            let sfuToken;\n            let connectionConfig;\n            let statsOptions;\n            try {\n                if (this.sfuClient?.isFastReconnecting) {\n                    // use previous SFU configuration and values\n                    connectionConfig = this.publisher?.connectionConfiguration;\n                    sfuServer = this.sfuClient.sfuServer;\n                    sfuToken = this.sfuClient.token;\n                    statsOptions = this.sfuStatsReporter?.options;\n                } else {\n                    // full join flow - let the Coordinator pick a new SFU for us\n                    const call = await join(this.streamClient, this.type, this.id, data);\n                    this.state.updateFromCallResponse(call.metadata);\n                    this.state.setMembers(call.members);\n                    this.state.setOwnCapabilities(call.ownCapabilities);\n                    connectionConfig = call.connectionConfig;\n                    sfuServer = call.sfuServer;\n                    sfuToken = call.token;\n                    statsOptions = call.statsOptions;\n                }\n                if (this.streamClient._hasConnectionID()) {\n                    this.watching = true;\n                    this.clientStore.registerCall(this);\n                }\n            } catch (error) {\n                // restore the previous call state if the join-flow fails\n                this.state.setCallingState(callingState);\n                throw error;\n            }\n            const previousSfuClient = this.sfuClient;\n            const sfuClient = this.sfuClient = new StreamSfuClient({\n                dispatcher: this.dispatcher,\n                sfuServer,\n                token: sfuToken,\n                sessionId: previousSfuClient?.sessionId\n            });\n            /**\n             * A closure which hides away the re-connection logic.\n             */ const reconnect = async (strategy, reason)=>{\n                const currentState = this.state.callingState;\n                if (currentState === CallingState.MIGRATING || currentState === CallingState.RECONNECTING) {\n                    // prevent parallel reconnection attempts\n                    return;\n                }\n                this.reconnectAttempts++;\n                this.state.setCallingState(strategy === \"migrate\" ? CallingState.MIGRATING : CallingState.RECONNECTING);\n                if (strategy === \"migrate\") {\n                    this.logger(\"debug\", `[Migration]: migrating call ${this.cid} away from ${sfuServer.edge_name}`);\n                    sfuClient.isMigratingAway = true;\n                } else {\n                    this.logger(\"debug\", `[Rejoin]: ${strategy} rejoin call ${this.cid} (${this.reconnectAttempts})...`);\n                }\n                // take a snapshot of the current \"local participant\" state\n                // we'll need it for restoring the previous publishing state later\n                const localParticipant = this.state.localParticipant;\n                if (strategy === \"fast\") {\n                    sfuClient.close(StreamSfuClient.ERROR_CONNECTION_BROKEN, `attempting fast reconnect: ${reason}`);\n                } else if (strategy === \"full\") {\n                    // in migration or recovery scenarios, we don't want to\n                    // wait before attempting to reconnect to an SFU server\n                    await sleep(retryInterval(this.reconnectAttempts));\n                    // in full-reconnect, we need to dispose all Peer Connections\n                    this.subscriber?.close();\n                    this.subscriber = undefined;\n                    this.publisher?.close({\n                        stopTracks: false\n                    });\n                    this.publisher = undefined;\n                    this.statsReporter?.stop();\n                    this.statsReporter = undefined;\n                    this.sfuStatsReporter?.stop();\n                    this.sfuStatsReporter = undefined;\n                    // clean up current connection\n                    sfuClient.close(StreamSfuClient.NORMAL_CLOSURE, `attempting full reconnect: ${reason}`);\n                }\n                await this.join({\n                    ...data,\n                    ...strategy === \"migrate\" && {\n                        migrating_from: sfuServer.edge_name\n                    }\n                });\n                // clean up previous connection\n                if (strategy === \"migrate\") {\n                    sfuClient.close(StreamSfuClient.NORMAL_CLOSURE, \"attempting migration\");\n                }\n                this.logger(\"info\", `[Rejoin]: Attempt ${this.reconnectAttempts} successful!`);\n                // we shouldn't be republishing the streams if we're migrating\n                // as the underlying peer connection will take care of it as part\n                // of the ice-restart process\n                if (localParticipant && strategy === \"full\") {\n                    const { audioStream, videoStream, screenShareStream, screenShareAudioStream } = localParticipant;\n                    let screenShare;\n                    if (screenShareStream || screenShareAudioStream) {\n                        screenShare = new MediaStream();\n                        screenShareStream?.getVideoTracks().forEach((track)=>{\n                            screenShare?.addTrack(track);\n                        });\n                        screenShareAudioStream?.getAudioTracks().forEach((track)=>{\n                            screenShare?.addTrack(track);\n                        });\n                    }\n                    // restore previous publishing state\n                    if (audioStream) await this.publishAudioStream(audioStream);\n                    if (videoStream) {\n                        await this.publishVideoStream(videoStream, {\n                            preferredCodec: this.camera.preferredCodec\n                        });\n                    }\n                    if (screenShare) await this.publishScreenShareStream(screenShare);\n                    this.logger(\"info\", `[Rejoin]: State restored. Attempt: ${this.reconnectAttempts}`);\n                }\n            };\n            // reconnect if the connection was closed unexpectedly. example:\n            // - SFU crash or restart\n            // - network change\n            sfuClient.signalReady.then(()=>{\n                // register a handler for the \"goAway\" event\n                const unregisterGoAway = this.dispatcher.on(\"goAway\", (event)=>{\n                    const { reason } = event;\n                    this.logger(\"info\", `[Migration]: Going away from SFU... Reason: ${GoAwayReason[reason]}`);\n                    reconnect(\"migrate\", GoAwayReason[reason]).catch((err)=>{\n                        this.logger(\"warn\", `[Migration]: Failed to migrate to another SFU.`, err);\n                    });\n                });\n                sfuClient.signalWs.addEventListener(\"close\", (e)=>{\n                    // unregister the \"goAway\" handler, as we won't need it anymore for this connection.\n                    // the upcoming re-join will register a new handler anyway\n                    unregisterGoAway();\n                    // do nothing if the connection was closed on purpose\n                    if (e.code === StreamSfuClient.NORMAL_CLOSURE) return;\n                    // do nothing if the connection was closed because of a policy violation\n                    // e.g., the user has been blocked by an admin or moderator\n                    if (e.code === KnownCodes.WS_POLICY_VIOLATION) return;\n                    // When the SFU is being shut down, it sends a goAway message.\n                    // While we migrate to another SFU, we might have the WS connection\n                    // to the old SFU closed abruptly. In this case, we don't want\n                    // to reconnect to the old SFU, but rather to the new one.\n                    const isMigratingAway = e.code === KnownCodes.WS_CLOSED_ABRUPTLY && sfuClient.isMigratingAway;\n                    const isFastReconnecting = e.code === KnownCodes.WS_CLOSED_ABRUPTLY && sfuClient.isFastReconnecting;\n                    if (isMigratingAway || isFastReconnecting) return;\n                    // do nothing if the connection was closed because of a fast reconnect\n                    if (e.code === StreamSfuClient.ERROR_CONNECTION_BROKEN) return;\n                    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n                        sfuClient.isFastReconnecting = this.reconnectAttempts === 0;\n                        const strategy = sfuClient.isFastReconnecting ? \"fast\" : \"full\";\n                        reconnect(strategy, `SFU closed the WS with code: ${e.code}`).catch((err)=>{\n                            this.logger(\"error\", `[Rejoin]: ${strategy} rejoin failed for ${this.reconnectAttempts} times. Giving up.`, err);\n                            this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n                        });\n                    } else {\n                        this.logger(\"error\", \"[Rejoin]: Reconnect attempts exceeded. Giving up...\");\n                        this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n                    }\n                });\n            });\n            // handlers for connection online/offline events\n            const unsubscribeOnlineEvent = this.streamClient.on(\"connection.changed\", async (e)=>{\n                if (e.type !== \"connection.changed\") return;\n                if (!e.online) return;\n                unsubscribeOnlineEvent();\n                const currentCallingState = this.state.callingState;\n                const shouldReconnect = currentCallingState === CallingState.OFFLINE || currentCallingState === CallingState.RECONNECTING_FAILED;\n                if (!shouldReconnect) return;\n                this.logger(\"info\", \"[Rejoin]: Going online...\");\n                let isFirstReconnectAttempt = true;\n                do {\n                    try {\n                        sfuClient.isFastReconnecting = isFirstReconnectAttempt;\n                        await reconnect(isFirstReconnectAttempt ? \"fast\" : \"full\", \"Network: online\");\n                        return; // break the loop if rejoin is successful\n                    } catch (err) {\n                        this.logger(\"error\", `[Rejoin][Network]: Rejoin failed for attempt ${this.reconnectAttempts}`, err);\n                    }\n                    // wait for a bit before trying to reconnect again\n                    await sleep(retryInterval(this.reconnectAttempts));\n                    isFirstReconnectAttempt = false;\n                }while (this.reconnectAttempts < this.maxReconnectAttempts);\n                // if we're here, it means that we've exhausted all the reconnect attempts\n                this.logger(\"error\", `[Rejoin][Network]: Rejoin failed. Giving up.`);\n                this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n            });\n            const unsubscribeOfflineEvent = this.streamClient.on(\"connection.changed\", (e)=>{\n                if (e.type !== \"connection.changed\") return;\n                if (e.online) return;\n                unsubscribeOfflineEvent();\n                this.state.setCallingState(CallingState.OFFLINE);\n            });\n            this.leaveCallHooks.add(()=>{\n                unsubscribeOnlineEvent();\n                unsubscribeOfflineEvent();\n            });\n            if (!this.subscriber) {\n                this.subscriber = new Subscriber({\n                    sfuClient,\n                    dispatcher: this.dispatcher,\n                    state: this.state,\n                    connectionConfig\n                });\n            }\n            if (!this.publisher) {\n                const audioSettings = this.state.settings?.audio;\n                const isDtxEnabled = !!audioSettings?.opus_dtx_enabled;\n                const isRedEnabled = !!audioSettings?.redundant_coding_enabled;\n                this.publisher = new Publisher({\n                    sfuClient,\n                    dispatcher: this.dispatcher,\n                    state: this.state,\n                    connectionConfig,\n                    isDtxEnabled,\n                    isRedEnabled\n                });\n            }\n            if (!this.statsReporter) {\n                this.statsReporter = createStatsReporter({\n                    subscriber: this.subscriber,\n                    publisher: this.publisher,\n                    state: this.state\n                });\n            }\n            const clientDetails = getClientDetails();\n            if (!this.sfuStatsReporter && statsOptions) {\n                this.sfuStatsReporter = new SfuStatsReporter(sfuClient, {\n                    clientDetails,\n                    options: statsOptions,\n                    subscriber: this.subscriber,\n                    publisher: this.publisher\n                });\n                this.sfuStatsReporter.start();\n            }\n            try {\n                // 1. wait for the signal server to be ready before sending \"joinRequest\"\n                sfuClient.signalReady.catch((err)=>this.logger(\"error\", \"Signal ready failed\", err))// prepare a generic SDP and send it to the SFU.\n                // this is a throw-away SDP that the SFU will use to determine\n                // the capabilities of the client (codec support, etc.)\n                .then(()=>getGenericSdp(\"recvonly\")).then((sdp)=>{\n                    const subscriptions = getCurrentValue(this.trackSubscriptionsSubject);\n                    const migration = isMigrating ? {\n                        fromSfuId: data?.migrating_from || \"\",\n                        subscriptions: subscriptions.data || [],\n                        announcedTracks: this.publisher?.getCurrentTrackInfos() || []\n                    } : undefined;\n                    return sfuClient.join({\n                        subscriberSdp: sdp || \"\",\n                        clientDetails,\n                        migration,\n                        fastReconnect: previousSfuClient?.isFastReconnecting ?? false\n                    });\n                });\n                // 2. in parallel, wait for the SFU to send us the \"joinResponse\"\n                // this will throw an error if the SFU rejects the join request or\n                // fails to respond in time\n                const { callState, reconnected } = await this.waitForJoinResponse();\n                if (isReconnecting) {\n                    this.logger(\"debug\", \"[Rejoin] fast reconnected:\", reconnected);\n                }\n                if (isMigrating) {\n                    await this.subscriber.migrateTo(sfuClient, connectionConfig);\n                    await this.publisher.migrateTo(sfuClient, connectionConfig);\n                } else if (isReconnecting) {\n                    if (reconnected) {\n                        // update the SFU client instance on the subscriber and publisher\n                        this.subscriber.setSfuClient(sfuClient);\n                        this.publisher.setSfuClient(sfuClient);\n                        // and perform a full ICE restart on the publisher\n                        await this.publisher.restartIce();\n                    } else if (previousSfuClient?.isFastReconnecting) {\n                        // reconnection wasn't possible, so we need to do a full rejoin\n                        return await reconnect(\"full\", \"re-attempting\").catch((err)=>{\n                            this.logger(\"error\", `[Rejoin]: Rejoin failed forced full rejoin.`, err);\n                        });\n                    }\n                }\n                const currentParticipants = callState?.participants || [];\n                const participantCount = callState?.participantCount;\n                const startedAt = callState?.startedAt ? Timestamp.toDate(callState.startedAt) : new Date();\n                const pins = callState?.pins ?? [];\n                this.state.setParticipants(()=>{\n                    const participantLookup = this.state.getParticipantLookupBySessionId();\n                    return currentParticipants.map((p)=>{\n                        // We need to preserve the local state of the participant\n                        // (e.g. videoDimension, visibilityState, pinnedAt, etc.)\n                        // as it doesn't exist on the server.\n                        const existingParticipant = participantLookup[p.sessionId];\n                        return Object.assign(p, existingParticipant, {\n                            isLocalParticipant: p.sessionId === sfuClient.sessionId,\n                            viewportVisibilityState: existingParticipant?.viewportVisibilityState ?? {\n                                videoTrack: VisibilityState.UNKNOWN,\n                                screenShareTrack: VisibilityState.UNKNOWN\n                            }\n                        });\n                    });\n                });\n                this.state.setParticipantCount(participantCount?.total || 0);\n                this.state.setAnonymousParticipantCount(participantCount?.anonymous || 0);\n                this.state.setStartedAt(startedAt);\n                this.state.setServerSidePins(pins);\n                this.reconnectAttempts = 0; // reset the reconnect attempts counter\n                this.state.setCallingState(CallingState.JOINED);\n                try {\n                    await this.initCamera({\n                        setStatus: true\n                    });\n                    await this.initMic({\n                        setStatus: true\n                    });\n                } catch (error) {\n                    this.logger(\"warn\", \"Camera and/or mic init failed during join call\", error);\n                }\n                // 3. once we have the \"joinResponse\", and possibly reconciled the local state\n                // we schedule a fast subscription update for all remote participants\n                // that were visible before we reconnected or migrated to a new SFU.\n                const { remoteParticipants } = this.state;\n                if (remoteParticipants.length > 0) {\n                    this.updateSubscriptions(remoteParticipants, DebounceType.FAST);\n                }\n                this.logger(\"info\", `Joined call ${this.cid}`);\n            } catch (err) {\n                // join failed, try to rejoin\n                if (this.reconnectAttempts < this.maxReconnectAttempts) {\n                    this.logger(\"error\", `[Rejoin]: Rejoin ${this.reconnectAttempts} failed.`, err);\n                    await reconnect(\"full\", \"previous attempt failed\");\n                    this.logger(\"info\", `[Rejoin]: Rejoin ${this.reconnectAttempts} successful!`);\n                } else {\n                    this.logger(\"error\", `[Rejoin]: Rejoin failed for ${this.reconnectAttempts} times. Giving up.`);\n                    this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n                    throw new Error(\"Join failed\");\n                }\n            }\n        };\n        this.waitForJoinResponse = (timeout = 5000)=>{\n            return new Promise((resolve, reject)=>{\n                const unsubscribe = this.on(\"joinResponse\", (event)=>{\n                    clearTimeout(timeoutId);\n                    unsubscribe();\n                    resolve(event);\n                });\n                const timeoutId = setTimeout(()=>{\n                    unsubscribe();\n                    reject(new Error('Waiting for \"joinResponse\" has timed out'));\n                }, timeout);\n            });\n        };\n        /**\n         * Starts publishing the given video stream to the call.\n         * The stream will be stopped if the user changes an input device, or if the user leaves the call.\n         *\n         * Consecutive calls to this method will replace the previously published stream.\n         * The previous video stream will be stopped.\n         *\n         * @param videoStream the video stream to publish.\n         * @param opts the options to use when publishing the stream.\n         */ this.publishVideoStream = async (videoStream, opts = {})=>{\n            // we should wait until we get a JoinResponse from the SFU,\n            // otherwise we risk breaking the ICETrickle flow.\n            await this.assertCallJoined();\n            if (!this.publisher) {\n                this.logger(\"error\", \"Trying to publish video before join is completed\");\n                throw new Error(`Call not joined yet.`);\n            }\n            const [videoTrack] = videoStream.getVideoTracks();\n            if (!videoTrack) {\n                this.logger(\"error\", `There is no video track to publish in the stream.`);\n                return;\n            }\n            await this.publisher.publishStream(videoStream, videoTrack, TrackType.VIDEO, opts);\n        };\n        /**\n         * Starts publishing the given audio stream to the call.\n         * The stream will be stopped if the user changes an input device, or if the user leaves the call.\n         *\n         * Consecutive calls to this method will replace the audio stream that is currently being published.\n         * The previous audio stream will be stopped.\n         *\n         * @param audioStream the audio stream to publish.\n         */ this.publishAudioStream = async (audioStream)=>{\n            // we should wait until we get a JoinResponse from the SFU,\n            // otherwise we risk breaking the ICETrickle flow.\n            await this.assertCallJoined();\n            if (!this.publisher) {\n                this.logger(\"error\", \"Trying to publish audio before join is completed\");\n                throw new Error(`Call not joined yet.`);\n            }\n            const [audioTrack] = audioStream.getAudioTracks();\n            if (!audioTrack) {\n                this.logger(\"error\", `There is no audio track in the stream to publish`);\n                return;\n            }\n            await this.publisher.publishStream(audioStream, audioTrack, TrackType.AUDIO);\n        };\n        /**\n         * Starts publishing the given screen-share stream to the call.\n         *\n         * Consecutive calls to this method will replace the previous screen-share stream.\n         * The previous screen-share stream will be stopped.\n         *\n         * @param screenShareStream the screen-share stream to publish.\n         * @param opts the options to use when publishing the stream.\n         */ this.publishScreenShareStream = async (screenShareStream, opts = {})=>{\n            // we should wait until we get a JoinResponse from the SFU,\n            // otherwise we risk breaking the ICETrickle flow.\n            await this.assertCallJoined();\n            if (!this.publisher) {\n                this.logger(\"error\", \"Trying to publish screen share before join is completed\");\n                throw new Error(`Call not joined yet.`);\n            }\n            const [screenShareTrack] = screenShareStream.getVideoTracks();\n            if (!screenShareTrack) {\n                this.logger(\"error\", `There is no video track in the screen share stream to publish`);\n                return;\n            }\n            await this.publisher.publishStream(screenShareStream, screenShareTrack, TrackType.SCREEN_SHARE, opts);\n            const [screenShareAudioTrack] = screenShareStream.getAudioTracks();\n            if (screenShareAudioTrack) {\n                await this.publisher.publishStream(screenShareStream, screenShareAudioTrack, TrackType.SCREEN_SHARE_AUDIO, opts);\n            }\n        };\n        /**\n         * Stops publishing the given track type to the call, if it is currently being published.\n         * Underlying track will be stopped and removed from the publisher.\n         *\n         * @param trackType the track type to stop publishing.\n         * @param stopTrack if `true` the track will be stopped, else it will be just disabled\n         */ this.stopPublish = async (trackType, stopTrack = true)=>{\n            this.logger(\"info\", `stopPublish ${TrackType[trackType]}, stop tracks: ${stopTrack}`);\n            await this.publisher?.unpublishStream(trackType, stopTrack);\n        };\n        /**\n         * Update track subscription configuration for one or more participants.\n         * You have to create a subscription for each participant for all the different kinds of tracks you want to receive.\n         * You can only subscribe for tracks after the participant started publishing the given kind of track.\n         *\n         * @param trackType the kind of subscription to update.\n         * @param changes the list of subscription changes to do.\n         * @param type the debounce type to use for the update.\n         */ this.updateSubscriptionsPartial = (trackType, changes, type = DebounceType.SLOW)=>{\n            if (trackType === \"video\") {\n                this.logger(\"warn\", `updateSubscriptionsPartial: ${trackType} is deprecated. Please switch to 'videoTrack'`);\n                trackType = \"videoTrack\";\n            } else if (trackType === \"screen\") {\n                this.logger(\"warn\", `updateSubscriptionsPartial: ${trackType} is deprecated. Please switch to 'screenShareTrack'`);\n                trackType = \"screenShareTrack\";\n            }\n            const participants = this.state.updateParticipants(Object.entries(changes).reduce((acc, [sessionId, change])=>{\n                if (change.dimension?.height) {\n                    change.dimension.height = Math.ceil(change.dimension.height);\n                }\n                if (change.dimension?.width) {\n                    change.dimension.width = Math.ceil(change.dimension.width);\n                }\n                const prop = trackType === \"videoTrack\" ? \"videoDimension\" : trackType === \"screenShareTrack\" ? \"screenShareDimension\" : undefined;\n                if (prop) {\n                    acc[sessionId] = {\n                        [prop]: change.dimension\n                    };\n                }\n                return acc;\n            }, {}));\n            if (participants) {\n                this.updateSubscriptions(participants, type);\n            }\n        };\n        this.updateSubscriptions = (participants, type = DebounceType.SLOW)=>{\n            const subscriptions = [];\n            for (const p of participants){\n                // we don't want to subscribe to our own tracks\n                if (p.isLocalParticipant) continue;\n                // NOTE: audio tracks don't have to be requested explicitly\n                // as the SFU will implicitly subscribe us to all of them,\n                // once they become available.\n                if (p.videoDimension && p.publishedTracks.includes(TrackType.VIDEO)) {\n                    subscriptions.push({\n                        userId: p.userId,\n                        sessionId: p.sessionId,\n                        trackType: TrackType.VIDEO,\n                        dimension: p.videoDimension\n                    });\n                }\n                if (p.screenShareDimension && p.publishedTracks.includes(TrackType.SCREEN_SHARE)) {\n                    subscriptions.push({\n                        userId: p.userId,\n                        sessionId: p.sessionId,\n                        trackType: TrackType.SCREEN_SHARE,\n                        dimension: p.screenShareDimension\n                    });\n                }\n                if (p.publishedTracks.includes(TrackType.SCREEN_SHARE_AUDIO)) {\n                    subscriptions.push({\n                        userId: p.userId,\n                        sessionId: p.sessionId,\n                        trackType: TrackType.SCREEN_SHARE_AUDIO\n                    });\n                }\n            }\n            // schedule update\n            this.trackSubscriptionsSubject.next({\n                type,\n                data: subscriptions\n            });\n        };\n        /**\n         * Will enhance the reported stats with additional participant-specific information (`callStatsReport$` state [store variable](./StreamVideoClient.md/#readonlystatestore)).\n         * This is usually helpful when detailed stats for a specific participant are needed.\n         *\n         * @param sessionId the sessionId to start reporting for.\n         */ this.startReportingStatsFor = (sessionId)=>{\n            return this.statsReporter?.startReportingStatsFor(sessionId);\n        };\n        /**\n         * Opposite of `startReportingStatsFor`.\n         * Will turn off stats reporting for a specific participant.\n         *\n         * @param sessionId the sessionId to stop reporting for.\n         */ this.stopReportingStatsFor = (sessionId)=>{\n            return this.statsReporter?.stopReportingStatsFor(sessionId);\n        };\n        /**\n         * Resets the last sent reaction for the user holding the given `sessionId`. This is a local action, it won't reset the reaction on the backend.\n         *\n         * @param sessionId the session id.\n         */ this.resetReaction = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                reaction: undefined\n            });\n        };\n        /**\n         * Sets the list of criteria to sort the participants by.\n         *\n         * @param criteria the list of criteria to sort the participants by.\n         */ this.setSortParticipantsBy = (criteria)=>{\n            return this.state.setSortParticipantsBy(criteria);\n        };\n        /**\n         * Updates the list of video layers to publish.\n         *\n         * @internal\n         * @param enabledLayers the list of layers to enable.\n         */ this.updatePublishQuality = async (enabledLayers)=>{\n            return this.publisher?.updateVideoPublishQuality(enabledLayers);\n        };\n        this.assertCallJoined = ()=>{\n            return new Promise((resolve)=>{\n                this.state.callingState$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.takeWhile)((state)=>state !== CallingState.JOINED, true), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.filter)((s)=>s === CallingState.JOINED)).subscribe(()=>resolve());\n            });\n        };\n        /**\n         * Sends a reaction to the other call participants.\n         *\n         * @param reaction the reaction to send.\n         */ this.sendReaction = async (reaction)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/reaction`, reaction);\n        };\n        /**\n         * Blocks the user with the given `userId`.\n         *\n         * @param userId the id of the user to block.\n         */ this.blockUser = async (userId)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/block`, {\n                user_id: userId\n            });\n        };\n        /**\n         * Unblocks the user with the given `userId`.\n         *\n         * @param userId the id of the user to unblock.\n         */ this.unblockUser = async (userId)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/unblock`, {\n                user_id: userId\n            });\n        };\n        /**\n         * Mutes the current user.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteSelf = (type)=>{\n            const myUserId = this.currentUserId;\n            if (myUserId) {\n                return this.muteUser(myUserId, type);\n            }\n        };\n        /**\n         * Mutes all the other participants.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteOthers = (type)=>{\n            const trackType = muteTypeToTrackType(type);\n            if (!trackType) return;\n            const userIdsToMute = [];\n            for (const participant of this.state.remoteParticipants){\n                if (participant.publishedTracks.includes(trackType)) {\n                    userIdsToMute.push(participant.userId);\n                }\n            }\n            return this.muteUser(userIdsToMute, type);\n        };\n        /**\n         * Mutes the user with the given `userId`.\n         *\n         * @param userId the id of the user to mute.\n         * @param type the type of the mute operation.\n         */ this.muteUser = (userId, type)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mute_users`, {\n                user_ids: Array.isArray(userId) ? userId : [\n                    userId\n                ],\n                [type]: true\n            });\n        };\n        /**\n         * Will mute all users in the call.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteAllUsers = (type)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mute_users`, {\n                mute_all_users: true,\n                [type]: true\n            });\n        };\n        /**\n         * Starts recording the call\n         */ this.startRecording = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/start_recording`, request ? request : {});\n        };\n        /**\n         * Stops recording the call\n         */ this.stopRecording = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_recording`, {});\n        };\n        /**\n         * Sends a `call.permission_request` event to all users connected to the call. The call settings object contains infomration about which permissions can be requested during a call (for example a user might be allowed to request permission to publish audio, but not video).\n         */ this.requestPermissions = async (data)=>{\n            const { permissions } = data;\n            const canRequestPermissions = permissions.every((permission)=>this.permissionsContext.canRequest(permission));\n            if (!canRequestPermissions) {\n                throw new Error(`You are not allowed to request permissions: ${permissions.join(\", \")}`);\n            }\n            return this.streamClient.post(`${this.streamClientBasePath}/request_permission`, data);\n        };\n        /**\n         * Allows you to grant certain permissions to a user in a call.\n         * The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * Supported permissions that can be granted are:\n         * - `send-audio`\n         * - `send-video`\n         * - `screenshare`\n         *\n         * @param userId the id of the user to grant permissions to.\n         * @param permissions the permissions to grant.\n         */ this.grantPermissions = async (userId, permissions)=>{\n            return this.updateUserPermissions({\n                user_id: userId,\n                grant_permissions: permissions\n            });\n        };\n        /**\n         * Allows you to revoke certain permissions from a user in a call.\n         * The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * Supported permissions that can be revoked are:\n         * - `send-audio`\n         * - `send-video`\n         * - `screenshare`\n         *\n         * @param userId the id of the user to revoke permissions from.\n         * @param permissions the permissions to revoke.\n         */ this.revokePermissions = async (userId, permissions)=>{\n            return this.updateUserPermissions({\n                user_id: userId,\n                revoke_permissions: permissions\n            });\n        };\n        /**\n         * Allows you to grant or revoke a specific permission to a user in a call. The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * When revoking a permission, this endpoint will also mute the relevant track from the user. This is similar to muting a user with the difference that the user will not be able to unmute afterwards.\n         *\n         * Supported permissions that can be granted or revoked: `send-audio`, `send-video` and `screenshare`.\n         *\n         * `call.permissions_updated` event is sent to all members of the call.\n         *\n         */ this.updateUserPermissions = async (data)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/user_permissions`, data);\n        };\n        /**\n         * Starts the livestreaming of the call.\n         *\n         * @param data the request data.\n         * @param params the request params.\n         */ this.goLive = async (data = {}, params)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/go_live`, data, params);\n        };\n        /**\n         * Stops the livestreaming of the call.\n         */ this.stopLive = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_live`, {});\n        };\n        /**\n         * Starts the broadcasting of the call.\n         */ this.startHLS = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/start_broadcasting`, {});\n        };\n        /**\n         * Stops the broadcasting of the call.\n         */ this.stopHLS = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_broadcasting`, {});\n        };\n        /**\n         * Updates the call settings or custom data.\n         *\n         * @param updates the updates to apply to the call.\n         */ this.update = async (updates)=>{\n            const response = await this.streamClient.patch(`${this.streamClientBasePath}`, updates);\n            const { call, members, own_capabilities } = response;\n            this.state.updateFromCallResponse(call);\n            this.state.setMembers(members);\n            this.state.setOwnCapabilities(own_capabilities);\n            return response;\n        };\n        /**\n         * Ends the call. Once the call is ended, it cannot be re-joined.\n         */ this.endCall = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mark_ended`);\n        };\n        /**\n         * Pins the given session to the top of the participants list.\n         *\n         * @param sessionId the sessionId to pin.\n         */ this.pin = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                pin: {\n                    isLocalPin: true,\n                    pinnedAt: Date.now()\n                }\n            });\n        };\n        /**\n         * Unpins the given session from the top of the participants list.\n         *\n         * @param sessionId the sessionId to unpin.\n         */ this.unpin = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                pin: undefined\n            });\n        };\n        /**\n         * Pins the given session to the top of the participants list for everyone\n         * in the call.\n         * You can execute this method only if you have the `pin-for-everyone` capability.\n         *\n         * @param request the request object.\n         */ this.pinForEveryone = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/pin`, request);\n        };\n        /**\n         * Unpins the given session from the top of the participants list for everyone\n         * in the call.\n         * You can execute this method only if you have the `pin-for-everyone` capability.\n         *\n         * @param request the request object.\n         */ this.unpinForEveryone = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/unpin`, request);\n        };\n        /**\n         * Query call members with filter query. The result won't be stored in call state.\n         * @param request\n         * @returns\n         */ this.queryMembers = (request)=>{\n            return this.streamClient.post(\"/call/members\", {\n                ...request || {},\n                id: this.id,\n                type: this.type\n            });\n        };\n        /**\n         * Will update the call members.\n         *\n         * @param data the request data.\n         */ this.updateCallMembers = async (data)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/members`, data);\n        };\n        /**\n         * Schedules an auto-drop timeout based on the call settings.\n         * Applicable only for ringing calls.\n         */ this.scheduleAutoDrop = ()=>{\n            clearTimeout(this.dropTimeout);\n            this.leaveCallHooks.add(createSubscription(this.state.settings$, (settings)=>{\n                if (!settings) return;\n                // ignore if the call is not ringing\n                if (this.state.callingState !== CallingState.RINGING) return;\n                const timeoutInMs = settings.ring.auto_cancel_timeout_ms;\n                // 0 means no auto-drop\n                if (timeoutInMs <= 0) return;\n                clearTimeout(this.dropTimeout);\n                this.dropTimeout = setTimeout(()=>{\n                    this.leave({\n                        reason: \"ring: timeout\"\n                    }).catch((err)=>{\n                        this.logger(\"error\", \"Failed to drop call\", err);\n                    });\n                }, timeoutInMs);\n            }));\n        };\n        /**\n         * Retrieves the list of recordings for the current call or call session.\n         *\n         * If `callSessionId` is provided, it will return the recordings for that call session.\n         * Otherwise, all recordings for the current call will be returned.\n         *\n         * @param callSessionId the call session id to retrieve recordings for.\n         */ this.queryRecordings = async (callSessionId)=>{\n            let endpoint = this.streamClientBasePath;\n            if (callSessionId) {\n                endpoint = `${endpoint}/${callSessionId}`;\n            }\n            return this.streamClient.get(`${endpoint}/recordings`);\n        };\n        /**\n         * Retrieve call statistics for a particular call session (historical).\n         * Here `callSessionID` is mandatory.\n         *\n         * @param callSessionID the call session ID to retrieve statistics for.\n         * @returns The call stats.\n         */ this.getCallStats = async (callSessionID)=>{\n            const endpoint = `${this.streamClientBasePath}/stats/${callSessionID}`;\n            return this.streamClient.get(endpoint);\n        };\n        /**\n         * Sends a custom event to all call participants.\n         *\n         * @param payload the payload to send.\n         */ this.sendCustomEvent = async (payload)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/event`, {\n                custom: payload\n            });\n        };\n        this.applyDeviceConfig = ()=>{\n            this.initCamera({\n                setStatus: false\n            });\n            this.initMic({\n                setStatus: false\n            });\n        };\n        /**\n         * Will begin tracking the given element for visibility changes within the\n         * configured viewport element (`call.setViewport`).\n         *\n         * @param element the element to track.\n         * @param sessionId the session id.\n         * @param trackType the video mode.\n         */ this.trackElementVisibility = (element, sessionId, trackType)=>{\n            return this.dynascaleManager.trackElementVisibility(element, sessionId, trackType);\n        };\n        /**\n         * Sets the viewport element to track bound video elements for visibility.\n         *\n         * @param element the viewport element.\n         */ this.setViewport = (element)=>{\n            return this.dynascaleManager.setViewport(element);\n        };\n        /**\n         * Binds a DOM <video> element to the given session id.\n         * This method will make sure that the video element will play\n         * the correct video stream for the given session id.\n         *\n         * Under the hood, it would also keep track of the video element dimensions\n         * and update the subscription accordingly in order to optimize the bandwidth.\n         *\n         * If a \"viewport\" is configured, the video element will be automatically\n         * tracked for visibility and the subscription will be updated accordingly.\n         *\n         * @param videoElement the video element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         */ this.bindVideoElement = (videoElement, sessionId, trackType)=>{\n            const unbind = this.dynascaleManager.bindVideoElement(videoElement, sessionId, trackType);\n            if (!unbind) return;\n            this.leaveCallHooks.add(unbind);\n            return ()=>{\n                this.leaveCallHooks.delete(unbind);\n                unbind();\n            };\n        };\n        /**\n         * Binds a DOM <audio> element to the given session id.\n         *\n         * This method will make sure that the audio element will\n         * play the correct audio stream for the given session id.\n         *\n         * @param audioElement the audio element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of audio.\n         */ this.bindAudioElement = (audioElement, sessionId, trackType = \"audioTrack\")=>{\n            const unbind = this.dynascaleManager.bindAudioElement(audioElement, sessionId, trackType);\n            if (!unbind) return;\n            this.leaveCallHooks.add(unbind);\n            return ()=>{\n                this.leaveCallHooks.delete(unbind);\n                unbind();\n            };\n        };\n        /**\n         * Binds a DOM <img> element to this call's thumbnail (if enabled in settings).\n         *\n         * @param imageElement the image element to bind to.\n         * @param opts options for the binding.\n         */ this.bindCallThumbnailElement = (imageElement, opts = {})=>{\n            const handleError = ()=>{\n                imageElement.src = opts.fallbackImageSource || \"https://getstream.io/random_svg/?name=x&id=x\";\n            };\n            const unsubscribe = createSubscription(this.state.thumbnails$, (thumbnails)=>{\n                if (!thumbnails) return;\n                imageElement.addEventListener(\"error\", handleError);\n                const thumbnailUrl = new URL(thumbnails.image_url);\n                thumbnailUrl.searchParams.set(\"w\", String(imageElement.clientWidth));\n                thumbnailUrl.searchParams.set(\"h\", String(imageElement.clientHeight));\n                imageElement.src = thumbnailUrl.toString();\n            });\n            return ()=>{\n                unsubscribe();\n                imageElement.removeEventListener(\"error\", handleError);\n            };\n        };\n        this.type = type;\n        this.id = id;\n        this.cid = `${type}:${id}`;\n        this.ringingSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.BehaviorSubject(ringing);\n        this.watching = watching;\n        this.streamClient = streamClient;\n        this.clientStore = clientStore;\n        this.streamClientBasePath = `/call/${this.type}/${this.id}`;\n        this.logger = getLogger([\n            \"Call\"\n        ]);\n        const callTypeConfig = CallTypes.get(type);\n        const participantSorter = sortParticipantsBy || callTypeConfig.options.sortParticipantsBy;\n        if (participantSorter) {\n            this.state.setSortParticipantsBy(participantSorter);\n        }\n        this.state.setMembers(members || []);\n        this.state.setOwnCapabilities(ownCapabilities || []);\n        this.state.setCallingState(ringing ? CallingState.RINGING : CallingState.IDLE);\n        this.on(\"all\", (event)=>{\n            // update state with the latest event data\n            this.state.updateFromEvent(event);\n        });\n        this.leaveCallHooks.add(registerEventHandlers(this, this.state, this.dispatcher));\n        this.registerEffects();\n        this.leaveCallHooks.add(createSubscription(this.trackSubscriptionsSubject.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.debounce)((v)=>(0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.timer)(v.type)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.map)((v)=>v.data)), (subscriptions)=>this.sfuClient?.updateSubscriptions(subscriptions)));\n        this.camera = new CameraManager(this);\n        this.microphone = new MicrophoneManager(this);\n        this.speaker = new SpeakerManager(this);\n        this.screenShare = new ScreenShareManager(this);\n    }\n    registerEffects() {\n        this.leaveCallHooks.add(// handles updating the permissions context when the settings change.\n        createSubscription(this.state.settings$, (settings)=>{\n            if (!settings) return;\n            this.permissionsContext.setCallSettings(settings);\n        }));\n        this.leaveCallHooks.add(// handle the case when the user permissions are modified.\n        createSubscription(this.state.ownCapabilities$, (ownCapabilities)=>{\n            // update the permission context.\n            this.permissionsContext.setPermissions(ownCapabilities);\n            if (!this.publisher) return;\n            // check if the user still has publishing permissions and stop publishing if not.\n            const permissionToTrackType = {\n                [OwnCapability.SEND_AUDIO]: TrackType.AUDIO,\n                [OwnCapability.SEND_VIDEO]: TrackType.VIDEO,\n                [OwnCapability.SCREENSHARE]: TrackType.SCREEN_SHARE\n            };\n            for (const [permission, trackType] of Object.entries(permissionToTrackType)){\n                const hasPermission = this.permissionsContext.hasPermission(permission);\n                if (!hasPermission && (this.publisher.isPublishing(trackType) || this.publisher.isLive(trackType))) {\n                    // Stop tracks, then notify device manager\n                    this.stopPublish(trackType).catch((err)=>{\n                        this.logger(\"error\", `Error stopping publish ${trackType}`, err);\n                    }).then(()=>{\n                        if (trackType === TrackType.VIDEO && this.camera.state.status === \"enabled\") {\n                            this.camera.disable().catch((err)=>this.logger(\"error\", `Error disabling camera after permission revoked`, err));\n                        }\n                        if (trackType === TrackType.AUDIO && this.microphone.state.status === \"enabled\") {\n                            this.microphone.disable().catch((err)=>this.logger(\"error\", `Error disabling microphone after permission revoked`, err));\n                        }\n                    });\n                }\n            }\n        }));\n        this.leaveCallHooks.add(// handles the case when the user is blocked by the call owner.\n        createSubscription(this.state.blockedUserIds$, async (blockedUserIds)=>{\n            if (!blockedUserIds || blockedUserIds.length === 0) return;\n            const currentUserId = this.currentUserId;\n            if (currentUserId && blockedUserIds.includes(currentUserId)) {\n                this.logger(\"info\", \"Leaving call because of being blocked\");\n                await this.leave({\n                    reason: \"user blocked\"\n                });\n            }\n        }));\n        this.leaveCallHooks.add(// watch for auto drop cancellation\n        createSubscription(this.state.callingState$, (callingState)=>{\n            if (!this.ringing) return;\n            if (callingState === CallingState.JOINED || callingState === CallingState.JOINING || callingState === CallingState.LEFT) {\n                clearTimeout(this.dropTimeout);\n                this.dropTimeout = undefined;\n            }\n        }));\n        this.leaveCallHooks.add(// \"ringing\" mode effects and event handlers\n        createSubscription(this.ringingSubject, (isRinging)=>{\n            if (!isRinging) return;\n            this.scheduleAutoDrop();\n            if (this.state.callingState === CallingState.IDLE) {\n                this.state.setCallingState(CallingState.RINGING);\n            }\n            this.leaveCallHooks.add(registerRingingCallEventHandlers(this));\n        }));\n    }\n    /**\n     * A flag indicating whether the call is \"ringing\" type of call.\n     */ get ringing() {\n        return getCurrentValue(this.ringingSubject);\n    }\n    /**\n     * Retrieves the current user ID.\n     */ get currentUserId() {\n        return this.clientStore.connectedUser?.id;\n    }\n    /**\n     * A flag indicating whether the call was created by the current user.\n     */ get isCreatedByMe() {\n        return this.state.createdBy?.id === this.currentUserId;\n    }\n    async initCamera(options) {\n        // Wait for any in progress camera operation\n        if (this.camera.enablePromise) {\n            await this.camera.enablePromise;\n        }\n        if (this.camera.disablePromise) {\n            await this.camera.disablePromise;\n        }\n        if (this.state.localParticipant?.videoStream || !this.permissionsContext.hasPermission(\"send-video\")) {\n            return;\n        }\n        // Set camera direction if it's not yet set\n        if (!this.camera.state.direction && !this.camera.state.selectedDevice) {\n            let defaultDirection = \"front\";\n            const backendSetting = this.state.settings?.video.camera_facing;\n            if (backendSetting) {\n                defaultDirection = backendSetting === \"front\" ? \"front\" : \"back\";\n            }\n            this.camera.state.setDirection(defaultDirection);\n        }\n        // Set target resolution\n        const targetResolution = this.state.settings?.video.target_resolution;\n        if (targetResolution) {\n            await this.camera.selectTargetResolution(targetResolution);\n        }\n        if (options.setStatus) {\n            // Publish already that was set before we joined\n            if (this.camera.state.status === \"enabled\" && this.camera.state.mediaStream && !this.publisher?.isPublishing(TrackType.VIDEO)) {\n                await this.publishVideoStream(this.camera.state.mediaStream, {\n                    preferredCodec: this.camera.preferredCodec\n                });\n            }\n            // Start camera if backend config specifies, and there is no local setting\n            if (this.camera.state.status === undefined && this.state.settings?.video.camera_default_on) {\n                await this.camera.enable();\n            }\n        }\n    }\n    async initMic(options) {\n        // Wait for any in progress mic operation\n        if (this.microphone.enablePromise) {\n            await this.microphone.enablePromise;\n        }\n        if (this.microphone.disablePromise) {\n            await this.microphone.disablePromise;\n        }\n        if (this.state.localParticipant?.audioStream || !this.permissionsContext.hasPermission(\"send-audio\")) {\n            return;\n        }\n        if (options.setStatus) {\n            // Publish media stream that was set before we joined\n            if (this.microphone.state.status === \"enabled\" && this.microphone.state.mediaStream && !this.publisher?.isPublishing(TrackType.AUDIO)) {\n                await this.publishAudioStream(this.microphone.state.mediaStream);\n            }\n            // Start mic if backend config specifies, and there is no local setting\n            if (this.microphone.state.status === undefined && this.state.settings?.audio.mic_default_on) {\n                await this.microphone.enable();\n            }\n        }\n    }\n}\nclass InsightMetrics {\n    constructor(){\n        this.connectionStartTimestamp = null;\n        this.wsTotalFailures = 0;\n        this.wsConsecutiveFailures = 0;\n        this.instanceClientId = randomId();\n    }\n}\n/**\n * postInsights is not supposed to be used by end users directly within chat application, and thus is kept isolated\n * from all the client/connection code/logic.\n *\n * @param insightType\n * @param insights\n */ const postInsights = async (insightType, insights)=>{\n    const maxAttempts = 3;\n    for(let i = 0; i < maxAttempts; i++){\n        try {\n            await axios__WEBPACK_IMPORTED_MODULE_18__[\"default\"].post(`https://chat-insights.getstream.io/insights/${insightType}`, insights);\n        } catch (e) {\n            await sleep((i + 1) * 3000);\n            continue;\n        }\n        break;\n    }\n};\nfunction buildWsFatalInsight(connection, event) {\n    return {\n        ...event,\n        ...buildWsBaseInsight(connection)\n    };\n}\nfunction buildWsBaseInsight(connection) {\n    const { client } = connection;\n    return {\n        ready_state: connection.ws?.readyState,\n        url: connection._buildUrl(),\n        api_key: client.key,\n        start_ts: client.insightMetrics.connectionStartTimestamp,\n        end_ts: new Date().getTime(),\n        auth_type: client.getAuthType(),\n        token: client.tokenManager.token,\n        user_id: client.userID,\n        user_details: client._user,\n        // device: client.options.device,\n        device: \"browser\",\n        client_id: connection.connectionID,\n        ws_details: connection.ws,\n        ws_consecutive_failures: client.insightMetrics.wsConsecutiveFailures,\n        ws_total_failures: client.insightMetrics.wsTotalFailures,\n        request_id: connection.requestID,\n        online: typeof navigator !== \"undefined\" ? navigator?.onLine : null,\n        user_agent: typeof navigator !== \"undefined\" ? navigator?.userAgent : null,\n        instance_client_id: client.insightMetrics.instanceClientId\n    };\n}\nfunction buildWsSuccessAfterFailureInsight(connection) {\n    return buildWsBaseInsight(connection);\n}\n// Type guards to check WebSocket error type\nconst isCloseEvent = (res)=>res.code !== undefined;\nconst isErrorEvent = (res)=>res.error !== undefined;\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */ class StableWSConnection {\n    constructor(client){\n        this._log = (msg, extra = {}, level = \"info\")=>{\n            this.client.logger(level, \"connection:\" + msg, {\n                ...extra\n            });\n        };\n        this.setClient = (client)=>{\n            this.client = client;\n        };\n        /**\n         * Builds and returns the url for websocket.\n         * @private\n         * @returns url string\n         */ this._buildUrl = ()=>{\n            const params = new URLSearchParams();\n            // const qs = encodeURIComponent(this.client._buildWSPayload(this.requestID));\n            // params.set('json', qs);\n            params.set(\"api_key\", this.client.key);\n            params.set(\"stream-auth-type\", this.client.getAuthType());\n            params.set(\"X-Stream-Client\", this.client.getUserAgent());\n            // params.append('authorization', this.client._getToken()!);\n            return `${this.client.wsBaseURL}/connect?${params.toString()}`;\n        };\n        /**\n         * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n         *\n         * @param {Event} event Event with type online or offline\n         *\n         */ this.onlineStatusChanged = (event)=>{\n            if (event.type === \"offline\") {\n                // mark the connection as down\n                this._log(\"onlineStatusChanged() - Status changing to offline\");\n                // we know that the app is offline so dispatch the unhealthy connection event immediately\n                this._setHealth(false, true);\n            } else if (event.type === \"online\") {\n                // retry right now...\n                // We check this.isHealthy, not sure if it's always\n                // smart to create a new WS connection if the old one is still up and running.\n                // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n                this._log(`onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`);\n                if (!this.isHealthy) {\n                    this._reconnect({\n                        interval: 10\n                    });\n                }\n            }\n        };\n        this.onopen = (wsID)=>{\n            if (this.wsID !== wsID) return;\n            const user = this.client.user;\n            if (!user) {\n                this.client.logger(\"error\", `User not set, can't connect to WS`);\n                return;\n            }\n            const token = this.client._getToken();\n            if (!token) {\n                this.client.logger(\"error\", `Token not set, can't connect authenticate`);\n                return;\n            }\n            const authMessage = {\n                token,\n                user_details: {\n                    id: user.id,\n                    name: user.name,\n                    image: user.image,\n                    custom: user.custom\n                }\n            };\n            this.authenticationSent = true;\n            this.ws?.send(JSON.stringify(authMessage));\n            this._log(\"onopen() - onopen callback\", {\n                wsID\n            });\n        };\n        this.onmessage = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            this._log(\"onmessage() - onmessage callback\", {\n                event,\n                wsID\n            });\n            const data = typeof event.data === \"string\" ? JSON.parse(event.data) : null;\n            // we wait till the first message before we consider the connection open.\n            // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n            // after that a ws.onclose.\n            if (!this.isResolved && data && data.type === \"connection.error\") {\n                this.isResolved = true;\n                if (data.error) {\n                    // @ts-expect-error - the types of _errorFromWSEvent are incorrect\n                    this.rejectPromise?.(this._errorFromWSEvent(data, false));\n                    return;\n                }\n            }\n            // trigger the event..\n            this.lastEvent = new Date();\n            if (data && (data.type === \"health.check\" || data.type === \"connection.ok\")) {\n                // the initial health-check should come from the client\n                this.scheduleNextPing();\n            }\n            if (data && data.type === \"connection.ok\") {\n                this.resolvePromise?.(data);\n                this._setHealth(true);\n            }\n            if (data && data.type === \"connection.error\" && data.error) {\n                const { code } = data.error;\n                this.isHealthy = false;\n                this.isConnecting = false;\n                this.consecutiveFailures += 1;\n                if (code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                    clearTimeout(this.connectionCheckTimeoutRef);\n                    this._log(\"connect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n                    this._reconnect({\n                        refreshToken: true\n                    });\n                }\n            }\n            if (data) {\n                this.client.dispatchEvent(data);\n            }\n            this.scheduleConnectionCheck();\n        };\n        this.onclose = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            this._log(\"onclose() - onclose callback - \" + event.code, {\n                event,\n                wsID\n            });\n            if (event.code === KnownCodes.WS_CLOSED_SUCCESS) {\n                // this is a permanent error raised by stream..\n                // usually caused by invalid auth details\n                const error = new Error(`WS connection reject with error ${event.reason}`);\n                error.reason = event.reason;\n                error.code = event.code;\n                error.wasClean = event.wasClean;\n                error.target = event.target;\n                this.rejectPromise?.(error);\n                this._log(`onclose() - WS connection reject with error ${event.reason}`, {\n                    event\n                });\n            } else {\n                this.consecutiveFailures += 1;\n                this.totalFailures += 1;\n                this._setHealth(false);\n                this.isConnecting = false;\n                this.rejectPromise?.(this._errorFromWSEvent(event));\n                this._log(`onclose() - WS connection closed. Calling reconnect ...`, {\n                    event\n                });\n                // reconnect if its an abnormal failure\n                this._reconnect();\n            }\n        };\n        this.onerror = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            this.consecutiveFailures += 1;\n            this.totalFailures += 1;\n            this._setHealth(false);\n            this.isConnecting = false;\n            this.rejectPromise?.(this._errorFromWSEvent(event));\n            this._log(`onerror() - WS connection resulted into error`, {\n                event\n            });\n            this._reconnect();\n        };\n        /**\n         * _setHealth - Sets the connection to healthy or unhealthy.\n         * Broadcasts an event in case the connection status changed.\n         *\n         * @param {boolean} healthy boolean indicating if the connection is healthy or not\n         * @param {boolean} dispatchImmediately boolean indicating to dispatch event immediately even if the connection is unhealthy\n         *\n         */ this._setHealth = (healthy, dispatchImmediately = false)=>{\n            if (healthy === this.isHealthy) return;\n            this.isHealthy = healthy;\n            if (this.isHealthy || dispatchImmediately) {\n                this.client.dispatchEvent({\n                    type: \"connection.changed\",\n                    online: this.isHealthy\n                });\n                return;\n            }\n            // we're offline, wait few seconds and fire and event if still offline\n            setTimeout(()=>{\n                if (this.isHealthy) return;\n                this.client.dispatchEvent({\n                    type: \"connection.changed\",\n                    online: this.isHealthy\n                });\n            }, 5000);\n        };\n        /**\n         * _errorFromWSEvent - Creates an error object for the WS event\n         *\n         */ this._errorFromWSEvent = (event, isWSFailure = true)=>{\n            let code;\n            let statusCode;\n            let message;\n            if (isCloseEvent(event)) {\n                code = event.code;\n                statusCode = \"unknown\";\n                message = event.reason;\n            }\n            if (isErrorEvent(event)) {\n                code = event.error.code;\n                statusCode = event.error.StatusCode;\n                message = event.error.message;\n            }\n            // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.\n            this._log(`_errorFromWSEvent() - WS failed with code ${code}`, {\n                event\n            }, \"warn\");\n            const error = new Error(`WS failed with code ${code} and reason - ${message}`);\n            error.code = code;\n            /**\n             * StatusCode does not exist on any event types but has been left\n             * as is to preserve JS functionality during the TS implementation\n             */ error.StatusCode = statusCode;\n            error.isWSFailure = isWSFailure;\n            return error;\n        };\n        /**\n         * _setupPromise - sets up the this.connectOpen promise\n         */ this._setupConnectionPromise = ()=>{\n            this.isResolved = false;\n            /** a promise that is resolved once ws.open is called */ this.connectionOpen = new Promise((resolve, reject)=>{\n                this.resolvePromise = resolve;\n                this.rejectPromise = reject;\n            });\n        };\n        /**\n         * Schedules a next health check ping for websocket.\n         */ this.scheduleNextPing = ()=>{\n            if (this.healthCheckTimeoutRef) {\n                clearTimeout(this.healthCheckTimeoutRef);\n            }\n            // 30 seconds is the recommended interval (messenger uses this)\n            this.healthCheckTimeoutRef = setTimeout(()=>{\n                // send the healthcheck..., server replies with a health check event\n                const data = [\n                    {\n                        type: \"health.check\",\n                        client_id: this.client.clientID\n                    }\n                ];\n                // try to send on the connection\n                try {\n                    this.ws?.send(JSON.stringify(data));\n                } catch (e) {\n                // error will already be detected elsewhere\n                }\n            }, this.pingInterval);\n        };\n        /**\n         * scheduleConnectionCheck - schedules a check for time difference between last received event and now.\n         * If the difference is more than 35 seconds, it means our health check logic has failed and websocket needs\n         * to be reconnected.\n         */ this.scheduleConnectionCheck = ()=>{\n            if (this.connectionCheckTimeoutRef) {\n                clearTimeout(this.connectionCheckTimeoutRef);\n            }\n            this.connectionCheckTimeoutRef = setTimeout(()=>{\n                const now = new Date();\n                if (this.lastEvent && now.getTime() - this.lastEvent.getTime() > this.connectionCheckTimeout) {\n                    this._log(\"scheduleConnectionCheck - going to reconnect\");\n                    this._setHealth(false);\n                    this._reconnect();\n                }\n            }, this.connectionCheckTimeout);\n        };\n        this.client = client;\n        /** consecutive failures influence the duration of the timeout */ this.consecutiveFailures = 0;\n        /** keep track of the total number of failures */ this.totalFailures = 0;\n        /** We only make 1 attempt to reconnect at the same time.. */ this.isConnecting = false;\n        /** True after the auth payload is sent to the server */ this.authenticationSent = false;\n        /** To avoid reconnect if client is disconnected */ this.isDisconnected = false;\n        /** Boolean that indicates if the connection promise is resolved */ this.isResolved = false;\n        /** Boolean that indicates if we have a working connection to the server */ this.isHealthy = false;\n        /** Incremented when a new WS connection is made */ this.wsID = 1;\n        /** Store the last event time for health checks */ this.lastEvent = null;\n        /** Send a health check message every 25 seconds */ this.pingInterval = 25 * 1000;\n        this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n        addConnectionEventListeners(this.onlineStatusChanged);\n    }\n    /**\n     * connect - Connect to the WS URL\n     * the default 15s timeout allows between 2~3 tries\n     * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n     */ async connect(timeout = 15000) {\n        if (this.isConnecting) {\n            throw Error(`You've called connect twice, can only attempt 1 connection at the time`);\n        }\n        this.isDisconnected = false;\n        try {\n            const healthCheck = await this._connect();\n            this.consecutiveFailures = 0;\n            this._log(`connect() - Established ws connection with healthcheck: ${healthCheck}`);\n        } catch (error) {\n            this.isHealthy = false;\n            this.consecutiveFailures += 1;\n            if (// @ts-ignore\n            error.code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                this._log(\"connect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n                this._reconnect({\n                    refreshToken: true\n                });\n            } else {\n                // @ts-ignore\n                if (!error.isWSFailure) {\n                    // API rejected the connection and we should not retry\n                    throw new Error(JSON.stringify({\n                        // @ts-ignore\n                        code: error.code,\n                        // @ts-ignore\n                        StatusCode: error.StatusCode,\n                        // @ts-ignore\n                        message: error.message,\n                        // @ts-ignore\n                        isWSFailure: error.isWSFailure\n                    }));\n                }\n            }\n        }\n        return await this._waitForHealthy(timeout);\n    }\n    /**\n     * _waitForHealthy polls the promise connection to see if its resolved until it times out\n     * the default 15s timeout allows between 2~3 tries\n     * @param timeout duration(ms)\n     */ async _waitForHealthy(timeout = 15000) {\n        return Promise.race([\n            (async ()=>{\n                const interval = 50; // ms\n                for(let i = 0; i <= timeout; i += interval){\n                    try {\n                        return await this.connectionOpen;\n                    } catch (error) {\n                        if (i === timeout) {\n                            throw new Error(JSON.stringify({\n                                code: error.code,\n                                StatusCode: error.StatusCode,\n                                message: error.message,\n                                isWSFailure: error.isWSFailure\n                            }));\n                        }\n                        await sleep(interval);\n                    }\n                }\n            })(),\n            (async ()=>{\n                await sleep(timeout);\n                this.isConnecting = false;\n                throw new Error(JSON.stringify({\n                    code: \"\",\n                    StatusCode: \"\",\n                    message: \"initial WS connection could not be established\",\n                    isWSFailure: true\n                }));\n            })()\n        ]);\n    }\n    /**\n     * disconnect - Disconnect the connection and doesn't recover...\n     *\n     */ disconnect(timeout) {\n        this._log(`disconnect() - Closing the websocket connection for wsID ${this.wsID}`);\n        this.wsID += 1;\n        this.isConnecting = false;\n        this.isDisconnected = true;\n        // start by removing all the listeners\n        if (this.healthCheckTimeoutRef) {\n            clearInterval(this.healthCheckTimeoutRef);\n        }\n        if (this.connectionCheckTimeoutRef) {\n            clearInterval(this.connectionCheckTimeoutRef);\n        }\n        removeConnectionEventListeners(this.onlineStatusChanged);\n        this.isHealthy = false;\n        // remove ws handlers...\n        if (this.ws && this.ws.removeAllListeners) {\n            this.ws.removeAllListeners();\n        }\n        let isClosedPromise;\n        // and finally close...\n        // Assigning to local here because we will remove it from this before the\n        // promise resolves.\n        const { ws } = this;\n        if (ws && ws.close && ws.readyState === ws.OPEN) {\n            isClosedPromise = new Promise((resolve)=>{\n                const onclose = (event)=>{\n                    this._log(`disconnect() - resolving isClosedPromise ${event ? \"with\" : \"without\"} close frame`, {\n                        event\n                    });\n                    resolve();\n                };\n                ws.onclose = onclose;\n                // In case we don't receive close frame websocket server in time,\n                // lets not wait for more than 1 second.\n                setTimeout(onclose, timeout != null ? timeout : 1000);\n            });\n            this._log(`disconnect() - Manually closed connection by calling client.disconnect()`);\n            ws.close(KnownCodes.WS_CLOSED_SUCCESS, \"Manually closed connection by calling client.disconnect()\");\n        } else {\n            this._log(`disconnect() - ws connection doesn't exist or it is already closed.`);\n            isClosedPromise = Promise.resolve();\n        }\n        delete this.ws;\n        return isClosedPromise;\n    }\n    /**\n     * _connect - Connect to the WS endpoint\n     *\n     * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n     */ async _connect() {\n        if (this.isConnecting || this.isDisconnected && this.client.options.enableWSFallback) return; // simply ignore _connect if it's currently trying to connect\n        this.isConnecting = true;\n        this.requestID = randomId();\n        this.client.insightMetrics.connectionStartTimestamp = new Date().getTime();\n        let isTokenReady = false;\n        try {\n            this._log(`_connect() - waiting for token`);\n            await this.client.tokenManager.tokenReady();\n            isTokenReady = true;\n        } catch (e) {\n        // token provider has failed before, so try again\n        }\n        try {\n            if (!isTokenReady) {\n                this._log(`_connect() - tokenProvider failed before, so going to retry`);\n                await this.client.tokenManager.loadToken();\n            }\n            this._setupConnectionPromise();\n            const wsURL = this._buildUrl();\n            this._log(`_connect() - Connecting to ${wsURL}`, {\n                wsURL,\n                requestID: this.requestID\n            });\n            this.ws = new (isomorphic_ws__WEBPACK_IMPORTED_MODULE_4___default())(wsURL);\n            this.ws.onopen = this.onopen.bind(this, this.wsID);\n            this.ws.onclose = this.onclose.bind(this, this.wsID);\n            this.ws.onerror = this.onerror.bind(this, this.wsID);\n            this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n            const response = await this.connectionOpen;\n            this.isConnecting = false;\n            if (response) {\n                this.connectionID = response.connection_id;\n                this.client.resolveConnectionId?.(this.connectionID);\n                if (this.client.insightMetrics.wsConsecutiveFailures > 0 && this.client.options.enableInsights) {\n                    postInsights(\"ws_success_after_failure\", buildWsSuccessAfterFailureInsight(this));\n                    this.client.insightMetrics.wsConsecutiveFailures = 0;\n                }\n                return response;\n            }\n        } catch (err) {\n            this.isConnecting = false;\n            // @ts-ignore\n            this._log(`_connect() - Error - `, err);\n            if (this.client.options.enableInsights) {\n                this.client.insightMetrics.wsConsecutiveFailures++;\n                this.client.insightMetrics.wsTotalFailures++;\n                const insights = buildWsFatalInsight(this, convertErrorToJson(err));\n                postInsights?.(\"ws_fatal\", insights);\n            }\n            this.client.rejectConnectionId?.();\n            throw err;\n        }\n    }\n    /**\n     * _reconnect - Retry the connection to WS endpoint\n     *\n     * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n     *\n     * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n     * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n     */ async _reconnect(options = {}) {\n        this._log(\"_reconnect() - Initiating the reconnect\");\n        // only allow 1 connection at the time\n        if (this.isConnecting || this.isHealthy) {\n            this._log(\"_reconnect() - Abort (1) since already connecting or healthy\");\n            return;\n        }\n        // reconnect in case of on error or on close\n        // also reconnect if the health check cycle fails\n        let interval = options.interval;\n        if (!interval) {\n            interval = retryInterval(this.consecutiveFailures);\n        }\n        // reconnect, or try again after a little while...\n        await sleep(interval);\n        // Check once again if by some other call to _reconnect is active or connection is\n        // already restored, then no need to proceed.\n        if (this.isConnecting || this.isHealthy) {\n            this._log(\"_reconnect() - Abort (2) since already connecting or healthy\");\n            return;\n        }\n        if (this.isDisconnected && this.client.options.enableWSFallback) {\n            this._log(\"_reconnect() - Abort (3) since disconnect() is called\");\n            return;\n        }\n        this._log(\"_reconnect() - Destroying current WS connection\");\n        // cleanup the old connection\n        this._destroyCurrentWSConnection();\n        if (options.refreshToken) {\n            await this.client.tokenManager.loadToken();\n        }\n        try {\n            await this._connect();\n            this._log(\"_reconnect() - Waiting for recoverCallBack\");\n            // await this.client.recoverState();\n            this._log(\"_reconnect() - Finished recoverCallBack\");\n            this.consecutiveFailures = 0;\n        } catch (error) {\n            this.isHealthy = false;\n            this.consecutiveFailures += 1;\n            if (error.code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                this._log(\"_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n                return this._reconnect({\n                    refreshToken: true\n                });\n            }\n            // reconnect on WS failures, don't reconnect if there is a code bug\n            if (error.isWSFailure) {\n                this._log(\"_reconnect() - WS failure, so going to try to reconnect\");\n                this._reconnect();\n            }\n        }\n        this._log(\"_reconnect() - == END ==\");\n    }\n    /**\n     * _destroyCurrentWSConnection - Removes the current WS connection\n     *\n     */ _destroyCurrentWSConnection() {\n        // increment the ID, meaning we will ignore all messages from the old\n        // ws connection from now on.\n        this.wsID += 1;\n        try {\n            this?.ws?.removeAllListeners();\n            this?.ws?.close();\n        } catch (e) {\n        // we don't care\n        }\n    }\n}\nfunction isString(arrayOrString) {\n    return typeof arrayOrString === \"string\";\n}\nfunction isMapStringCallback(arrayOrString, callback) {\n    return !!callback && isString(arrayOrString);\n}\nfunction map(arrayOrString, callback) {\n    const res = [];\n    if (isString(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {\n        for(let k = 0, len = arrayOrString.length; k < len; k++){\n            if (arrayOrString.charAt(k)) {\n                const kValue = arrayOrString.charAt(k);\n                const mappedValue = callback(kValue, k, arrayOrString);\n                res[k] = mappedValue;\n            }\n        }\n    } else if (!isString(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {\n        for(let k = 0, len = arrayOrString.length; k < len; k++){\n            if (k in arrayOrString) {\n                const kValue = arrayOrString[k];\n                const mappedValue = callback(kValue, k, arrayOrString);\n                res[k] = mappedValue;\n            }\n        }\n    }\n    return res;\n}\nconst encodeBase64 = (data)=>(0,base64_js__WEBPACK_IMPORTED_MODULE_8__.fromByteArray)(new Uint8Array(map(data, (char)=>char.charCodeAt(0))));\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nconst decodeBase64 = (s)=>{\n    const e = {}, w = String.fromCharCode, L = s.length;\n    let i, b = 0, c, x, l = 0, a, r = \"\";\n    const A = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for(i = 0; i < 64; i++){\n        e[A.charAt(i)] = i;\n    }\n    for(x = 0; x < L; x++){\n        c = e[s.charAt(x)];\n        b = (b << 6) + c;\n        l += 6;\n        while(l >= 8){\n            ((a = b >>> (l -= 8) & 0xff) || x < L - 2) && (r += w(a));\n        }\n    }\n    return r;\n};\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserToken\n * @memberof signing\n * @private\n * @param {Secret} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {UR} [extraData] - Extra that should be part of the JWT token\n * @param {SignOptions} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */ function JWTUserToken(apiSecret, userId, extraData = {}, jwtOptions = {}) {\n    if (typeof userId !== \"string\") {\n        throw new TypeError(\"userId should be a string\");\n    }\n    const payload = {\n        user_id: userId,\n        ...extraData\n    };\n    // make sure we return a clear error when jwt is shimmed (ie. browser build)\n    if ((jsonwebtoken__WEBPACK_IMPORTED_MODULE_6___default()) == null || (jsonwebtoken__WEBPACK_IMPORTED_MODULE_6___default().sign) == null) {\n        throw Error(`Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.`);\n    }\n    const opts = Object.assign({\n        algorithm: \"HS256\",\n        noTimestamp: true\n    }, jwtOptions);\n    if (payload.iat) {\n        opts.noTimestamp = false;\n    }\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_6___default().sign(payload, apiSecret, opts);\n}\nfunction JWTServerToken(apiSecret, jwtOptions = {}) {\n    const payload = {\n        server: true\n    };\n    const opts = Object.assign({\n        algorithm: \"HS256\",\n        noTimestamp: true\n    }, jwtOptions);\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_6___default().sign(payload, apiSecret, opts);\n}\nfunction UserFromToken(token) {\n    const fragments = token.split(\".\");\n    if (fragments.length !== 3) {\n        return \"\";\n    }\n    const b64Payload = fragments[1];\n    const payload = decodeBase64(b64Payload);\n    const data = JSON.parse(payload);\n    return data.user_id;\n}\n/**\n *\n * @param {string} userId the id of the user\n * @return {string}\n */ function DevToken(userId) {\n    return [\n        \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\",\n        encodeBase64(JSON.stringify({\n            user_id: userId\n        })),\n        \"devtoken\"\n    ].join(\".\");\n}\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */ class TokenManager {\n    /**\n     * Constructor\n     *\n     * @param {Secret} secret\n     */ constructor(secret){\n        /**\n         * Set the static string token or token provider.\n         * Token provider should return a token string or a promise which resolves to string token.\n         *\n         * @param {TokenOrProvider} tokenOrProvider - the token or token provider.\n         * @param {UserResponse} user - the user object.\n         * @param {boolean} isAnonymous - whether the user is anonymous or not.\n         */ this.setTokenOrProvider = async (tokenOrProvider, user, isAnonymous)=>{\n            this.validateToken(tokenOrProvider, user, isAnonymous);\n            this.user = user;\n            if (isFunction(tokenOrProvider)) {\n                this.tokenProvider = tokenOrProvider;\n                this.type = \"provider\";\n            }\n            if (typeof tokenOrProvider === \"string\") {\n                this.token = tokenOrProvider;\n                this.type = \"static\";\n            }\n            if (!tokenOrProvider && this.user && this.secret) {\n                this.token = JWTUserToken(this.secret, user.id, {}, {});\n                this.type = \"static\";\n            }\n            await this.loadToken();\n        };\n        /**\n         * Resets the token manager.\n         * Useful for client disconnection or switching user.\n         */ this.reset = ()=>{\n            this.token = undefined;\n            this.user = undefined;\n            this.loadTokenPromise = null;\n        };\n        // Validates the user token.\n        this.validateToken = (tokenOrProvider, user, isAnonymous)=>{\n            // allow empty token for anon user\n            if (user && isAnonymous && !tokenOrProvider) return;\n            // Don't allow empty token for non-server side client.\n            if (!this.secret && !tokenOrProvider) {\n                throw new Error(\"UserWithId token can not be empty\");\n            }\n            if (tokenOrProvider && typeof tokenOrProvider !== \"string\" && !isFunction(tokenOrProvider)) {\n                throw new Error(\"user token should either be a string or a function\");\n            }\n            if (typeof tokenOrProvider === \"string\") {\n                // Allow empty token for anonymous users\n                if (isAnonymous && tokenOrProvider === \"\") return;\n                const tokenUserId = UserFromToken(tokenOrProvider);\n                if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === \"\" || !isAnonymous && tokenUserId !== user.id)) {\n                    throw new Error(\"userToken does not have a user_id or is not matching with user.id\");\n                }\n            }\n        };\n        // Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n        // case a function should wait.\n        this.tokenReady = ()=>this.loadTokenPromise;\n        // Fetches a token from tokenProvider function and sets in tokenManager.\n        // In case of static token, it will simply resolve to static token.\n        this.loadToken = ()=>{\n            // eslint-disable-next-line no-async-promise-executor\n            this.loadTokenPromise = new Promise(async (resolve, reject)=>{\n                if (this.type === \"static\") {\n                    return resolve(this.token);\n                }\n                if (this.tokenProvider && typeof this.tokenProvider !== \"string\") {\n                    try {\n                        this.token = await this.tokenProvider();\n                    } catch (e) {\n                        return reject(new Error(`Call to tokenProvider failed with message: ${e}`));\n                    }\n                    resolve(this.token);\n                }\n            });\n            return this.loadTokenPromise;\n        };\n        // Returns a current token\n        this.getToken = ()=>{\n            if (this.token) {\n                return this.token;\n            }\n            if (this.user && !this.token) {\n                return this.token;\n            }\n            if (this.secret) {\n                return JWTServerToken(this.secret);\n            }\n            throw new Error(`Both secret and user tokens are not set. Either client.connectUser wasn't called or client.disconnect was called`);\n        };\n        this.isStatic = ()=>this.type === \"static\";\n        this.loadTokenPromise = null;\n        if (secret) {\n            this.secret = secret;\n        }\n        this.type = \"static\";\n        if (this.secret) {\n            this.token = JWTServerToken(this.secret);\n        }\n    }\n}\nconst APIErrorCodes = {\n    \"-1\": {\n        name: \"InternalSystemError\",\n        retryable: true\n    },\n    \"2\": {\n        name: \"AccessKeyError\",\n        retryable: false\n    },\n    \"3\": {\n        name: \"AuthenticationFailedError\",\n        retryable: true\n    },\n    \"4\": {\n        name: \"InputError\",\n        retryable: false\n    },\n    \"6\": {\n        name: \"DuplicateUsernameError\",\n        retryable: false\n    },\n    \"9\": {\n        name: \"RateLimitError\",\n        retryable: true\n    },\n    \"16\": {\n        name: \"DoesNotExistError\",\n        retryable: false\n    },\n    \"17\": {\n        name: \"NotAllowedError\",\n        retryable: false\n    },\n    \"18\": {\n        name: \"EventNotSupportedError\",\n        retryable: false\n    },\n    \"19\": {\n        name: \"ChannelFeatureNotSupportedError\",\n        retryable: false\n    },\n    \"20\": {\n        name: \"MessageTooLongError\",\n        retryable: false\n    },\n    \"21\": {\n        name: \"MultipleNestingLevelError\",\n        retryable: false\n    },\n    \"22\": {\n        name: \"PayloadTooBigError\",\n        retryable: false\n    },\n    \"23\": {\n        name: \"RequestTimeoutError\",\n        retryable: true\n    },\n    \"24\": {\n        name: \"MaxHeaderSizeExceededError\",\n        retryable: false\n    },\n    \"40\": {\n        name: \"AuthErrorTokenExpired\",\n        retryable: false\n    },\n    \"41\": {\n        name: \"AuthErrorTokenNotValidYet\",\n        retryable: false\n    },\n    \"42\": {\n        name: \"AuthErrorTokenUsedBeforeIssuedAt\",\n        retryable: false\n    },\n    \"43\": {\n        name: \"AuthErrorTokenSignatureInvalid\",\n        retryable: false\n    },\n    \"44\": {\n        name: \"CustomCommandEndpointMissingError\",\n        retryable: false\n    },\n    \"45\": {\n        name: \"CustomCommandEndpointCallError\",\n        retryable: true\n    },\n    \"46\": {\n        name: \"ConnectionIDNotFoundError\",\n        retryable: false\n    },\n    \"60\": {\n        name: \"CoolDownError\",\n        retryable: true\n    },\n    \"69\": {\n        name: \"ErrWrongRegion\",\n        retryable: false\n    },\n    \"70\": {\n        name: \"ErrQueryChannelPermissions\",\n        retryable: false\n    },\n    \"71\": {\n        name: \"ErrTooManyConnections\",\n        retryable: true\n    },\n    \"99\": {\n        name: \"AppSuspendedError\",\n        retryable: false\n    }\n};\nfunction isAPIError(error) {\n    return error.code !== undefined;\n}\nfunction isErrorRetryable(error) {\n    if (!error.code) return false;\n    const err = APIErrorCodes[`${error.code}`];\n    if (!err) return false;\n    return err.retryable;\n}\nfunction isConnectionIDError(error) {\n    return error.code === 46; // ConnectionIDNotFoundError\n}\nfunction isWSFailure(err) {\n    if (typeof err.isWSFailure === \"boolean\") {\n        return err.isWSFailure;\n    }\n    try {\n        return JSON.parse(err.message).isWSFailure;\n    } catch (_) {\n        return false;\n    }\n}\nfunction isErrorResponse(res) {\n    return !res.status || res.status < 200 || 300 <= res.status;\n}\nvar ConnectionState;\n(function(ConnectionState) {\n    ConnectionState[\"Closed\"] = \"CLOSED\";\n    ConnectionState[\"Connected\"] = \"CONNECTED\";\n    ConnectionState[\"Connecting\"] = \"CONNECTING\";\n    ConnectionState[\"Disconnected\"] = \"DISCONNECTED\";\n    ConnectionState[\"Init\"] = \"INIT\";\n})(ConnectionState || (ConnectionState = {}));\nclass WSConnectionFallback {\n    constructor(client){\n        /** @private */ this._onlineStatusChanged = (event)=>{\n            this._log(`_onlineStatusChanged() - ${event.type}`);\n            if (event.type === \"offline\") {\n                this._setState(ConnectionState.Closed);\n                this.cancelToken?.cancel(\"disconnect() is called\");\n                this.cancelToken = undefined;\n                return;\n            }\n            if (event.type === \"online\" && this.state === ConnectionState.Closed) {\n                this.connect(true);\n            }\n        };\n        /** @private */ this._req = async (params, config, retry)=>{\n            if (!this.cancelToken && !params.close) {\n                this.cancelToken = axios__WEBPACK_IMPORTED_MODULE_18__[\"default\"].CancelToken.source();\n            }\n            try {\n                const res = await this.client.doAxiosRequest(\"get\", this.client.baseURL.replace(\":3030\", \":8900\") + \"/longpoll\", undefined, {\n                    config: {\n                        ...config,\n                        cancelToken: this.cancelToken?.token\n                    },\n                    params,\n                    publicEndpoint: true\n                });\n                this.consecutiveFailures = 0; // always reset in case of no error\n                return res;\n            } catch (err) {\n                this.consecutiveFailures += 1;\n                // @ts-ignore\n                if (retry && isErrorRetryable(err)) {\n                    this._log(`_req() - Retryable error, retrying request`);\n                    await sleep(retryInterval(this.consecutiveFailures));\n                    return this._req(params, config, retry);\n                }\n                throw err;\n            }\n        };\n        /** @private */ this._poll = async ()=>{\n            while(this.state === ConnectionState.Connected){\n                try {\n                    const data = await this._req({}, {\n                        timeout: 30000\n                    }, true); // 30s => API responds in 20s if there is no event\n                    if (data.events?.length) {\n                        for(let i = 0; i < data.events.length; i++){\n                            this.client.dispatchEvent(data.events[i]);\n                        }\n                    }\n                } catch (err) {\n                    if (axios__WEBPACK_IMPORTED_MODULE_18__[\"default\"].isCancel(err)) {\n                        this._log(`_poll() - axios canceled request`);\n                        return;\n                    }\n                    /** client.doAxiosRequest will take care of TOKEN_EXPIRED error */ // @ts-ignore\n                    if (isConnectionIDError(err)) {\n                        this._log(`_poll() - ConnectionID error, connecting without ID...`);\n                        this._setState(ConnectionState.Disconnected);\n                        this.connect(true);\n                        return;\n                    }\n                    // @ts-ignore\n                    if (isAPIError(err) && !isErrorRetryable(err)) {\n                        this._setState(ConnectionState.Closed);\n                        return;\n                    }\n                    await sleep(retryInterval(this.consecutiveFailures));\n                }\n            }\n        };\n        /**\n         * connect try to open a longpoll request\n         * @param reconnect should be false for first call and true for subsequent calls to keep the connection alive and call recoverState\n         */ this.connect = async (reconnect = false)=>{\n            if (this.state === ConnectionState.Connecting) {\n                this._log(\"connect() - connecting already in progress\", {\n                    reconnect\n                }, \"warn\");\n                return;\n            }\n            if (this.state === ConnectionState.Connected) {\n                this._log(\"connect() - already connected and polling\", {\n                    reconnect\n                }, \"warn\");\n                return;\n            }\n            this._setState(ConnectionState.Connecting);\n            this.connectionID = undefined; // connect should be sent with empty connection_id so API creates one\n            try {\n                const { event } = await this._req({\n                    json: this.client._buildWSPayload()\n                }, {\n                    timeout: 8000\n                }, reconnect);\n                this._setState(ConnectionState.Connected);\n                this.connectionID = event.connection_id;\n                this.client.resolveConnectionId?.();\n                // @ts-expect-error\n                this.client.dispatchEvent(event);\n                this._poll();\n                return event;\n            } catch (err) {\n                this._setState(ConnectionState.Closed);\n                this.client.rejectConnectionId?.();\n                throw err;\n            }\n        };\n        /**\n         * isHealthy checks if there is a connectionID and connection is in Connected state\n         */ this.isHealthy = ()=>{\n            return !!this.connectionID && this.state === ConnectionState.Connected;\n        };\n        this.disconnect = async (timeout = 2000)=>{\n            removeConnectionEventListeners(this._onlineStatusChanged);\n            this._setState(ConnectionState.Disconnected);\n            this.cancelToken?.cancel(\"disconnect() is called\");\n            this.cancelToken = undefined;\n            const connection_id = this.connectionID;\n            this.connectionID = undefined;\n            try {\n                await this._req({\n                    close: true,\n                    connection_id\n                }, {\n                    timeout\n                }, false);\n                this._log(`disconnect() - Closed connectionID`);\n            } catch (err) {\n                this._log(`disconnect() - Failed`, {\n                    err\n                }, \"error\");\n            }\n        };\n        this.client = client;\n        this.state = ConnectionState.Init;\n        this.consecutiveFailures = 0;\n        addConnectionEventListeners(this._onlineStatusChanged);\n    }\n    _log(msg, extra = {}, level = \"info\") {\n        this.client.logger(level, \"WSConnectionFallback:\" + msg, {\n            ...extra\n        });\n    }\n    _setState(state) {\n        this._log(`_setState() - ${state}`);\n        // transition from connecting => connected\n        if (this.state === ConnectionState.Connecting && state === ConnectionState.Connected) {\n            this.client.dispatchEvent({\n                type: \"connection.changed\",\n                online: true\n            });\n        }\n        if (state === ConnectionState.Closed || state === ConnectionState.Disconnected) {\n            this.client.dispatchEvent({\n                type: \"connection.changed\",\n                online: false\n            });\n        }\n        this.state = state;\n    }\n}\nconst logger = getLogger([\n    \"location\"\n]);\nconst HINT_URL = `https://hint.stream-io-video.com/`;\nconst getLocationHint = async (hintUrl = HINT_URL, timeout = 2000)=>{\n    const abortController = new AbortController();\n    const timeoutId = setTimeout(()=>abortController.abort(), timeout);\n    try {\n        const response = await fetch(hintUrl, {\n            method: \"HEAD\",\n            signal: abortController.signal\n        });\n        const awsPop = response.headers.get(\"x-amz-cf-pop\") || \"ERR\";\n        logger(\"debug\", `Location header: ${awsPop}`);\n        return awsPop.substring(0, 3); // AMS1-P2 -> AMS\n    } catch (e) {\n        logger(\"warn\", `Failed to get location hint from ${hintUrl}`, e);\n        return \"ERR\";\n    } finally{\n        clearTimeout(timeoutId);\n    }\n};\nclass StreamClient {\n    /**\n     * Initialize a client.\n     *\n     * @param {string} key - the api key\n     * @param {StreamClientOptions} [options] - additional options, here you can pass custom options to axios instance\n     * @param {string} [options.secret] - the api secret\n     * @param {boolean} [options.browser] - enforce the client to be in browser mode\n     * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n     * @param {Logger} [options.Logger] - custom logger\n     * @param {number} [options.timeout] - default to 3000\n     * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n     */ constructor(key, options){\n        this.listeners = {};\n        this.nextRequestAbortController = null;\n        this.devToken = (userID)=>{\n            return DevToken(userID);\n        };\n        this.getAuthType = ()=>{\n            return this.anonymous ? \"anonymous\" : \"jwt\";\n        };\n        this.setBaseURL = (baseURL)=>{\n            this.baseURL = baseURL;\n            this.wsBaseURL = this.baseURL.replace(\"http\", \"ws\").replace(\":3030\", \":8800\");\n        };\n        this.getLocationHint = async (hintUrl, timeout)=>{\n            const hint = await this.locationHint;\n            if (!hint || hint === \"ERR\") {\n                this.locationHint = getLocationHint(hintUrl ?? this.options.locationHintUrl, timeout ?? this.options.locationHintTimeout);\n                return this.locationHint;\n            }\n            return hint;\n        };\n        this._getConnectionID = ()=>this.wsConnection?.connectionID || this.wsFallback?.connectionID;\n        this._hasConnectionID = ()=>Boolean(this._getConnectionID());\n        /**\n         * connectUser - Set the current user and open a WebSocket connection\n         *\n         * @param user Data about this user. IE {name: \"john\"}\n         * @param {TokenOrProvider} userTokenOrProvider Token or provider\n         *\n         * @return {ConnectAPIResponse} Returns a promise that resolves when the connection is setup\n         */ this.connectUser = async (user, userTokenOrProvider)=>{\n            if (!user.id) {\n                throw new Error('The \"id\" field on the user is missing');\n            }\n            /**\n             * Calling connectUser multiple times is potentially the result of a  bad integration, however,\n             * If the user id remains the same we don't throw error\n             */ if (this.userID === user.id && this.setUserPromise) {\n                this.logger(\"warn\", \"Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.\");\n                return this.setUserPromise;\n            }\n            if (this.userID) {\n                throw new Error(\"Use client.disconnect() before trying to connect as a different user. connectUser was called twice.\");\n            }\n            if ((this._isUsingServerAuth() || this.node) && !this.options.allowServerSideConnect) {\n                this.logger(\"warn\", 'Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.');\n            }\n            // we generate the client id client side\n            this.userID = user.id;\n            this.anonymous = false;\n            const setTokenPromise = this._setToken(user, userTokenOrProvider, this.anonymous);\n            this._setUser(user);\n            const wsPromise = this.openConnection();\n            this.setUserPromise = Promise.all([\n                setTokenPromise,\n                wsPromise\n            ]).then((result)=>result[1]);\n            try {\n                return await this.setUserPromise;\n            } catch (err) {\n                if (this.persistUserOnConnectionFailure) {\n                    // cleanup client to allow the user to retry connectUser again\n                    this.closeConnection();\n                } else {\n                    this.disconnectUser();\n                }\n                throw err;\n            }\n        };\n        this._setToken = (user, userTokenOrProvider, isAnonymous)=>this.tokenManager.setTokenOrProvider(userTokenOrProvider, user, isAnonymous);\n        this._setUser = (user)=>{\n            /**\n             * This one is used by the frontend. This is a copy of the current user object stored on backend.\n             * It contains reserved properties and own user properties which are not present in `this._user`.\n             */ this.user = user;\n            this.userID = user.id;\n            // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n            this._user = {\n                ...user\n            };\n        };\n        /**\n         * Disconnects the websocket connection, without removing the user set on client.\n         * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n         * to call client.openConnection to reconnect to websocket.\n         *\n         * This is mainly useful on mobile side. You can only receive push notifications\n         * if you don't have active websocket connection.\n         * So when your app goes to background, you can call `client.closeConnection`.\n         * And when app comes back to foreground, call `client.openConnection`.\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.closeConnection = async (timeout)=>{\n            if (this.cleaningIntervalRef != null) {\n                clearInterval(this.cleaningIntervalRef);\n                this.cleaningIntervalRef = undefined;\n            }\n            await Promise.all([\n                this.wsConnection?.disconnect(timeout),\n                this.wsFallback?.disconnect(timeout)\n            ]);\n            return Promise.resolve();\n        };\n        /**\n         * Creates a new WebSocket connection with the current user. Returns empty promise, if there is an active connection\n         */ this.openConnection = async ()=>{\n            if (!this.userID) {\n                throw Error(\"UserWithId is not set on client, use client.connectUser or client.connectAnonymousUser instead\");\n            }\n            if (this.wsConnection?.isConnecting && this.wsPromise) {\n                this.logger(\"info\", \"client:openConnection() - connection already in progress\");\n                return this.wsPromise;\n            }\n            if ((this.wsConnection?.isHealthy || this.wsFallback?.isHealthy()) && this._hasConnectionID()) {\n                this.logger(\"info\", \"client:openConnection() - openConnection called twice, healthy connection already exists\");\n                return Promise.resolve();\n            }\n            this.connectionIdPromise = new Promise((resolve, reject)=>{\n                this.resolveConnectionId = resolve;\n                this.rejectConnectionId = reject;\n            });\n            this.clientID = `${this.userID}--${randomId()}`;\n            this.wsPromise = this.connect();\n            return this.wsPromise;\n        };\n        this._normalizeDate = (before)=>{\n            if (before instanceof Date) {\n                before = before.toISOString();\n            }\n            if (before === \"\") {\n                throw new Error(\"Don't pass blank string for since, use null instead if resetting the token revoke\");\n            }\n            return before;\n        };\n        /**\n         * Disconnects the websocket and removes the user from client.\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.disconnectUser = async (timeout)=>{\n            this.logger(\"info\", \"client:disconnect() - Disconnecting the client\");\n            // remove the user specific fields\n            delete this.user;\n            delete this._user;\n            delete this.userID;\n            this.anonymous = false;\n            await this.closeConnection(timeout);\n            this.tokenManager.reset();\n            this.connectionIdPromise = undefined;\n            this.rejectConnectionId = undefined;\n            this.resolveConnectionId = undefined;\n        };\n        this.connectGuestUser = async (user)=>{\n            this.guestUserCreatePromise = this.doAxiosRequest(\"post\", \"/guest\", {\n                user: {\n                    ...user,\n                    role: \"guest\"\n                }\n            }, {\n                publicEndpoint: true\n            });\n            const response = await this.guestUserCreatePromise;\n            this.guestUserCreatePromise.finally(()=>this.guestUserCreatePromise = undefined);\n            return this.connectUser(response.user, response.access_token);\n        };\n        /**\n         * connectAnonymousUser - Set an anonymous user and open a WebSocket connection\n         */ this.connectAnonymousUser = async (user, tokenOrProvider)=>{\n            this.connectionIdPromise = new Promise((resolve, reject)=>{\n                this.resolveConnectionId = resolve;\n                this.rejectConnectionId = reject;\n            });\n            this.anonymous = true;\n            await this._setToken(user, tokenOrProvider, this.anonymous);\n            this._setUser(user);\n            // some endpoints require a connection_id to be resolved.\n            // as anonymous users aren't allowed to open WS connections, we just\n            // resolve the connection_id here.\n            this.resolveConnectionId?.();\n        };\n        /**\n         * on - Listen to events on all channels and users your watching\n         *\n         * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n         *\n         * @param eventName The event type to listen for (optional)\n         * @param callback The callback to call\n         *\n         * @return  Returns a function which, when called, unsubscribes the event handler.\n         */ this.on = (eventName, callback)=>{\n            if (!this.listeners[eventName]) {\n                this.listeners[eventName] = [];\n            }\n            this.logger(\"debug\", `Adding listener for ${eventName} event`);\n            this.listeners[eventName]?.push(callback);\n            return ()=>{\n                this.off(eventName, callback);\n            };\n        };\n        /**\n         * off - Remove the event handler\n         */ this.off = (eventName, callback)=>{\n            if (!this.listeners[eventName]) {\n                this.listeners[eventName] = [];\n            }\n            this.logger(\"debug\", `Removing listener for ${eventName} event`);\n            this.listeners[eventName] = this.listeners[eventName]?.filter((value)=>value !== callback);\n        };\n        this._logApiRequest = (type, url, data, config)=>{\n            this.logger(\"trace\", `client: ${type} - Request - ${url}`, {\n                payload: data,\n                config\n            });\n        };\n        this._logApiResponse = (type, url, response)=>{\n            this.logger(\"trace\", `client:${type} - Response - url: ${url} > status ${response.status}`, {\n                response\n            });\n        };\n        this._logApiError = (type, url, error)=>{\n            this.logger(\"error\", `client:${type} - Error - url: ${url}`, {\n                url,\n                error\n            });\n        };\n        this.doAxiosRequest = async (type, url, data, options = {})=>{\n            if (!options.publicEndpoint) {\n                await Promise.all([\n                    this.tokenManager.tokenReady(),\n                    this.guestUserCreatePromise,\n                    this.connectionIdPromise\n                ]);\n            }\n            const requestConfig = this._enrichAxiosOptions(options);\n            try {\n                let response;\n                this._logApiRequest(type, url, data, requestConfig);\n                switch(type){\n                    case \"get\":\n                        response = await this.axiosInstance.get(url, requestConfig);\n                        break;\n                    case \"delete\":\n                        response = await this.axiosInstance.delete(url, requestConfig);\n                        break;\n                    case \"post\":\n                        response = await this.axiosInstance.post(url, data, requestConfig);\n                        break;\n                    case \"put\":\n                        response = await this.axiosInstance.put(url, data, requestConfig);\n                        break;\n                    case \"patch\":\n                        response = await this.axiosInstance.patch(url, data, requestConfig);\n                        break;\n                    case \"options\":\n                        response = await this.axiosInstance.options(url, requestConfig);\n                        break;\n                    default:\n                        throw new Error(\"Invalid request type\");\n                }\n                this._logApiResponse(type, url, response);\n                this.consecutiveFailures = 0;\n                return this.handleResponse(response);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            } catch (e /**TODO: generalize error types  */ ) {\n                e.client_request_id = requestConfig.headers?.[\"x-client-request-id\"];\n                this.consecutiveFailures += 1;\n                if (e.response) {\n                    this._logApiError(type, url, e.response);\n                    /** connection_fallback depends on this token expiration logic */ if (e.response.data.code === KnownCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n                        if (this.consecutiveFailures > 1) {\n                            await sleep(retryInterval(this.consecutiveFailures));\n                        }\n                        await this.tokenManager.loadToken();\n                        return await this.doAxiosRequest(type, url, data, options);\n                    }\n                    return this.handleResponse(e.response);\n                } else {\n                    this._logApiError(type, url, e);\n                    // eslint-disable-next-line no-throw-literal\n                    throw e;\n                }\n            }\n        };\n        this.get = (url, params)=>{\n            return this.doAxiosRequest(\"get\", url, null, {\n                params\n            });\n        };\n        this.put = (url, data, params)=>{\n            return this.doAxiosRequest(\"put\", url, data, {\n                params\n            });\n        };\n        this.post = (url, data, params)=>{\n            return this.doAxiosRequest(\"post\", url, data, {\n                params\n            });\n        };\n        this.patch = (url, data, params)=>{\n            return this.doAxiosRequest(\"patch\", url, data, {\n                params\n            });\n        };\n        this.delete = (url, params)=>{\n            return this.doAxiosRequest(\"delete\", url, null, {\n                params\n            });\n        };\n        this.errorFromResponse = (response)=>{\n            let err;\n            err = new ErrorFromResponse(`Stream error HTTP code: ${response.status}`);\n            if (response.data && response.data.code) {\n                err = new Error(`Stream error code ${response.data.code}: ${response.data.message}`);\n                err.code = response.data.code;\n            }\n            err.response = response;\n            err.status = response.status;\n            return err;\n        };\n        this.handleResponse = (response)=>{\n            const data = response.data;\n            if (isErrorResponse(response)) {\n                throw this.errorFromResponse(response);\n            }\n            return data;\n        };\n        this.dispatchEvent = (event)=>{\n            if (!event.received_at) event.received_at = new Date();\n            this.logger(\"debug\", `Dispatching event: ${event.type}`, event);\n            if (!this.listeners) return;\n            // call generic listeners\n            for (const listener of this.listeners.all || []){\n                listener(event);\n            }\n            // call type specific listeners\n            for (const listener of this.listeners[event.type] || []){\n                listener(event);\n            }\n        };\n        /**\n         * @private\n         */ this.connect = async ()=>{\n            if (!this.userID || !this._user) {\n                throw Error(\"Call connectUser or connectAnonymousUser before starting the connection\");\n            }\n            if (!this.wsBaseURL) {\n                throw Error(\"Websocket base url not set\");\n            }\n            if (!this.clientID) {\n                throw Error(\"clientID is not set\");\n            }\n            if (!this.wsConnection && (this.options.warmUp || this.options.enableInsights)) {\n                this._sayHi();\n            }\n            // The StableWSConnection handles all the reconnection logic.\n            if (this.options.wsConnection && this.node) {\n                // Intentionally avoiding adding ts generics on wsConnection in options since its only useful for unit test purpose.\n                this.options.wsConnection.setClient(this);\n                this.wsConnection = this.options.wsConnection;\n            } else {\n                this.wsConnection = new StableWSConnection(this);\n            }\n            try {\n                // if fallback is used before, continue using it instead of waiting for WS to fail\n                if (this.wsFallback) {\n                    return await this.wsFallback.connect();\n                }\n                this.logger(\"info\", \"StreamClient.connect: this.wsConnection.connect()\");\n                // if WSFallback is enabled, ws connect should timeout faster so fallback can try\n                return await this.wsConnection.connect(this.options.enableWSFallback ? this.defaultWSTimeoutWithFallback : this.defaultWSTimeout);\n            } catch (err) {\n                // run fallback only if it's WS/Network error and not a normal API error\n                // make sure browser is online before even trying the longpoll\n                if (this.options.enableWSFallback && // @ts-ignore\n                isWSFailure(err) && isOnline(this.logger)) {\n                    this.logger(\"warn\", \"client:connect() - WS failed, fallback to longpoll\");\n                    this.dispatchEvent({\n                        type: \"transport.changed\",\n                        mode: \"longpoll\"\n                    });\n                    this.wsConnection._destroyCurrentWSConnection();\n                    this.wsConnection.disconnect().then(); // close WS so no retry\n                    this.wsFallback = new WSConnectionFallback(this);\n                    return await this.wsFallback.connect();\n                }\n                throw err;\n            }\n        };\n        /**\n         * Check the connectivity with server for warmup purpose.\n         *\n         * @private\n         */ this._sayHi = ()=>{\n            const client_request_id = randomId();\n            const opts = {\n                headers: axios__WEBPACK_IMPORTED_MODULE_1__.AxiosHeaders.from({\n                    \"x-client-request-id\": client_request_id\n                })\n            };\n            this.doAxiosRequest(\"get\", this.baseURL + \"/hi\", null, opts).catch((e)=>{\n                if (this.options.enableInsights) {\n                    postInsights(\"http_hi_failed\", {\n                        api_key: this.key,\n                        err: e,\n                        client_request_id\n                    });\n                }\n            });\n        };\n        this.getUserAgent = ()=>{\n            const version = \"0.6.7\";\n            return this.userAgent || `stream-video-javascript-client-${this.node ? \"node\" : \"browser\"}-${version}`;\n        };\n        this.setUserAgent = (userAgent)=>{\n            this.userAgent = userAgent;\n        };\n        /**\n         * _isUsingServerAuth - Returns true if we're using server side auth\n         */ this._isUsingServerAuth = ()=>!!this.secret;\n        this._enrichAxiosOptions = (options = {\n            params: {},\n            headers: {},\n            config: {}\n        })=>{\n            const token = options.publicEndpoint && !this.user ? undefined : this._getToken();\n            const authorization = token ? {\n                Authorization: token\n            } : undefined;\n            let signal = null;\n            if (this.nextRequestAbortController !== null) {\n                signal = this.nextRequestAbortController.signal;\n                this.nextRequestAbortController = null;\n            }\n            if (!options.headers?.[\"x-client-request-id\"]) {\n                options.headers = {\n                    ...options.headers,\n                    \"x-client-request-id\": randomId()\n                };\n            }\n            return {\n                params: {\n                    user_id: this.userID,\n                    connection_id: this._getConnectionID(),\n                    api_key: this.key,\n                    ...options.params\n                },\n                headers: {\n                    ...authorization,\n                    \"stream-auth-type\": options.publicEndpoint && !this.user ? \"anonymous\" : this.getAuthType(),\n                    \"X-Stream-Client\": this.getUserAgent(),\n                    ...options.headers\n                },\n                ...signal ? {\n                    signal\n                } : {},\n                ...options.config,\n                ...this.options.axiosRequestConfig\n            };\n        };\n        this._getToken = ()=>{\n            if (!this.tokenManager) return null;\n            return this.tokenManager.getToken();\n        };\n        /**\n         * encode ws url payload\n         * @private\n         * @returns json string\n         */ this._buildWSPayload = (client_request_id)=>{\n            return JSON.stringify({\n                user_id: this.userID,\n                user_details: this._user,\n                client_request_id\n            });\n        };\n        /**\n         * creates an abort controller that will be used by the next HTTP Request.\n         */ this.createAbortControllerForNextRequest = ()=>{\n            return this.nextRequestAbortController = new AbortController();\n        };\n        /**\n         * createToken - Creates a token to authenticate this user. This function is used server side.\n         * The resulting token should be passed to the client side when the users registers or logs in.\n         *\n         * @param {string} userID The UserWithId ID\n         * @param {number} [exp] The expiration time for the token expressed in the number of seconds since the epoch\n         * @param call_cids for anonymous tokens you have to provide the call cids the use can join\n         *\n         * @return {string} Returns a token\n         */ this.createToken = (userID, exp, iat, call_cids)=>{\n            if (this.secret == null) {\n                throw Error(`tokens can only be created server-side using the API Secret`);\n            }\n            const extra = {};\n            if (exp) {\n                extra.exp = exp;\n            }\n            if (iat) {\n                extra.iat = iat;\n            }\n            if (call_cids) {\n                extra.call_cids = call_cids;\n            }\n            return JWTUserToken(this.secret, userID, extra, {});\n        };\n        // set the key\n        this.key = key;\n        // set the secret\n        this.secret = options?.secret;\n        // set the options... and figure out defaults...\n        const inputOptions = options ? options : {\n            browser: \"undefined\" !== \"undefined\"\n        };\n        this.browser = inputOptions.browser || \"undefined\" !== \"undefined\";\n        this.node = !this.browser;\n        if (this.browser) {\n            this.locationHint = getLocationHint(options?.locationHintUrl, options?.locationHintTimeout);\n        }\n        this.options = {\n            timeout: 5000,\n            withCredentials: false,\n            warmUp: false,\n            ...inputOptions\n        };\n        if (this.node && !this.options.httpsAgent) {\n            this.options.httpsAgent = new (https__WEBPACK_IMPORTED_MODULE_5___default().Agent)({\n                keepAlive: true,\n                keepAliveMsecs: 3000\n            });\n        }\n        this.setBaseURL(this.options.baseURL || \"https://video.stream-io-api.com/video\");\n        if (typeof process !== \"undefined\" && process.env.STREAM_LOCAL_TEST_RUN) {\n            this.setBaseURL(\"http://localhost:3030/video\");\n        }\n        if (typeof process !== \"undefined\" && process.env.STREAM_LOCAL_TEST_HOST) {\n            this.setBaseURL(`http://${process.env.STREAM_LOCAL_TEST_HOST}/video`);\n        }\n        this.axiosInstance = axios__WEBPACK_IMPORTED_MODULE_18__[\"default\"].create({\n            ...this.options,\n            baseURL: this.baseURL\n        });\n        // WS connection is initialized when setUser is called\n        this.wsConnection = null;\n        this.wsPromise = null;\n        this.setUserPromise = null;\n        // mapping between channel groups and configs\n        this.anonymous = false;\n        this.persistUserOnConnectionFailure = this.options?.persistUserOnConnectionFailure;\n        // If it is a server-side client, then lets initialize the tokenManager, since token will be\n        // generated from secret.\n        this.tokenManager = new TokenManager(this.secret);\n        this.consecutiveFailures = 0;\n        this.insightMetrics = new InsightMetrics();\n        this.defaultWSTimeoutWithFallback = 6000;\n        this.defaultWSTimeout = 15000;\n        this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : ()=>null;\n    }\n}\n/**\n * A `StreamVideoClient` instance lets you communicate with our API, and authenticate users.\n */ class StreamVideoClient {\n    constructor(apiKeyOrArgs, opts){\n        this.logLevel = \"warn\";\n        this.eventHandlersToUnregister = [];\n        /**\n         * Disconnects the currently connected user from the client.\n         *\n         * If the connection is successfully disconnected, the connected user [state variable](#readonlystatestore) will be updated accordingly\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.disconnectUser = async (timeout)=>{\n            if (!this.streamClient.user && !this.connectionPromise) {\n                return;\n            }\n            const disconnectUser = ()=>this.streamClient.disconnectUser(timeout);\n            this.disconnectionPromise = this.connectionPromise ? this.connectionPromise.then(()=>disconnectUser()) : disconnectUser();\n            this.disconnectionPromise.finally(()=>this.disconnectionPromise = undefined);\n            await this.disconnectionPromise;\n            this.eventHandlersToUnregister.forEach((unregister)=>unregister());\n            this.eventHandlersToUnregister = [];\n            this.writeableStateStore.setConnectedUser(undefined);\n        };\n        /**\n         * You can subscribe to WebSocket events provided by the API.\n         * To remove a subscription, call the `off` method or, execute the returned unsubscribe function.\n         * Please note that subscribing to WebSocket events is an advanced use-case, for most use-cases it should be enough to watch for changes in the reactive [state store](#readonlystatestore).\n         *\n         * @param eventName the event name or 'all'.\n         * @param callback the callback which will be called when the event is emitted.\n         * @returns an unsubscribe function.\n         */ this.on = (eventName, callback)=>{\n            return this.streamClient.on(eventName, callback);\n        };\n        /**\n         * Remove subscription for WebSocket events that were created by the `on` method.\n         *\n         * @param eventName the event name.\n         * @param callback the callback which was passed to the `on` method.\n         */ this.off = (eventName, callback)=>{\n            return this.streamClient.off(eventName, callback);\n        };\n        /**\n         * Creates a new call.\n         *\n         * @param type the type of the call.\n         * @param id the id of the call.\n         */ this.call = (type, id)=>{\n            return new Call({\n                streamClient: this.streamClient,\n                id: id,\n                type: type,\n                clientStore: this.writeableStateStore\n            });\n        };\n        /**\n         * Creates a new guest user with the given data.\n         *\n         * @param data the data for the guest user.\n         */ this.createGuestUser = async (data)=>{\n            return this.streamClient.doAxiosRequest(\"post\", \"/guest\", data, {\n                publicEndpoint: true\n            });\n        };\n        /**\n         * Will query the API for calls matching the given filters.\n         *\n         * @param data the query data.\n         */ this.queryCalls = async (data = {})=>{\n            const response = await this.streamClient.post(\"/calls\", data);\n            const calls = response.calls.map((c)=>{\n                const call = new Call({\n                    streamClient: this.streamClient,\n                    id: c.call.id,\n                    type: c.call.type,\n                    members: c.members,\n                    ownCapabilities: c.own_capabilities,\n                    watching: data.watch,\n                    clientStore: this.writeableStateStore\n                });\n                call.state.updateFromCallResponse(c.call);\n                call.applyDeviceConfig();\n                if (data.watch) {\n                    this.writeableStateStore.registerCall(call);\n                }\n                return call;\n            });\n            return {\n                ...response,\n                calls: calls\n            };\n        };\n        /**\n         * Retrieve the list of available call statistics reports matching a particular condition.\n         *\n         * @param data Filter and sort conditions for retrieving available call report summaries.\n         * @returns List with summary of available call reports matching the condition.\n         */ this.queryCallStats = async (data = {})=>{\n            return this.streamClient.post(`/call/stats`, data);\n        };\n        /**\n         * Returns a list of available data centers available for hosting calls.\n         */ this.edges = async ()=>{\n            return this.streamClient.get(`/edges`);\n        };\n        /**\n         * addDevice - Adds a push device for a user.\n         *\n         * @param {string} id the device id\n         * @param {string} push_provider the push provider name (eg. apn, firebase)\n         * @param {string} push_provider_name user provided push provider name\n         * @param {string} [userID] the user id (defaults to current user)\n         * @param {boolean} [voip_token] enables use of VoIP token for push notifications on iOS platform\n         */ this.addDevice = async (id, push_provider, push_provider_name, userID, voip_token)=>{\n            return await this.streamClient.post(\"/devices\", {\n                id,\n                push_provider,\n                voip_token,\n                ...userID != null ? {\n                    user_id: userID\n                } : {},\n                ...push_provider_name != null ? {\n                    push_provider_name\n                } : {}\n            });\n        };\n        /**\n         * getDevices - Returns the devices associated with a current user\n         * @param {string} [userID] User ID. Only works on serverside\n         */ this.getDevices = async (userID)=>{\n            return await this.streamClient.get(\"/devices\", userID ? {\n                user_id: userID\n            } : {});\n        };\n        /**\n         * removeDevice - Removes the device with the given id.\n         *\n         * @param {string} id The device id\n         * @param {string} [userID] The user id. Only specify this for serverside requests\n         */ this.removeDevice = async (id, userID)=>{\n            return await this.streamClient.delete(\"/devices\", {\n                id,\n                ...userID ? {\n                    user_id: userID\n                } : {}\n            });\n        };\n        /**\n         * A callback that can be used to create ringing calls from push notifications. If the call already exists, it will do nothing.\n         * @param call_cid\n         * @returns\n         */ this.onRingingCall = async (call_cid)=>{\n            // if we find the call and is already ringing, we don't need to create a new call\n            // as client would have received the call.ring state because the app had WS alive when receiving push notifications\n            let call = this.readOnlyStateStore.calls.find((c)=>c.cid === call_cid && c.ringing);\n            if (!call) {\n                // if not it means that WS is not alive when receiving the push notifications and we need to fetch the call\n                const [callType, callId] = call_cid.split(\":\");\n                call = new Call({\n                    streamClient: this.streamClient,\n                    type: callType,\n                    id: callId,\n                    clientStore: this.writeableStateStore,\n                    ringing: true\n                });\n                await call.get();\n            }\n            return call;\n        };\n        /**\n         * Connects the given anonymous user to the client.\n         *\n         * @param user the user to connect.\n         * @param tokenOrProvider a token or a function that returns a token.\n         */ this.connectAnonymousUser = async (user, tokenOrProvider)=>{\n            const connectAnonymousUser = ()=>this.streamClient.connectAnonymousUser(user, tokenOrProvider);\n            this.connectionPromise = this.disconnectionPromise ? this.disconnectionPromise.then(()=>connectAnonymousUser()) : connectAnonymousUser();\n            this.connectionPromise.finally(()=>this.connectionPromise = undefined);\n            return this.connectionPromise;\n        };\n        let logger = logToConsole;\n        let logLevel = \"warn\";\n        if (typeof apiKeyOrArgs === \"string\") {\n            logLevel = opts?.logLevel || logLevel;\n            logger = opts?.logger || logger;\n        } else {\n            logLevel = apiKeyOrArgs.options?.logLevel || logLevel;\n            logger = apiKeyOrArgs.options?.logger || logger;\n        }\n        setLogger(logger, logLevel);\n        this.logger = getLogger([\n            \"client\"\n        ]);\n        if (typeof apiKeyOrArgs === \"string\") {\n            this.streamClient = new StreamClient(apiKeyOrArgs, {\n                persistUserOnConnectionFailure: true,\n                ...opts,\n                logLevel,\n                logger: this.logger\n            });\n        } else {\n            this.streamClient = new StreamClient(apiKeyOrArgs.apiKey, {\n                persistUserOnConnectionFailure: true,\n                ...apiKeyOrArgs.options,\n                logLevel,\n                logger: this.logger\n            });\n            const sdkInfo = getSdkInfo();\n            if (sdkInfo) {\n                this.streamClient.setUserAgent(this.streamClient.getUserAgent() + `-video-${SdkType[sdkInfo.type].toLowerCase()}-sdk-${sdkInfo.major}.${sdkInfo.minor}.${sdkInfo.patch}`);\n            }\n        }\n        this.writeableStateStore = new StreamVideoWriteableStateStore();\n        this.readOnlyStateStore = new StreamVideoReadOnlyStateStore(this.writeableStateStore);\n        if (typeof apiKeyOrArgs !== \"string\") {\n            const user = apiKeyOrArgs.user;\n            const token = apiKeyOrArgs.token || apiKeyOrArgs.tokenProvider;\n            if (user) {\n                this.connectUser(user, token);\n            }\n        }\n    }\n    /**\n     * Return the reactive state store, use this if you want to be notified about changes to the client state\n     */ get state() {\n        return this.readOnlyStateStore;\n    }\n    /**\n     * Connects the given user to the client.\n     * Only one user can connect at a time, if you want to change users, call `disconnectUser` before connecting a new user.\n     * If the connection is successful, the connected user [state variable](#readonlystatestore) will be updated accordingly.\n     *\n     * @param user the user to connect.\n     * @param token a token or a function that returns a token.\n     */ async connectUser(user, token) {\n        if (user.type === \"anonymous\") {\n            user.id = \"!anon\";\n            return this.connectAnonymousUser(user, token);\n        }\n        let connectUser = ()=>{\n            return this.streamClient.connectUser(user, token);\n        };\n        if (user.type === \"guest\") {\n            connectUser = async ()=>{\n                return this.streamClient.connectGuestUser(user);\n            };\n        }\n        this.connectionPromise = this.disconnectionPromise ? this.disconnectionPromise.then(()=>connectUser()) : connectUser();\n        this.connectionPromise?.finally(()=>this.connectionPromise = undefined);\n        const connectUserResponse = await this.connectionPromise;\n        // connectUserResponse will be void if connectUser called twice for the same user\n        if (connectUserResponse?.me) {\n            this.writeableStateStore.setConnectedUser(connectUserResponse.me);\n        }\n        this.eventHandlersToUnregister.push(this.on(\"connection.changed\", (event)=>{\n            if (event.online) {\n                const callsToReWatch = this.writeableStateStore.calls.filter((call)=>call.watching).map((call)=>call.cid);\n                this.logger(\"info\", `Rewatching calls after connection changed ${callsToReWatch.join(\", \")}`);\n                if (callsToReWatch.length > 0) {\n                    this.queryCalls({\n                        watch: true,\n                        filter_conditions: {\n                            cid: {\n                                $in: callsToReWatch\n                            }\n                        },\n                        sort: [\n                            {\n                                field: \"cid\",\n                                direction: 1\n                            }\n                        ]\n                    }).catch((err)=>{\n                        this.logger(\"error\", \"Failed to re-watch calls\", err);\n                    });\n                }\n            }\n        }));\n        this.eventHandlersToUnregister.push(this.on(\"call.created\", (event)=>{\n            const { call, members } = event;\n            if (user.id === call.created_by.id) {\n                this.logger(\"warn\", \"Received `call.created` sent by the current user\");\n                return;\n            }\n            this.logger(\"info\", `New call created and registered: ${call.cid}`);\n            const newCall = new Call({\n                streamClient: this.streamClient,\n                type: call.type,\n                id: call.id,\n                members,\n                clientStore: this.writeableStateStore\n            });\n            newCall.state.updateFromCallResponse(call);\n            this.writeableStateStore.registerCall(newCall);\n        }));\n        this.eventHandlersToUnregister.push(this.on(\"call.ring\", async (event)=>{\n            const { call, members } = event;\n            if (user.id === call.created_by.id) {\n                this.logger(\"debug\", \"Received `call.ring` sent by the current user so ignoring the event\");\n                return;\n            }\n            // The call might already be tracked by the client,\n            // if `call.created` was received before `call.ring`.\n            // In that case, we cleanup the already tracked call.\n            const prevCall = this.writeableStateStore.findCall(call.type, call.id);\n            await prevCall?.leave({\n                reason: \"cleaning-up in call.ring\"\n            });\n            // we create a new call\n            const theCall = new Call({\n                streamClient: this.streamClient,\n                type: call.type,\n                id: call.id,\n                members,\n                clientStore: this.writeableStateStore,\n                ringing: true\n            });\n            theCall.state.updateFromCallResponse(call);\n            // we fetch the latest metadata for the call from the server\n            await theCall.get();\n            this.writeableStateStore.registerCall(theCall);\n        }));\n        return connectUserResponse;\n    }\n    /**\n     * addDevice - Adds a push device for a user.\n     *\n     * @param {string} id the device id\n     * @param {string} push_provider the push provider name (eg. apn, firebase)\n     * @param {string} push_provider_name user provided push provider name\n     * @param {string} [userID] the user id (defaults to current user)\n     */ async addVoipDevice(id, push_provider, push_provider_name, userID) {\n        return await this.addDevice(id, push_provider, push_provider_name, userID, true);\n    }\n}\n/**\n * @deprecated Please use the `@stream-io/node-sdk` package instead.\n *\n * @see https://getstream.io/video/docs/api/\n */ class StreamVideoServerClient extends StreamVideoClient {\n    constructor(apiKey, options){\n        super({\n            apiKey,\n            options\n        });\n        this.getCallTypes = ()=>{\n            return this.streamClient.get(\"/calltypes\");\n        };\n        this.getCallType = (name)=>{\n            return this.streamClient.get(`/calltypes/${name}`);\n        };\n        this.createCallType = (data)=>{\n            return this.streamClient.post(\"/calltypes\", data);\n        };\n        this.deleteCallType = (name)=>{\n            return this.streamClient.delete(`/calltypes/${name}`);\n        };\n        this.updateCallType = (name, data)=>{\n            return this.streamClient.put(`/calltypes/${name}`, data);\n        };\n        this.listExternalStorage = ()=>{\n            return this.streamClient.get(\"/external_storage\");\n        };\n        this.createExternalStorage = (request)=>{\n            return this.streamClient.post(\"/external_storage\", request);\n        };\n        this.deleteExternalStorage = (name)=>{\n            return this.streamClient.delete(`/external_storage/${name}`);\n        };\n        this.updateExternalStorage = (name, request)=>{\n            return this.streamClient.put(`/external_storage/${name}`, request);\n        };\n        this.checkExternalStorage = (name)=>{\n            return this.streamClient.get(`/external_storage/${name}/check`);\n        };\n    }\n    /**\n     * createToken - Creates a token to authenticate this user. This function is used server side.\n     * The resulting token should be passed to the client side when the users register or logs in.\n     *\n     * @param {string} userID The User ID\n     * @param {number} [exp] The expiration time for the token expressed in the number of seconds since the epoch\n     * @param {number} [iat] The timestamp when a token has been issued\n     * @param call_cids for anonymous tokens you have to provide the call cids the use can join\n     *\n     * @return {string} Returns a token\n     */ createToken(userID, exp, iat, call_cids) {\n        return this.streamClient.createToken(userID, exp, iat, call_cids);\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0cmVhbS1pby92aWRlby1jbGllbnQvZGlzdC9pbmRleC5lcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0I7QUFDeUg7QUFDMUU7QUFDM0I7QUFDVDtBQUNnQztBQUNnTDtBQUM5TTtBQUNHO0FBQ0Y7QUFDWjtBQUNLO0FBQ2Y7QUFDMEI7QUFFMUM7O0NBRUMsR0FDRCxNQUFNc0MsaUNBQWlDO0lBQ25DQyxTQUFTO0lBQ1RDLFVBQVU7QUFDZDtBQUNBOztDQUVDLEdBQ0QsTUFBTUMsd0NBQXdDO0lBQzFDRixTQUFTO0lBQ1RDLFVBQVU7QUFDZDtBQUNBOztDQUVDLEdBQ0QsTUFBTUUsc0NBQXNDO0lBQ3hDQyxVQUFVO0lBQ1ZDLEtBQUs7SUFDTEMsUUFBUTtJQUNSQyxRQUFRO0FBQ1o7QUFDQTs7Q0FFQyxHQUNELE1BQU1DLHlCQUF5QjtJQUMzQkMsV0FBVztJQUNYQyxNQUFNO0lBQ05DLG9CQUFvQjtJQUNwQkMsUUFBUTtJQUNSQyxRQUFRO0FBQ1o7QUFDQTs7Q0FFQyxHQUNELE1BQU1DLGdDQUFnQztJQUNsQ0wsV0FBVztJQUNYQyxNQUFNO0lBQ05DLG9CQUFvQjtJQUNwQkMsUUFBUTtJQUNSQyxRQUFRO0FBQ1o7QUFDQTs7O0NBR0MsR0FDRCxNQUFNRSxnQkFBZ0I7SUFDbEJDLGFBQWE7SUFDYkMsYUFBYTtJQUNiQyxpQkFBaUI7SUFDakJDLFVBQVU7SUFDVkMsZ0JBQWdCO0lBQ2hCQyxXQUFXO0lBQ1hDLGlCQUFpQjtJQUNqQkMsWUFBWTtJQUNaQyxrQkFBa0I7SUFDbEJDLFdBQVc7SUFDWEMsb0JBQW9CO0lBQ3BCQyxhQUFhO0lBQ2JDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxzQkFBc0I7SUFDdEJDLG1CQUFtQjtJQUNuQkMs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dzZCLHFCQUFxQixHQUFHLENBQUMzdEI7WUFDMUIsT0FBTyxJQUFJLENBQUMrVSxZQUFZLENBQUM5VSxJQUFJLENBQUMscUJBQXFCRDtRQUN2RDtRQUNBLElBQUksQ0FBQzR0QixxQkFBcUIsR0FBRyxDQUFDcDBEO1lBQzFCLE9BQU8sSUFBSSxDQUFDdTdDLFlBQVksQ0FBQzdmLE1BQU0sQ0FBQyxDQUFDLGtCQUFrQixFQUFFMTdCLEtBQUssQ0FBQztRQUMvRDtRQUNBLElBQUksQ0FBQ3EwRCxxQkFBcUIsR0FBRyxDQUFDcjBELE1BQU13bUM7WUFDaEMsT0FBTyxJQUFJLENBQUMrVSxZQUFZLENBQUM0VSxHQUFHLENBQUMsQ0FBQyxrQkFBa0IsRUFBRW53RCxLQUFLLENBQUMsRUFBRXdtQztRQUM5RDtRQUNBLElBQUksQ0FBQzh0QixvQkFBb0IsR0FBRyxDQUFDdDBEO1lBQ3pCLE9BQU8sSUFBSSxDQUFDdTdDLFlBQVksQ0FBQzVoQixHQUFHLENBQUMsQ0FBQyxrQkFBa0IsRUFBRTM1QixLQUFLLE1BQU0sQ0FBQztRQUNsRTtJQUNKO0lBQ0E7Ozs7Ozs7Ozs7S0FVQyxHQUNEa3hELFlBQVk1TSxNQUFNLEVBQUU2TSxHQUFHLEVBQUV6RyxHQUFHLEVBQUUwRyxTQUFTLEVBQUU7UUFDckMsT0FBTyxJQUFJLENBQUM3VixZQUFZLENBQUMyVixXQUFXLENBQUM1TSxRQUFRNk0sS0FBS3pHLEtBQUswRztJQUMzRDtBQUNKO0FBRTZqRCxDQUM3akQsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGV2LWZpbmRlci8uL25vZGVfbW9kdWxlcy9Ac3RyZWFtLWlvL3ZpZGVvLWNsaWVudC9kaXN0L2luZGV4LmVzLmpzP2M5NjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICd3ZWJydGMtYWRhcHRlcic7XG5pbXBvcnQgeyBNZXNzYWdlVHlwZSwgaXNKc29uT2JqZWN0LCB0eXBlb2ZKc29uVmFsdWUsIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwsIFVua25vd25GaWVsZEhhbmRsZXIsIFdpcmVUeXBlLCBQYkxvbmcgfSBmcm9tICdAcHJvdG9idWYtdHMvcnVudGltZSc7XG5pbXBvcnQgeyBTZXJ2aWNlVHlwZSwgc3RhY2tJbnRlcmNlcHQgfSBmcm9tICdAcHJvdG9idWYtdHMvcnVudGltZS1ycGMnO1xuaW1wb3J0IGF4aW9zLCB7IEF4aW9zSGVhZGVycyB9IGZyb20gJ2F4aW9zJztcbmV4cG9ydCB7IEF4aW9zRXJyb3IgfSBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBUd2lycEZldGNoVHJhbnNwb3J0IH0gZnJvbSAnQHByb3RvYnVmLXRzL3R3aXJwLXRyYW5zcG9ydCc7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0LCBjb21iaW5lTGF0ZXN0LCBCZWhhdmlvclN1YmplY3QsIG1hcCBhcyBtYXAkMSwgc2hhcmVSZXBsYXksIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCB0YWtlV2hpbGUsIGRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkLCBtZXJnZSwgZnJvbSwgT2JzZXJ2YWJsZSwgZGVib3VuY2VUaW1lLCBjb25jYXRNYXAsIHBhaXJ3aXNlLCBvZiwgZmlsdGVyLCBkZWJvdW5jZSwgdGltZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCAqIGFzIFNEUCBmcm9tICdzZHAtdHJhbnNmb3JtJztcbmltcG9ydCB7IFVBUGFyc2VyIH0gZnJvbSAndWEtcGFyc2VyLWpzJztcbmltcG9ydCBXZWJTb2NrZXQgZnJvbSAnaXNvbW9ycGhpYy13cyc7XG5pbXBvcnQgaHR0cHMgZnJvbSAnaHR0cHMnO1xuaW1wb3J0IGp3dCBmcm9tICdqc29ud2VidG9rZW4nO1xuaW1wb3J0ICdjcnlwdG8nO1xuaW1wb3J0IHsgZnJvbUJ5dGVBcnJheSB9IGZyb20gJ2Jhc2U2NC1qcyc7XG5cbi8qKlxuICogQGV4cG9ydFxuICovXG5jb25zdCBBdWRpb1NldHRpbmdzRGVmYXVsdERldmljZUVudW0gPSB7XG4gICAgU1BFQUtFUjogJ3NwZWFrZXInLFxuICAgIEVBUlBJRUNFOiAnZWFycGllY2UnLFxufTtcbi8qKlxuICogQGV4cG9ydFxuICovXG5jb25zdCBBdWRpb1NldHRpbmdzUmVxdWVzdERlZmF1bHREZXZpY2VFbnVtID0ge1xuICAgIFNQRUFLRVI6ICdzcGVha2VyJyxcbiAgICBFQVJQSUVDRTogJ2VhcnBpZWNlJyxcbn07XG4vKipcbiAqIEBleHBvcnRcbiAqL1xuY29uc3QgQ3JlYXRlRGV2aWNlUmVxdWVzdFB1c2hQcm92aWRlckVudW0gPSB7XG4gICAgRklSRUJBU0U6ICdmaXJlYmFzZScsXG4gICAgQVBOOiAnYXBuJyxcbiAgICBIVUFXRUk6ICdodWF3ZWknLFxuICAgIFhJQU9NSTogJ3hpYW9taScsXG59O1xuLyoqXG4gKiBAZXhwb3J0XG4gKi9cbmNvbnN0IExheW91dFNldHRpbmdzTmFtZUVudW0gPSB7XG4gICAgU1BPVExJR0hUOiAnc3BvdGxpZ2h0JyxcbiAgICBHUklEOiAnZ3JpZCcsXG4gICAgU0lOR0xFX1BBUlRJQ0lQQU5UOiAnc2luZ2xlLXBhcnRpY2lwYW50JyxcbiAgICBNT0JJTEU6ICdtb2JpbGUnLFxuICAgIENVU1RPTTogJ2N1c3RvbScsXG59O1xuLyoqXG4gKiBAZXhwb3J0XG4gKi9cbmNvbnN0IExheW91dFNldHRpbmdzUmVxdWVzdE5hbWVFbnVtID0ge1xuICAgIFNQT1RMSUdIVDogJ3Nwb3RsaWdodCcsXG4gICAgR1JJRDogJ2dyaWQnLFxuICAgIFNJTkdMRV9QQVJUSUNJUEFOVDogJ3NpbmdsZS1wYXJ0aWNpcGFudCcsXG4gICAgTU9CSUxFOiAnbW9iaWxlJyxcbiAgICBDVVNUT006ICdjdXN0b20nLFxufTtcbi8qKlxuICogQWxsIHBvc3NpYmlsaXR5IG9mIHN0cmluZyB0byB1c2VcbiAqIEBleHBvcnRcbiAqL1xuY29uc3QgT3duQ2FwYWJpbGl0eSA9IHtcbiAgICBCTE9DS19VU0VSUzogJ2Jsb2NrLXVzZXJzJyxcbiAgICBDUkVBVEVfQ0FMTDogJ2NyZWF0ZS1jYWxsJyxcbiAgICBDUkVBVEVfUkVBQ1RJT046ICdjcmVhdGUtcmVhY3Rpb24nLFxuICAgIEVORF9DQUxMOiAnZW5kLWNhbGwnLFxuICAgIEpPSU5fQkFDS1NUQUdFOiAnam9pbi1iYWNrc3RhZ2UnLFxuICAgIEpPSU5fQ0FMTDogJ2pvaW4tY2FsbCcsXG4gICAgSk9JTl9FTkRFRF9DQUxMOiAnam9pbi1lbmRlZC1jYWxsJyxcbiAgICBNVVRFX1VTRVJTOiAnbXV0ZS11c2VycycsXG4gICAgUElOX0ZPUl9FVkVSWU9ORTogJ3Bpbi1mb3ItZXZlcnlvbmUnLFxuICAgIFJFQURfQ0FMTDogJ3JlYWQtY2FsbCcsXG4gICAgUkVNT1ZFX0NBTExfTUVNQkVSOiAncmVtb3ZlLWNhbGwtbWVtYmVyJyxcbiAgICBTQ1JFRU5TSEFSRTogJ3NjcmVlbnNoYXJlJyxcbiAgICBTRU5EX0FVRElPOiAnc2VuZC1hdWRpbycsXG4gICAgU0VORF9WSURFTzogJ3NlbmQtdmlkZW8nLFxuICAgIFNUQVJUX0JST0FEQ0FTVF9DQUxMOiAnc3RhcnQtYnJvYWRjYXN0LWNhbGwnLFxuICAgIFNUQVJUX1JFQ09SRF9DQUxMOiAnc3RhcnQtcmVjb3JkLWNhbGwnLFxuICAgIFNUQVJUX1RSQU5TQ1JJUFRJT05fQ0FMTDogJ3N0YXJ0LXRyYW5zY3JpcHRpb24tY2FsbCcsXG4gICAgU1RPUF9CUk9BRENBU1RfQ0FMTDogJ3N0b3AtYnJvYWRjYXN0LWNhbGwnLFxuICAgIFNUT1BfUkVDT1JEX0NBTEw6ICdzdG9wLXJlY29yZC1jYWxsJyxcbiAgICBTVE9QX1RSQU5TQ1JJUFRJT05fQ0FMTDogJ3N0b3AtdHJhbnNjcmlwdGlvbi1jYWxsJyxcbiAgICBVUERBVEVfQ0FMTDogJ3VwZGF0ZS1jYWxsJyxcbiAgICBVUERBVEVfQ0FMTF9NRU1CRVI6ICd1cGRhdGUtY2FsbC1tZW1iZXInLFxuICAgIFVQREFURV9DQUxMX1BFUk1JU1NJT05TOiAndXBkYXRlLWNhbGwtcGVybWlzc2lvbnMnLFxuICAgIFVQREFURV9DQUxMX1NFVFRJTkdTOiAndXBkYXRlLWNhbGwtc2V0dGluZ3MnLFxufTtcbi8qKlxuICogQGV4cG9ydFxuICovXG5jb25zdCBSZWNvcmRTZXR0aW5nc1JlcXVlc3RNb2RlRW51bSA9IHtcbiAgICBBVkFJTEFCTEU6ICdhdmFpbGFibGUnLFxuICAgIERJU0FCTEVEOiAnZGlzYWJsZWQnLFxuICAgIEFVVE9fT046ICdhdXRvLW9uJyxcbn07XG4vKipcbiAqIEBleHBvcnRcbiAqL1xuY29uc3QgUmVjb3JkU2V0dGluZ3NSZXF1ZXN0UXVhbGl0eUVudW0gPSB7XG4gICAgXzM2MFA6ICczNjBwJyxcbiAgICBfNDgwUDogJzQ4MHAnLFxuICAgIF83MjBQOiAnNzIwcCcsXG4gICAgXzEwODBQOiAnMTA4MHAnLFxuICAgIF8xNDQwUDogJzE0NDBwJyxcbn07XG4vKipcbiAqIEBleHBvcnRcbiAqL1xuY29uc3QgVHJhbnNjcmlwdGlvblNldHRpbmdzTW9kZUVudW0gPSB7XG4gICAgQVZBSUxBQkxFOiAnYXZhaWxhYmxlJyxcbiAgICBESVNBQkxFRDogJ2Rpc2FibGVkJyxcbiAgICBBVVRPX09OOiAnYXV0by1vbicsXG59O1xuLyoqXG4gKiBAZXhwb3J0XG4gKi9cbmNvbnN0IFRyYW5zY3JpcHRpb25TZXR0aW5nc1JlcXVlc3RNb2RlRW51bSA9IHtcbiAgICBBVkFJTEFCTEU6ICdhdmFpbGFibGUnLFxuICAgIERJU0FCTEVEOiAnZGlzYWJsZWQnLFxuICAgIEFVVE9fT046ICdhdXRvLW9uJyxcbn07XG4vKipcbiAqIEBleHBvcnRcbiAqL1xuY29uc3QgVmlkZW9TZXR0aW5nc0NhbWVyYUZhY2luZ0VudW0gPSB7XG4gICAgRlJPTlQ6ICdmcm9udCcsXG4gICAgQkFDSzogJ2JhY2snLFxuICAgIEVYVEVSTkFMOiAnZXh0ZXJuYWwnLFxufTtcbi8qKlxuICogQGV4cG9ydFxuICovXG5jb25zdCBWaWRlb1NldHRpbmdzUmVxdWVzdENhbWVyYUZhY2luZ0VudW0gPSB7XG4gICAgRlJPTlQ6ICdmcm9udCcsXG4gICAgQkFDSzogJ2JhY2snLFxuICAgIEVYVEVSTkFMOiAnZXh0ZXJuYWwnLFxufTtcblxuY2xhc3MgRXJyb3JGcm9tUmVzcG9uc2UgZXh0ZW5kcyBFcnJvciB7XG59XG5cbi8qKlxuICogYE51bGxWYWx1ZWAgaXMgYSBzaW5nbGV0b24gZW51bWVyYXRpb24gdG8gcmVwcmVzZW50IHRoZSBudWxsIHZhbHVlIGZvciB0aGVcbiAqIGBWYWx1ZWAgdHlwZSB1bmlvbi5cbiAqXG4gKiAgVGhlIEpTT04gcmVwcmVzZW50YXRpb24gZm9yIGBOdWxsVmFsdWVgIGlzIEpTT04gYG51bGxgLlxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIGdvb2dsZS5wcm90b2J1Zi5OdWxsVmFsdWVcbiAqL1xudmFyIE51bGxWYWx1ZTtcbihmdW5jdGlvbiAoTnVsbFZhbHVlKSB7XG4gICAgLyoqXG4gICAgICogTnVsbCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHZhbHVlOiBOVUxMX1ZBTFVFID0gMDtcbiAgICAgKi9cbiAgICBOdWxsVmFsdWVbTnVsbFZhbHVlW1wiTlVMTF9WQUxVRVwiXSA9IDBdID0gXCJOVUxMX1ZBTFVFXCI7XG59KShOdWxsVmFsdWUgfHwgKE51bGxWYWx1ZSA9IHt9KSk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBTdHJ1Y3QkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ2dvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QnLCBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2ZpZWxkcycsXG4gICAgICAgICAgICAgICAga2luZDogJ21hcCcsXG4gICAgICAgICAgICAgICAgSzogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8sXG4gICAgICAgICAgICAgICAgVjogeyBraW5kOiAnbWVzc2FnZScsIFQ6ICgpID0+IFZhbHVlIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5jb2RlIGBTdHJ1Y3RgIHRvIEpTT04gb2JqZWN0LlxuICAgICAqL1xuICAgIGludGVybmFsSnNvbldyaXRlKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IGpzb24gPSB7fTtcbiAgICAgICAgZm9yIChsZXQgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKG1lc3NhZ2UuZmllbGRzKSkge1xuICAgICAgICAgICAganNvbltrXSA9IFZhbHVlLnRvSnNvbih2KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVjb2RlIGBTdHJ1Y3RgIGZyb20gSlNPTiBvYmplY3QuXG4gICAgICovXG4gICAgaW50ZXJuYWxKc29uUmVhZChqc29uLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgaWYgKCFpc0pzb25PYmplY3QoanNvbikpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcignVW5hYmxlIHRvIHBhcnNlIG1lc3NhZ2UgJyArXG4gICAgICAgICAgICAgICAgdGhpcy50eXBlTmFtZSArXG4gICAgICAgICAgICAgICAgJyBmcm9tIEpTT04gJyArXG4gICAgICAgICAgICAgICAgdHlwZW9mSnNvblZhbHVlKGpzb24pICtcbiAgICAgICAgICAgICAgICAnLicpO1xuICAgICAgICBpZiAoIXRhcmdldClcbiAgICAgICAgICAgIHRhcmdldCA9IHRoaXMuY3JlYXRlKCk7XG4gICAgICAgIGZvciAobGV0IFtrLCB2XSBvZiBnbG9iYWxUaGlzLk9iamVjdC5lbnRyaWVzKGpzb24pKSB7XG4gICAgICAgICAgICB0YXJnZXQuZmllbGRzW2tdID0gVmFsdWUuZnJvbUpzb24odik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS5maWVsZHMgPSB7fTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZWZsZWN0aW9uTWVyZ2VQYXJ0aWFsKHRoaXMsIG1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIGxlbmd0aCwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGFyZ2V0ID8/IHRoaXMuY3JlYXRlKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgLyogbWFwPHN0cmluZywgZ29vZ2xlLnByb3RvYnVmLlZhbHVlPiBmaWVsZHMgKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iaW5hcnlSZWFkTWFwMShtZXNzYWdlLmZpZWxkcywgcmVhZGVyLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgYmluYXJ5UmVhZE1hcDEobWFwLCByZWFkZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IGxlbiA9IHJlYWRlci51aW50MzIoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbiwga2V5LCB2YWw7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IFZhbHVlLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKCd1bmtub3duIG1hcCBlbnRyeSBmaWVsZCBmb3IgZmllbGQgZ29vZ2xlLnByb3RvYnVmLlN0cnVjdC5maWVsZHMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtYXBba2V5ID8/ICcnXSA9IHZhbCA/PyBWYWx1ZS5jcmVhdGUoKTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogbWFwPHN0cmluZywgZ29vZ2xlLnByb3RvYnVmLlZhbHVlPiBmaWVsZHMgPSAxOyAqL1xuICAgICAgICBmb3IgKGxldCBrIG9mIGdsb2JhbFRoaXMuT2JqZWN0LmtleXMobWVzc2FnZS5maWVsZHMpKSB7XG4gICAgICAgICAgICB3cml0ZXJcbiAgICAgICAgICAgICAgICAudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZClcbiAgICAgICAgICAgICAgICAuZm9yaygpXG4gICAgICAgICAgICAgICAgLnRhZygxLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpXG4gICAgICAgICAgICAgICAgLnN0cmluZyhrKTtcbiAgICAgICAgICAgIHdyaXRlci50YWcoMiwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCk7XG4gICAgICAgICAgICBWYWx1ZS5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UuZmllbGRzW2tdLCB3cml0ZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgd3JpdGVyLmpvaW4oKS5qb2luKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RcbiAqL1xuY29uc3QgU3RydWN0ID0gbmV3IFN0cnVjdCRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBWYWx1ZSRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignZ29vZ2xlLnByb3RvYnVmLlZhbHVlJywgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdudWxsX3ZhbHVlJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnZW51bScsXG4gICAgICAgICAgICAgICAgb25lb2Y6ICdraW5kJyxcbiAgICAgICAgICAgICAgICBUOiAoKSA9PiBbJ2dvb2dsZS5wcm90b2J1Zi5OdWxsVmFsdWUnLCBOdWxsVmFsdWVdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMixcbiAgICAgICAgICAgICAgICBuYW1lOiAnbnVtYmVyX3ZhbHVlJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnc2NhbGFyJyxcbiAgICAgICAgICAgICAgICBvbmVvZjogJ2tpbmQnLFxuICAgICAgICAgICAgICAgIFQ6IDEgLypTY2FsYXJUeXBlLkRPVUJMRSovLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnc3RyaW5nX3ZhbHVlJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnc2NhbGFyJyxcbiAgICAgICAgICAgICAgICBvbmVvZjogJ2tpbmQnLFxuICAgICAgICAgICAgICAgIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogNCxcbiAgICAgICAgICAgICAgICBuYW1lOiAnYm9vbF92YWx1ZScsXG4gICAgICAgICAgICAgICAga2luZDogJ3NjYWxhcicsXG4gICAgICAgICAgICAgICAgb25lb2Y6ICdraW5kJyxcbiAgICAgICAgICAgICAgICBUOiA4IC8qU2NhbGFyVHlwZS5CT09MKi8sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiA1LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdzdHJ1Y3RfdmFsdWUnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICBvbmVvZjogJ2tpbmQnLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IFN0cnVjdCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDYsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2xpc3RfdmFsdWUnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICBvbmVvZjogJ2tpbmQnLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IExpc3RWYWx1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbmNvZGUgYFZhbHVlYCB0byBKU09OIHZhbHVlLlxuICAgICAqL1xuICAgIGludGVybmFsSnNvbldyaXRlKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uua2luZC5vbmVvZktpbmQgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKCk7XG4gICAgICAgIHN3aXRjaCAobWVzc2FnZS5raW5kLm9uZW9mS2luZCkge1xuICAgICAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoKTtcbiAgICAgICAgICAgIGNhc2UgJ2Jvb2xWYWx1ZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2Uua2luZC5ib29sVmFsdWU7XG4gICAgICAgICAgICBjYXNlICdudWxsVmFsdWUnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgY2FzZSAnbnVtYmVyVmFsdWUnOlxuICAgICAgICAgICAgICAgIGxldCBudW1iZXJWYWx1ZSA9IG1lc3NhZ2Uua2luZC5udW1iZXJWYWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG51bWJlclZhbHVlID09ICdudW1iZXInICYmICFOdW1iZXIuaXNGaW5pdGUobnVtYmVyVmFsdWUpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcigpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJWYWx1ZTtcbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZ1ZhbHVlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZS5raW5kLnN0cmluZ1ZhbHVlO1xuICAgICAgICAgICAgY2FzZSAnbGlzdFZhbHVlJzpcbiAgICAgICAgICAgICAgICBsZXQgbGlzdFZhbHVlRmllbGQgPSB0aGlzLmZpZWxkcy5maW5kKChmKSA9PiBmLm5vID09PSA2KTtcbiAgICAgICAgICAgICAgICBpZiAobGlzdFZhbHVlRmllbGQ/LmtpbmQgIT09ICdtZXNzYWdlJylcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGlzdFZhbHVlRmllbGQuVCgpLnRvSnNvbihtZXNzYWdlLmtpbmQubGlzdFZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgJ3N0cnVjdFZhbHVlJzpcbiAgICAgICAgICAgICAgICBsZXQgc3RydWN0VmFsdWVGaWVsZCA9IHRoaXMuZmllbGRzLmZpbmQoKGYpID0+IGYubm8gPT09IDUpO1xuICAgICAgICAgICAgICAgIGlmIChzdHJ1Y3RWYWx1ZUZpZWxkPy5raW5kICE9PSAnbWVzc2FnZScpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cnVjdFZhbHVlRmllbGQuVCgpLnRvSnNvbihtZXNzYWdlLmtpbmQuc3RydWN0VmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlY29kZSBgVmFsdWVgIGZyb20gSlNPTiB2YWx1ZS5cbiAgICAgKi9cbiAgICBpbnRlcm5hbEpzb25SZWFkKGpzb24sIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBpZiAoIXRhcmdldClcbiAgICAgICAgICAgIHRhcmdldCA9IHRoaXMuY3JlYXRlKCk7XG4gICAgICAgIHN3aXRjaCAodHlwZW9mIGpzb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICAgICAgdGFyZ2V0LmtpbmQgPSB7IG9uZW9mS2luZDogJ251bWJlclZhbHVlJywgbnVtYmVyVmFsdWU6IGpzb24gfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgdGFyZ2V0LmtpbmQgPSB7IG9uZW9mS2luZDogJ3N0cmluZ1ZhbHVlJywgc3RyaW5nVmFsdWU6IGpzb24gfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICAgICAgICAgIHRhcmdldC5raW5kID0geyBvbmVvZktpbmQ6ICdib29sVmFsdWUnLCBib29sVmFsdWU6IGpzb24gfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgICAgICAgaWYgKGpzb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmtpbmQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbmVvZktpbmQ6ICdudWxsVmFsdWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbFZhbHVlOiBOdWxsVmFsdWUuTlVMTF9WQUxVRSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZ2xvYmFsVGhpcy5BcnJheS5pc0FycmF5KGpzb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5raW5kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25lb2ZLaW5kOiAnbGlzdFZhbHVlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RWYWx1ZTogTGlzdFZhbHVlLmZyb21Kc29uKGpzb24pLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmtpbmQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbmVvZktpbmQ6ICdzdHJ1Y3RWYWx1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJ1Y3RWYWx1ZTogU3RydWN0LmZyb21Kc29uKGpzb24pLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoJ1VuYWJsZSB0byBwYXJzZSAnICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlTmFtZSArXG4gICAgICAgICAgICAgICAgICAgICcgZnJvbSBKU09OICcgK1xuICAgICAgICAgICAgICAgICAgICB0eXBlb2ZKc29uVmFsdWUoanNvbikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2Uua2luZCA9IHsgb25lb2ZLaW5kOiB1bmRlZmluZWQgfTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZWZsZWN0aW9uTWVyZ2VQYXJ0aWFsKHRoaXMsIG1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIGxlbmd0aCwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGFyZ2V0ID8/IHRoaXMuY3JlYXRlKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgLyogZ29vZ2xlLnByb3RvYnVmLk51bGxWYWx1ZSBudWxsX3ZhbHVlICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uua2luZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uZW9mS2luZDogJ251bGxWYWx1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsVmFsdWU6IHJlYWRlci5pbnQzMigpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIGRvdWJsZSBudW1iZXJfdmFsdWUgKi8gMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5raW5kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25lb2ZLaW5kOiAnbnVtYmVyVmFsdWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyVmFsdWU6IHJlYWRlci5kb3VibGUoKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgc3RyaW5nX3ZhbHVlICovIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uua2luZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uZW9mS2luZDogJ3N0cmluZ1ZhbHVlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ1ZhbHVlOiByZWFkZXIuc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogYm9vbCBib29sX3ZhbHVlICovIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uua2luZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uZW9mS2luZDogJ2Jvb2xWYWx1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBib29sVmFsdWU6IHJlYWRlci5ib29sKCksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogZ29vZ2xlLnByb3RvYnVmLlN0cnVjdCBzdHJ1Y3RfdmFsdWUgKi8gNTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5raW5kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25lb2ZLaW5kOiAnc3RydWN0VmFsdWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RydWN0VmFsdWU6IFN0cnVjdC5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2Uua2luZC5zdHJ1Y3RWYWx1ZSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogZ29vZ2xlLnByb3RvYnVmLkxpc3RWYWx1ZSBsaXN0X3ZhbHVlICovIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uua2luZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uZW9mS2luZDogJ2xpc3RWYWx1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0VmFsdWU6IExpc3RWYWx1ZS5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2Uua2luZC5saXN0VmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBnb29nbGUucHJvdG9idWYuTnVsbFZhbHVlIG51bGxfdmFsdWUgPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5raW5kLm9uZW9mS2luZCA9PT0gJ251bGxWYWx1ZScpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLlZhcmludCkuaW50MzIobWVzc2FnZS5raW5kLm51bGxWYWx1ZSk7XG4gICAgICAgIC8qIGRvdWJsZSBudW1iZXJfdmFsdWUgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5raW5kLm9uZW9mS2luZCA9PT0gJ251bWJlclZhbHVlJylcbiAgICAgICAgICAgIHdyaXRlci50YWcoMiwgV2lyZVR5cGUuQml0NjQpLmRvdWJsZShtZXNzYWdlLmtpbmQubnVtYmVyVmFsdWUpO1xuICAgICAgICAvKiBzdHJpbmcgc3RyaW5nX3ZhbHVlID0gMzsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2Uua2luZC5vbmVvZktpbmQgPT09ICdzdHJpbmdWYWx1ZScpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDMsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2Uua2luZC5zdHJpbmdWYWx1ZSk7XG4gICAgICAgIC8qIGJvb2wgYm9vbF92YWx1ZSA9IDQ7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmtpbmQub25lb2ZLaW5kID09PSAnYm9vbFZhbHVlJylcbiAgICAgICAgICAgIHdyaXRlci50YWcoNCwgV2lyZVR5cGUuVmFyaW50KS5ib29sKG1lc3NhZ2Uua2luZC5ib29sVmFsdWUpO1xuICAgICAgICAvKiBnb29nbGUucHJvdG9idWYuU3RydWN0IHN0cnVjdF92YWx1ZSA9IDU7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmtpbmQub25lb2ZLaW5kID09PSAnc3RydWN0VmFsdWUnKVxuICAgICAgICAgICAgU3RydWN0LmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5raW5kLnN0cnVjdFZhbHVlLCB3cml0ZXIudGFnKDUsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRpb25zKS5qb2luKCk7XG4gICAgICAgIC8qIGdvb2dsZS5wcm90b2J1Zi5MaXN0VmFsdWUgbGlzdF92YWx1ZSA9IDY7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmtpbmQub25lb2ZLaW5kID09PSAnbGlzdFZhbHVlJylcbiAgICAgICAgICAgIExpc3RWYWx1ZS5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2Uua2luZC5saXN0VmFsdWUsIHdyaXRlci50YWcoNiwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5WYWx1ZVxuICovXG5jb25zdCBWYWx1ZSA9IG5ldyBWYWx1ZSRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBMaXN0VmFsdWUkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ2dvb2dsZS5wcm90b2J1Zi5MaXN0VmFsdWUnLCBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3ZhbHVlcycsXG4gICAgICAgICAgICAgICAga2luZDogJ21lc3NhZ2UnLFxuICAgICAgICAgICAgICAgIHJlcGVhdDogMSAvKlJlcGVhdFR5cGUuUEFDS0VEKi8sXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gVmFsdWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5jb2RlIGBMaXN0VmFsdWVgIHRvIEpTT04gYXJyYXkuXG4gICAgICovXG4gICAgaW50ZXJuYWxKc29uV3JpdGUobWVzc2FnZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbWVzc2FnZS52YWx1ZXMubWFwKCh2KSA9PiBWYWx1ZS50b0pzb24odikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWNvZGUgYExpc3RWYWx1ZWAgZnJvbSBKU09OIGFycmF5LlxuICAgICAqL1xuICAgIGludGVybmFsSnNvblJlYWQoanNvbiwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGlmICghZ2xvYmFsVGhpcy5BcnJheS5pc0FycmF5KGpzb24pKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoJ1VuYWJsZSB0byBwYXJzZSAnICtcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGVOYW1lICtcbiAgICAgICAgICAgICAgICAnIGZyb20gSlNPTiAnICtcbiAgICAgICAgICAgICAgICB0eXBlb2ZKc29uVmFsdWUoanNvbikpO1xuICAgICAgICBpZiAoIXRhcmdldClcbiAgICAgICAgICAgIHRhcmdldCA9IHRoaXMuY3JlYXRlKCk7XG4gICAgICAgIGxldCB2YWx1ZXMgPSBqc29uLm1hcCgodikgPT4gVmFsdWUuZnJvbUpzb24odikpO1xuICAgICAgICB0YXJnZXQudmFsdWVzLnB1c2goLi4udmFsdWVzKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS52YWx1ZXMgPSBbXTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZWZsZWN0aW9uTWVyZ2VQYXJ0aWFsKHRoaXMsIG1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIGxlbmd0aCwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGFyZ2V0ID8/IHRoaXMuY3JlYXRlKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgLyogcmVwZWF0ZWQgZ29vZ2xlLnByb3RvYnVmLlZhbHVlIHZhbHVlcyAqLyAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZhbHVlcy5wdXNoKFZhbHVlLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucykpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiByZXBlYXRlZCBnb29nbGUucHJvdG9idWYuVmFsdWUgdmFsdWVzID0gMTsgKi9cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXNzYWdlLnZhbHVlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIFZhbHVlLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS52YWx1ZXNbaV0sIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5MaXN0VmFsdWVcbiAqL1xuY29uc3QgTGlzdFZhbHVlID0gbmV3IExpc3RWYWx1ZSRUeXBlKCk7XG5cbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIFRpbWVzdGFtcCRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCcsIFtcbiAgICAgICAgICAgIHsgbm86IDEsIG5hbWU6ICdzZWNvbmRzJywga2luZDogJ3NjYWxhcicsIFQ6IDMgLypTY2FsYXJUeXBlLklOVDY0Ki8gfSxcbiAgICAgICAgICAgIHsgbm86IDIsIG5hbWU6ICduYW5vcycsIGtpbmQ6ICdzY2FsYXInLCBUOiA1IC8qU2NhbGFyVHlwZS5JTlQzMiovIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGBUaW1lc3RhbXBgIGZvciB0aGUgY3VycmVudCB0aW1lLlxuICAgICAqL1xuICAgIG5vdygpIHtcbiAgICAgICAgY29uc3QgbXNnID0gdGhpcy5jcmVhdGUoKTtcbiAgICAgICAgY29uc3QgbXMgPSBEYXRlLm5vdygpO1xuICAgICAgICBtc2cuc2Vjb25kcyA9IFBiTG9uZy5mcm9tKE1hdGguZmxvb3IobXMgLyAxMDAwKSkudG9TdHJpbmcoKTtcbiAgICAgICAgbXNnLm5hbm9zID0gKG1zICUgMTAwMCkgKiAxMDAwMDAwO1xuICAgICAgICByZXR1cm4gbXNnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIGBUaW1lc3RhbXBgIHRvIGEgSmF2YVNjcmlwdCBEYXRlLlxuICAgICAqL1xuICAgIHRvRGF0ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShQYkxvbmcuZnJvbShtZXNzYWdlLnNlY29uZHMpLnRvTnVtYmVyKCkgKiAxMDAwICtcbiAgICAgICAgICAgIE1hdGguY2VpbChtZXNzYWdlLm5hbm9zIC8gMTAwMDAwMCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIEphdmFTY3JpcHQgRGF0ZSB0byBhIGBUaW1lc3RhbXBgLlxuICAgICAqL1xuICAgIGZyb21EYXRlKGRhdGUpIHtcbiAgICAgICAgY29uc3QgbXNnID0gdGhpcy5jcmVhdGUoKTtcbiAgICAgICAgY29uc3QgbXMgPSBkYXRlLmdldFRpbWUoKTtcbiAgICAgICAgbXNnLnNlY29uZHMgPSBQYkxvbmcuZnJvbShNYXRoLmZsb29yKG1zIC8gMTAwMCkpLnRvU3RyaW5nKCk7XG4gICAgICAgIG1zZy5uYW5vcyA9IChtcyAlIDEwMDApICogMTAwMDAwMDtcbiAgICAgICAgcmV0dXJuIG1zZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW4gSlNPTiBmb3JtYXQsIHRoZSBgVGltZXN0YW1wYCB0eXBlIGlzIGVuY29kZWQgYXMgYSBzdHJpbmdcbiAgICAgKiBpbiB0aGUgUkZDIDMzMzkgZm9ybWF0LlxuICAgICAqL1xuICAgIGludGVybmFsSnNvbldyaXRlKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IG1zID0gUGJMb25nLmZyb20obWVzc2FnZS5zZWNvbmRzKS50b051bWJlcigpICogMTAwMDtcbiAgICAgICAgaWYgKG1zIDwgRGF0ZS5wYXJzZSgnMDAwMS0wMS0wMVQwMDowMDowMFonKSB8fFxuICAgICAgICAgICAgbXMgPiBEYXRlLnBhcnNlKCc5OTk5LTEyLTMxVDIzOjU5OjU5WicpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZW5jb2RlIFRpbWVzdGFtcCB0byBKU09OLiBNdXN0IGJlIGZyb20gMDAwMS0wMS0wMVQwMDowMDowMFogdG8gOTk5OS0xMi0zMVQyMzo1OTo1OVogaW5jbHVzaXZlLicpO1xuICAgICAgICBpZiAobWVzc2FnZS5uYW5vcyA8IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBlbmNvZGUgaW52YWxpZCBUaW1lc3RhbXAgdG8gSlNPTi4gTmFub3MgbXVzdCBub3QgYmUgbmVnYXRpdmUuJyk7XG4gICAgICAgIGxldCB6ID0gJ1onO1xuICAgICAgICBpZiAobWVzc2FnZS5uYW5vcyA+IDApIHtcbiAgICAgICAgICAgIGxldCBuYW5vc1N0ciA9IChtZXNzYWdlLm5hbm9zICsgMTAwMDAwMDAwMCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICBpZiAobmFub3NTdHIuc3Vic3RyaW5nKDMpID09PSAnMDAwMDAwJylcbiAgICAgICAgICAgICAgICB6ID0gJy4nICsgbmFub3NTdHIuc3Vic3RyaW5nKDAsIDMpICsgJ1onO1xuICAgICAgICAgICAgZWxzZSBpZiAobmFub3NTdHIuc3Vic3RyaW5nKDYpID09PSAnMDAwJylcbiAgICAgICAgICAgICAgICB6ID0gJy4nICsgbmFub3NTdHIuc3Vic3RyaW5nKDAsIDYpICsgJ1onO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHogPSAnLicgKyBuYW5vc1N0ciArICdaJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IERhdGUobXMpLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgnLjAwMFonLCB6KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW4gSlNPTiBmb3JtYXQsIHRoZSBgVGltZXN0YW1wYCB0eXBlIGlzIGVuY29kZWQgYXMgYSBzdHJpbmdcbiAgICAgKiBpbiB0aGUgUkZDIDMzMzkgZm9ybWF0LlxuICAgICAqL1xuICAgIGludGVybmFsSnNvblJlYWQoanNvbiwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGlmICh0eXBlb2YganNvbiAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBwYXJzZSBUaW1lc3RhbXAgZnJvbSBKU09OICcgKyB0eXBlb2ZKc29uVmFsdWUoanNvbikgKyAnLicpO1xuICAgICAgICBsZXQgbWF0Y2hlcyA9IGpzb24ubWF0Y2goL14oWzAtOV17NH0pLShbMC05XXsyfSktKFswLTldezJ9KVQoWzAtOV17Mn0pOihbMC05XXsyfSk6KFswLTldezJ9KSg/Olp8XFwuKFswLTldezMsOX0pWnwoWystXVswLTldWzAtOV06WzAtOV1bMC05XSkpJC8pO1xuICAgICAgICBpZiAoIW1hdGNoZXMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBwYXJzZSBUaW1lc3RhbXAgZnJvbSBKU09OLiBJbnZhbGlkIGZvcm1hdC4nKTtcbiAgICAgICAgbGV0IG1zID0gRGF0ZS5wYXJzZShtYXRjaGVzWzFdICtcbiAgICAgICAgICAgICctJyArXG4gICAgICAgICAgICBtYXRjaGVzWzJdICtcbiAgICAgICAgICAgICctJyArXG4gICAgICAgICAgICBtYXRjaGVzWzNdICtcbiAgICAgICAgICAgICdUJyArXG4gICAgICAgICAgICBtYXRjaGVzWzRdICtcbiAgICAgICAgICAgICc6JyArXG4gICAgICAgICAgICBtYXRjaGVzWzVdICtcbiAgICAgICAgICAgICc6JyArXG4gICAgICAgICAgICBtYXRjaGVzWzZdICtcbiAgICAgICAgICAgIChtYXRjaGVzWzhdID8gbWF0Y2hlc1s4XSA6ICdaJykpO1xuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKG1zKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHBhcnNlIFRpbWVzdGFtcCBmcm9tIEpTT04uIEludmFsaWQgdmFsdWUuJyk7XG4gICAgICAgIGlmIChtcyA8IERhdGUucGFyc2UoJzAwMDEtMDEtMDFUMDA6MDA6MDBaJykgfHxcbiAgICAgICAgICAgIG1zID4gRGF0ZS5wYXJzZSgnOTk5OS0xMi0zMVQyMzo1OTo1OVonKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKCdVbmFibGUgdG8gcGFyc2UgVGltZXN0YW1wIGZyb20gSlNPTi4gTXVzdCBiZSBmcm9tIDAwMDEtMDEtMDFUMDA6MDA6MDBaIHRvIDk5OTktMTItMzFUMjM6NTk6NTlaIGluY2x1c2l2ZS4nKTtcbiAgICAgICAgaWYgKCF0YXJnZXQpXG4gICAgICAgICAgICB0YXJnZXQgPSB0aGlzLmNyZWF0ZSgpO1xuICAgICAgICB0YXJnZXQuc2Vjb25kcyA9IFBiTG9uZy5mcm9tKG1zIC8gMTAwMCkudG9TdHJpbmcoKTtcbiAgICAgICAgdGFyZ2V0Lm5hbm9zID0gMDtcbiAgICAgICAgaWYgKG1hdGNoZXNbN10pXG4gICAgICAgICAgICB0YXJnZXQubmFub3MgPVxuICAgICAgICAgICAgICAgIHBhcnNlSW50KCcxJyArIG1hdGNoZXNbN10gKyAnMCcucmVwZWF0KDkgLSBtYXRjaGVzWzddLmxlbmd0aCkpIC1cbiAgICAgICAgICAgICAgICAgICAgMTAwMDAwMDAwMDtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS5zZWNvbmRzID0gJzAnO1xuICAgICAgICBtZXNzYWdlLm5hbm9zID0gMDtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZWZsZWN0aW9uTWVyZ2VQYXJ0aWFsKHRoaXMsIG1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIGxlbmd0aCwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGFyZ2V0ID8/IHRoaXMuY3JlYXRlKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgLyogaW50NjQgc2Vjb25kcyAqLyAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNlY29uZHMgPSByZWFkZXIuaW50NjQoKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIGludDMyIG5hbm9zICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubmFub3MgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogaW50NjQgc2Vjb25kcyA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnNlY29uZHMgIT09ICcwJylcbiAgICAgICAgICAgIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuVmFyaW50KS5pbnQ2NChtZXNzYWdlLnNlY29uZHMpO1xuICAgICAgICAvKiBpbnQzMiBuYW5vcyA9IDI7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLm5hbm9zICE9PSAwKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5WYXJpbnQpLmludDMyKG1lc3NhZ2UubmFub3MpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcFxuICovXG5jb25zdCBUaW1lc3RhbXAgPSBuZXcgVGltZXN0YW1wJFR5cGUoKTtcblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QZWVyVHlwZVxuICovXG52YXIgUGVlclR5cGU7XG4oZnVuY3Rpb24gKFBlZXJUeXBlKSB7XG4gICAgLyoqXG4gICAgICogdG9kbyBmaXggbWUgKG1hcmNlbG8pXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogUEVFUl9UWVBFX1BVQkxJU0hFUl9VTlNQRUNJRklFRCA9IDA7XG4gICAgICovXG4gICAgUGVlclR5cGVbUGVlclR5cGVbXCJQVUJMSVNIRVJfVU5TUEVDSUZJRURcIl0gPSAwXSA9IFwiUFVCTElTSEVSX1VOU1BFQ0lGSUVEXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IFBFRVJfVFlQRV9TVUJTQ1JJQkVSID0gMTtcbiAgICAgKi9cbiAgICBQZWVyVHlwZVtQZWVyVHlwZVtcIlNVQlNDUklCRVJcIl0gPSAxXSA9IFwiU1VCU0NSSUJFUlwiO1xufSkoUGVlclR5cGUgfHwgKFBlZXJUeXBlID0ge30pKTtcbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuQ29ubmVjdGlvblF1YWxpdHlcbiAqL1xudmFyIENvbm5lY3Rpb25RdWFsaXR5O1xuKGZ1bmN0aW9uIChDb25uZWN0aW9uUXVhbGl0eSkge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHZhbHVlOiBDT05ORUNUSU9OX1FVQUxJVFlfVU5TUEVDSUZJRUQgPSAwO1xuICAgICAqL1xuICAgIENvbm5lY3Rpb25RdWFsaXR5W0Nvbm5lY3Rpb25RdWFsaXR5W1wiVU5TUEVDSUZJRURcIl0gPSAwXSA9IFwiVU5TUEVDSUZJRURcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogQ09OTkVDVElPTl9RVUFMSVRZX1BPT1IgPSAxO1xuICAgICAqL1xuICAgIENvbm5lY3Rpb25RdWFsaXR5W0Nvbm5lY3Rpb25RdWFsaXR5W1wiUE9PUlwiXSA9IDFdID0gXCJQT09SXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IENPTk5FQ1RJT05fUVVBTElUWV9HT09EID0gMjtcbiAgICAgKi9cbiAgICBDb25uZWN0aW9uUXVhbGl0eVtDb25uZWN0aW9uUXVhbGl0eVtcIkdPT0RcIl0gPSAyXSA9IFwiR09PRFwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHZhbHVlOiBDT05ORUNUSU9OX1FVQUxJVFlfRVhDRUxMRU5UID0gMztcbiAgICAgKi9cbiAgICBDb25uZWN0aW9uUXVhbGl0eVtDb25uZWN0aW9uUXVhbGl0eVtcIkVYQ0VMTEVOVFwiXSA9IDNdID0gXCJFWENFTExFTlRcIjtcbn0pKENvbm5lY3Rpb25RdWFsaXR5IHx8IChDb25uZWN0aW9uUXVhbGl0eSA9IHt9KSk7XG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlZpZGVvUXVhbGl0eVxuICovXG52YXIgVmlkZW9RdWFsaXR5O1xuKGZ1bmN0aW9uIChWaWRlb1F1YWxpdHkpIHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogVklERU9fUVVBTElUWV9MT1dfVU5TUEVDSUZJRUQgPSAwO1xuICAgICAqL1xuICAgIFZpZGVvUXVhbGl0eVtWaWRlb1F1YWxpdHlbXCJMT1dfVU5TUEVDSUZJRURcIl0gPSAwXSA9IFwiTE9XX1VOU1BFQ0lGSUVEXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IFZJREVPX1FVQUxJVFlfTUlEID0gMTtcbiAgICAgKi9cbiAgICBWaWRlb1F1YWxpdHlbVmlkZW9RdWFsaXR5W1wiTUlEXCJdID0gMV0gPSBcIk1JRFwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHZhbHVlOiBWSURFT19RVUFMSVRZX0hJR0ggPSAyO1xuICAgICAqL1xuICAgIFZpZGVvUXVhbGl0eVtWaWRlb1F1YWxpdHlbXCJISUdIXCJdID0gMl0gPSBcIkhJR0hcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogVklERU9fUVVBTElUWV9PRkYgPSAzO1xuICAgICAqL1xuICAgIFZpZGVvUXVhbGl0eVtWaWRlb1F1YWxpdHlbXCJPRkZcIl0gPSAzXSA9IFwiT0ZGXCI7XG59KShWaWRlb1F1YWxpdHkgfHwgKFZpZGVvUXVhbGl0eSA9IHt9KSk7XG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlRyYWNrVHlwZVxuICovXG52YXIgVHJhY2tUeXBlO1xuKGZ1bmN0aW9uIChUcmFja1R5cGUpIHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogVFJBQ0tfVFlQRV9VTlNQRUNJRklFRCA9IDA7XG4gICAgICovXG4gICAgVHJhY2tUeXBlW1RyYWNrVHlwZVtcIlVOU1BFQ0lGSUVEXCJdID0gMF0gPSBcIlVOU1BFQ0lGSUVEXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IFRSQUNLX1RZUEVfQVVESU8gPSAxO1xuICAgICAqL1xuICAgIFRyYWNrVHlwZVtUcmFja1R5cGVbXCJBVURJT1wiXSA9IDFdID0gXCJBVURJT1wiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHZhbHVlOiBUUkFDS19UWVBFX1ZJREVPID0gMjtcbiAgICAgKi9cbiAgICBUcmFja1R5cGVbVHJhY2tUeXBlW1wiVklERU9cIl0gPSAyXSA9IFwiVklERU9cIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogVFJBQ0tfVFlQRV9TQ1JFRU5fU0hBUkUgPSAzO1xuICAgICAqL1xuICAgIFRyYWNrVHlwZVtUcmFja1R5cGVbXCJTQ1JFRU5fU0hBUkVcIl0gPSAzXSA9IFwiU0NSRUVOX1NIQVJFXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IFRSQUNLX1RZUEVfU0NSRUVOX1NIQVJFX0FVRElPID0gNDtcbiAgICAgKi9cbiAgICBUcmFja1R5cGVbVHJhY2tUeXBlW1wiU0NSRUVOX1NIQVJFX0FVRElPXCJdID0gNF0gPSBcIlNDUkVFTl9TSEFSRV9BVURJT1wiO1xufSkoVHJhY2tUeXBlIHx8IChUcmFja1R5cGUgPSB7fSkpO1xuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5FcnJvckNvZGVcbiAqL1xudmFyIEVycm9yQ29kZTtcbihmdW5jdGlvbiAoRXJyb3JDb2RlKSB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IEVSUk9SX0NPREVfVU5TUEVDSUZJRUQgPSAwO1xuICAgICAqL1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJVTlNQRUNJRklFRFwiXSA9IDBdID0gXCJVTlNQRUNJRklFRFwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHZhbHVlOiBFUlJPUl9DT0RFX1BVQkxJU0hfVFJBQ0tfTk9UX0ZPVU5EID0gMTAwO1xuICAgICAqL1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJQVUJMSVNIX1RSQUNLX05PVF9GT1VORFwiXSA9IDEwMF0gPSBcIlBVQkxJU0hfVFJBQ0tfTk9UX0ZPVU5EXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IEVSUk9SX0NPREVfUFVCTElTSF9UUkFDS1NfTUlTTUFUQ0ggPSAxMDE7XG4gICAgICovXG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIlBVQkxJU0hfVFJBQ0tTX01JU01BVENIXCJdID0gMTAxXSA9IFwiUFVCTElTSF9UUkFDS1NfTUlTTUFUQ0hcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogRVJST1JfQ09ERV9QVUJMSVNIX1RSQUNLX09VVF9PRl9PUkRFUiA9IDEwMjtcbiAgICAgKi9cbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiUFVCTElTSF9UUkFDS19PVVRfT0ZfT1JERVJcIl0gPSAxMDJdID0gXCJQVUJMSVNIX1RSQUNLX09VVF9PRl9PUkRFUlwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHZhbHVlOiBFUlJPUl9DT0RFX1BVQkxJU0hfVFJBQ0tfVklERU9fTEFZRVJfTk9UX0ZPVU5EID0gMTAzO1xuICAgICAqL1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJQVUJMSVNIX1RSQUNLX1ZJREVPX0xBWUVSX05PVF9GT1VORFwiXSA9IDEwM10gPSBcIlBVQkxJU0hfVFJBQ0tfVklERU9fTEFZRVJfTk9UX0ZPVU5EXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IEVSUk9SX0NPREVfTElWRV9FTkRFRCA9IDEwNDtcbiAgICAgKi9cbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiTElWRV9FTkRFRFwiXSA9IDEwNF0gPSBcIkxJVkVfRU5ERURcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogRVJST1JfQ09ERV9QQVJUSUNJUEFOVF9OT1RfRk9VTkQgPSAyMDA7XG4gICAgICovXG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIlBBUlRJQ0lQQU5UX05PVF9GT1VORFwiXSA9IDIwMF0gPSBcIlBBUlRJQ0lQQU5UX05PVF9GT1VORFwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHZhbHVlOiBFUlJPUl9DT0RFX1BBUlRJQ0lQQU5UX01JR1JBVElOR19PVVQgPSAyMDE7XG4gICAgICovXG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIlBBUlRJQ0lQQU5UX01JR1JBVElOR19PVVRcIl0gPSAyMDFdID0gXCJQQVJUSUNJUEFOVF9NSUdSQVRJTkdfT1VUXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IEVSUk9SX0NPREVfUEFSVElDSVBBTlRfTUlHUkFUSU9OX0ZBSUxFRCA9IDIwMjtcbiAgICAgKi9cbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiUEFSVElDSVBBTlRfTUlHUkFUSU9OX0ZBSUxFRFwiXSA9IDIwMl0gPSBcIlBBUlRJQ0lQQU5UX01JR1JBVElPTl9GQUlMRURcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogRVJST1JfQ09ERV9QQVJUSUNJUEFOVF9NSUdSQVRJTkcgPSAyMDM7XG4gICAgICovXG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIlBBUlRJQ0lQQU5UX01JR1JBVElOR1wiXSA9IDIwM10gPSBcIlBBUlRJQ0lQQU5UX01JR1JBVElOR1wiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHZhbHVlOiBFUlJPUl9DT0RFX1BBUlRJQ0lQQU5UX1JFQ09OTkVDVF9GQUlMRUQgPSAyMDQ7XG4gICAgICovXG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIlBBUlRJQ0lQQU5UX1JFQ09OTkVDVF9GQUlMRURcIl0gPSAyMDRdID0gXCJQQVJUSUNJUEFOVF9SRUNPTk5FQ1RfRkFJTEVEXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IEVSUk9SX0NPREVfUEFSVElDSVBBTlRfTUVESUFfVFJBTlNQT1JUX0ZBSUxVUkUgPSAyMDU7XG4gICAgICovXG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIlBBUlRJQ0lQQU5UX01FRElBX1RSQU5TUE9SVF9GQUlMVVJFXCJdID0gMjA1XSA9IFwiUEFSVElDSVBBTlRfTUVESUFfVFJBTlNQT1JUX0ZBSUxVUkVcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogRVJST1JfQ09ERV9DQUxMX05PVF9GT1VORCA9IDMwMDtcbiAgICAgKi9cbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiQ0FMTF9OT1RfRk9VTkRcIl0gPSAzMDBdID0gXCJDQUxMX05PVF9GT1VORFwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHZhbHVlOiBFUlJPUl9DT0RFX1JFUVVFU1RfVkFMSURBVElPTl9GQUlMRUQgPSA0MDA7XG4gICAgICovXG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIlJFUVVFU1RfVkFMSURBVElPTl9GQUlMRURcIl0gPSA0MDBdID0gXCJSRVFVRVNUX1ZBTElEQVRJT05fRkFJTEVEXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IEVSUk9SX0NPREVfVU5BVVRIRU5USUNBVEVEID0gNDAxO1xuICAgICAqL1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJVTkFVVEhFTlRJQ0FURURcIl0gPSA0MDFdID0gXCJVTkFVVEhFTlRJQ0FURURcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogRVJST1JfQ09ERV9QRVJNSVNTSU9OX0RFTklFRCA9IDQwMztcbiAgICAgKi9cbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiUEVSTUlTU0lPTl9ERU5JRURcIl0gPSA0MDNdID0gXCJQRVJNSVNTSU9OX0RFTklFRFwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHZhbHVlOiBFUlJPUl9DT0RFX1RPT19NQU5ZX1JFUVVFU1RTID0gNDI5O1xuICAgICAqL1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJUT09fTUFOWV9SRVFVRVNUU1wiXSA9IDQyOV0gPSBcIlRPT19NQU5ZX1JFUVVFU1RTXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IEVSUk9SX0NPREVfSU5URVJOQUxfU0VSVkVSX0VSUk9SID0gNTAwO1xuICAgICAqL1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIl0gPSA1MDBdID0gXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogRVJST1JfQ09ERV9TRlVfU0hVVFRJTkdfRE9XTiA9IDYwMDtcbiAgICAgKi9cbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiU0ZVX1NIVVRUSU5HX0RPV05cIl0gPSA2MDBdID0gXCJTRlVfU0hVVFRJTkdfRE9XTlwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHZhbHVlOiBFUlJPUl9DT0RFX1NGVV9GVUxMID0gNzAwO1xuICAgICAqL1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJTRlVfRlVMTFwiXSA9IDcwMF0gPSBcIlNGVV9GVUxMXCI7XG59KShFcnJvckNvZGUgfHwgKEVycm9yQ29kZSA9IHt9KSk7XG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlNka1R5cGVcbiAqL1xudmFyIFNka1R5cGU7XG4oZnVuY3Rpb24gKFNka1R5cGUpIHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogU0RLX1RZUEVfVU5TUEVDSUZJRUQgPSAwO1xuICAgICAqL1xuICAgIFNka1R5cGVbU2RrVHlwZVtcIlVOU1BFQ0lGSUVEXCJdID0gMF0gPSBcIlVOU1BFQ0lGSUVEXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IFNES19UWVBFX1JFQUNUID0gMTtcbiAgICAgKi9cbiAgICBTZGtUeXBlW1Nka1R5cGVbXCJSRUFDVFwiXSA9IDFdID0gXCJSRUFDVFwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHZhbHVlOiBTREtfVFlQRV9BTkdVTEFSID0gMjtcbiAgICAgKi9cbiAgICBTZGtUeXBlW1Nka1R5cGVbXCJBTkdVTEFSXCJdID0gMl0gPSBcIkFOR1VMQVJcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogU0RLX1RZUEVfQU5EUk9JRCA9IDM7XG4gICAgICovXG4gICAgU2RrVHlwZVtTZGtUeXBlW1wiQU5EUk9JRFwiXSA9IDNdID0gXCJBTkRST0lEXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IFNES19UWVBFX0lPUyA9IDQ7XG4gICAgICovXG4gICAgU2RrVHlwZVtTZGtUeXBlW1wiSU9TXCJdID0gNF0gPSBcIklPU1wiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHZhbHVlOiBTREtfVFlQRV9GTFVUVEVSID0gNTtcbiAgICAgKi9cbiAgICBTZGtUeXBlW1Nka1R5cGVbXCJGTFVUVEVSXCJdID0gNV0gPSBcIkZMVVRURVJcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogU0RLX1RZUEVfUkVBQ1RfTkFUSVZFID0gNjtcbiAgICAgKi9cbiAgICBTZGtUeXBlW1Nka1R5cGVbXCJSRUFDVF9OQVRJVkVcIl0gPSA2XSA9IFwiUkVBQ1RfTkFUSVZFXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IFNES19UWVBFX1VOSVRZID0gNztcbiAgICAgKi9cbiAgICBTZGtUeXBlW1Nka1R5cGVbXCJVTklUWVwiXSA9IDddID0gXCJVTklUWVwiO1xufSkoU2RrVHlwZSB8fCAoU2RrVHlwZSA9IHt9KSk7XG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlRyYWNrVW5wdWJsaXNoUmVhc29uXG4gKi9cbnZhciBUcmFja1VucHVibGlzaFJlYXNvbjtcbihmdW5jdGlvbiAoVHJhY2tVbnB1Ymxpc2hSZWFzb24pIHtcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IHZhbHVlIHdoaWNoIGlzIHVzZWQgd2hlbiB0aGUgc3BlY2lmaWMgcmVhc29uXG4gICAgICogZm9yIG11dGluZyB0aGUgdHJhY2sgaXMgbm90IGtub3duLlxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IFRSQUNLX1VOUFVCTElTSF9SRUFTT05fVU5TUEVDSUZJRUQgPSAwO1xuICAgICAqL1xuICAgIFRyYWNrVW5wdWJsaXNoUmVhc29uW1RyYWNrVW5wdWJsaXNoUmVhc29uW1wiVU5TUEVDSUZJRURcIl0gPSAwXSA9IFwiVU5TUEVDSUZJRURcIjtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIHVzZXIgbXV0aW5nIHRoZWlyIHRyYWNrcy5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHZhbHVlOiBUUkFDS19VTlBVQkxJU0hfUkVBU09OX1VTRVJfTVVURUQgPSAxO1xuICAgICAqL1xuICAgIFRyYWNrVW5wdWJsaXNoUmVhc29uW1RyYWNrVW5wdWJsaXNoUmVhc29uW1wiVVNFUl9NVVRFRFwiXSA9IDFdID0gXCJVU0VSX01VVEVEXCI7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBtdXRpbmcgdGhlIHRyYWNrIGJlY2F1c2UgdGhlIHBlcm1pc3Npb24gdG9cbiAgICAgKiBwdWJsaXNoIHRoZSB0cmFjayBoYXMgYmVlbiByZXZva2VkLlxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IFRSQUNLX1VOUFVCTElTSF9SRUFTT05fUEVSTUlTU0lPTl9SRVZPS0VEID0gMjtcbiAgICAgKi9cbiAgICBUcmFja1VucHVibGlzaFJlYXNvbltUcmFja1VucHVibGlzaFJlYXNvbltcIlBFUk1JU1NJT05fUkVWT0tFRFwiXSA9IDJdID0gXCJQRVJNSVNTSU9OX1JFVk9LRURcIjtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIG11dGluZyB0aGUgdHJhY2sgZHVlIHRvIG1vZGVyYXRpb24gYWN0aW9ucy5cbiAgICAgKiBUaGlzIGlzIGRpZmZlcmVudCBmcm9tIHBlcm1pc3Npb24gcmV2b2tlZCBiZWNhdXNlIHRoZVxuICAgICAqIHBhcnRpY2lwYW50IGNhbiB1bm11dGUgdGhlbXNlbHZlcyBoZXJlIHdoZXJlYXMgaW4gY2FzZVxuICAgICAqIG9mIFwicGVybWlzc2lvbiByZXZva2VcIiBpdCBpcyBub3QgcG9zc2libGUgdW50aWwgdGhlXG4gICAgICogY2FsbCBwZXJtaXNzaW9ucyBhcmUgdXBkYXRlZC5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHZhbHVlOiBUUkFDS19VTlBVQkxJU0hfUkVBU09OX01PREVSQVRJT04gPSAzO1xuICAgICAqL1xuICAgIFRyYWNrVW5wdWJsaXNoUmVhc29uW1RyYWNrVW5wdWJsaXNoUmVhc29uW1wiTU9ERVJBVElPTlwiXSA9IDNdID0gXCJNT0RFUkFUSU9OXCI7XG59KShUcmFja1VucHVibGlzaFJlYXNvbiB8fCAoVHJhY2tVbnB1Ymxpc2hSZWFzb24gPSB7fSkpO1xuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5Hb0F3YXlSZWFzb25cbiAqL1xudmFyIEdvQXdheVJlYXNvbjtcbihmdW5jdGlvbiAoR29Bd2F5UmVhc29uKSB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIGVudW0gdmFsdWU6IEdPX0FXQVlfUkVBU09OX1VOU1BFQ0lGSUVEID0gMDtcbiAgICAgKi9cbiAgICBHb0F3YXlSZWFzb25bR29Bd2F5UmVhc29uW1wiVU5TUEVDSUZJRURcIl0gPSAwXSA9IFwiVU5TUEVDSUZJRURcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogR09fQVdBWV9SRUFTT05fU0hVVFRJTkdfRE9XTiA9IDE7XG4gICAgICovXG4gICAgR29Bd2F5UmVhc29uW0dvQXdheVJlYXNvbltcIlNIVVRUSU5HX0RPV05cIl0gPSAxXSA9IFwiU0hVVFRJTkdfRE9XTlwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBlbnVtIHZhbHVlOiBHT19BV0FZX1JFQVNPTl9SRUJBTEFOQ0UgPSAyO1xuICAgICAqL1xuICAgIEdvQXdheVJlYXNvbltHb0F3YXlSZWFzb25bXCJSRUJBTEFOQ0VcIl0gPSAyXSA9IFwiUkVCQUxBTkNFXCI7XG59KShHb0F3YXlSZWFzb24gfHwgKEdvQXdheVJlYXNvbiA9IHt9KSk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBDYWxsU3RhdGUkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUubW9kZWxzLkNhbGxTdGF0ZScsIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAncGFydGljaXBhbnRzJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgcmVwZWF0OiAxIC8qUmVwZWF0VHlwZS5QQUNLRUQqLyxcbiAgICAgICAgICAgICAgICBUOiAoKSA9PiBQYXJ0aWNpcGFudCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7IG5vOiAyLCBuYW1lOiAnc3RhcnRlZF9hdCcsIGtpbmQ6ICdtZXNzYWdlJywgVDogKCkgPT4gVGltZXN0YW1wIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDMsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3BhcnRpY2lwYW50X2NvdW50JyxcbiAgICAgICAgICAgICAgICBraW5kOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gUGFydGljaXBhbnRDb3VudCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDQsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3BpbnMnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICByZXBlYXQ6IDEgLypSZXBlYXRUeXBlLlBBQ0tFRCovLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IFBpbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLnBhcnRpY2lwYW50cyA9IFtdO1xuICAgICAgICBtZXNzYWdlLnBpbnMgPSBbXTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZWZsZWN0aW9uTWVyZ2VQYXJ0aWFsKHRoaXMsIG1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIGxlbmd0aCwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGFyZ2V0ID8/IHRoaXMuY3JlYXRlKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgLyogcmVwZWF0ZWQgc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuUGFydGljaXBhbnQgcGFydGljaXBhbnRzICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFydGljaXBhbnRzLnB1c2goUGFydGljaXBhbnQuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCBzdGFydGVkX2F0ICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3RhcnRlZEF0ID0gVGltZXN0YW1wLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5zdGFydGVkQXQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlBhcnRpY2lwYW50Q291bnQgcGFydGljaXBhbnRfY291bnQgKi8gMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYXJ0aWNpcGFudENvdW50ID0gUGFydGljaXBhbnRDb3VudC5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UucGFydGljaXBhbnRDb3VudCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogcmVwZWF0ZWQgc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuUGluIHBpbnMgKi8gNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5waW5zLnB1c2goUGluLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucykpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiByZXBlYXRlZCBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QYXJ0aWNpcGFudCBwYXJ0aWNpcGFudHMgPSAxOyAqL1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2UucGFydGljaXBhbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgUGFydGljaXBhbnQuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLnBhcnRpY2lwYW50c1tpXSwgd3JpdGVyLnRhZygxLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBnb29nbGUucHJvdG9idWYuVGltZXN0YW1wIHN0YXJ0ZWRfYXQgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5zdGFydGVkQXQpXG4gICAgICAgICAgICBUaW1lc3RhbXAuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLnN0YXJ0ZWRBdCwgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QYXJ0aWNpcGFudENvdW50IHBhcnRpY2lwYW50X2NvdW50ID0gMzsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UucGFydGljaXBhbnRDb3VudClcbiAgICAgICAgICAgIFBhcnRpY2lwYW50Q291bnQuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLnBhcnRpY2lwYW50Q291bnQsIHdyaXRlci50YWcoMywgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgLyogcmVwZWF0ZWQgc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuUGluIHBpbnMgPSA0OyAqL1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2UucGlucy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIFBpbi5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UucGluc1tpXSwgd3JpdGVyLnRhZyg0LCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuQ2FsbFN0YXRlXG4gKi9cbmNvbnN0IENhbGxTdGF0ZSQxID0gbmV3IENhbGxTdGF0ZSRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBQYXJ0aWNpcGFudENvdW50JFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QYXJ0aWNpcGFudENvdW50JywgW1xuICAgICAgICAgICAgeyBubzogMSwgbmFtZTogJ3RvdGFsJywga2luZDogJ3NjYWxhcicsIFQ6IDEzIC8qU2NhbGFyVHlwZS5VSU5UMzIqLyB9LFxuICAgICAgICAgICAgeyBubzogMiwgbmFtZTogJ2Fub255bW91cycsIGtpbmQ6ICdzY2FsYXInLCBUOiAxMyAvKlNjYWxhclR5cGUuVUlOVDMyKi8gfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2UudG90YWwgPSAwO1xuICAgICAgICBtZXNzYWdlLmFub255bW91cyA9IDA7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHVpbnQzMiB0b3RhbCAqLyAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRvdGFsID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHVpbnQzMiBhbm9ueW1vdXMgKi8gMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hbm9ueW1vdXMgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHVpbnQzMiB0b3RhbCA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnRvdGFsICE9PSAwKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygxLCBXaXJlVHlwZS5WYXJpbnQpLnVpbnQzMihtZXNzYWdlLnRvdGFsKTtcbiAgICAgICAgLyogdWludDMyIGFub255bW91cyA9IDI7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmFub255bW91cyAhPT0gMClcbiAgICAgICAgICAgIHdyaXRlci50YWcoMiwgV2lyZVR5cGUuVmFyaW50KS51aW50MzIobWVzc2FnZS5hbm9ueW1vdXMpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuUGFydGljaXBhbnRDb3VudFxuICovXG5jb25zdCBQYXJ0aWNpcGFudENvdW50ID0gbmV3IFBhcnRpY2lwYW50Q291bnQkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgUGluJFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QaW4nLCBbXG4gICAgICAgICAgICB7IG5vOiAxLCBuYW1lOiAndXNlcl9pZCcsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAgeyBubzogMiwgbmFtZTogJ3Nlc3Npb25faWQnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2UudXNlcklkID0gJyc7XG4gICAgICAgIG1lc3NhZ2Uuc2Vzc2lvbklkID0gJyc7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyB1c2VyX2lkICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudXNlcklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBzZXNzaW9uX2lkICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2Vzc2lvbklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJpbmcgdXNlcl9pZCA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnVzZXJJZCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UudXNlcklkKTtcbiAgICAgICAgLyogc3RyaW5nIHNlc3Npb25faWQgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5zZXNzaW9uSWQgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLnNlc3Npb25JZCk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QaW5cbiAqL1xuY29uc3QgUGluID0gbmV3IFBpbiRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBQYXJ0aWNpcGFudCRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuUGFydGljaXBhbnQnLCBbXG4gICAgICAgICAgICB7IG5vOiAxLCBuYW1lOiAndXNlcl9pZCcsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAgeyBubzogMiwgbmFtZTogJ3Nlc3Npb25faWQnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMyxcbiAgICAgICAgICAgICAgICBuYW1lOiAncHVibGlzaGVkX3RyYWNrcycsXG4gICAgICAgICAgICAgICAga2luZDogJ2VudW0nLFxuICAgICAgICAgICAgICAgIHJlcGVhdDogMSAvKlJlcGVhdFR5cGUuUEFDS0VEKi8sXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAnc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuVHJhY2tUeXBlJyxcbiAgICAgICAgICAgICAgICAgICAgVHJhY2tUeXBlLFxuICAgICAgICAgICAgICAgICAgICAnVFJBQ0tfVFlQRV8nLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBubzogNCwgbmFtZTogJ2pvaW5lZF9hdCcsIGtpbmQ6ICdtZXNzYWdlJywgVDogKCkgPT4gVGltZXN0YW1wIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDUsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3RyYWNrX2xvb2t1cF9wcmVmaXgnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdzY2FsYXInLFxuICAgICAgICAgICAgICAgIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogNixcbiAgICAgICAgICAgICAgICBuYW1lOiAnY29ubmVjdGlvbl9xdWFsaXR5JyxcbiAgICAgICAgICAgICAgICBraW5kOiAnZW51bScsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAnc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuQ29ubmVjdGlvblF1YWxpdHknLFxuICAgICAgICAgICAgICAgICAgICBDb25uZWN0aW9uUXVhbGl0eSxcbiAgICAgICAgICAgICAgICAgICAgJ0NPTk5FQ1RJT05fUVVBTElUWV8nLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBubzogNywgbmFtZTogJ2lzX3NwZWFraW5nJywga2luZDogJ3NjYWxhcicsIFQ6IDggLypTY2FsYXJUeXBlLkJPT0wqLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiA4LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdpc19kb21pbmFudF9zcGVha2VyJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnc2NhbGFyJyxcbiAgICAgICAgICAgICAgICBUOiA4IC8qU2NhbGFyVHlwZS5CT09MKi8sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBubzogOSwgbmFtZTogJ2F1ZGlvX2xldmVsJywga2luZDogJ3NjYWxhcicsIFQ6IDIgLypTY2FsYXJUeXBlLkZMT0FUKi8gfSxcbiAgICAgICAgICAgIHsgbm86IDEwLCBuYW1lOiAnbmFtZScsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAgeyBubzogMTEsIG5hbWU6ICdpbWFnZScsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAgeyBubzogMTIsIG5hbWU6ICdjdXN0b20nLCBraW5kOiAnbWVzc2FnZScsIFQ6ICgpID0+IFN0cnVjdCB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAxMyxcbiAgICAgICAgICAgICAgICBuYW1lOiAncm9sZXMnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdzY2FsYXInLFxuICAgICAgICAgICAgICAgIHJlcGVhdDogMiAvKlJlcGVhdFR5cGUuVU5QQUNLRUQqLyxcbiAgICAgICAgICAgICAgICBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLnVzZXJJZCA9ICcnO1xuICAgICAgICBtZXNzYWdlLnNlc3Npb25JZCA9ICcnO1xuICAgICAgICBtZXNzYWdlLnB1Ymxpc2hlZFRyYWNrcyA9IFtdO1xuICAgICAgICBtZXNzYWdlLnRyYWNrTG9va3VwUHJlZml4ID0gJyc7XG4gICAgICAgIG1lc3NhZ2UuY29ubmVjdGlvblF1YWxpdHkgPSAwO1xuICAgICAgICBtZXNzYWdlLmlzU3BlYWtpbmcgPSBmYWxzZTtcbiAgICAgICAgbWVzc2FnZS5pc0RvbWluYW50U3BlYWtlciA9IGZhbHNlO1xuICAgICAgICBtZXNzYWdlLmF1ZGlvTGV2ZWwgPSAwO1xuICAgICAgICBtZXNzYWdlLm5hbWUgPSAnJztcbiAgICAgICAgbWVzc2FnZS5pbWFnZSA9ICcnO1xuICAgICAgICBtZXNzYWdlLnJvbGVzID0gW107XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyB1c2VyX2lkICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudXNlcklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBzZXNzaW9uX2lkICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2Vzc2lvbklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHJlcGVhdGVkIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlRyYWNrVHlwZSBwdWJsaXNoZWRfdHJhY2tzICovIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aXJlVHlwZSA9PT0gV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZSA9IHJlYWRlci5pbnQzMigpICsgcmVhZGVyLnBvczsgcmVhZGVyLnBvcyA8IGU7KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucHVibGlzaGVkVHJhY2tzLnB1c2gocmVhZGVyLmludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnB1Ymxpc2hlZFRyYWNrcy5wdXNoKHJlYWRlci5pbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBnb29nbGUucHJvdG9idWYuVGltZXN0YW1wIGpvaW5lZF9hdCAqLyA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmpvaW5lZEF0ID0gVGltZXN0YW1wLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5qb2luZWRBdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIHRyYWNrX2xvb2t1cF9wcmVmaXggKi8gNTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50cmFja0xvb2t1cFByZWZpeCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5Db25uZWN0aW9uUXVhbGl0eSBjb25uZWN0aW9uX3F1YWxpdHkgKi8gNjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jb25uZWN0aW9uUXVhbGl0eSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIGJvb2wgaXNfc3BlYWtpbmcgKi8gNzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pc1NwZWFraW5nID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBib29sIGlzX2RvbWluYW50X3NwZWFrZXIgKi8gODpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pc0RvbWluYW50U3BlYWtlciA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogZmxvYXQgYXVkaW9fbGV2ZWwgKi8gOTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hdWRpb0xldmVsID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIG5hbWUgKi8gMTA6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubmFtZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgaW1hZ2UgKi8gMTE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW1hZ2UgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogZ29vZ2xlLnByb3RvYnVmLlN0cnVjdCBjdXN0b20gKi8gMTI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY3VzdG9tID0gU3RydWN0LmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5jdXN0b20pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHJlcGVhdGVkIHN0cmluZyByb2xlcyAqLyAxMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yb2xlcy5wdXNoKHJlYWRlci5zdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHN0cmluZyB1c2VyX2lkID0gMTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UudXNlcklkICE9PSAnJylcbiAgICAgICAgICAgIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5zdHJpbmcobWVzc2FnZS51c2VySWQpO1xuICAgICAgICAvKiBzdHJpbmcgc2Vzc2lvbl9pZCA9IDI7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnNlc3Npb25JZCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDIsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2Uuc2Vzc2lvbklkKTtcbiAgICAgICAgLyogcmVwZWF0ZWQgc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuVHJhY2tUeXBlIHB1Ymxpc2hlZF90cmFja3MgPSAzOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5wdWJsaXNoZWRUcmFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICB3cml0ZXIudGFnKDMsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXNzYWdlLnB1Ymxpc2hlZFRyYWNrcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICB3cml0ZXIuaW50MzIobWVzc2FnZS5wdWJsaXNoZWRUcmFja3NbaV0pO1xuICAgICAgICAgICAgd3JpdGVyLmpvaW4oKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBnb29nbGUucHJvdG9idWYuVGltZXN0YW1wIGpvaW5lZF9hdCA9IDQ7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmpvaW5lZEF0KVxuICAgICAgICAgICAgVGltZXN0YW1wLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5qb2luZWRBdCwgd3JpdGVyLnRhZyg0LCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBzdHJpbmcgdHJhY2tfbG9va3VwX3ByZWZpeCA9IDU7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnRyYWNrTG9va3VwUHJlZml4ICE9PSAnJylcbiAgICAgICAgICAgIHdyaXRlci50YWcoNSwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5zdHJpbmcobWVzc2FnZS50cmFja0xvb2t1cFByZWZpeCk7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLkNvbm5lY3Rpb25RdWFsaXR5IGNvbm5lY3Rpb25fcXVhbGl0eSA9IDY7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmNvbm5lY3Rpb25RdWFsaXR5ICE9PSAwKVxuICAgICAgICAgICAgd3JpdGVyLnRhZyg2LCBXaXJlVHlwZS5WYXJpbnQpLmludDMyKG1lc3NhZ2UuY29ubmVjdGlvblF1YWxpdHkpO1xuICAgICAgICAvKiBib29sIGlzX3NwZWFraW5nID0gNzsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UuaXNTcGVha2luZyAhPT0gZmFsc2UpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDcsIFdpcmVUeXBlLlZhcmludCkuYm9vbChtZXNzYWdlLmlzU3BlYWtpbmcpO1xuICAgICAgICAvKiBib29sIGlzX2RvbWluYW50X3NwZWFrZXIgPSA4OyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5pc0RvbWluYW50U3BlYWtlciAhPT0gZmFsc2UpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDgsIFdpcmVUeXBlLlZhcmludCkuYm9vbChtZXNzYWdlLmlzRG9taW5hbnRTcGVha2VyKTtcbiAgICAgICAgLyogZmxvYXQgYXVkaW9fbGV2ZWwgPSA5OyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5hdWRpb0xldmVsICE9PSAwKVxuICAgICAgICAgICAgd3JpdGVyLnRhZyg5LCBXaXJlVHlwZS5CaXQzMikuZmxvYXQobWVzc2FnZS5hdWRpb0xldmVsKTtcbiAgICAgICAgLyogc3RyaW5nIG5hbWUgPSAxMDsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UubmFtZSAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDEwLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLm5hbWUpO1xuICAgICAgICAvKiBzdHJpbmcgaW1hZ2UgPSAxMTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UuaW1hZ2UgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygxMSwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5zdHJpbmcobWVzc2FnZS5pbWFnZSk7XG4gICAgICAgIC8qIGdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QgY3VzdG9tID0gMTI7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmN1c3RvbSlcbiAgICAgICAgICAgIFN0cnVjdC5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UuY3VzdG9tLCB3cml0ZXIudGFnKDEyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiByZXBlYXRlZCBzdHJpbmcgcm9sZXMgPSAxMzsgKi9cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXNzYWdlLnJvbGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygxMywgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5zdHJpbmcobWVzc2FnZS5yb2xlc1tpXSk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QYXJ0aWNpcGFudFxuICovXG5jb25zdCBQYXJ0aWNpcGFudCA9IG5ldyBQYXJ0aWNpcGFudCRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBTdHJlYW1RdWFsaXR5JFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5TdHJlYW1RdWFsaXR5JywgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICd2aWRlb19xdWFsaXR5JyxcbiAgICAgICAgICAgICAgICBraW5kOiAnZW51bScsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAnc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuVmlkZW9RdWFsaXR5JyxcbiAgICAgICAgICAgICAgICAgICAgVmlkZW9RdWFsaXR5LFxuICAgICAgICAgICAgICAgICAgICAnVklERU9fUVVBTElUWV8nLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBubzogMiwgbmFtZTogJ3VzZXJfaWQnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2UudmlkZW9RdWFsaXR5ID0gMDtcbiAgICAgICAgbWVzc2FnZS51c2VySWQgPSAnJztcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZWZsZWN0aW9uTWVyZ2VQYXJ0aWFsKHRoaXMsIG1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIGxlbmd0aCwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGFyZ2V0ID8/IHRoaXMuY3JlYXRlKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuVmlkZW9RdWFsaXR5IHZpZGVvX3F1YWxpdHkgKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52aWRlb1F1YWxpdHkgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgdXNlcl9pZCAqLyAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnVzZXJJZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuVmlkZW9RdWFsaXR5IHZpZGVvX3F1YWxpdHkgPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS52aWRlb1F1YWxpdHkgIT09IDApXG4gICAgICAgICAgICB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLlZhcmludCkuaW50MzIobWVzc2FnZS52aWRlb1F1YWxpdHkpO1xuICAgICAgICAvKiBzdHJpbmcgdXNlcl9pZCA9IDI7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnVzZXJJZCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDIsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UudXNlcklkKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlN0cmVhbVF1YWxpdHlcbiAqL1xuY29uc3QgU3RyZWFtUXVhbGl0eSA9IG5ldyBTdHJlYW1RdWFsaXR5JFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIFZpZGVvRGltZW5zaW9uJFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5WaWRlb0RpbWVuc2lvbicsIFtcbiAgICAgICAgICAgIHsgbm86IDEsIG5hbWU6ICd3aWR0aCcsIGtpbmQ6ICdzY2FsYXInLCBUOiAxMyAvKlNjYWxhclR5cGUuVUlOVDMyKi8gfSxcbiAgICAgICAgICAgIHsgbm86IDIsIG5hbWU6ICdoZWlnaHQnLCBraW5kOiAnc2NhbGFyJywgVDogMTMgLypTY2FsYXJUeXBlLlVJTlQzMiovIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLndpZHRoID0gMDtcbiAgICAgICAgbWVzc2FnZS5oZWlnaHQgPSAwO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiB1aW50MzIgd2lkdGggKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS53aWR0aCA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiB1aW50MzIgaGVpZ2h0ICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaGVpZ2h0ID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiB1aW50MzIgd2lkdGggPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS53aWR0aCAhPT0gMClcbiAgICAgICAgICAgIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuVmFyaW50KS51aW50MzIobWVzc2FnZS53aWR0aCk7XG4gICAgICAgIC8qIHVpbnQzMiBoZWlnaHQgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5oZWlnaHQgIT09IDApXG4gICAgICAgICAgICB3cml0ZXIudGFnKDIsIFdpcmVUeXBlLlZhcmludCkudWludDMyKG1lc3NhZ2UuaGVpZ2h0KTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlZpZGVvRGltZW5zaW9uXG4gKi9cbmNvbnN0IFZpZGVvRGltZW5zaW9uID0gbmV3IFZpZGVvRGltZW5zaW9uJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIFZpZGVvTGF5ZXIkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUubW9kZWxzLlZpZGVvTGF5ZXInLCBbXG4gICAgICAgICAgICB7IG5vOiAxLCBuYW1lOiAncmlkJywga2luZDogJ3NjYWxhcicsIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDIsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3ZpZGVvX2RpbWVuc2lvbicsXG4gICAgICAgICAgICAgICAga2luZDogJ21lc3NhZ2UnLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IFZpZGVvRGltZW5zaW9uLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgbm86IDQsIG5hbWU6ICdiaXRyYXRlJywga2luZDogJ3NjYWxhcicsIFQ6IDEzIC8qU2NhbGFyVHlwZS5VSU5UMzIqLyB9LFxuICAgICAgICAgICAgeyBubzogNSwgbmFtZTogJ2ZwcycsIGtpbmQ6ICdzY2FsYXInLCBUOiAxMyAvKlNjYWxhclR5cGUuVUlOVDMyKi8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogNixcbiAgICAgICAgICAgICAgICBuYW1lOiAncXVhbGl0eScsXG4gICAgICAgICAgICAgICAga2luZDogJ2VudW0nLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgJ3N0cmVhbS52aWRlby5zZnUubW9kZWxzLlZpZGVvUXVhbGl0eScsXG4gICAgICAgICAgICAgICAgICAgIFZpZGVvUXVhbGl0eSxcbiAgICAgICAgICAgICAgICAgICAgJ1ZJREVPX1FVQUxJVFlfJyxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2UucmlkID0gJyc7XG4gICAgICAgIG1lc3NhZ2UuYml0cmF0ZSA9IDA7XG4gICAgICAgIG1lc3NhZ2UuZnBzID0gMDtcbiAgICAgICAgbWVzc2FnZS5xdWFsaXR5ID0gMDtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZWZsZWN0aW9uTWVyZ2VQYXJ0aWFsKHRoaXMsIG1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIGxlbmd0aCwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGFyZ2V0ID8/IHRoaXMuY3JlYXRlKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIHJpZCAqLyAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJpZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5WaWRlb0RpbWVuc2lvbiB2aWRlb19kaW1lbnNpb24gKi8gMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52aWRlb0RpbWVuc2lvbiA9IFZpZGVvRGltZW5zaW9uLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS52aWRlb0RpbWVuc2lvbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogdWludDMyIGJpdHJhdGUgKi8gNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5iaXRyYXRlID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHVpbnQzMiBmcHMgKi8gNTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5mcHMgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuVmlkZW9RdWFsaXR5IHF1YWxpdHkgKi8gNjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5xdWFsaXR5ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHN0cmluZyByaWQgPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5yaWQgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygxLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLnJpZCk7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlZpZGVvRGltZW5zaW9uIHZpZGVvX2RpbWVuc2lvbiA9IDI7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnZpZGVvRGltZW5zaW9uKVxuICAgICAgICAgICAgVmlkZW9EaW1lbnNpb24uaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLnZpZGVvRGltZW5zaW9uLCB3cml0ZXIudGFnKDIsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRpb25zKS5qb2luKCk7XG4gICAgICAgIC8qIHVpbnQzMiBiaXRyYXRlID0gNDsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UuYml0cmF0ZSAhPT0gMClcbiAgICAgICAgICAgIHdyaXRlci50YWcoNCwgV2lyZVR5cGUuVmFyaW50KS51aW50MzIobWVzc2FnZS5iaXRyYXRlKTtcbiAgICAgICAgLyogdWludDMyIGZwcyA9IDU7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmZwcyAhPT0gMClcbiAgICAgICAgICAgIHdyaXRlci50YWcoNSwgV2lyZVR5cGUuVmFyaW50KS51aW50MzIobWVzc2FnZS5mcHMpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5WaWRlb1F1YWxpdHkgcXVhbGl0eSA9IDY7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnF1YWxpdHkgIT09IDApXG4gICAgICAgICAgICB3cml0ZXIudGFnKDYsIFdpcmVUeXBlLlZhcmludCkuaW50MzIobWVzc2FnZS5xdWFsaXR5KTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlZpZGVvTGF5ZXJcbiAqL1xuY29uc3QgVmlkZW9MYXllciA9IG5ldyBWaWRlb0xheWVyJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIENvZGVjJFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5Db2RlYycsIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAncGF5bG9hZF90eXBlJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnc2NhbGFyJyxcbiAgICAgICAgICAgICAgICBUOiAxMyAvKlNjYWxhclR5cGUuVUlOVDMyKi8sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBubzogMiwgbmFtZTogJ25hbWUnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgICAgIHsgbm86IDMsIG5hbWU6ICdmbXRwX2xpbmUnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogNCxcbiAgICAgICAgICAgICAgICBuYW1lOiAnY2xvY2tfcmF0ZScsXG4gICAgICAgICAgICAgICAga2luZDogJ3NjYWxhcicsXG4gICAgICAgICAgICAgICAgVDogMTMgLypTY2FsYXJUeXBlLlVJTlQzMiovLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogNSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnZW5jb2RpbmdfcGFyYW1ldGVycycsXG4gICAgICAgICAgICAgICAga2luZDogJ3NjYWxhcicsXG4gICAgICAgICAgICAgICAgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiA2LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdmZWVkYmFja3MnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdzY2FsYXInLFxuICAgICAgICAgICAgICAgIHJlcGVhdDogMiAvKlJlcGVhdFR5cGUuVU5QQUNLRUQqLyxcbiAgICAgICAgICAgICAgICBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLnBheWxvYWRUeXBlID0gMDtcbiAgICAgICAgbWVzc2FnZS5uYW1lID0gJyc7XG4gICAgICAgIG1lc3NhZ2UuZm10cExpbmUgPSAnJztcbiAgICAgICAgbWVzc2FnZS5jbG9ja1JhdGUgPSAwO1xuICAgICAgICBtZXNzYWdlLmVuY29kaW5nUGFyYW1ldGVycyA9ICcnO1xuICAgICAgICBtZXNzYWdlLmZlZWRiYWNrcyA9IFtdO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiB1aW50MzIgcGF5bG9hZF90eXBlICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGF5bG9hZFR5cGUgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIG5hbWUgKi8gMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5uYW1lID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBmbXRwX2xpbmUgKi8gMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5mbXRwTGluZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiB1aW50MzIgY2xvY2tfcmF0ZSAqLyA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNsb2NrUmF0ZSA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgZW5jb2RpbmdfcGFyYW1ldGVycyAqLyA1OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVuY29kaW5nUGFyYW1ldGVycyA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiByZXBlYXRlZCBzdHJpbmcgZmVlZGJhY2tzICovIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmVlZGJhY2tzLnB1c2gocmVhZGVyLnN0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogdWludDMyIHBheWxvYWRfdHlwZSA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnBheWxvYWRUeXBlICE9PSAwKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygxLCBXaXJlVHlwZS5WYXJpbnQpLnVpbnQzMihtZXNzYWdlLnBheWxvYWRUeXBlKTtcbiAgICAgICAgLyogc3RyaW5nIG5hbWUgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5uYW1lICE9PSAnJylcbiAgICAgICAgICAgIHdyaXRlci50YWcoMiwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5zdHJpbmcobWVzc2FnZS5uYW1lKTtcbiAgICAgICAgLyogc3RyaW5nIGZtdHBfbGluZSA9IDM7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmZtdHBMaW5lICE9PSAnJylcbiAgICAgICAgICAgIHdyaXRlci50YWcoMywgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5zdHJpbmcobWVzc2FnZS5mbXRwTGluZSk7XG4gICAgICAgIC8qIHVpbnQzMiBjbG9ja19yYXRlID0gNDsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UuY2xvY2tSYXRlICE9PSAwKVxuICAgICAgICAgICAgd3JpdGVyLnRhZyg0LCBXaXJlVHlwZS5WYXJpbnQpLnVpbnQzMihtZXNzYWdlLmNsb2NrUmF0ZSk7XG4gICAgICAgIC8qIHN0cmluZyBlbmNvZGluZ19wYXJhbWV0ZXJzID0gNTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UuZW5jb2RpbmdQYXJhbWV0ZXJzICE9PSAnJylcbiAgICAgICAgICAgIHdyaXRlclxuICAgICAgICAgICAgICAgIC50YWcoNSwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKVxuICAgICAgICAgICAgICAgIC5zdHJpbmcobWVzc2FnZS5lbmNvZGluZ1BhcmFtZXRlcnMpO1xuICAgICAgICAvKiByZXBlYXRlZCBzdHJpbmcgZmVlZGJhY2tzID0gNjsgKi9cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXNzYWdlLmZlZWRiYWNrcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHdyaXRlci50YWcoNiwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5zdHJpbmcobWVzc2FnZS5mZWVkYmFja3NbaV0pO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuQ29kZWNcbiAqL1xuY29uc3QgQ29kZWMgPSBuZXcgQ29kZWMkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xubGV0IElDRVRyaWNrbGUkVHlwZSQxID0gY2xhc3MgSUNFVHJpY2tsZSRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuSUNFVHJpY2tsZScsIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAncGVlcl90eXBlJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnZW51bScsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gWydzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QZWVyVHlwZScsIFBlZXJUeXBlLCAnUEVFUl9UWVBFXyddLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMixcbiAgICAgICAgICAgICAgICBuYW1lOiAnaWNlX2NhbmRpZGF0ZScsXG4gICAgICAgICAgICAgICAga2luZDogJ3NjYWxhcicsXG4gICAgICAgICAgICAgICAgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBubzogMywgbmFtZTogJ3Nlc3Npb25faWQnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2UucGVlclR5cGUgPSAwO1xuICAgICAgICBtZXNzYWdlLmljZUNhbmRpZGF0ZSA9ICcnO1xuICAgICAgICBtZXNzYWdlLnNlc3Npb25JZCA9ICcnO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QZWVyVHlwZSBwZWVyX3R5cGUgKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wZWVyVHlwZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBpY2VfY2FuZGlkYXRlICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaWNlQ2FuZGlkYXRlID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBzZXNzaW9uX2lkICovIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2Vzc2lvbklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QZWVyVHlwZSBwZWVyX3R5cGUgPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5wZWVyVHlwZSAhPT0gMClcbiAgICAgICAgICAgIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuVmFyaW50KS5pbnQzMihtZXNzYWdlLnBlZXJUeXBlKTtcbiAgICAgICAgLyogc3RyaW5nIGljZV9jYW5kaWRhdGUgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5pY2VDYW5kaWRhdGUgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLmljZUNhbmRpZGF0ZSk7XG4gICAgICAgIC8qIHN0cmluZyBzZXNzaW9uX2lkID0gMzsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2Vzc2lvbklkICE9PSAnJylcbiAgICAgICAgICAgIHdyaXRlci50YWcoMywgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5zdHJpbmcobWVzc2FnZS5zZXNzaW9uSWQpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59O1xuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLklDRVRyaWNrbGVcbiAqL1xuY29uc3QgSUNFVHJpY2tsZSQxID0gbmV3IElDRVRyaWNrbGUkVHlwZSQxKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBUcmFja0luZm8kVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUubW9kZWxzLlRyYWNrSW5mbycsIFtcbiAgICAgICAgICAgIHsgbm86IDEsIG5hbWU6ICd0cmFja19pZCcsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAyLFxuICAgICAgICAgICAgICAgIG5hbWU6ICd0cmFja190eXBlJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnZW51bScsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAnc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuVHJhY2tUeXBlJyxcbiAgICAgICAgICAgICAgICAgICAgVHJhY2tUeXBlLFxuICAgICAgICAgICAgICAgICAgICAnVFJBQ0tfVFlQRV8nLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiA1LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdsYXllcnMnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICByZXBlYXQ6IDEgLypSZXBlYXRUeXBlLlBBQ0tFRCovLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IFZpZGVvTGF5ZXIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBubzogNiwgbmFtZTogJ21pZCcsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAgeyBubzogNywgbmFtZTogJ2R0eCcsIGtpbmQ6ICdzY2FsYXInLCBUOiA4IC8qU2NhbGFyVHlwZS5CT09MKi8gfSxcbiAgICAgICAgICAgIHsgbm86IDgsIG5hbWU6ICdzdGVyZW8nLCBraW5kOiAnc2NhbGFyJywgVDogOCAvKlNjYWxhclR5cGUuQk9PTCovIH0sXG4gICAgICAgICAgICB7IG5vOiA5LCBuYW1lOiAncmVkJywga2luZDogJ3NjYWxhcicsIFQ6IDggLypTY2FsYXJUeXBlLkJPT0wqLyB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS50cmFja0lkID0gJyc7XG4gICAgICAgIG1lc3NhZ2UudHJhY2tUeXBlID0gMDtcbiAgICAgICAgbWVzc2FnZS5sYXllcnMgPSBbXTtcbiAgICAgICAgbWVzc2FnZS5taWQgPSAnJztcbiAgICAgICAgbWVzc2FnZS5kdHggPSBmYWxzZTtcbiAgICAgICAgbWVzc2FnZS5zdGVyZW8gPSBmYWxzZTtcbiAgICAgICAgbWVzc2FnZS5yZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZWZsZWN0aW9uTWVyZ2VQYXJ0aWFsKHRoaXMsIG1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIGxlbmd0aCwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGFyZ2V0ID8/IHRoaXMuY3JlYXRlKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIHRyYWNrX2lkICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudHJhY2tJZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5UcmFja1R5cGUgdHJhY2tfdHlwZSAqLyAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRyYWNrVHlwZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHJlcGVhdGVkIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlZpZGVvTGF5ZXIgbGF5ZXJzICovIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubGF5ZXJzLnB1c2goVmlkZW9MYXllci5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgbWlkICovIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWlkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIGJvb2wgZHR4ICovIDc6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZHR4ID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBib29sIHN0ZXJlbyAqLyA4OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnN0ZXJlbyA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogYm9vbCByZWQgKi8gOTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yZWQgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJpbmcgdHJhY2tfaWQgPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS50cmFja0lkICE9PSAnJylcbiAgICAgICAgICAgIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5zdHJpbmcobWVzc2FnZS50cmFja0lkKTtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuVHJhY2tUeXBlIHRyYWNrX3R5cGUgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS50cmFja1R5cGUgIT09IDApXG4gICAgICAgICAgICB3cml0ZXIudGFnKDIsIFdpcmVUeXBlLlZhcmludCkuaW50MzIobWVzc2FnZS50cmFja1R5cGUpO1xuICAgICAgICAvKiByZXBlYXRlZCBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5WaWRlb0xheWVyIGxheWVycyA9IDU7ICovXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzc2FnZS5sYXllcnMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBWaWRlb0xheWVyLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5sYXllcnNbaV0sIHdyaXRlci50YWcoNSwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgLyogc3RyaW5nIG1pZCA9IDY7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLm1pZCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDYsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UubWlkKTtcbiAgICAgICAgLyogYm9vbCBkdHggPSA3OyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5kdHggIT09IGZhbHNlKVxuICAgICAgICAgICAgd3JpdGVyLnRhZyg3LCBXaXJlVHlwZS5WYXJpbnQpLmJvb2wobWVzc2FnZS5kdHgpO1xuICAgICAgICAvKiBib29sIHN0ZXJlbyA9IDg7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnN0ZXJlbyAhPT0gZmFsc2UpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDgsIFdpcmVUeXBlLlZhcmludCkuYm9vbChtZXNzYWdlLnN0ZXJlbyk7XG4gICAgICAgIC8qIGJvb2wgcmVkID0gOTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UucmVkICE9PSBmYWxzZSlcbiAgICAgICAgICAgIHdyaXRlci50YWcoOSwgV2lyZVR5cGUuVmFyaW50KS5ib29sKG1lc3NhZ2UucmVkKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlRyYWNrSW5mb1xuICovXG5jb25zdCBUcmFja0luZm8gPSBuZXcgVHJhY2tJbmZvJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIENhbGwkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUubW9kZWxzLkNhbGwnLCBbXG4gICAgICAgICAgICB7IG5vOiAxLCBuYW1lOiAndHlwZScsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAgeyBubzogMiwgbmFtZTogJ2lkJywga2luZDogJ3NjYWxhcicsIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDMsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NyZWF0ZWRfYnlfdXNlcl9pZCcsXG4gICAgICAgICAgICAgICAga2luZDogJ3NjYWxhcicsXG4gICAgICAgICAgICAgICAgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiA0LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdob3N0X3VzZXJfaWQnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdzY2FsYXInLFxuICAgICAgICAgICAgICAgIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgbm86IDUsIG5hbWU6ICdjdXN0b20nLCBraW5kOiAnbWVzc2FnZScsIFQ6ICgpID0+IFN0cnVjdCB9LFxuICAgICAgICAgICAgeyBubzogNiwgbmFtZTogJ2NyZWF0ZWRfYXQnLCBraW5kOiAnbWVzc2FnZScsIFQ6ICgpID0+IFRpbWVzdGFtcCB9LFxuICAgICAgICAgICAgeyBubzogNywgbmFtZTogJ3VwZGF0ZWRfYXQnLCBraW5kOiAnbWVzc2FnZScsIFQ6ICgpID0+IFRpbWVzdGFtcCB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS50eXBlID0gJyc7XG4gICAgICAgIG1lc3NhZ2UuaWQgPSAnJztcbiAgICAgICAgbWVzc2FnZS5jcmVhdGVkQnlVc2VySWQgPSAnJztcbiAgICAgICAgbWVzc2FnZS5ob3N0VXNlcklkID0gJyc7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyB0eXBlICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudHlwZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgaWQgKi8gMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgY3JlYXRlZF9ieV91c2VyX2lkICovIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY3JlYXRlZEJ5VXNlcklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBob3N0X3VzZXJfaWQgKi8gNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ob3N0VXNlcklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIGdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QgY3VzdG9tICovIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY3VzdG9tID0gU3RydWN0LmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5jdXN0b20pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIGdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAgY3JlYXRlZF9hdCAqLyA2OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNyZWF0ZWRBdCA9IFRpbWVzdGFtcC5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UuY3JlYXRlZEF0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBnb29nbGUucHJvdG9idWYuVGltZXN0YW1wIHVwZGF0ZWRfYXQgKi8gNzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS51cGRhdGVkQXQgPSBUaW1lc3RhbXAuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zLCBtZXNzYWdlLnVwZGF0ZWRBdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHN0cmluZyB0eXBlID0gMTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UudHlwZSk7XG4gICAgICAgIC8qIHN0cmluZyBpZCA9IDI7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmlkICE9PSAnJylcbiAgICAgICAgICAgIHdyaXRlci50YWcoMiwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5zdHJpbmcobWVzc2FnZS5pZCk7XG4gICAgICAgIC8qIHN0cmluZyBjcmVhdGVkX2J5X3VzZXJfaWQgPSAzOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5jcmVhdGVkQnlVc2VySWQgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygzLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLmNyZWF0ZWRCeVVzZXJJZCk7XG4gICAgICAgIC8qIHN0cmluZyBob3N0X3VzZXJfaWQgPSA0OyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5ob3N0VXNlcklkICE9PSAnJylcbiAgICAgICAgICAgIHdyaXRlci50YWcoNCwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5zdHJpbmcobWVzc2FnZS5ob3N0VXNlcklkKTtcbiAgICAgICAgLyogZ29vZ2xlLnByb3RvYnVmLlN0cnVjdCBjdXN0b20gPSA1OyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5jdXN0b20pXG4gICAgICAgICAgICBTdHJ1Y3QuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLmN1c3RvbSwgd3JpdGVyLnRhZyg1LCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBnb29nbGUucHJvdG9idWYuVGltZXN0YW1wIGNyZWF0ZWRfYXQgPSA2OyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5jcmVhdGVkQXQpXG4gICAgICAgICAgICBUaW1lc3RhbXAuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLmNyZWF0ZWRBdCwgd3JpdGVyLnRhZyg2LCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBnb29nbGUucHJvdG9idWYuVGltZXN0YW1wIHVwZGF0ZWRfYXQgPSA3OyAqL1xuICAgICAgICBpZiAobWVzc2FnZS51cGRhdGVkQXQpXG4gICAgICAgICAgICBUaW1lc3RhbXAuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLnVwZGF0ZWRBdCwgd3JpdGVyLnRhZyg3LCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuQ2FsbFxuICovXG5jb25zdCBDYWxsJDEgPSBuZXcgQ2FsbCRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5sZXQgRXJyb3IkVHlwZSQxID0gY2xhc3MgRXJyb3IkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUubW9kZWxzLkVycm9yJywgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdjb2RlJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnZW51bScsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAnc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuRXJyb3JDb2RlJyxcbiAgICAgICAgICAgICAgICAgICAgRXJyb3JDb2RlLFxuICAgICAgICAgICAgICAgICAgICAnRVJST1JfQ09ERV8nLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBubzogMiwgbmFtZTogJ21lc3NhZ2UnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgICAgIHsgbm86IDMsIG5hbWU6ICdzaG91bGRfcmV0cnknLCBraW5kOiAnc2NhbGFyJywgVDogOCAvKlNjYWxhclR5cGUuQk9PTCovIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLmNvZGUgPSAwO1xuICAgICAgICBtZXNzYWdlLm1lc3NhZ2UgPSAnJztcbiAgICAgICAgbWVzc2FnZS5zaG91bGRSZXRyeSA9IGZhbHNlO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5FcnJvckNvZGUgY29kZSAqLyAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvZGUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgbWVzc2FnZSAqLyAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1lc3NhZ2UgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogYm9vbCBzaG91bGRfcmV0cnkgKi8gMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zaG91bGRSZXRyeSA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLkVycm9yQ29kZSBjb2RlID0gMTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UuY29kZSAhPT0gMClcbiAgICAgICAgICAgIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuVmFyaW50KS5pbnQzMihtZXNzYWdlLmNvZGUpO1xuICAgICAgICAvKiBzdHJpbmcgbWVzc2FnZSA9IDI7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLm1lc3NhZ2UgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLm1lc3NhZ2UpO1xuICAgICAgICAvKiBib29sIHNob3VsZF9yZXRyeSA9IDM7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnNob3VsZFJldHJ5ICE9PSBmYWxzZSlcbiAgICAgICAgICAgIHdyaXRlci50YWcoMywgV2lyZVR5cGUuVmFyaW50KS5ib29sKG1lc3NhZ2Uuc2hvdWxkUmV0cnkpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59O1xuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLkVycm9yXG4gKi9cbmNvbnN0IEVycm9yJDIgPSBuZXcgRXJyb3IkVHlwZSQxKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBDbGllbnREZXRhaWxzJFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5DbGllbnREZXRhaWxzJywgW1xuICAgICAgICAgICAgeyBubzogMSwgbmFtZTogJ3NkaycsIGtpbmQ6ICdtZXNzYWdlJywgVDogKCkgPT4gU2RrIH0sXG4gICAgICAgICAgICB7IG5vOiAyLCBuYW1lOiAnb3MnLCBraW5kOiAnbWVzc2FnZScsIFQ6ICgpID0+IE9TIH0sXG4gICAgICAgICAgICB7IG5vOiAzLCBuYW1lOiAnYnJvd3NlcicsIGtpbmQ6ICdtZXNzYWdlJywgVDogKCkgPT4gQnJvd3NlciB9LFxuICAgICAgICAgICAgeyBubzogNCwgbmFtZTogJ2RldmljZScsIGtpbmQ6ICdtZXNzYWdlJywgVDogKCkgPT4gRGV2aWNlIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5TZGsgc2RrICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2RrID0gU2RrLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5zZGspO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLk9TIG9zICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uub3MgPSBPUy5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2Uub3MpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLkJyb3dzZXIgYnJvd3NlciAqLyAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJyb3dzZXIgPSBCcm93c2VyLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5icm93c2VyKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5EZXZpY2UgZGV2aWNlICovIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGV2aWNlID0gRGV2aWNlLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5kZXZpY2UpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5TZGsgc2RrID0gMTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2RrKVxuICAgICAgICAgICAgU2RrLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5zZGssIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuT1Mgb3MgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5vcylcbiAgICAgICAgICAgIE9TLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5vcywgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5Ccm93c2VyIGJyb3dzZXIgPSAzOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5icm93c2VyKVxuICAgICAgICAgICAgQnJvd3Nlci5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UuYnJvd3Nlciwgd3JpdGVyLnRhZygzLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5EZXZpY2UgZGV2aWNlID0gNDsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UuZGV2aWNlKVxuICAgICAgICAgICAgRGV2aWNlLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5kZXZpY2UsIHdyaXRlci50YWcoNCwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLkNsaWVudERldGFpbHNcbiAqL1xuY29uc3QgQ2xpZW50RGV0YWlscyA9IG5ldyBDbGllbnREZXRhaWxzJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIFNkayRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuU2RrJywgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICd0eXBlJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnZW51bScsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gWydzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5TZGtUeXBlJywgU2RrVHlwZSwgJ1NES19UWVBFXyddLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgbm86IDIsIG5hbWU6ICdtYWpvcicsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAgeyBubzogMywgbmFtZTogJ21pbm9yJywga2luZDogJ3NjYWxhcicsIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovIH0sXG4gICAgICAgICAgICB7IG5vOiA0LCBuYW1lOiAncGF0Y2gnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2UudHlwZSA9IDA7XG4gICAgICAgIG1lc3NhZ2UubWFqb3IgPSAnJztcbiAgICAgICAgbWVzc2FnZS5taW5vciA9ICcnO1xuICAgICAgICBtZXNzYWdlLnBhdGNoID0gJyc7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlNka1R5cGUgdHlwZSAqLyAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnR5cGUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgbWFqb3IgKi8gMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tYWpvciA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgbWlub3IgKi8gMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5taW5vciA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgcGF0Y2ggKi8gNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYXRjaCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuU2RrVHlwZSB0eXBlID0gMTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSAhPT0gMClcbiAgICAgICAgICAgIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuVmFyaW50KS5pbnQzMihtZXNzYWdlLnR5cGUpO1xuICAgICAgICAvKiBzdHJpbmcgbWFqb3IgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5tYWpvciAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDIsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UubWFqb3IpO1xuICAgICAgICAvKiBzdHJpbmcgbWlub3IgPSAzOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5taW5vciAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDMsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UubWlub3IpO1xuICAgICAgICAvKiBzdHJpbmcgcGF0Y2ggPSA0OyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5wYXRjaCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDQsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UucGF0Y2gpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuU2RrXG4gKi9cbmNvbnN0IFNkayA9IG5ldyBTZGskVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgT1MkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUubW9kZWxzLk9TJywgW1xuICAgICAgICAgICAgeyBubzogMSwgbmFtZTogJ25hbWUnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgICAgIHsgbm86IDIsIG5hbWU6ICd2ZXJzaW9uJywga2luZDogJ3NjYWxhcicsIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDMsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2FyY2hpdGVjdHVyZScsXG4gICAgICAgICAgICAgICAga2luZDogJ3NjYWxhcicsXG4gICAgICAgICAgICAgICAgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS5uYW1lID0gJyc7XG4gICAgICAgIG1lc3NhZ2UudmVyc2lvbiA9ICcnO1xuICAgICAgICBtZXNzYWdlLmFyY2hpdGVjdHVyZSA9ICcnO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgbmFtZSAqLyAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm5hbWUgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIHZlcnNpb24gKi8gMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52ZXJzaW9uID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBhcmNoaXRlY3R1cmUgKi8gMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hcmNoaXRlY3R1cmUgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHN0cmluZyBuYW1lID0gMTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UubmFtZSAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UubmFtZSk7XG4gICAgICAgIC8qIHN0cmluZyB2ZXJzaW9uID0gMjsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UudmVyc2lvbiAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDIsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UudmVyc2lvbik7XG4gICAgICAgIC8qIHN0cmluZyBhcmNoaXRlY3R1cmUgPSAzOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5hcmNoaXRlY3R1cmUgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygzLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLmFyY2hpdGVjdHVyZSk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5PU1xuICovXG5jb25zdCBPUyA9IG5ldyBPUyRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBCcm93c2VyJFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5Ccm93c2VyJywgW1xuICAgICAgICAgICAgeyBubzogMSwgbmFtZTogJ25hbWUnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgICAgIHsgbm86IDIsIG5hbWU6ICd2ZXJzaW9uJywga2luZDogJ3NjYWxhcicsIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLm5hbWUgPSAnJztcbiAgICAgICAgbWVzc2FnZS52ZXJzaW9uID0gJyc7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBuYW1lICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubmFtZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgdmVyc2lvbiAqLyAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZlcnNpb24gPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHN0cmluZyBuYW1lID0gMTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UubmFtZSAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UubmFtZSk7XG4gICAgICAgIC8qIHN0cmluZyB2ZXJzaW9uID0gMjsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UudmVyc2lvbiAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDIsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UudmVyc2lvbik7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5Ccm93c2VyXG4gKi9cbmNvbnN0IEJyb3dzZXIgPSBuZXcgQnJvd3NlciRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBEZXZpY2UkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUubW9kZWxzLkRldmljZScsIFtcbiAgICAgICAgICAgIHsgbm86IDEsIG5hbWU6ICduYW1lJywga2luZDogJ3NjYWxhcicsIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovIH0sXG4gICAgICAgICAgICB7IG5vOiAyLCBuYW1lOiAndmVyc2lvbicsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS5uYW1lID0gJyc7XG4gICAgICAgIG1lc3NhZ2UudmVyc2lvbiA9ICcnO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgbmFtZSAqLyAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm5hbWUgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIHZlcnNpb24gKi8gMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS52ZXJzaW9uID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJpbmcgbmFtZSA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLm5hbWUgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygxLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLm5hbWUpO1xuICAgICAgICAvKiBzdHJpbmcgdmVyc2lvbiA9IDI7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnZlcnNpb24gIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLnZlcnNpb24pO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuRGV2aWNlXG4gKi9cbmNvbnN0IERldmljZSA9IG5ldyBEZXZpY2UkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgQ2FsbEdyYW50cyRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuQ2FsbEdyYW50cycsIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnY2FuX3B1Ymxpc2hfYXVkaW8nLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdzY2FsYXInLFxuICAgICAgICAgICAgICAgIFQ6IDggLypTY2FsYXJUeXBlLkJPT0wqLyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDIsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2Nhbl9wdWJsaXNoX3ZpZGVvJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnc2NhbGFyJyxcbiAgICAgICAgICAgICAgICBUOiA4IC8qU2NhbGFyVHlwZS5CT09MKi8sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAzLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdjYW5fc2NyZWVuc2hhcmUnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdzY2FsYXInLFxuICAgICAgICAgICAgICAgIFQ6IDggLypTY2FsYXJUeXBlLkJPT0wqLyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLmNhblB1Ymxpc2hBdWRpbyA9IGZhbHNlO1xuICAgICAgICBtZXNzYWdlLmNhblB1Ymxpc2hWaWRlbyA9IGZhbHNlO1xuICAgICAgICBtZXNzYWdlLmNhblNjcmVlbnNoYXJlID0gZmFsc2U7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIGJvb2wgY2FuX3B1Ymxpc2hfYXVkaW8gKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jYW5QdWJsaXNoQXVkaW8gPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIGJvb2wgY2FuX3B1Ymxpc2hfdmlkZW8gKi8gMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jYW5QdWJsaXNoVmlkZW8gPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIGJvb2wgY2FuX3NjcmVlbnNoYXJlICovIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY2FuU2NyZWVuc2hhcmUgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBib29sIGNhbl9wdWJsaXNoX2F1ZGlvID0gMTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UuY2FuUHVibGlzaEF1ZGlvICE9PSBmYWxzZSlcbiAgICAgICAgICAgIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuVmFyaW50KS5ib29sKG1lc3NhZ2UuY2FuUHVibGlzaEF1ZGlvKTtcbiAgICAgICAgLyogYm9vbCBjYW5fcHVibGlzaF92aWRlbyA9IDI7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmNhblB1Ymxpc2hWaWRlbyAhPT0gZmFsc2UpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDIsIFdpcmVUeXBlLlZhcmludCkuYm9vbChtZXNzYWdlLmNhblB1Ymxpc2hWaWRlbyk7XG4gICAgICAgIC8qIGJvb2wgY2FuX3NjcmVlbnNoYXJlID0gMzsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UuY2FuU2NyZWVuc2hhcmUgIT09IGZhbHNlKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygzLCBXaXJlVHlwZS5WYXJpbnQpLmJvb2wobWVzc2FnZS5jYW5TY3JlZW5zaGFyZSk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5DYWxsR3JhbnRzXG4gKi9cbmNvbnN0IENhbGxHcmFudHMgPSBuZXcgQ2FsbEdyYW50cyRUeXBlKCk7XG5cbnZhciBtb2RlbHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gICAgX19wcm90b19fOiBudWxsLFxuICAgIEJyb3dzZXI6IEJyb3dzZXIsXG4gICAgQ2FsbDogQ2FsbCQxLFxuICAgIENhbGxHcmFudHM6IENhbGxHcmFudHMsXG4gICAgQ2FsbFN0YXRlOiBDYWxsU3RhdGUkMSxcbiAgICBDbGllbnREZXRhaWxzOiBDbGllbnREZXRhaWxzLFxuICAgIENvZGVjOiBDb2RlYyxcbiAgICBnZXQgQ29ubmVjdGlvblF1YWxpdHkgKCkgeyByZXR1cm4gQ29ubmVjdGlvblF1YWxpdHk7IH0sXG4gICAgRGV2aWNlOiBEZXZpY2UsXG4gICAgRXJyb3I6IEVycm9yJDIsXG4gICAgZ2V0IEVycm9yQ29kZSAoKSB7IHJldHVybiBFcnJvckNvZGU7IH0sXG4gICAgZ2V0IEdvQXdheVJlYXNvbiAoKSB7IHJldHVybiBHb0F3YXlSZWFzb247IH0sXG4gICAgSUNFVHJpY2tsZTogSUNFVHJpY2tsZSQxLFxuICAgIE9TOiBPUyxcbiAgICBQYXJ0aWNpcGFudDogUGFydGljaXBhbnQsXG4gICAgUGFydGljaXBhbnRDb3VudDogUGFydGljaXBhbnRDb3VudCxcbiAgICBnZXQgUGVlclR5cGUgKCkgeyByZXR1cm4gUGVlclR5cGU7IH0sXG4gICAgUGluOiBQaW4sXG4gICAgU2RrOiBTZGssXG4gICAgZ2V0IFNka1R5cGUgKCkgeyByZXR1cm4gU2RrVHlwZTsgfSxcbiAgICBTdHJlYW1RdWFsaXR5OiBTdHJlYW1RdWFsaXR5LFxuICAgIFRyYWNrSW5mbzogVHJhY2tJbmZvLFxuICAgIGdldCBUcmFja1R5cGUgKCkgeyByZXR1cm4gVHJhY2tUeXBlOyB9LFxuICAgIGdldCBUcmFja1VucHVibGlzaFJlYXNvbiAoKSB7IHJldHVybiBUcmFja1VucHVibGlzaFJlYXNvbjsgfSxcbiAgICBWaWRlb0RpbWVuc2lvbjogVmlkZW9EaW1lbnNpb24sXG4gICAgVmlkZW9MYXllcjogVmlkZW9MYXllcixcbiAgICBnZXQgVmlkZW9RdWFsaXR5ICgpIHsgcmV0dXJuIFZpZGVvUXVhbGl0eTsgfVxufSk7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAZ2VuZXJhdGVkIGJ5IHByb3RvYnVmLXRzIDIuOS4zIHdpdGggcGFyYW1ldGVyIGxvbmdfdHlwZV9zdHJpbmcsY2xpZW50X2dlbmVyaWMsc2VydmVyX25vbmUsZXNsaW50X2Rpc2FibGVcbi8vIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBmaWxlIFwidmlkZW8vc2Z1L3NpZ25hbF9ycGMvc2lnbmFsLnByb3RvXCIgKHBhY2thZ2UgXCJzdHJlYW0udmlkZW8uc2Z1LnNpZ25hbFwiLCBzeW50YXggcHJvdG8zKVxuLy8gdHNsaW50OmRpc2FibGVcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIFNlbmRTdGF0c1JlcXVlc3QkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuc2lnbmFsLlNlbmRTdGF0c1JlcXVlc3QnLCBbXG4gICAgICAgICAgICB7IG5vOiAxLCBuYW1lOiAnc2Vzc2lvbl9pZCcsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAyLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdzdWJzY3JpYmVyX3N0YXRzJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnc2NhbGFyJyxcbiAgICAgICAgICAgICAgICBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDMsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3B1Ymxpc2hlcl9zdGF0cycsXG4gICAgICAgICAgICAgICAga2luZDogJ3NjYWxhcicsXG4gICAgICAgICAgICAgICAgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiA0LFxuICAgICAgICAgICAgICAgIG5hbWU6ICd3ZWJydGNfdmVyc2lvbicsXG4gICAgICAgICAgICAgICAga2luZDogJ3NjYWxhcicsXG4gICAgICAgICAgICAgICAgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBubzogNSwgbmFtZTogJ3NkaycsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiA2LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdzZGtfdmVyc2lvbicsXG4gICAgICAgICAgICAgICAga2luZDogJ3NjYWxhcicsXG4gICAgICAgICAgICAgICAgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS5zZXNzaW9uSWQgPSAnJztcbiAgICAgICAgbWVzc2FnZS5zdWJzY3JpYmVyU3RhdHMgPSAnJztcbiAgICAgICAgbWVzc2FnZS5wdWJsaXNoZXJTdGF0cyA9ICcnO1xuICAgICAgICBtZXNzYWdlLndlYnJ0Y1ZlcnNpb24gPSAnJztcbiAgICAgICAgbWVzc2FnZS5zZGsgPSAnJztcbiAgICAgICAgbWVzc2FnZS5zZGtWZXJzaW9uID0gJyc7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBzZXNzaW9uX2lkICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2Vzc2lvbklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBzdWJzY3JpYmVyX3N0YXRzICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3Vic2NyaWJlclN0YXRzID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBwdWJsaXNoZXJfc3RhdHMgKi8gMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wdWJsaXNoZXJTdGF0cyA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgd2VicnRjX3ZlcnNpb24gKi8gNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS53ZWJydGNWZXJzaW9uID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBzZGsgKi8gNTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZGsgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIHNka192ZXJzaW9uICovIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2RrVmVyc2lvbiA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogc3RyaW5nIHNlc3Npb25faWQgPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5zZXNzaW9uSWQgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygxLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLnNlc3Npb25JZCk7XG4gICAgICAgIC8qIHN0cmluZyBzdWJzY3JpYmVyX3N0YXRzID0gMjsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3Vic2NyaWJlclN0YXRzICE9PSAnJylcbiAgICAgICAgICAgIHdyaXRlci50YWcoMiwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5zdHJpbmcobWVzc2FnZS5zdWJzY3JpYmVyU3RhdHMpO1xuICAgICAgICAvKiBzdHJpbmcgcHVibGlzaGVyX3N0YXRzID0gMzsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UucHVibGlzaGVyU3RhdHMgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygzLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLnB1Ymxpc2hlclN0YXRzKTtcbiAgICAgICAgLyogc3RyaW5nIHdlYnJ0Y192ZXJzaW9uID0gNDsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2Uud2VicnRjVmVyc2lvbiAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDQsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2Uud2VicnRjVmVyc2lvbik7XG4gICAgICAgIC8qIHN0cmluZyBzZGsgPSA1OyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5zZGsgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZyg1LCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLnNkayk7XG4gICAgICAgIC8qIHN0cmluZyBzZGtfdmVyc2lvbiA9IDY7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnNka1ZlcnNpb24gIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZyg2LCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLnNka1ZlcnNpb24pO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuU2VuZFN0YXRzUmVxdWVzdFxuICovXG5jb25zdCBTZW5kU3RhdHNSZXF1ZXN0ID0gbmV3IFNlbmRTdGF0c1JlcXVlc3QkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgU2VuZFN0YXRzUmVzcG9uc2UkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuc2lnbmFsLlNlbmRTdGF0c1Jlc3BvbnNlJywgW1xuICAgICAgICAgICAgeyBubzogMSwgbmFtZTogJ2Vycm9yJywga2luZDogJ21lc3NhZ2UnLCBUOiAoKSA9PiBFcnJvciQyIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5FcnJvciBlcnJvciAqLyAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVycm9yID0gRXJyb3IkMi5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5FcnJvciBlcnJvciA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmVycm9yKVxuICAgICAgICAgICAgRXJyb3IkMi5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UuZXJyb3IsIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUuc2lnbmFsLlNlbmRTdGF0c1Jlc3BvbnNlXG4gKi9cbmNvbnN0IFNlbmRTdGF0c1Jlc3BvbnNlID0gbmV3IFNlbmRTdGF0c1Jlc3BvbnNlJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIElDRVJlc3RhcnRSZXF1ZXN0JFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1LnNpZ25hbC5JQ0VSZXN0YXJ0UmVxdWVzdCcsIFtcbiAgICAgICAgICAgIHsgbm86IDEsIG5hbWU6ICdzZXNzaW9uX2lkJywga2luZDogJ3NjYWxhcicsIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDIsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3BlZXJfdHlwZScsXG4gICAgICAgICAgICAgICAga2luZDogJ2VudW0nLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IFsnc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuUGVlclR5cGUnLCBQZWVyVHlwZSwgJ1BFRVJfVFlQRV8nXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLnNlc3Npb25JZCA9ICcnO1xuICAgICAgICBtZXNzYWdlLnBlZXJUeXBlID0gMDtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZWZsZWN0aW9uTWVyZ2VQYXJ0aWFsKHRoaXMsIG1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIGxlbmd0aCwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGFyZ2V0ID8/IHRoaXMuY3JlYXRlKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIHNlc3Npb25faWQgKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZXNzaW9uSWQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuUGVlclR5cGUgcGVlcl90eXBlICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGVlclR5cGUgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogc3RyaW5nIHNlc3Npb25faWQgPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5zZXNzaW9uSWQgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygxLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLnNlc3Npb25JZCk7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlBlZXJUeXBlIHBlZXJfdHlwZSA9IDI7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnBlZXJUeXBlICE9PSAwKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5WYXJpbnQpLmludDMyKG1lc3NhZ2UucGVlclR5cGUpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuSUNFUmVzdGFydFJlcXVlc3RcbiAqL1xuY29uc3QgSUNFUmVzdGFydFJlcXVlc3QgPSBuZXcgSUNFUmVzdGFydFJlcXVlc3QkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgSUNFUmVzdGFydFJlc3BvbnNlJFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1LnNpZ25hbC5JQ0VSZXN0YXJ0UmVzcG9uc2UnLCBbXG4gICAgICAgICAgICB7IG5vOiAxLCBuYW1lOiAnZXJyb3InLCBraW5kOiAnbWVzc2FnZScsIFQ6ICgpID0+IEVycm9yJDIgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLkVycm9yIGVycm9yICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZXJyb3IgPSBFcnJvciQyLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLkVycm9yIGVycm9yID0gMTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UuZXJyb3IpXG4gICAgICAgICAgICBFcnJvciQyLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5lcnJvciwgd3JpdGVyLnRhZygxLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuSUNFUmVzdGFydFJlc3BvbnNlXG4gKi9cbmNvbnN0IElDRVJlc3RhcnRSZXNwb25zZSA9IG5ldyBJQ0VSZXN0YXJ0UmVzcG9uc2UkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgVXBkYXRlTXV0ZVN0YXRlc1JlcXVlc3QkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuc2lnbmFsLlVwZGF0ZU11dGVTdGF0ZXNSZXF1ZXN0JywgW1xuICAgICAgICAgICAgeyBubzogMSwgbmFtZTogJ3Nlc3Npb25faWQnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnbXV0ZV9zdGF0ZXMnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICByZXBlYXQ6IDEgLypSZXBlYXRUeXBlLlBBQ0tFRCovLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IFRyYWNrTXV0ZVN0YXRlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2Uuc2Vzc2lvbklkID0gJyc7XG4gICAgICAgIG1lc3NhZ2UubXV0ZVN0YXRlcyA9IFtdO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgc2Vzc2lvbl9pZCAqLyAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNlc3Npb25JZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiByZXBlYXRlZCBzdHJlYW0udmlkZW8uc2Z1LnNpZ25hbC5UcmFja011dGVTdGF0ZSBtdXRlX3N0YXRlcyAqLyAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm11dGVTdGF0ZXMucHVzaChUcmFja011dGVTdGF0ZS5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogc3RyaW5nIHNlc3Npb25faWQgPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5zZXNzaW9uSWQgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygxLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLnNlc3Npb25JZCk7XG4gICAgICAgIC8qIHJlcGVhdGVkIHN0cmVhbS52aWRlby5zZnUuc2lnbmFsLlRyYWNrTXV0ZVN0YXRlIG11dGVfc3RhdGVzID0gMzsgKi9cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXNzYWdlLm11dGVTdGF0ZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBUcmFja011dGVTdGF0ZS5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UubXV0ZVN0YXRlc1tpXSwgd3JpdGVyLnRhZygzLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuVXBkYXRlTXV0ZVN0YXRlc1JlcXVlc3RcbiAqL1xuY29uc3QgVXBkYXRlTXV0ZVN0YXRlc1JlcXVlc3QgPSBuZXcgVXBkYXRlTXV0ZVN0YXRlc1JlcXVlc3QkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgVXBkYXRlTXV0ZVN0YXRlc1Jlc3BvbnNlJFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1LnNpZ25hbC5VcGRhdGVNdXRlU3RhdGVzUmVzcG9uc2UnLCBbXG4gICAgICAgICAgICB7IG5vOiA0LCBuYW1lOiAnZXJyb3InLCBraW5kOiAnbWVzc2FnZScsIFQ6ICgpID0+IEVycm9yJDIgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLkVycm9yIGVycm9yICovIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZXJyb3IgPSBFcnJvciQyLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLkVycm9yIGVycm9yID0gNDsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UuZXJyb3IpXG4gICAgICAgICAgICBFcnJvciQyLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5lcnJvciwgd3JpdGVyLnRhZyg0LCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuVXBkYXRlTXV0ZVN0YXRlc1Jlc3BvbnNlXG4gKi9cbmNvbnN0IFVwZGF0ZU11dGVTdGF0ZXNSZXNwb25zZSA9IG5ldyBVcGRhdGVNdXRlU3RhdGVzUmVzcG9uc2UkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgVHJhY2tNdXRlU3RhdGUkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuc2lnbmFsLlRyYWNrTXV0ZVN0YXRlJywgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICd0cmFja190eXBlJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnZW51bScsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAnc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuVHJhY2tUeXBlJyxcbiAgICAgICAgICAgICAgICAgICAgVHJhY2tUeXBlLFxuICAgICAgICAgICAgICAgICAgICAnVFJBQ0tfVFlQRV8nLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBubzogMiwgbmFtZTogJ211dGVkJywga2luZDogJ3NjYWxhcicsIFQ6IDggLypTY2FsYXJUeXBlLkJPT0wqLyB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS50cmFja1R5cGUgPSAwO1xuICAgICAgICBtZXNzYWdlLm11dGVkID0gZmFsc2U7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlRyYWNrVHlwZSB0cmFja190eXBlICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudHJhY2tUeXBlID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogYm9vbCBtdXRlZCAqLyAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm11dGVkID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuVHJhY2tUeXBlIHRyYWNrX3R5cGUgPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS50cmFja1R5cGUgIT09IDApXG4gICAgICAgICAgICB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLlZhcmludCkuaW50MzIobWVzc2FnZS50cmFja1R5cGUpO1xuICAgICAgICAvKiBib29sIG11dGVkID0gMjsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UubXV0ZWQgIT09IGZhbHNlKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5WYXJpbnQpLmJvb2wobWVzc2FnZS5tdXRlZCk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1LnNpZ25hbC5UcmFja011dGVTdGF0ZVxuICovXG5jb25zdCBUcmFja011dGVTdGF0ZSA9IG5ldyBUcmFja011dGVTdGF0ZSRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBBdWRpb011dGVDaGFuZ2VkJFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1LnNpZ25hbC5BdWRpb011dGVDaGFuZ2VkJywgW1xuICAgICAgICAgICAgeyBubzogMSwgbmFtZTogJ211dGVkJywga2luZDogJ3NjYWxhcicsIFQ6IDggLypTY2FsYXJUeXBlLkJPT0wqLyB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS5tdXRlZCA9IGZhbHNlO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBib29sIG11dGVkICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubXV0ZWQgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBib29sIG11dGVkID0gMTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UubXV0ZWQgIT09IGZhbHNlKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygxLCBXaXJlVHlwZS5WYXJpbnQpLmJvb2wobWVzc2FnZS5tdXRlZCk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1LnNpZ25hbC5BdWRpb011dGVDaGFuZ2VkXG4gKi9cbm5ldyBBdWRpb011dGVDaGFuZ2VkJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIFZpZGVvTXV0ZUNoYW5nZWQkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuc2lnbmFsLlZpZGVvTXV0ZUNoYW5nZWQnLCBbXG4gICAgICAgICAgICB7IG5vOiAyLCBuYW1lOiAnbXV0ZWQnLCBraW5kOiAnc2NhbGFyJywgVDogOCAvKlNjYWxhclR5cGUuQk9PTCovIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLm11dGVkID0gZmFsc2U7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIGJvb2wgbXV0ZWQgKi8gMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tdXRlZCA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIGJvb2wgbXV0ZWQgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5tdXRlZCAhPT0gZmFsc2UpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDIsIFdpcmVUeXBlLlZhcmludCkuYm9vbChtZXNzYWdlLm11dGVkKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUuc2lnbmFsLlZpZGVvTXV0ZUNoYW5nZWRcbiAqL1xubmV3IFZpZGVvTXV0ZUNoYW5nZWQkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgVXBkYXRlU3Vic2NyaXB0aW9uc1JlcXVlc3QkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuc2lnbmFsLlVwZGF0ZVN1YnNjcmlwdGlvbnNSZXF1ZXN0JywgW1xuICAgICAgICAgICAgeyBubzogMiwgbmFtZTogJ3Nlc3Npb25faWQnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMyxcbiAgICAgICAgICAgICAgICBuYW1lOiAndHJhY2tzJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgcmVwZWF0OiAxIC8qUmVwZWF0VHlwZS5QQUNLRUQqLyxcbiAgICAgICAgICAgICAgICBUOiAoKSA9PiBUcmFja1N1YnNjcmlwdGlvbkRldGFpbHMsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS5zZXNzaW9uSWQgPSAnJztcbiAgICAgICAgbWVzc2FnZS50cmFja3MgPSBbXTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZWZsZWN0aW9uTWVyZ2VQYXJ0aWFsKHRoaXMsIG1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIGxlbmd0aCwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGFyZ2V0ID8/IHRoaXMuY3JlYXRlKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIHNlc3Npb25faWQgKi8gMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZXNzaW9uSWQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogcmVwZWF0ZWQgc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuVHJhY2tTdWJzY3JpcHRpb25EZXRhaWxzIHRyYWNrcyAqLyAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRyYWNrcy5wdXNoKFRyYWNrU3Vic2NyaXB0aW9uRGV0YWlscy5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogc3RyaW5nIHNlc3Npb25faWQgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5zZXNzaW9uSWQgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLnNlc3Npb25JZCk7XG4gICAgICAgIC8qIHJlcGVhdGVkIHN0cmVhbS52aWRlby5zZnUuc2lnbmFsLlRyYWNrU3Vic2NyaXB0aW9uRGV0YWlscyB0cmFja3MgPSAzOyAqL1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2UudHJhY2tzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgVHJhY2tTdWJzY3JpcHRpb25EZXRhaWxzLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS50cmFja3NbaV0sIHdyaXRlci50YWcoMywgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUuc2lnbmFsLlVwZGF0ZVN1YnNjcmlwdGlvbnNSZXF1ZXN0XG4gKi9cbmNvbnN0IFVwZGF0ZVN1YnNjcmlwdGlvbnNSZXF1ZXN0ID0gbmV3IFVwZGF0ZVN1YnNjcmlwdGlvbnNSZXF1ZXN0JFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIFVwZGF0ZVN1YnNjcmlwdGlvbnNSZXNwb25zZSRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuVXBkYXRlU3Vic2NyaXB0aW9uc1Jlc3BvbnNlJywgW1xuICAgICAgICAgICAgeyBubzogNCwgbmFtZTogJ2Vycm9yJywga2luZDogJ21lc3NhZ2UnLCBUOiAoKSA9PiBFcnJvciQyIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5FcnJvciBlcnJvciAqLyA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVycm9yID0gRXJyb3IkMi5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5FcnJvciBlcnJvciA9IDQ7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmVycm9yKVxuICAgICAgICAgICAgRXJyb3IkMi5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UuZXJyb3IsIHdyaXRlci50YWcoNCwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUuc2lnbmFsLlVwZGF0ZVN1YnNjcmlwdGlvbnNSZXNwb25zZVxuICovXG5jb25zdCBVcGRhdGVTdWJzY3JpcHRpb25zUmVzcG9uc2UgPSBuZXcgVXBkYXRlU3Vic2NyaXB0aW9uc1Jlc3BvbnNlJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIFRyYWNrU3Vic2NyaXB0aW9uRGV0YWlscyRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuVHJhY2tTdWJzY3JpcHRpb25EZXRhaWxzJywgW1xuICAgICAgICAgICAgeyBubzogMSwgbmFtZTogJ3VzZXJfaWQnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgICAgIHsgbm86IDIsIG5hbWU6ICdzZXNzaW9uX2lkJywga2luZDogJ3NjYWxhcicsIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDMsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3RyYWNrX3R5cGUnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdlbnVtJyxcbiAgICAgICAgICAgICAgICBUOiAoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICdzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5UcmFja1R5cGUnLFxuICAgICAgICAgICAgICAgICAgICBUcmFja1R5cGUsXG4gICAgICAgICAgICAgICAgICAgICdUUkFDS19UWVBFXycsXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7IG5vOiA0LCBuYW1lOiAnZGltZW5zaW9uJywga2luZDogJ21lc3NhZ2UnLCBUOiAoKSA9PiBWaWRlb0RpbWVuc2lvbiB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS51c2VySWQgPSAnJztcbiAgICAgICAgbWVzc2FnZS5zZXNzaW9uSWQgPSAnJztcbiAgICAgICAgbWVzc2FnZS50cmFja1R5cGUgPSAwO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgdXNlcl9pZCAqLyAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnVzZXJJZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgc2Vzc2lvbl9pZCAqLyAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNlc3Npb25JZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5UcmFja1R5cGUgdHJhY2tfdHlwZSAqLyAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRyYWNrVHlwZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlZpZGVvRGltZW5zaW9uIGRpbWVuc2lvbiAqLyA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRpbWVuc2lvbiA9IFZpZGVvRGltZW5zaW9uLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5kaW1lbnNpb24pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJpbmcgdXNlcl9pZCA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnVzZXJJZCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UudXNlcklkKTtcbiAgICAgICAgLyogc3RyaW5nIHNlc3Npb25faWQgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5zZXNzaW9uSWQgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLnNlc3Npb25JZCk7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlRyYWNrVHlwZSB0cmFja190eXBlID0gMzsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UudHJhY2tUeXBlICE9PSAwKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygzLCBXaXJlVHlwZS5WYXJpbnQpLmludDMyKG1lc3NhZ2UudHJhY2tUeXBlKTtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuVmlkZW9EaW1lbnNpb24gZGltZW5zaW9uID0gNDsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UuZGltZW5zaW9uKVxuICAgICAgICAgICAgVmlkZW9EaW1lbnNpb24uaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLmRpbWVuc2lvbiwgd3JpdGVyLnRhZyg0LCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuVHJhY2tTdWJzY3JpcHRpb25EZXRhaWxzXG4gKi9cbmNvbnN0IFRyYWNrU3Vic2NyaXB0aW9uRGV0YWlscyA9IG5ldyBUcmFja1N1YnNjcmlwdGlvbkRldGFpbHMkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgU2VuZEFuc3dlclJlcXVlc3QkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuc2lnbmFsLlNlbmRBbnN3ZXJSZXF1ZXN0JywgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdwZWVyX3R5cGUnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdlbnVtJyxcbiAgICAgICAgICAgICAgICBUOiAoKSA9PiBbJ3N0cmVhbS52aWRlby5zZnUubW9kZWxzLlBlZXJUeXBlJywgUGVlclR5cGUsICdQRUVSX1RZUEVfJ10sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBubzogMiwgbmFtZTogJ3NkcCcsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAgeyBubzogMywgbmFtZTogJ3Nlc3Npb25faWQnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2UucGVlclR5cGUgPSAwO1xuICAgICAgICBtZXNzYWdlLnNkcCA9ICcnO1xuICAgICAgICBtZXNzYWdlLnNlc3Npb25JZCA9ICcnO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QZWVyVHlwZSBwZWVyX3R5cGUgKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wZWVyVHlwZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBzZHAgKi8gMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZHAgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIHNlc3Npb25faWQgKi8gMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZXNzaW9uSWQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlBlZXJUeXBlIHBlZXJfdHlwZSA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnBlZXJUeXBlICE9PSAwKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygxLCBXaXJlVHlwZS5WYXJpbnQpLmludDMyKG1lc3NhZ2UucGVlclR5cGUpO1xuICAgICAgICAvKiBzdHJpbmcgc2RwID0gMjsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2RwICE9PSAnJylcbiAgICAgICAgICAgIHdyaXRlci50YWcoMiwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5zdHJpbmcobWVzc2FnZS5zZHApO1xuICAgICAgICAvKiBzdHJpbmcgc2Vzc2lvbl9pZCA9IDM7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnNlc3Npb25JZCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDMsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2Uuc2Vzc2lvbklkKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUuc2lnbmFsLlNlbmRBbnN3ZXJSZXF1ZXN0XG4gKi9cbmNvbnN0IFNlbmRBbnN3ZXJSZXF1ZXN0ID0gbmV3IFNlbmRBbnN3ZXJSZXF1ZXN0JFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIFNlbmRBbnN3ZXJSZXNwb25zZSRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuU2VuZEFuc3dlclJlc3BvbnNlJywgW1xuICAgICAgICAgICAgeyBubzogNCwgbmFtZTogJ2Vycm9yJywga2luZDogJ21lc3NhZ2UnLCBUOiAoKSA9PiBFcnJvciQyIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5FcnJvciBlcnJvciAqLyA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVycm9yID0gRXJyb3IkMi5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5FcnJvciBlcnJvciA9IDQ7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmVycm9yKVxuICAgICAgICAgICAgRXJyb3IkMi5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UuZXJyb3IsIHdyaXRlci50YWcoNCwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUuc2lnbmFsLlNlbmRBbnN3ZXJSZXNwb25zZVxuICovXG5jb25zdCBTZW5kQW5zd2VyUmVzcG9uc2UgPSBuZXcgU2VuZEFuc3dlclJlc3BvbnNlJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIElDRVRyaWNrbGVSZXNwb25zZSRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuSUNFVHJpY2tsZVJlc3BvbnNlJywgW1xuICAgICAgICAgICAgeyBubzogNCwgbmFtZTogJ2Vycm9yJywga2luZDogJ21lc3NhZ2UnLCBUOiAoKSA9PiBFcnJvciQyIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5FcnJvciBlcnJvciAqLyA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVycm9yID0gRXJyb3IkMi5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5FcnJvciBlcnJvciA9IDQ7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmVycm9yKVxuICAgICAgICAgICAgRXJyb3IkMi5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UuZXJyb3IsIHdyaXRlci50YWcoNCwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUuc2lnbmFsLklDRVRyaWNrbGVSZXNwb25zZVxuICovXG5jb25zdCBJQ0VUcmlja2xlUmVzcG9uc2UgPSBuZXcgSUNFVHJpY2tsZVJlc3BvbnNlJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIFNldFB1Ymxpc2hlclJlcXVlc3QkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuc2lnbmFsLlNldFB1Ymxpc2hlclJlcXVlc3QnLCBbXG4gICAgICAgICAgICB7IG5vOiAxLCBuYW1lOiAnc2RwJywga2luZDogJ3NjYWxhcicsIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovIH0sXG4gICAgICAgICAgICB7IG5vOiAyLCBuYW1lOiAnc2Vzc2lvbl9pZCcsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAzLFxuICAgICAgICAgICAgICAgIG5hbWU6ICd0cmFja3MnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICByZXBlYXQ6IDEgLypSZXBlYXRUeXBlLlBBQ0tFRCovLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IFRyYWNrSW5mbyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLnNkcCA9ICcnO1xuICAgICAgICBtZXNzYWdlLnNlc3Npb25JZCA9ICcnO1xuICAgICAgICBtZXNzYWdlLnRyYWNrcyA9IFtdO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgc2RwICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2RwID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBzZXNzaW9uX2lkICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2Vzc2lvbklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHJlcGVhdGVkIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlRyYWNrSW5mbyB0cmFja3MgKi8gMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50cmFja3MucHVzaChUcmFja0luZm8uaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHN0cmluZyBzZHAgPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5zZHAgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygxLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLnNkcCk7XG4gICAgICAgIC8qIHN0cmluZyBzZXNzaW9uX2lkID0gMjsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2Vzc2lvbklkICE9PSAnJylcbiAgICAgICAgICAgIHdyaXRlci50YWcoMiwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5zdHJpbmcobWVzc2FnZS5zZXNzaW9uSWQpO1xuICAgICAgICAvKiByZXBlYXRlZCBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5UcmFja0luZm8gdHJhY2tzID0gMzsgKi9cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXNzYWdlLnRyYWNrcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIFRyYWNrSW5mby5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UudHJhY2tzW2ldLCB3cml0ZXIudGFnKDMsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRpb25zKS5qb2luKCk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1LnNpZ25hbC5TZXRQdWJsaXNoZXJSZXF1ZXN0XG4gKi9cbmNvbnN0IFNldFB1Ymxpc2hlclJlcXVlc3QgPSBuZXcgU2V0UHVibGlzaGVyUmVxdWVzdCRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBTZXRQdWJsaXNoZXJSZXNwb25zZSRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuU2V0UHVibGlzaGVyUmVzcG9uc2UnLCBbXG4gICAgICAgICAgICB7IG5vOiAxLCBuYW1lOiAnc2RwJywga2luZDogJ3NjYWxhcicsIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovIH0sXG4gICAgICAgICAgICB7IG5vOiAyLCBuYW1lOiAnc2Vzc2lvbl9pZCcsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAgeyBubzogMywgbmFtZTogJ2ljZV9yZXN0YXJ0Jywga2luZDogJ3NjYWxhcicsIFQ6IDggLypTY2FsYXJUeXBlLkJPT0wqLyB9LFxuICAgICAgICAgICAgeyBubzogNCwgbmFtZTogJ2Vycm9yJywga2luZDogJ21lc3NhZ2UnLCBUOiAoKSA9PiBFcnJvciQyIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLnNkcCA9ICcnO1xuICAgICAgICBtZXNzYWdlLnNlc3Npb25JZCA9ICcnO1xuICAgICAgICBtZXNzYWdlLmljZVJlc3RhcnQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZWZsZWN0aW9uTWVyZ2VQYXJ0aWFsKHRoaXMsIG1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIGxlbmd0aCwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGFyZ2V0ID8/IHRoaXMuY3JlYXRlKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIHNkcCAqLyAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNkcCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgc2Vzc2lvbl9pZCAqLyAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNlc3Npb25JZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBib29sIGljZV9yZXN0YXJ0ICovIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaWNlUmVzdGFydCA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuRXJyb3IgZXJyb3IgKi8gNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5lcnJvciA9IEVycm9yJDIuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zLCBtZXNzYWdlLmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogc3RyaW5nIHNkcCA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnNkcCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2Uuc2RwKTtcbiAgICAgICAgLyogc3RyaW5nIHNlc3Npb25faWQgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5zZXNzaW9uSWQgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLnNlc3Npb25JZCk7XG4gICAgICAgIC8qIGJvb2wgaWNlX3Jlc3RhcnQgPSAzOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5pY2VSZXN0YXJ0ICE9PSBmYWxzZSlcbiAgICAgICAgICAgIHdyaXRlci50YWcoMywgV2lyZVR5cGUuVmFyaW50KS5ib29sKG1lc3NhZ2UuaWNlUmVzdGFydCk7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLkVycm9yIGVycm9yID0gNDsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UuZXJyb3IpXG4gICAgICAgICAgICBFcnJvciQyLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5lcnJvciwgd3JpdGVyLnRhZyg0LCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuU2V0UHVibGlzaGVyUmVzcG9uc2VcbiAqL1xuY29uc3QgU2V0UHVibGlzaGVyUmVzcG9uc2UgPSBuZXcgU2V0UHVibGlzaGVyUmVzcG9uc2UkVHlwZSgpO1xuLyoqXG4gKiBAZ2VuZXJhdGVkIFNlcnZpY2VUeXBlIGZvciBwcm90b2J1ZiBzZXJ2aWNlIHN0cmVhbS52aWRlby5zZnUuc2lnbmFsLlNpZ25hbFNlcnZlclxuICovXG5jb25zdCBTaWduYWxTZXJ2ZXIgPSBuZXcgU2VydmljZVR5cGUoJ3N0cmVhbS52aWRlby5zZnUuc2lnbmFsLlNpZ25hbFNlcnZlcicsIFtcbiAgICB7XG4gICAgICAgIG5hbWU6ICdTZXRQdWJsaXNoZXInLFxuICAgICAgICBvcHRpb25zOiB7fSxcbiAgICAgICAgSTogU2V0UHVibGlzaGVyUmVxdWVzdCxcbiAgICAgICAgTzogU2V0UHVibGlzaGVyUmVzcG9uc2UsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdTZW5kQW5zd2VyJyxcbiAgICAgICAgb3B0aW9uczoge30sXG4gICAgICAgIEk6IFNlbmRBbnN3ZXJSZXF1ZXN0LFxuICAgICAgICBPOiBTZW5kQW5zd2VyUmVzcG9uc2UsXG4gICAgfSxcbiAgICB7IG5hbWU6ICdJY2VUcmlja2xlJywgb3B0aW9uczoge30sIEk6IElDRVRyaWNrbGUkMSwgTzogSUNFVHJpY2tsZVJlc3BvbnNlIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAnVXBkYXRlU3Vic2NyaXB0aW9ucycsXG4gICAgICAgIG9wdGlvbnM6IHt9LFxuICAgICAgICBJOiBVcGRhdGVTdWJzY3JpcHRpb25zUmVxdWVzdCxcbiAgICAgICAgTzogVXBkYXRlU3Vic2NyaXB0aW9uc1Jlc3BvbnNlLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAnVXBkYXRlTXV0ZVN0YXRlcycsXG4gICAgICAgIG9wdGlvbnM6IHt9LFxuICAgICAgICBJOiBVcGRhdGVNdXRlU3RhdGVzUmVxdWVzdCxcbiAgICAgICAgTzogVXBkYXRlTXV0ZVN0YXRlc1Jlc3BvbnNlLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAnSWNlUmVzdGFydCcsXG4gICAgICAgIG9wdGlvbnM6IHt9LFxuICAgICAgICBJOiBJQ0VSZXN0YXJ0UmVxdWVzdCxcbiAgICAgICAgTzogSUNFUmVzdGFydFJlc3BvbnNlLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAnU2VuZFN0YXRzJyxcbiAgICAgICAgb3B0aW9uczoge30sXG4gICAgICAgIEk6IFNlbmRTdGF0c1JlcXVlc3QsXG4gICAgICAgIE86IFNlbmRTdGF0c1Jlc3BvbnNlLFxuICAgIH0sXG5dKTtcblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LlZpZGVvTGF5ZXJTZXR0aW5nLlByaW9yaXR5XG4gKi9cbnZhciBWaWRlb0xheWVyU2V0dGluZ19Qcmlvcml0eTtcbihmdW5jdGlvbiAoVmlkZW9MYXllclNldHRpbmdfUHJpb3JpdHkpIHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogUFJJT1JJVFlfSElHSF9VTlNQRUNJRklFRCA9IDA7XG4gICAgICovXG4gICAgVmlkZW9MYXllclNldHRpbmdfUHJpb3JpdHlbVmlkZW9MYXllclNldHRpbmdfUHJpb3JpdHlbXCJISUdIX1VOU1BFQ0lGSUVEXCJdID0gMF0gPSBcIkhJR0hfVU5TUEVDSUZJRURcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogUFJJT1JJVFlfTE9XID0gMTtcbiAgICAgKi9cbiAgICBWaWRlb0xheWVyU2V0dGluZ19Qcmlvcml0eVtWaWRlb0xheWVyU2V0dGluZ19Qcmlvcml0eVtcIkxPV1wiXSA9IDFdID0gXCJMT1dcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogUFJJT1JJVFlfTUVESVVNID0gMjtcbiAgICAgKi9cbiAgICBWaWRlb0xheWVyU2V0dGluZ19Qcmlvcml0eVtWaWRlb0xheWVyU2V0dGluZ19Qcmlvcml0eVtcIk1FRElVTVwiXSA9IDJdID0gXCJNRURJVU1cIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgZW51bSB2YWx1ZTogUFJJT1JJVFlfVkVSWV9MT1cgPSAzO1xuICAgICAqL1xuICAgIFZpZGVvTGF5ZXJTZXR0aW5nX1ByaW9yaXR5W1ZpZGVvTGF5ZXJTZXR0aW5nX1ByaW9yaXR5W1wiVkVSWV9MT1dcIl0gPSAzXSA9IFwiVkVSWV9MT1dcIjtcbn0pKFZpZGVvTGF5ZXJTZXR0aW5nX1ByaW9yaXR5IHx8IChWaWRlb0xheWVyU2V0dGluZ19Qcmlvcml0eSA9IHt9KSk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBTZnVFdmVudCRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5TZnVFdmVudCcsIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnc3Vic2NyaWJlcl9vZmZlcicsXG4gICAgICAgICAgICAgICAga2luZDogJ21lc3NhZ2UnLFxuICAgICAgICAgICAgICAgIG9uZW9mOiAnZXZlbnRQYXlsb2FkJyxcbiAgICAgICAgICAgICAgICBUOiAoKSA9PiBTdWJzY3JpYmVyT2ZmZXIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAyLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdwdWJsaXNoZXJfYW5zd2VyJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgb25lb2Y6ICdldmVudFBheWxvYWQnLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IFB1Ymxpc2hlckFuc3dlcixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDMsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2Nvbm5lY3Rpb25fcXVhbGl0eV9jaGFuZ2VkJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgb25lb2Y6ICdldmVudFBheWxvYWQnLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IENvbm5lY3Rpb25RdWFsaXR5Q2hhbmdlZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDQsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2F1ZGlvX2xldmVsX2NoYW5nZWQnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICBvbmVvZjogJ2V2ZW50UGF5bG9hZCcsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gQXVkaW9MZXZlbENoYW5nZWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiA1LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdpY2VfdHJpY2tsZScsXG4gICAgICAgICAgICAgICAga2luZDogJ21lc3NhZ2UnLFxuICAgICAgICAgICAgICAgIG9uZW9mOiAnZXZlbnRQYXlsb2FkJyxcbiAgICAgICAgICAgICAgICBUOiAoKSA9PiBJQ0VUcmlja2xlJDEsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiA2LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdjaGFuZ2VfcHVibGlzaF9xdWFsaXR5JyxcbiAgICAgICAgICAgICAgICBraW5kOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgb25lb2Y6ICdldmVudFBheWxvYWQnLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IENoYW5nZVB1Ymxpc2hRdWFsaXR5LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMTAsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3BhcnRpY2lwYW50X2pvaW5lZCcsXG4gICAgICAgICAgICAgICAga2luZDogJ21lc3NhZ2UnLFxuICAgICAgICAgICAgICAgIG9uZW9mOiAnZXZlbnRQYXlsb2FkJyxcbiAgICAgICAgICAgICAgICBUOiAoKSA9PiBQYXJ0aWNpcGFudEpvaW5lZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDExLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdwYXJ0aWNpcGFudF9sZWZ0JyxcbiAgICAgICAgICAgICAgICBraW5kOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgb25lb2Y6ICdldmVudFBheWxvYWQnLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IFBhcnRpY2lwYW50TGVmdCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDEyLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdkb21pbmFudF9zcGVha2VyX2NoYW5nZWQnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICBvbmVvZjogJ2V2ZW50UGF5bG9hZCcsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gRG9taW5hbnRTcGVha2VyQ2hhbmdlZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDEzLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdqb2luX3Jlc3BvbnNlJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgb25lb2Y6ICdldmVudFBheWxvYWQnLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IEpvaW5SZXNwb25zZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDE0LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdoZWFsdGhfY2hlY2tfcmVzcG9uc2UnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICBvbmVvZjogJ2V2ZW50UGF5bG9hZCcsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gSGVhbHRoQ2hlY2tSZXNwb25zZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDE2LFxuICAgICAgICAgICAgICAgIG5hbWU6ICd0cmFja19wdWJsaXNoZWQnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICBvbmVvZjogJ2V2ZW50UGF5bG9hZCcsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gVHJhY2tQdWJsaXNoZWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAxNyxcbiAgICAgICAgICAgICAgICBuYW1lOiAndHJhY2tfdW5wdWJsaXNoZWQnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICBvbmVvZjogJ2V2ZW50UGF5bG9hZCcsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gVHJhY2tVbnB1Ymxpc2hlZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDE4LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAga2luZDogJ21lc3NhZ2UnLFxuICAgICAgICAgICAgICAgIG9uZW9mOiAnZXZlbnRQYXlsb2FkJyxcbiAgICAgICAgICAgICAgICBUOiAoKSA9PiBFcnJvciQxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMTksXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NhbGxfZ3JhbnRzX3VwZGF0ZWQnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICBvbmVvZjogJ2V2ZW50UGF5bG9hZCcsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gQ2FsbEdyYW50c1VwZGF0ZWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAyMCxcbiAgICAgICAgICAgICAgICBuYW1lOiAnZ29fYXdheScsXG4gICAgICAgICAgICAgICAga2luZDogJ21lc3NhZ2UnLFxuICAgICAgICAgICAgICAgIG9uZW9mOiAnZXZlbnRQYXlsb2FkJyxcbiAgICAgICAgICAgICAgICBUOiAoKSA9PiBHb0F3YXksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAyMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnaWNlX3Jlc3RhcnQnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICBvbmVvZjogJ2V2ZW50UGF5bG9hZCcsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gSUNFUmVzdGFydCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDIyLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdwaW5zX3VwZGF0ZWQnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICBvbmVvZjogJ2V2ZW50UGF5bG9hZCcsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gUGluc0NoYW5nZWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS5ldmVudFBheWxvYWQgPSB7IG9uZW9mS2luZDogdW5kZWZpbmVkIH07XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuU3Vic2NyaWJlck9mZmVyIHN1YnNjcmliZXJfb2ZmZXIgKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ldmVudFBheWxvYWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbmVvZktpbmQ6ICdzdWJzY3JpYmVyT2ZmZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlck9mZmVyOiBTdWJzY3JpYmVyT2ZmZXIuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zLCBtZXNzYWdlLmV2ZW50UGF5bG9hZC5zdWJzY3JpYmVyT2ZmZXIpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuUHVibGlzaGVyQW5zd2VyIHB1Ymxpc2hlcl9hbnN3ZXIgKi8gMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ldmVudFBheWxvYWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbmVvZktpbmQ6ICdwdWJsaXNoZXJBbnN3ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHVibGlzaGVyQW5zd2VyOiBQdWJsaXNoZXJBbnN3ZXIuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zLCBtZXNzYWdlLmV2ZW50UGF5bG9hZC5wdWJsaXNoZXJBbnN3ZXIpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuQ29ubmVjdGlvblF1YWxpdHlDaGFuZ2VkIGNvbm5lY3Rpb25fcXVhbGl0eV9jaGFuZ2VkICovIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZXZlbnRQYXlsb2FkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25lb2ZLaW5kOiAnY29ubmVjdGlvblF1YWxpdHlDaGFuZ2VkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25RdWFsaXR5Q2hhbmdlZDogQ29ubmVjdGlvblF1YWxpdHlDaGFuZ2VkLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5ldmVudFBheWxvYWQuY29ubmVjdGlvblF1YWxpdHlDaGFuZ2VkKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkF1ZGlvTGV2ZWxDaGFuZ2VkIGF1ZGlvX2xldmVsX2NoYW5nZWQgKi8gNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ldmVudFBheWxvYWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbmVvZktpbmQ6ICdhdWRpb0xldmVsQ2hhbmdlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdWRpb0xldmVsQ2hhbmdlZDogQXVkaW9MZXZlbENoYW5nZWQuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zLCBtZXNzYWdlLmV2ZW50UGF5bG9hZC5hdWRpb0xldmVsQ2hhbmdlZCksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuSUNFVHJpY2tsZSBpY2VfdHJpY2tsZSAqLyA1OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmV2ZW50UGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uZW9mS2luZDogJ2ljZVRyaWNrbGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWNlVHJpY2tsZTogSUNFVHJpY2tsZSQxLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5ldmVudFBheWxvYWQuaWNlVHJpY2tsZSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5DaGFuZ2VQdWJsaXNoUXVhbGl0eSBjaGFuZ2VfcHVibGlzaF9xdWFsaXR5ICovIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZXZlbnRQYXlsb2FkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25lb2ZLaW5kOiAnY2hhbmdlUHVibGlzaFF1YWxpdHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlUHVibGlzaFF1YWxpdHk6IENoYW5nZVB1Ymxpc2hRdWFsaXR5LmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5ldmVudFBheWxvYWQuY2hhbmdlUHVibGlzaFF1YWxpdHkpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuUGFydGljaXBhbnRKb2luZWQgcGFydGljaXBhbnRfam9pbmVkICovIDEwOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmV2ZW50UGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uZW9mS2luZDogJ3BhcnRpY2lwYW50Sm9pbmVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpY2lwYW50Sm9pbmVkOiBQYXJ0aWNpcGFudEpvaW5lZC5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UuZXZlbnRQYXlsb2FkLnBhcnRpY2lwYW50Sm9pbmVkKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LlBhcnRpY2lwYW50TGVmdCBwYXJ0aWNpcGFudF9sZWZ0ICovIDExOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmV2ZW50UGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uZW9mS2luZDogJ3BhcnRpY2lwYW50TGVmdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0aWNpcGFudExlZnQ6IFBhcnRpY2lwYW50TGVmdC5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UuZXZlbnRQYXlsb2FkLnBhcnRpY2lwYW50TGVmdCksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5Eb21pbmFudFNwZWFrZXJDaGFuZ2VkIGRvbWluYW50X3NwZWFrZXJfY2hhbmdlZCAqLyAxMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ldmVudFBheWxvYWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbmVvZktpbmQ6ICdkb21pbmFudFNwZWFrZXJDaGFuZ2VkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbWluYW50U3BlYWtlckNoYW5nZWQ6IERvbWluYW50U3BlYWtlckNoYW5nZWQuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zLCBtZXNzYWdlLmV2ZW50UGF5bG9hZC5kb21pbmFudFNwZWFrZXJDaGFuZ2VkKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkpvaW5SZXNwb25zZSBqb2luX3Jlc3BvbnNlICovIDEzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmV2ZW50UGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uZW9mS2luZDogJ2pvaW5SZXNwb25zZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBqb2luUmVzcG9uc2U6IEpvaW5SZXNwb25zZS5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UuZXZlbnRQYXlsb2FkLmpvaW5SZXNwb25zZSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5IZWFsdGhDaGVja1Jlc3BvbnNlIGhlYWx0aF9jaGVja19yZXNwb25zZSAqLyAxNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ldmVudFBheWxvYWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbmVvZktpbmQ6ICdoZWFsdGhDaGVja1Jlc3BvbnNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWx0aENoZWNrUmVzcG9uc2U6IEhlYWx0aENoZWNrUmVzcG9uc2UuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zLCBtZXNzYWdlLmV2ZW50UGF5bG9hZC5oZWFsdGhDaGVja1Jlc3BvbnNlKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LlRyYWNrUHVibGlzaGVkIHRyYWNrX3B1Ymxpc2hlZCAqLyAxNjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ldmVudFBheWxvYWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbmVvZktpbmQ6ICd0cmFja1B1Ymxpc2hlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFja1B1Ymxpc2hlZDogVHJhY2tQdWJsaXNoZWQuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zLCBtZXNzYWdlLmV2ZW50UGF5bG9hZC50cmFja1B1Ymxpc2hlZCksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5UcmFja1VucHVibGlzaGVkIHRyYWNrX3VucHVibGlzaGVkICovIDE3OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmV2ZW50UGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uZW9mS2luZDogJ3RyYWNrVW5wdWJsaXNoZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tVbnB1Ymxpc2hlZDogVHJhY2tVbnB1Ymxpc2hlZC5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UuZXZlbnRQYXlsb2FkLnRyYWNrVW5wdWJsaXNoZWQpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuRXJyb3IgZXJyb3IgKi8gMTg6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZXZlbnRQYXlsb2FkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25lb2ZLaW5kOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IEVycm9yJDEuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zLCBtZXNzYWdlLmV2ZW50UGF5bG9hZC5lcnJvciksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5DYWxsR3JhbnRzVXBkYXRlZCBjYWxsX2dyYW50c191cGRhdGVkICovIDE5OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmV2ZW50UGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uZW9mS2luZDogJ2NhbGxHcmFudHNVcGRhdGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxHcmFudHNVcGRhdGVkOiBDYWxsR3JhbnRzVXBkYXRlZC5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UuZXZlbnRQYXlsb2FkLmNhbGxHcmFudHNVcGRhdGVkKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkdvQXdheSBnb19hd2F5ICovIDIwOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmV2ZW50UGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uZW9mS2luZDogJ2dvQXdheScsXG4gICAgICAgICAgICAgICAgICAgICAgICBnb0F3YXk6IEdvQXdheS5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UuZXZlbnRQYXlsb2FkLmdvQXdheSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5JQ0VSZXN0YXJ0IGljZV9yZXN0YXJ0ICovIDIxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmV2ZW50UGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uZW9mS2luZDogJ2ljZVJlc3RhcnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWNlUmVzdGFydDogSUNFUmVzdGFydC5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UuZXZlbnRQYXlsb2FkLmljZVJlc3RhcnQpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuUGluc0NoYW5nZWQgcGluc191cGRhdGVkICovIDIyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmV2ZW50UGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uZW9mS2luZDogJ3BpbnNVcGRhdGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpbnNVcGRhdGVkOiBQaW5zQ2hhbmdlZC5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UuZXZlbnRQYXlsb2FkLnBpbnNVcGRhdGVkKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5TdWJzY3JpYmVyT2ZmZXIgc3Vic2NyaWJlcl9vZmZlciA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmV2ZW50UGF5bG9hZC5vbmVvZktpbmQgPT09ICdzdWJzY3JpYmVyT2ZmZXInKVxuICAgICAgICAgICAgU3Vic2NyaWJlck9mZmVyLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5ldmVudFBheWxvYWQuc3Vic2NyaWJlck9mZmVyLCB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRpb25zKS5qb2luKCk7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuUHVibGlzaGVyQW5zd2VyIHB1Ymxpc2hlcl9hbnN3ZXIgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5ldmVudFBheWxvYWQub25lb2ZLaW5kID09PSAncHVibGlzaGVyQW5zd2VyJylcbiAgICAgICAgICAgIFB1Ymxpc2hlckFuc3dlci5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UuZXZlbnRQYXlsb2FkLnB1Ymxpc2hlckFuc3dlciwgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkNvbm5lY3Rpb25RdWFsaXR5Q2hhbmdlZCBjb25uZWN0aW9uX3F1YWxpdHlfY2hhbmdlZCA9IDM7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmV2ZW50UGF5bG9hZC5vbmVvZktpbmQgPT09ICdjb25uZWN0aW9uUXVhbGl0eUNoYW5nZWQnKVxuICAgICAgICAgICAgQ29ubmVjdGlvblF1YWxpdHlDaGFuZ2VkLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5ldmVudFBheWxvYWQuY29ubmVjdGlvblF1YWxpdHlDaGFuZ2VkLCB3cml0ZXIudGFnKDMsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRpb25zKS5qb2luKCk7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuQXVkaW9MZXZlbENoYW5nZWQgYXVkaW9fbGV2ZWxfY2hhbmdlZCA9IDQ7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmV2ZW50UGF5bG9hZC5vbmVvZktpbmQgPT09ICdhdWRpb0xldmVsQ2hhbmdlZCcpXG4gICAgICAgICAgICBBdWRpb0xldmVsQ2hhbmdlZC5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UuZXZlbnRQYXlsb2FkLmF1ZGlvTGV2ZWxDaGFuZ2VkLCB3cml0ZXIudGFnKDQsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRpb25zKS5qb2luKCk7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLklDRVRyaWNrbGUgaWNlX3RyaWNrbGUgPSA1OyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5ldmVudFBheWxvYWQub25lb2ZLaW5kID09PSAnaWNlVHJpY2tsZScpXG4gICAgICAgICAgICBJQ0VUcmlja2xlJDEuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLmV2ZW50UGF5bG9hZC5pY2VUcmlja2xlLCB3cml0ZXIudGFnKDUsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRpb25zKS5qb2luKCk7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuQ2hhbmdlUHVibGlzaFF1YWxpdHkgY2hhbmdlX3B1Ymxpc2hfcXVhbGl0eSA9IDY7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmV2ZW50UGF5bG9hZC5vbmVvZktpbmQgPT09ICdjaGFuZ2VQdWJsaXNoUXVhbGl0eScpXG4gICAgICAgICAgICBDaGFuZ2VQdWJsaXNoUXVhbGl0eS5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UuZXZlbnRQYXlsb2FkLmNoYW5nZVB1Ymxpc2hRdWFsaXR5LCB3cml0ZXIudGFnKDYsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRpb25zKS5qb2luKCk7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuUGFydGljaXBhbnRKb2luZWQgcGFydGljaXBhbnRfam9pbmVkID0gMTA7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmV2ZW50UGF5bG9hZC5vbmVvZktpbmQgPT09ICdwYXJ0aWNpcGFudEpvaW5lZCcpXG4gICAgICAgICAgICBQYXJ0aWNpcGFudEpvaW5lZC5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UuZXZlbnRQYXlsb2FkLnBhcnRpY2lwYW50Sm9pbmVkLCB3cml0ZXIudGFnKDEwLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LlBhcnRpY2lwYW50TGVmdCBwYXJ0aWNpcGFudF9sZWZ0ID0gMTE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmV2ZW50UGF5bG9hZC5vbmVvZktpbmQgPT09ICdwYXJ0aWNpcGFudExlZnQnKVxuICAgICAgICAgICAgUGFydGljaXBhbnRMZWZ0LmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5ldmVudFBheWxvYWQucGFydGljaXBhbnRMZWZ0LCB3cml0ZXIudGFnKDExLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkRvbWluYW50U3BlYWtlckNoYW5nZWQgZG9taW5hbnRfc3BlYWtlcl9jaGFuZ2VkID0gMTI7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmV2ZW50UGF5bG9hZC5vbmVvZktpbmQgPT09ICdkb21pbmFudFNwZWFrZXJDaGFuZ2VkJylcbiAgICAgICAgICAgIERvbWluYW50U3BlYWtlckNoYW5nZWQuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLmV2ZW50UGF5bG9hZC5kb21pbmFudFNwZWFrZXJDaGFuZ2VkLCB3cml0ZXIudGFnKDEyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkpvaW5SZXNwb25zZSBqb2luX3Jlc3BvbnNlID0gMTM7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmV2ZW50UGF5bG9hZC5vbmVvZktpbmQgPT09ICdqb2luUmVzcG9uc2UnKVxuICAgICAgICAgICAgSm9pblJlc3BvbnNlLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5ldmVudFBheWxvYWQuam9pblJlc3BvbnNlLCB3cml0ZXIudGFnKDEzLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkhlYWx0aENoZWNrUmVzcG9uc2UgaGVhbHRoX2NoZWNrX3Jlc3BvbnNlID0gMTQ7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmV2ZW50UGF5bG9hZC5vbmVvZktpbmQgPT09ICdoZWFsdGhDaGVja1Jlc3BvbnNlJylcbiAgICAgICAgICAgIEhlYWx0aENoZWNrUmVzcG9uc2UuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLmV2ZW50UGF5bG9hZC5oZWFsdGhDaGVja1Jlc3BvbnNlLCB3cml0ZXIudGFnKDE0LCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LlRyYWNrUHVibGlzaGVkIHRyYWNrX3B1Ymxpc2hlZCA9IDE2OyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5ldmVudFBheWxvYWQub25lb2ZLaW5kID09PSAndHJhY2tQdWJsaXNoZWQnKVxuICAgICAgICAgICAgVHJhY2tQdWJsaXNoZWQuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLmV2ZW50UGF5bG9hZC50cmFja1B1Ymxpc2hlZCwgd3JpdGVyLnRhZygxNiwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5UcmFja1VucHVibGlzaGVkIHRyYWNrX3VucHVibGlzaGVkID0gMTc7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmV2ZW50UGF5bG9hZC5vbmVvZktpbmQgPT09ICd0cmFja1VucHVibGlzaGVkJylcbiAgICAgICAgICAgIFRyYWNrVW5wdWJsaXNoZWQuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLmV2ZW50UGF5bG9hZC50cmFja1VucHVibGlzaGVkLCB3cml0ZXIudGFnKDE3LCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkVycm9yIGVycm9yID0gMTg7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmV2ZW50UGF5bG9hZC5vbmVvZktpbmQgPT09ICdlcnJvcicpXG4gICAgICAgICAgICBFcnJvciQxLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5ldmVudFBheWxvYWQuZXJyb3IsIHdyaXRlci50YWcoMTgsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRpb25zKS5qb2luKCk7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuQ2FsbEdyYW50c1VwZGF0ZWQgY2FsbF9ncmFudHNfdXBkYXRlZCA9IDE5OyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5ldmVudFBheWxvYWQub25lb2ZLaW5kID09PSAnY2FsbEdyYW50c1VwZGF0ZWQnKVxuICAgICAgICAgICAgQ2FsbEdyYW50c1VwZGF0ZWQuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLmV2ZW50UGF5bG9hZC5jYWxsR3JhbnRzVXBkYXRlZCwgd3JpdGVyLnRhZygxOSwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5Hb0F3YXkgZ29fYXdheSA9IDIwOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5ldmVudFBheWxvYWQub25lb2ZLaW5kID09PSAnZ29Bd2F5JylcbiAgICAgICAgICAgIEdvQXdheS5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UuZXZlbnRQYXlsb2FkLmdvQXdheSwgd3JpdGVyLnRhZygyMCwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5JQ0VSZXN0YXJ0IGljZV9yZXN0YXJ0ID0gMjE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmV2ZW50UGF5bG9hZC5vbmVvZktpbmQgPT09ICdpY2VSZXN0YXJ0JylcbiAgICAgICAgICAgIElDRVJlc3RhcnQuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLmV2ZW50UGF5bG9hZC5pY2VSZXN0YXJ0LCB3cml0ZXIudGFnKDIxLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LlBpbnNDaGFuZ2VkIHBpbnNfdXBkYXRlZCA9IDIyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5ldmVudFBheWxvYWQub25lb2ZLaW5kID09PSAncGluc1VwZGF0ZWQnKVxuICAgICAgICAgICAgUGluc0NoYW5nZWQuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLmV2ZW50UGF5bG9hZC5waW5zVXBkYXRlZCwgd3JpdGVyLnRhZygyMiwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuU2Z1RXZlbnRcbiAqL1xuY29uc3QgU2Z1RXZlbnQgPSBuZXcgU2Z1RXZlbnQkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgUGluc0NoYW5nZWQkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuZXZlbnQuUGluc0NoYW5nZWQnLCBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3BpbnMnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICByZXBlYXQ6IDEgLypSZXBlYXRUeXBlLlBBQ0tFRCovLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IFBpbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLnBpbnMgPSBbXTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZWZsZWN0aW9uTWVyZ2VQYXJ0aWFsKHRoaXMsIG1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIGxlbmd0aCwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGFyZ2V0ID8/IHRoaXMuY3JlYXRlKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgLyogcmVwZWF0ZWQgc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuUGluIHBpbnMgKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5waW5zLnB1c2goUGluLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucykpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiByZXBlYXRlZCBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QaW4gcGlucyA9IDE7ICovXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzc2FnZS5waW5zLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgUGluLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5waW5zW2ldLCB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRpb25zKS5qb2luKCk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LlBpbnNDaGFuZ2VkXG4gKi9cbmNvbnN0IFBpbnNDaGFuZ2VkID0gbmV3IFBpbnNDaGFuZ2VkJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIEVycm9yJFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkVycm9yJywgW1xuICAgICAgICAgICAgeyBubzogNCwgbmFtZTogJ2Vycm9yJywga2luZDogJ21lc3NhZ2UnLCBUOiAoKSA9PiBFcnJvciQyIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5FcnJvciBlcnJvciAqLyA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVycm9yID0gRXJyb3IkMi5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5FcnJvciBlcnJvciA9IDQ7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmVycm9yKVxuICAgICAgICAgICAgRXJyb3IkMi5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UuZXJyb3IsIHdyaXRlci50YWcoNCwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuRXJyb3JcbiAqL1xuY29uc3QgRXJyb3IkMSA9IG5ldyBFcnJvciRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBJQ0VUcmlja2xlJFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LklDRVRyaWNrbGUnLCBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3BlZXJfdHlwZScsXG4gICAgICAgICAgICAgICAga2luZDogJ2VudW0nLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IFsnc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuUGVlclR5cGUnLCBQZWVyVHlwZSwgJ1BFRVJfVFlQRV8nXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDIsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2ljZV9jYW5kaWRhdGUnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdzY2FsYXInLFxuICAgICAgICAgICAgICAgIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2UucGVlclR5cGUgPSAwO1xuICAgICAgICBtZXNzYWdlLmljZUNhbmRpZGF0ZSA9ICcnO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QZWVyVHlwZSBwZWVyX3R5cGUgKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wZWVyVHlwZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBpY2VfY2FuZGlkYXRlICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaWNlQ2FuZGlkYXRlID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QZWVyVHlwZSBwZWVyX3R5cGUgPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5wZWVyVHlwZSAhPT0gMClcbiAgICAgICAgICAgIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuVmFyaW50KS5pbnQzMihtZXNzYWdlLnBlZXJUeXBlKTtcbiAgICAgICAgLyogc3RyaW5nIGljZV9jYW5kaWRhdGUgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5pY2VDYW5kaWRhdGUgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLmljZUNhbmRpZGF0ZSk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LklDRVRyaWNrbGVcbiAqL1xuY29uc3QgSUNFVHJpY2tsZSA9IG5ldyBJQ0VUcmlja2xlJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIElDRVJlc3RhcnQkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuZXZlbnQuSUNFUmVzdGFydCcsIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAncGVlcl90eXBlJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnZW51bScsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gWydzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QZWVyVHlwZScsIFBlZXJUeXBlLCAnUEVFUl9UWVBFXyddLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2UucGVlclR5cGUgPSAwO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QZWVyVHlwZSBwZWVyX3R5cGUgKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wZWVyVHlwZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QZWVyVHlwZSBwZWVyX3R5cGUgPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5wZWVyVHlwZSAhPT0gMClcbiAgICAgICAgICAgIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuVmFyaW50KS5pbnQzMihtZXNzYWdlLnBlZXJUeXBlKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuSUNFUmVzdGFydFxuICovXG5jb25zdCBJQ0VSZXN0YXJ0ID0gbmV3IElDRVJlc3RhcnQkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgU2Z1UmVxdWVzdCRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5TZnVSZXF1ZXN0JywgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdqb2luX3JlcXVlc3QnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICBvbmVvZjogJ3JlcXVlc3RQYXlsb2FkJyxcbiAgICAgICAgICAgICAgICBUOiAoKSA9PiBKb2luUmVxdWVzdCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDIsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2hlYWx0aF9jaGVja19yZXF1ZXN0JyxcbiAgICAgICAgICAgICAgICBraW5kOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgb25lb2Y6ICdyZXF1ZXN0UGF5bG9hZCcsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gSGVhbHRoQ2hlY2tSZXF1ZXN0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2UucmVxdWVzdFBheWxvYWQgPSB7IG9uZW9mS2luZDogdW5kZWZpbmVkIH07XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuSm9pblJlcXVlc3Qgam9pbl9yZXF1ZXN0ICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucmVxdWVzdFBheWxvYWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbmVvZktpbmQ6ICdqb2luUmVxdWVzdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBqb2luUmVxdWVzdDogSm9pblJlcXVlc3QuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zLCBtZXNzYWdlLnJlcXVlc3RQYXlsb2FkLmpvaW5SZXF1ZXN0KSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkhlYWx0aENoZWNrUmVxdWVzdCBoZWFsdGhfY2hlY2tfcmVxdWVzdCAqLyAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJlcXVlc3RQYXlsb2FkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25lb2ZLaW5kOiAnaGVhbHRoQ2hlY2tSZXF1ZXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWx0aENoZWNrUmVxdWVzdDogSGVhbHRoQ2hlY2tSZXF1ZXN0LmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5yZXF1ZXN0UGF5bG9hZC5oZWFsdGhDaGVja1JlcXVlc3QpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkpvaW5SZXF1ZXN0IGpvaW5fcmVxdWVzdCA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnJlcXVlc3RQYXlsb2FkLm9uZW9mS2luZCA9PT0gJ2pvaW5SZXF1ZXN0JylcbiAgICAgICAgICAgIEpvaW5SZXF1ZXN0LmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5yZXF1ZXN0UGF5bG9hZC5qb2luUmVxdWVzdCwgd3JpdGVyLnRhZygxLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkhlYWx0aENoZWNrUmVxdWVzdCBoZWFsdGhfY2hlY2tfcmVxdWVzdCA9IDI7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnJlcXVlc3RQYXlsb2FkLm9uZW9mS2luZCA9PT0gJ2hlYWx0aENoZWNrUmVxdWVzdCcpXG4gICAgICAgICAgICBIZWFsdGhDaGVja1JlcXVlc3QuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLnJlcXVlc3RQYXlsb2FkLmhlYWx0aENoZWNrUmVxdWVzdCwgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5TZnVSZXF1ZXN0XG4gKi9cbmNvbnN0IFNmdVJlcXVlc3QgPSBuZXcgU2Z1UmVxdWVzdCRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBIZWFsdGhDaGVja1JlcXVlc3QkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuZXZlbnQuSGVhbHRoQ2hlY2tSZXF1ZXN0JywgW10pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5IZWFsdGhDaGVja1JlcXVlc3RcbiAqL1xuY29uc3QgSGVhbHRoQ2hlY2tSZXF1ZXN0ID0gbmV3IEhlYWx0aENoZWNrUmVxdWVzdCRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBIZWFsdGhDaGVja1Jlc3BvbnNlJFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkhlYWx0aENoZWNrUmVzcG9uc2UnLCBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3BhcnRpY2lwYW50X2NvdW50JyxcbiAgICAgICAgICAgICAgICBraW5kOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gUGFydGljaXBhbnRDb3VudCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QYXJ0aWNpcGFudENvdW50IHBhcnRpY2lwYW50X2NvdW50ICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFydGljaXBhbnRDb3VudCA9IFBhcnRpY2lwYW50Q291bnQuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zLCBtZXNzYWdlLnBhcnRpY2lwYW50Q291bnQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QYXJ0aWNpcGFudENvdW50IHBhcnRpY2lwYW50X2NvdW50ID0gMTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UucGFydGljaXBhbnRDb3VudClcbiAgICAgICAgICAgIFBhcnRpY2lwYW50Q291bnQuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLnBhcnRpY2lwYW50Q291bnQsIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuSGVhbHRoQ2hlY2tSZXNwb25zZVxuICovXG5jb25zdCBIZWFsdGhDaGVja1Jlc3BvbnNlID0gbmV3IEhlYWx0aENoZWNrUmVzcG9uc2UkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgVHJhY2tQdWJsaXNoZWQkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuZXZlbnQuVHJhY2tQdWJsaXNoZWQnLCBbXG4gICAgICAgICAgICB7IG5vOiAxLCBuYW1lOiAndXNlcl9pZCcsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAgeyBubzogMiwgbmFtZTogJ3Nlc3Npb25faWQnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMyxcbiAgICAgICAgICAgICAgICBuYW1lOiAndHlwZScsXG4gICAgICAgICAgICAgICAga2luZDogJ2VudW0nLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgJ3N0cmVhbS52aWRlby5zZnUubW9kZWxzLlRyYWNrVHlwZScsXG4gICAgICAgICAgICAgICAgICAgIFRyYWNrVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgJ1RSQUNLX1RZUEVfJyxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgbm86IDQsIG5hbWU6ICdwYXJ0aWNpcGFudCcsIGtpbmQ6ICdtZXNzYWdlJywgVDogKCkgPT4gUGFydGljaXBhbnQgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2UudXNlcklkID0gJyc7XG4gICAgICAgIG1lc3NhZ2Uuc2Vzc2lvbklkID0gJyc7XG4gICAgICAgIG1lc3NhZ2UudHlwZSA9IDA7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyB1c2VyX2lkICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudXNlcklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBzZXNzaW9uX2lkICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2Vzc2lvbklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlRyYWNrVHlwZSB0eXBlICovIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudHlwZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlBhcnRpY2lwYW50IHBhcnRpY2lwYW50ICovIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFydGljaXBhbnQgPSBQYXJ0aWNpcGFudC5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UucGFydGljaXBhbnQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJpbmcgdXNlcl9pZCA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnVzZXJJZCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UudXNlcklkKTtcbiAgICAgICAgLyogc3RyaW5nIHNlc3Npb25faWQgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5zZXNzaW9uSWQgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLnNlc3Npb25JZCk7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlRyYWNrVHlwZSB0eXBlID0gMzsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSAhPT0gMClcbiAgICAgICAgICAgIHdyaXRlci50YWcoMywgV2lyZVR5cGUuVmFyaW50KS5pbnQzMihtZXNzYWdlLnR5cGUpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QYXJ0aWNpcGFudCBwYXJ0aWNpcGFudCA9IDQ7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnBhcnRpY2lwYW50KVxuICAgICAgICAgICAgUGFydGljaXBhbnQuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLnBhcnRpY2lwYW50LCB3cml0ZXIudGFnKDQsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRpb25zKS5qb2luKCk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LlRyYWNrUHVibGlzaGVkXG4gKi9cbmNvbnN0IFRyYWNrUHVibGlzaGVkID0gbmV3IFRyYWNrUHVibGlzaGVkJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIFRyYWNrVW5wdWJsaXNoZWQkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuZXZlbnQuVHJhY2tVbnB1Ymxpc2hlZCcsIFtcbiAgICAgICAgICAgIHsgbm86IDEsIG5hbWU6ICd1c2VyX2lkJywga2luZDogJ3NjYWxhcicsIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovIH0sXG4gICAgICAgICAgICB7IG5vOiAyLCBuYW1lOiAnc2Vzc2lvbl9pZCcsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAzLFxuICAgICAgICAgICAgICAgIG5hbWU6ICd0eXBlJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnZW51bScsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAnc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuVHJhY2tUeXBlJyxcbiAgICAgICAgICAgICAgICAgICAgVHJhY2tUeXBlLFxuICAgICAgICAgICAgICAgICAgICAnVFJBQ0tfVFlQRV8nLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiA0LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdjYXVzZScsXG4gICAgICAgICAgICAgICAga2luZDogJ2VudW0nLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgJ3N0cmVhbS52aWRlby5zZnUubW9kZWxzLlRyYWNrVW5wdWJsaXNoUmVhc29uJyxcbiAgICAgICAgICAgICAgICAgICAgVHJhY2tVbnB1Ymxpc2hSZWFzb24sXG4gICAgICAgICAgICAgICAgICAgICdUUkFDS19VTlBVQkxJU0hfUkVBU09OXycsXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7IG5vOiA1LCBuYW1lOiAncGFydGljaXBhbnQnLCBraW5kOiAnbWVzc2FnZScsIFQ6ICgpID0+IFBhcnRpY2lwYW50IH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLnVzZXJJZCA9ICcnO1xuICAgICAgICBtZXNzYWdlLnNlc3Npb25JZCA9ICcnO1xuICAgICAgICBtZXNzYWdlLnR5cGUgPSAwO1xuICAgICAgICBtZXNzYWdlLmNhdXNlID0gMDtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZWZsZWN0aW9uTWVyZ2VQYXJ0aWFsKHRoaXMsIG1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIGxlbmd0aCwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGFyZ2V0ID8/IHRoaXMuY3JlYXRlKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIHVzZXJfaWQgKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS51c2VySWQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIHNlc3Npb25faWQgKi8gMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZXNzaW9uSWQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuVHJhY2tUeXBlIHR5cGUgKi8gMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50eXBlID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuVHJhY2tVbnB1Ymxpc2hSZWFzb24gY2F1c2UgKi8gNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jYXVzZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlBhcnRpY2lwYW50IHBhcnRpY2lwYW50ICovIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFydGljaXBhbnQgPSBQYXJ0aWNpcGFudC5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UucGFydGljaXBhbnQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJpbmcgdXNlcl9pZCA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnVzZXJJZCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UudXNlcklkKTtcbiAgICAgICAgLyogc3RyaW5nIHNlc3Npb25faWQgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5zZXNzaW9uSWQgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLnNlc3Npb25JZCk7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlRyYWNrVHlwZSB0eXBlID0gMzsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSAhPT0gMClcbiAgICAgICAgICAgIHdyaXRlci50YWcoMywgV2lyZVR5cGUuVmFyaW50KS5pbnQzMihtZXNzYWdlLnR5cGUpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5UcmFja1VucHVibGlzaFJlYXNvbiBjYXVzZSA9IDQ7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmNhdXNlICE9PSAwKVxuICAgICAgICAgICAgd3JpdGVyLnRhZyg0LCBXaXJlVHlwZS5WYXJpbnQpLmludDMyKG1lc3NhZ2UuY2F1c2UpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QYXJ0aWNpcGFudCBwYXJ0aWNpcGFudCA9IDU7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnBhcnRpY2lwYW50KVxuICAgICAgICAgICAgUGFydGljaXBhbnQuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLnBhcnRpY2lwYW50LCB3cml0ZXIudGFnKDUsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRpb25zKS5qb2luKCk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LlRyYWNrVW5wdWJsaXNoZWRcbiAqL1xuY29uc3QgVHJhY2tVbnB1Ymxpc2hlZCA9IG5ldyBUcmFja1VucHVibGlzaGVkJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIEpvaW5SZXF1ZXN0JFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkpvaW5SZXF1ZXN0JywgW1xuICAgICAgICAgICAgeyBubzogMSwgbmFtZTogJ3Rva2VuJywga2luZDogJ3NjYWxhcicsIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovIH0sXG4gICAgICAgICAgICB7IG5vOiAyLCBuYW1lOiAnc2Vzc2lvbl9pZCcsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAzLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdzdWJzY3JpYmVyX3NkcCcsXG4gICAgICAgICAgICAgICAga2luZDogJ3NjYWxhcicsXG4gICAgICAgICAgICAgICAgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiA0LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdjbGllbnRfZGV0YWlscycsXG4gICAgICAgICAgICAgICAga2luZDogJ21lc3NhZ2UnLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IENsaWVudERldGFpbHMsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBubzogNSwgbmFtZTogJ21pZ3JhdGlvbicsIGtpbmQ6ICdtZXNzYWdlJywgVDogKCkgPT4gTWlncmF0aW9uIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDYsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2Zhc3RfcmVjb25uZWN0JyxcbiAgICAgICAgICAgICAgICBraW5kOiAnc2NhbGFyJyxcbiAgICAgICAgICAgICAgICBUOiA4IC8qU2NhbGFyVHlwZS5CT09MKi8sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS50b2tlbiA9ICcnO1xuICAgICAgICBtZXNzYWdlLnNlc3Npb25JZCA9ICcnO1xuICAgICAgICBtZXNzYWdlLnN1YnNjcmliZXJTZHAgPSAnJztcbiAgICAgICAgbWVzc2FnZS5mYXN0UmVjb25uZWN0ID0gZmFsc2U7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyB0b2tlbiAqLyAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRva2VuID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBzZXNzaW9uX2lkICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2Vzc2lvbklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBzdWJzY3JpYmVyX3NkcCAqLyAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnN1YnNjcmliZXJTZHAgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuQ2xpZW50RGV0YWlscyBjbGllbnRfZGV0YWlscyAqLyA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNsaWVudERldGFpbHMgPSBDbGllbnREZXRhaWxzLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5jbGllbnREZXRhaWxzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50Lk1pZ3JhdGlvbiBtaWdyYXRpb24gKi8gNTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5taWdyYXRpb24gPSBNaWdyYXRpb24uaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zLCBtZXNzYWdlLm1pZ3JhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogYm9vbCBmYXN0X3JlY29ubmVjdCAqLyA2OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZhc3RSZWNvbm5lY3QgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJpbmcgdG9rZW4gPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS50b2tlbiAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UudG9rZW4pO1xuICAgICAgICAvKiBzdHJpbmcgc2Vzc2lvbl9pZCA9IDI7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnNlc3Npb25JZCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDIsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2Uuc2Vzc2lvbklkKTtcbiAgICAgICAgLyogc3RyaW5nIHN1YnNjcmliZXJfc2RwID0gMzsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3Vic2NyaWJlclNkcCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDMsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2Uuc3Vic2NyaWJlclNkcCk7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLkNsaWVudERldGFpbHMgY2xpZW50X2RldGFpbHMgPSA0OyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5jbGllbnREZXRhaWxzKVxuICAgICAgICAgICAgQ2xpZW50RGV0YWlscy5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UuY2xpZW50RGV0YWlscywgd3JpdGVyLnRhZyg0LCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50Lk1pZ3JhdGlvbiBtaWdyYXRpb24gPSA1OyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5taWdyYXRpb24pXG4gICAgICAgICAgICBNaWdyYXRpb24uaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLm1pZ3JhdGlvbiwgd3JpdGVyLnRhZyg1LCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiBib29sIGZhc3RfcmVjb25uZWN0ID0gNjsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UuZmFzdFJlY29ubmVjdCAhPT0gZmFsc2UpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDYsIFdpcmVUeXBlLlZhcmludCkuYm9vbChtZXNzYWdlLmZhc3RSZWNvbm5lY3QpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5Kb2luUmVxdWVzdFxuICovXG5jb25zdCBKb2luUmVxdWVzdCA9IG5ldyBKb2luUmVxdWVzdCRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBNaWdyYXRpb24kVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuZXZlbnQuTWlncmF0aW9uJywgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdmcm9tX3NmdV9pZCcsXG4gICAgICAgICAgICAgICAga2luZDogJ3NjYWxhcicsXG4gICAgICAgICAgICAgICAgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAyLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdhbm5vdW5jZWRfdHJhY2tzJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgcmVwZWF0OiAxIC8qUmVwZWF0VHlwZS5QQUNLRUQqLyxcbiAgICAgICAgICAgICAgICBUOiAoKSA9PiBUcmFja0luZm8sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAzLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdzdWJzY3JpcHRpb25zJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgcmVwZWF0OiAxIC8qUmVwZWF0VHlwZS5QQUNLRUQqLyxcbiAgICAgICAgICAgICAgICBUOiAoKSA9PiBUcmFja1N1YnNjcmlwdGlvbkRldGFpbHMsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS5mcm9tU2Z1SWQgPSAnJztcbiAgICAgICAgbWVzc2FnZS5hbm5vdW5jZWRUcmFja3MgPSBbXTtcbiAgICAgICAgbWVzc2FnZS5zdWJzY3JpcHRpb25zID0gW107XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBmcm9tX3NmdV9pZCAqLyAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmZyb21TZnVJZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiByZXBlYXRlZCBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5UcmFja0luZm8gYW5ub3VuY2VkX3RyYWNrcyAqLyAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFubm91bmNlZFRyYWNrcy5wdXNoKFRyYWNrSW5mby5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiByZXBlYXRlZCBzdHJlYW0udmlkZW8uc2Z1LnNpZ25hbC5UcmFja1N1YnNjcmlwdGlvbkRldGFpbHMgc3Vic2NyaXB0aW9ucyAqLyAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnN1YnNjcmlwdGlvbnMucHVzaChUcmFja1N1YnNjcmlwdGlvbkRldGFpbHMuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHN0cmluZyBmcm9tX3NmdV9pZCA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmZyb21TZnVJZCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UuZnJvbVNmdUlkKTtcbiAgICAgICAgLyogcmVwZWF0ZWQgc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuVHJhY2tJbmZvIGFubm91bmNlZF90cmFja3MgPSAyOyAqL1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2UuYW5ub3VuY2VkVHJhY2tzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgVHJhY2tJbmZvLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5hbm5vdW5jZWRUcmFja3NbaV0sIHdyaXRlci50YWcoMiwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgLyogcmVwZWF0ZWQgc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuVHJhY2tTdWJzY3JpcHRpb25EZXRhaWxzIHN1YnNjcmlwdGlvbnMgPSAzOyAqL1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2Uuc3Vic2NyaXB0aW9ucy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIFRyYWNrU3Vic2NyaXB0aW9uRGV0YWlscy5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2Uuc3Vic2NyaXB0aW9uc1tpXSwgd3JpdGVyLnRhZygzLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5NaWdyYXRpb25cbiAqL1xuY29uc3QgTWlncmF0aW9uID0gbmV3IE1pZ3JhdGlvbiRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBKb2luUmVzcG9uc2UkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuZXZlbnQuSm9pblJlc3BvbnNlJywgW1xuICAgICAgICAgICAgeyBubzogMSwgbmFtZTogJ2NhbGxfc3RhdGUnLCBraW5kOiAnbWVzc2FnZScsIFQ6ICgpID0+IENhbGxTdGF0ZSQxIH0sXG4gICAgICAgICAgICB7IG5vOiAyLCBuYW1lOiAncmVjb25uZWN0ZWQnLCBraW5kOiAnc2NhbGFyJywgVDogOCAvKlNjYWxhclR5cGUuQk9PTCovIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLnJlY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLkNhbGxTdGF0ZSBjYWxsX3N0YXRlICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY2FsbFN0YXRlID0gQ2FsbFN0YXRlJDEuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zLCBtZXNzYWdlLmNhbGxTdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogYm9vbCByZWNvbm5lY3RlZCAqLyAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJlY29ubmVjdGVkID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuQ2FsbFN0YXRlIGNhbGxfc3RhdGUgPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5jYWxsU3RhdGUpXG4gICAgICAgICAgICBDYWxsU3RhdGUkMS5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UuY2FsbFN0YXRlLCB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRpb25zKS5qb2luKCk7XG4gICAgICAgIC8qIGJvb2wgcmVjb25uZWN0ZWQgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5yZWNvbm5lY3RlZCAhPT0gZmFsc2UpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDIsIFdpcmVUeXBlLlZhcmludCkuYm9vbChtZXNzYWdlLnJlY29ubmVjdGVkKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuSm9pblJlc3BvbnNlXG4gKi9cbmNvbnN0IEpvaW5SZXNwb25zZSA9IG5ldyBKb2luUmVzcG9uc2UkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgUGFydGljaXBhbnRKb2luZWQkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuZXZlbnQuUGFydGljaXBhbnRKb2luZWQnLCBbXG4gICAgICAgICAgICB7IG5vOiAxLCBuYW1lOiAnY2FsbF9jaWQnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgICAgIHsgbm86IDIsIG5hbWU6ICdwYXJ0aWNpcGFudCcsIGtpbmQ6ICdtZXNzYWdlJywgVDogKCkgPT4gUGFydGljaXBhbnQgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2UuY2FsbENpZCA9ICcnO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgY2FsbF9jaWQgKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jYWxsQ2lkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlBhcnRpY2lwYW50IHBhcnRpY2lwYW50ICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFydGljaXBhbnQgPSBQYXJ0aWNpcGFudC5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UucGFydGljaXBhbnQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJpbmcgY2FsbF9jaWQgPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5jYWxsQ2lkICE9PSAnJylcbiAgICAgICAgICAgIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5zdHJpbmcobWVzc2FnZS5jYWxsQ2lkKTtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuUGFydGljaXBhbnQgcGFydGljaXBhbnQgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5wYXJ0aWNpcGFudClcbiAgICAgICAgICAgIFBhcnRpY2lwYW50LmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5wYXJ0aWNpcGFudCwgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5QYXJ0aWNpcGFudEpvaW5lZFxuICovXG5jb25zdCBQYXJ0aWNpcGFudEpvaW5lZCA9IG5ldyBQYXJ0aWNpcGFudEpvaW5lZCRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBQYXJ0aWNpcGFudExlZnQkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuZXZlbnQuUGFydGljaXBhbnRMZWZ0JywgW1xuICAgICAgICAgICAgeyBubzogMSwgbmFtZTogJ2NhbGxfY2lkJywga2luZDogJ3NjYWxhcicsIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovIH0sXG4gICAgICAgICAgICB7IG5vOiAyLCBuYW1lOiAncGFydGljaXBhbnQnLCBraW5kOiAnbWVzc2FnZScsIFQ6ICgpID0+IFBhcnRpY2lwYW50IH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLmNhbGxDaWQgPSAnJztcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZWZsZWN0aW9uTWVyZ2VQYXJ0aWFsKHRoaXMsIG1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIGxlbmd0aCwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGFyZ2V0ID8/IHRoaXMuY3JlYXRlKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIGNhbGxfY2lkICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY2FsbENpZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5QYXJ0aWNpcGFudCBwYXJ0aWNpcGFudCAqLyAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBhcnRpY2lwYW50ID0gUGFydGljaXBhbnQuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zLCBtZXNzYWdlLnBhcnRpY2lwYW50KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogc3RyaW5nIGNhbGxfY2lkID0gMTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UuY2FsbENpZCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UuY2FsbENpZCk7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLlBhcnRpY2lwYW50IHBhcnRpY2lwYW50ID0gMjsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UucGFydGljaXBhbnQpXG4gICAgICAgICAgICBQYXJ0aWNpcGFudC5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UucGFydGljaXBhbnQsIHdyaXRlci50YWcoMiwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuUGFydGljaXBhbnRMZWZ0XG4gKi9cbmNvbnN0IFBhcnRpY2lwYW50TGVmdCA9IG5ldyBQYXJ0aWNpcGFudExlZnQkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgU3Vic2NyaWJlck9mZmVyJFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LlN1YnNjcmliZXJPZmZlcicsIFtcbiAgICAgICAgICAgIHsgbm86IDEsIG5hbWU6ICdpY2VfcmVzdGFydCcsIGtpbmQ6ICdzY2FsYXInLCBUOiA4IC8qU2NhbGFyVHlwZS5CT09MKi8gfSxcbiAgICAgICAgICAgIHsgbm86IDIsIG5hbWU6ICdzZHAnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2UuaWNlUmVzdGFydCA9IGZhbHNlO1xuICAgICAgICBtZXNzYWdlLnNkcCA9ICcnO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBib29sIGljZV9yZXN0YXJ0ICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaWNlUmVzdGFydCA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIHNkcCAqLyAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNkcCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogYm9vbCBpY2VfcmVzdGFydCA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmljZVJlc3RhcnQgIT09IGZhbHNlKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygxLCBXaXJlVHlwZS5WYXJpbnQpLmJvb2wobWVzc2FnZS5pY2VSZXN0YXJ0KTtcbiAgICAgICAgLyogc3RyaW5nIHNkcCA9IDI7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnNkcCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDIsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2Uuc2RwKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuU3Vic2NyaWJlck9mZmVyXG4gKi9cbmNvbnN0IFN1YnNjcmliZXJPZmZlciA9IG5ldyBTdWJzY3JpYmVyT2ZmZXIkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgUHVibGlzaGVyQW5zd2VyJFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LlB1Ymxpc2hlckFuc3dlcicsIFtcbiAgICAgICAgICAgIHsgbm86IDEsIG5hbWU6ICdzZHAnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2Uuc2RwID0gJyc7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBzZHAgKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZHAgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHN0cmluZyBzZHAgPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5zZHAgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygxLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLnNkcCk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LlB1Ymxpc2hlckFuc3dlclxuICovXG5jb25zdCBQdWJsaXNoZXJBbnN3ZXIgPSBuZXcgUHVibGlzaGVyQW5zd2VyJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIENvbm5lY3Rpb25RdWFsaXR5Q2hhbmdlZCRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5Db25uZWN0aW9uUXVhbGl0eUNoYW5nZWQnLCBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2Nvbm5lY3Rpb25fcXVhbGl0eV91cGRhdGVzJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgcmVwZWF0OiAxIC8qUmVwZWF0VHlwZS5QQUNLRUQqLyxcbiAgICAgICAgICAgICAgICBUOiAoKSA9PiBDb25uZWN0aW9uUXVhbGl0eUluZm8sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS5jb25uZWN0aW9uUXVhbGl0eVVwZGF0ZXMgPSBbXTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZWZsZWN0aW9uTWVyZ2VQYXJ0aWFsKHRoaXMsIG1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIGxlbmd0aCwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGFyZ2V0ID8/IHRoaXMuY3JlYXRlKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgLyogcmVwZWF0ZWQgc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5Db25uZWN0aW9uUXVhbGl0eUluZm8gY29ubmVjdGlvbl9xdWFsaXR5X3VwZGF0ZXMgKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jb25uZWN0aW9uUXVhbGl0eVVwZGF0ZXMucHVzaChDb25uZWN0aW9uUXVhbGl0eUluZm8uaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHJlcGVhdGVkIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuQ29ubmVjdGlvblF1YWxpdHlJbmZvIGNvbm5lY3Rpb25fcXVhbGl0eV91cGRhdGVzID0gMTsgKi9cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXNzYWdlLmNvbm5lY3Rpb25RdWFsaXR5VXBkYXRlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIENvbm5lY3Rpb25RdWFsaXR5SW5mby5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UuY29ubmVjdGlvblF1YWxpdHlVcGRhdGVzW2ldLCB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRpb25zKS5qb2luKCk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkNvbm5lY3Rpb25RdWFsaXR5Q2hhbmdlZFxuICovXG5jb25zdCBDb25uZWN0aW9uUXVhbGl0eUNoYW5nZWQgPSBuZXcgQ29ubmVjdGlvblF1YWxpdHlDaGFuZ2VkJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIENvbm5lY3Rpb25RdWFsaXR5SW5mbyRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5Db25uZWN0aW9uUXVhbGl0eUluZm8nLCBbXG4gICAgICAgICAgICB7IG5vOiAxLCBuYW1lOiAndXNlcl9pZCcsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAgeyBubzogMiwgbmFtZTogJ3Nlc3Npb25faWQnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnY29ubmVjdGlvbl9xdWFsaXR5JyxcbiAgICAgICAgICAgICAgICBraW5kOiAnZW51bScsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAnc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuQ29ubmVjdGlvblF1YWxpdHknLFxuICAgICAgICAgICAgICAgICAgICBDb25uZWN0aW9uUXVhbGl0eSxcbiAgICAgICAgICAgICAgICAgICAgJ0NPTk5FQ1RJT05fUVVBTElUWV8nLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS51c2VySWQgPSAnJztcbiAgICAgICAgbWVzc2FnZS5zZXNzaW9uSWQgPSAnJztcbiAgICAgICAgbWVzc2FnZS5jb25uZWN0aW9uUXVhbGl0eSA9IDA7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyB1c2VyX2lkICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudXNlcklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBzZXNzaW9uX2lkICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2Vzc2lvbklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLkNvbm5lY3Rpb25RdWFsaXR5IGNvbm5lY3Rpb25fcXVhbGl0eSAqLyAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvbm5lY3Rpb25RdWFsaXR5ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHN0cmluZyB1c2VyX2lkID0gMTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UudXNlcklkICE9PSAnJylcbiAgICAgICAgICAgIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5zdHJpbmcobWVzc2FnZS51c2VySWQpO1xuICAgICAgICAvKiBzdHJpbmcgc2Vzc2lvbl9pZCA9IDI7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnNlc3Npb25JZCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDIsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2Uuc2Vzc2lvbklkKTtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuQ29ubmVjdGlvblF1YWxpdHkgY29ubmVjdGlvbl9xdWFsaXR5ID0gMzsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UuY29ubmVjdGlvblF1YWxpdHkgIT09IDApXG4gICAgICAgICAgICB3cml0ZXIudGFnKDMsIFdpcmVUeXBlLlZhcmludCkuaW50MzIobWVzc2FnZS5jb25uZWN0aW9uUXVhbGl0eSk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkNvbm5lY3Rpb25RdWFsaXR5SW5mb1xuICovXG5jb25zdCBDb25uZWN0aW9uUXVhbGl0eUluZm8gPSBuZXcgQ29ubmVjdGlvblF1YWxpdHlJbmZvJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIERvbWluYW50U3BlYWtlckNoYW5nZWQkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuZXZlbnQuRG9taW5hbnRTcGVha2VyQ2hhbmdlZCcsIFtcbiAgICAgICAgICAgIHsgbm86IDEsIG5hbWU6ICd1c2VyX2lkJywga2luZDogJ3NjYWxhcicsIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovIH0sXG4gICAgICAgICAgICB7IG5vOiAyLCBuYW1lOiAnc2Vzc2lvbl9pZCcsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS51c2VySWQgPSAnJztcbiAgICAgICAgbWVzc2FnZS5zZXNzaW9uSWQgPSAnJztcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZWZsZWN0aW9uTWVyZ2VQYXJ0aWFsKHRoaXMsIG1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIGxlbmd0aCwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGFyZ2V0ID8/IHRoaXMuY3JlYXRlKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIHVzZXJfaWQgKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS51c2VySWQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyaW5nIHNlc3Npb25faWQgKi8gMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZXNzaW9uSWQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHN0cmluZyB1c2VyX2lkID0gMTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UudXNlcklkICE9PSAnJylcbiAgICAgICAgICAgIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5zdHJpbmcobWVzc2FnZS51c2VySWQpO1xuICAgICAgICAvKiBzdHJpbmcgc2Vzc2lvbl9pZCA9IDI7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnNlc3Npb25JZCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDIsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2Uuc2Vzc2lvbklkKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuRG9taW5hbnRTcGVha2VyQ2hhbmdlZFxuICovXG5jb25zdCBEb21pbmFudFNwZWFrZXJDaGFuZ2VkID0gbmV3IERvbWluYW50U3BlYWtlckNoYW5nZWQkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgQXVkaW9MZXZlbCRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5BdWRpb0xldmVsJywgW1xuICAgICAgICAgICAgeyBubzogMSwgbmFtZTogJ3VzZXJfaWQnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgICAgIHsgbm86IDIsIG5hbWU6ICdzZXNzaW9uX2lkJywga2luZDogJ3NjYWxhcicsIFQ6IDkgLypTY2FsYXJUeXBlLlNUUklORyovIH0sXG4gICAgICAgICAgICB7IG5vOiAzLCBuYW1lOiAnbGV2ZWwnLCBraW5kOiAnc2NhbGFyJywgVDogMiAvKlNjYWxhclR5cGUuRkxPQVQqLyB9LFxuICAgICAgICAgICAgeyBubzogNCwgbmFtZTogJ2lzX3NwZWFraW5nJywga2luZDogJ3NjYWxhcicsIFQ6IDggLypTY2FsYXJUeXBlLkJPT0wqLyB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS51c2VySWQgPSAnJztcbiAgICAgICAgbWVzc2FnZS5zZXNzaW9uSWQgPSAnJztcbiAgICAgICAgbWVzc2FnZS5sZXZlbCA9IDA7XG4gICAgICAgIG1lc3NhZ2UuaXNTcGVha2luZyA9IGZhbHNlO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgdXNlcl9pZCAqLyAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnVzZXJJZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJpbmcgc2Vzc2lvbl9pZCAqLyAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNlc3Npb25JZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBmbG9hdCBsZXZlbCAqLyAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmxldmVsID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogYm9vbCBpc19zcGVha2luZyAqLyA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmlzU3BlYWtpbmcgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBzdHJpbmcgdXNlcl9pZCA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnVzZXJJZCAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UudXNlcklkKTtcbiAgICAgICAgLyogc3RyaW5nIHNlc3Npb25faWQgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5zZXNzaW9uSWQgIT09ICcnKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLnN0cmluZyhtZXNzYWdlLnNlc3Npb25JZCk7XG4gICAgICAgIC8qIGZsb2F0IGxldmVsID0gMzsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UubGV2ZWwgIT09IDApXG4gICAgICAgICAgICB3cml0ZXIudGFnKDMsIFdpcmVUeXBlLkJpdDMyKS5mbG9hdChtZXNzYWdlLmxldmVsKTtcbiAgICAgICAgLyogYm9vbCBpc19zcGVha2luZyA9IDQ7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmlzU3BlYWtpbmcgIT09IGZhbHNlKVxuICAgICAgICAgICAgd3JpdGVyLnRhZyg0LCBXaXJlVHlwZS5WYXJpbnQpLmJvb2wobWVzc2FnZS5pc1NwZWFraW5nKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuQXVkaW9MZXZlbFxuICovXG5jb25zdCBBdWRpb0xldmVsID0gbmV3IEF1ZGlvTGV2ZWwkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgQXVkaW9MZXZlbENoYW5nZWQkVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuZXZlbnQuQXVkaW9MZXZlbENoYW5nZWQnLCBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2F1ZGlvX2xldmVscycsXG4gICAgICAgICAgICAgICAga2luZDogJ21lc3NhZ2UnLFxuICAgICAgICAgICAgICAgIHJlcGVhdDogMSAvKlJlcGVhdFR5cGUuUEFDS0VEKi8sXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gQXVkaW9MZXZlbCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLmF1ZGlvTGV2ZWxzID0gW107XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHJlcGVhdGVkIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuQXVkaW9MZXZlbCBhdWRpb19sZXZlbHMgKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hdWRpb0xldmVscy5wdXNoKEF1ZGlvTGV2ZWwuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHJlcGVhdGVkIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuQXVkaW9MZXZlbCBhdWRpb19sZXZlbHMgPSAxOyAqL1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2UuYXVkaW9MZXZlbHMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBBdWRpb0xldmVsLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5hdWRpb0xldmVsc1tpXSwgd3JpdGVyLnRhZygxLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5BdWRpb0xldmVsQ2hhbmdlZFxuICovXG5jb25zdCBBdWRpb0xldmVsQ2hhbmdlZCA9IG5ldyBBdWRpb0xldmVsQ2hhbmdlZCRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBBdWRpb01lZGlhUmVxdWVzdCRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5BdWRpb01lZGlhUmVxdWVzdCcsIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnY2hhbm5lbF9jb3VudCcsXG4gICAgICAgICAgICAgICAga2luZDogJ3NjYWxhcicsXG4gICAgICAgICAgICAgICAgVDogNSAvKlNjYWxhclR5cGUuSU5UMzIqLyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLmNoYW5uZWxDb3VudCA9IDA7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIGludDMyIGNoYW5uZWxfY291bnQgKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jaGFubmVsQ291bnQgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogaW50MzIgY2hhbm5lbF9jb3VudCA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmNoYW5uZWxDb3VudCAhPT0gMClcbiAgICAgICAgICAgIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuVmFyaW50KS5pbnQzMihtZXNzYWdlLmNoYW5uZWxDb3VudCk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkF1ZGlvTWVkaWFSZXF1ZXN0XG4gKi9cbmNvbnN0IEF1ZGlvTWVkaWFSZXF1ZXN0ID0gbmV3IEF1ZGlvTWVkaWFSZXF1ZXN0JFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIEF1ZGlvU2VuZGVyJFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkF1ZGlvU2VuZGVyJywgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdtZWRpYV9yZXF1ZXN0JyxcbiAgICAgICAgICAgICAgICBraW5kOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gQXVkaW9NZWRpYVJlcXVlc3QsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBubzogMiwgbmFtZTogJ2NvZGVjJywga2luZDogJ21lc3NhZ2UnLCBUOiAoKSA9PiBDb2RlYyB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZWZsZWN0aW9uTWVyZ2VQYXJ0aWFsKHRoaXMsIG1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIGxlbmd0aCwgb3B0aW9ucywgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdGFyZ2V0ID8/IHRoaXMuY3JlYXRlKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBsZXQgW2ZpZWxkTm8sIHdpcmVUeXBlXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5BdWRpb01lZGlhUmVxdWVzdCBtZWRpYV9yZXF1ZXN0ICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWVkaWFSZXF1ZXN0ID0gQXVkaW9NZWRpYVJlcXVlc3QuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zLCBtZXNzYWdlLm1lZGlhUmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuQ29kZWMgY29kZWMgKi8gMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jb2RlYyA9IENvZGVjLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5jb2RlYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuQXVkaW9NZWRpYVJlcXVlc3QgbWVkaWFfcmVxdWVzdCA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLm1lZGlhUmVxdWVzdClcbiAgICAgICAgICAgIEF1ZGlvTWVkaWFSZXF1ZXN0LmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5tZWRpYVJlcXVlc3QsIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuQ29kZWMgY29kZWMgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5jb2RlYylcbiAgICAgICAgICAgIENvZGVjLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5jb2RlYywgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5BdWRpb1NlbmRlclxuICovXG5jb25zdCBBdWRpb1NlbmRlciA9IG5ldyBBdWRpb1NlbmRlciRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBWaWRlb01lZGlhUmVxdWVzdCRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5WaWRlb01lZGlhUmVxdWVzdCcsIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnaWRlYWxfaGVpZ2h0JyxcbiAgICAgICAgICAgICAgICBraW5kOiAnc2NhbGFyJyxcbiAgICAgICAgICAgICAgICBUOiA1IC8qU2NhbGFyVHlwZS5JTlQzMiovLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgbm86IDIsIG5hbWU6ICdpZGVhbF93aWR0aCcsIGtpbmQ6ICdzY2FsYXInLCBUOiA1IC8qU2NhbGFyVHlwZS5JTlQzMiovIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDMsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2lkZWFsX2ZyYW1lX3JhdGUnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdzY2FsYXInLFxuICAgICAgICAgICAgICAgIFQ6IDUgLypTY2FsYXJUeXBlLklOVDMyKi8sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY3JlYXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnbG9iYWxUaGlzLk9iamVjdC5jcmVhdGUodGhpcy5tZXNzYWdlUHJvdG90eXBlKTtcbiAgICAgICAgbWVzc2FnZS5pZGVhbEhlaWdodCA9IDA7XG4gICAgICAgIG1lc3NhZ2UuaWRlYWxXaWR0aCA9IDA7XG4gICAgICAgIG1lc3NhZ2UuaWRlYWxGcmFtZVJhdGUgPSAwO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBpbnQzMiBpZGVhbF9oZWlnaHQgKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pZGVhbEhlaWdodCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIGludDMyIGlkZWFsX3dpZHRoICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaWRlYWxXaWR0aCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIGludDMyIGlkZWFsX2ZyYW1lX3JhdGUgKi8gMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pZGVhbEZyYW1lUmF0ZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiBpbnQzMiBpZGVhbF9oZWlnaHQgPSAxOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5pZGVhbEhlaWdodCAhPT0gMClcbiAgICAgICAgICAgIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuVmFyaW50KS5pbnQzMihtZXNzYWdlLmlkZWFsSGVpZ2h0KTtcbiAgICAgICAgLyogaW50MzIgaWRlYWxfd2lkdGggPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5pZGVhbFdpZHRoICE9PSAwKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5WYXJpbnQpLmludDMyKG1lc3NhZ2UuaWRlYWxXaWR0aCk7XG4gICAgICAgIC8qIGludDMyIGlkZWFsX2ZyYW1lX3JhdGUgPSAzOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5pZGVhbEZyYW1lUmF0ZSAhPT0gMClcbiAgICAgICAgICAgIHdyaXRlci50YWcoMywgV2lyZVR5cGUuVmFyaW50KS5pbnQzMihtZXNzYWdlLmlkZWFsRnJhbWVSYXRlKTtcbiAgICAgICAgbGV0IHUgPSBvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcztcbiAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgKHUgPT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25Xcml0ZSA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBAZ2VuZXJhdGVkIE1lc3NhZ2VUeXBlIGZvciBwcm90b2J1ZiBtZXNzYWdlIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuVmlkZW9NZWRpYVJlcXVlc3RcbiAqL1xuY29uc3QgVmlkZW9NZWRpYVJlcXVlc3QgPSBuZXcgVmlkZW9NZWRpYVJlcXVlc3QkVHlwZSgpO1xuLy8gQGdlbmVyYXRlZCBtZXNzYWdlIHR5cGUgd2l0aCByZWZsZWN0aW9uIGluZm9ybWF0aW9uLCBtYXkgcHJvdmlkZSBzcGVlZCBvcHRpbWl6ZWQgbWV0aG9kc1xuY2xhc3MgVmlkZW9MYXllclNldHRpbmckVHlwZSBleHRlbmRzIE1lc3NhZ2VUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbS52aWRlby5zZnUuZXZlbnQuVmlkZW9MYXllclNldHRpbmcnLCBbXG4gICAgICAgICAgICB7IG5vOiAxLCBuYW1lOiAnbmFtZScsIGtpbmQ6ICdzY2FsYXInLCBUOiA5IC8qU2NhbGFyVHlwZS5TVFJJTkcqLyB9LFxuICAgICAgICAgICAgeyBubzogMiwgbmFtZTogJ2FjdGl2ZScsIGtpbmQ6ICdzY2FsYXInLCBUOiA4IC8qU2NhbGFyVHlwZS5CT09MKi8gfSxcbiAgICAgICAgICAgIHsgbm86IDMsIG5hbWU6ICdtYXhfYml0cmF0ZScsIGtpbmQ6ICdzY2FsYXInLCBUOiA1IC8qU2NhbGFyVHlwZS5JTlQzMiovIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDQsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3NjYWxlX3Jlc29sdXRpb25fZG93bl9ieScsXG4gICAgICAgICAgICAgICAga2luZDogJ3NjYWxhcicsXG4gICAgICAgICAgICAgICAgVDogMiAvKlNjYWxhclR5cGUuRkxPQVQqLyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDUsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3ByaW9yaXR5JyxcbiAgICAgICAgICAgICAgICBraW5kOiAnZW51bScsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAnc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5WaWRlb0xheWVyU2V0dGluZy5Qcmlvcml0eScsXG4gICAgICAgICAgICAgICAgICAgIFZpZGVvTGF5ZXJTZXR0aW5nX1ByaW9yaXR5LFxuICAgICAgICAgICAgICAgICAgICAnUFJJT1JJVFlfJyxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgbm86IDYsIG5hbWU6ICdjb2RlYycsIGtpbmQ6ICdtZXNzYWdlJywgVDogKCkgPT4gQ29kZWMgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBubzogNyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnbWF4X2ZyYW1lcmF0ZScsXG4gICAgICAgICAgICAgICAga2luZDogJ3NjYWxhcicsXG4gICAgICAgICAgICAgICAgVDogMTMgLypTY2FsYXJUeXBlLlVJTlQzMiovLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2UubmFtZSA9ICcnO1xuICAgICAgICBtZXNzYWdlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBtZXNzYWdlLm1heEJpdHJhdGUgPSAwO1xuICAgICAgICBtZXNzYWdlLnNjYWxlUmVzb2x1dGlvbkRvd25CeSA9IDA7XG4gICAgICAgIG1lc3NhZ2UucHJpb3JpdHkgPSAwO1xuICAgICAgICBtZXNzYWdlLm1heEZyYW1lcmF0ZSA9IDA7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBuYW1lICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubmFtZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBib29sIGFjdGl2ZSAqLyAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFjdGl2ZSA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogaW50MzIgbWF4X2JpdHJhdGUgKi8gMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tYXhCaXRyYXRlID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogZmxvYXQgc2NhbGVfcmVzb2x1dGlvbl9kb3duX2J5ICovIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2NhbGVSZXNvbHV0aW9uRG93bkJ5ID0gcmVhZGVyLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5WaWRlb0xheWVyU2V0dGluZy5Qcmlvcml0eSBwcmlvcml0eSAqLyA1OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnByaW9yaXR5ID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuQ29kZWMgY29kZWMgKi8gNjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jb2RlYyA9IENvZGVjLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5jb2RlYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogdWludDMyIG1heF9mcmFtZXJhdGUgKi8gNzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5tYXhGcmFtZXJhdGUgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHN0cmluZyBuYW1lID0gMTsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UubmFtZSAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UubmFtZSk7XG4gICAgICAgIC8qIGJvb2wgYWN0aXZlID0gMjsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UuYWN0aXZlICE9PSBmYWxzZSlcbiAgICAgICAgICAgIHdyaXRlci50YWcoMiwgV2lyZVR5cGUuVmFyaW50KS5ib29sKG1lc3NhZ2UuYWN0aXZlKTtcbiAgICAgICAgLyogaW50MzIgbWF4X2JpdHJhdGUgPSAzOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5tYXhCaXRyYXRlICE9PSAwKVxuICAgICAgICAgICAgd3JpdGVyLnRhZygzLCBXaXJlVHlwZS5WYXJpbnQpLmludDMyKG1lc3NhZ2UubWF4Qml0cmF0ZSk7XG4gICAgICAgIC8qIGZsb2F0IHNjYWxlX3Jlc29sdXRpb25fZG93bl9ieSA9IDQ7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnNjYWxlUmVzb2x1dGlvbkRvd25CeSAhPT0gMClcbiAgICAgICAgICAgIHdyaXRlci50YWcoNCwgV2lyZVR5cGUuQml0MzIpLmZsb2F0KG1lc3NhZ2Uuc2NhbGVSZXNvbHV0aW9uRG93bkJ5KTtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5WaWRlb0xheWVyU2V0dGluZy5Qcmlvcml0eSBwcmlvcml0eSA9IDU7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnByaW9yaXR5ICE9PSAwKVxuICAgICAgICAgICAgd3JpdGVyLnRhZyg1LCBXaXJlVHlwZS5WYXJpbnQpLmludDMyKG1lc3NhZ2UucHJpb3JpdHkpO1xuICAgICAgICAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5Db2RlYyBjb2RlYyA9IDY7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmNvZGVjKVxuICAgICAgICAgICAgQ29kZWMuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLmNvZGVjLCB3cml0ZXIudGFnKDYsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRpb25zKS5qb2luKCk7XG4gICAgICAgIC8qIHVpbnQzMiBtYXhfZnJhbWVyYXRlID0gNzsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UubWF4RnJhbWVyYXRlICE9PSAwKVxuICAgICAgICAgICAgd3JpdGVyLnRhZyg3LCBXaXJlVHlwZS5WYXJpbnQpLnVpbnQzMihtZXNzYWdlLm1heEZyYW1lcmF0ZSk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LlZpZGVvTGF5ZXJTZXR0aW5nXG4gKi9cbmNvbnN0IFZpZGVvTGF5ZXJTZXR0aW5nID0gbmV3IFZpZGVvTGF5ZXJTZXR0aW5nJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIFZpZGVvU2VuZGVyJFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LlZpZGVvU2VuZGVyJywgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdtZWRpYV9yZXF1ZXN0JyxcbiAgICAgICAgICAgICAgICBraW5kOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgVDogKCkgPT4gVmlkZW9NZWRpYVJlcXVlc3QsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBubzogMiwgbmFtZTogJ2NvZGVjJywga2luZDogJ21lc3NhZ2UnLCBUOiAoKSA9PiBDb2RlYyB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAzLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdsYXllcnMnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICByZXBlYXQ6IDEgLypSZXBlYXRUeXBlLlBBQ0tFRCovLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IFZpZGVvTGF5ZXJTZXR0aW5nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2UubGF5ZXJzID0gW107XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuVmlkZW9NZWRpYVJlcXVlc3QgbWVkaWFfcmVxdWVzdCAqLyAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1lZGlhUmVxdWVzdCA9IFZpZGVvTWVkaWFSZXF1ZXN0LmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucywgbWVzc2FnZS5tZWRpYVJlcXVlc3QpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLkNvZGVjIGNvZGVjICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29kZWMgPSBDb2RlYy5pbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCByZWFkZXIudWludDMyKCksIG9wdGlvbnMsIG1lc3NhZ2UuY29kZWMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHJlcGVhdGVkIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuVmlkZW9MYXllclNldHRpbmcgbGF5ZXJzICovIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubGF5ZXJzLnB1c2goVmlkZW9MYXllclNldHRpbmcuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gb3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gJ3Rocm93JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKGBVbmtub3duIGZpZWxkICR7ZmllbGROb30gKHdpcmUgdHlwZSAke3dpcmVUeXBlfSkgZm9yICR7dGhpcy50eXBlTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSByZWFkZXIuc2tpcCh3aXJlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vblJlYWQgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuVmlkZW9NZWRpYVJlcXVlc3QgbWVkaWFfcmVxdWVzdCA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLm1lZGlhUmVxdWVzdClcbiAgICAgICAgICAgIFZpZGVvTWVkaWFSZXF1ZXN0LmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5tZWRpYVJlcXVlc3QsIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCksIG9wdGlvbnMpLmpvaW4oKTtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuQ29kZWMgY29kZWMgPSAyOyAqL1xuICAgICAgICBpZiAobWVzc2FnZS5jb2RlYylcbiAgICAgICAgICAgIENvZGVjLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5jb2RlYywgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiByZXBlYXRlZCBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LlZpZGVvTGF5ZXJTZXR0aW5nIGxheWVycyA9IDM7ICovXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzc2FnZS5sYXllcnMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBWaWRlb0xheWVyU2V0dGluZy5pbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UubGF5ZXJzW2ldLCB3cml0ZXIudGFnKDMsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRpb25zKS5qb2luKCk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LlZpZGVvU2VuZGVyXG4gKi9cbmNvbnN0IFZpZGVvU2VuZGVyID0gbmV3IFZpZGVvU2VuZGVyJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIENoYW5nZVB1Ymxpc2hRdWFsaXR5JFR5cGUgZXh0ZW5kcyBNZXNzYWdlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkNoYW5nZVB1Ymxpc2hRdWFsaXR5JywgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5vOiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdhdWRpb19zZW5kZXJzJyxcbiAgICAgICAgICAgICAgICBraW5kOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgcmVwZWF0OiAxIC8qUmVwZWF0VHlwZS5QQUNLRUQqLyxcbiAgICAgICAgICAgICAgICBUOiAoKSA9PiBBdWRpb1NlbmRlcixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDIsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3ZpZGVvX3NlbmRlcnMnLFxuICAgICAgICAgICAgICAgIGtpbmQ6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICByZXBlYXQ6IDEgLypSZXBlYXRUeXBlLlBBQ0tFRCovLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IFZpZGVvU2VuZGVyLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2UuYXVkaW9TZW5kZXJzID0gW107XG4gICAgICAgIG1lc3NhZ2UudmlkZW9TZW5kZXJzID0gW107XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHJlcGVhdGVkIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuQXVkaW9TZW5kZXIgYXVkaW9fc2VuZGVycyAqLyAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmF1ZGlvU2VuZGVycy5wdXNoKEF1ZGlvU2VuZGVyLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucykpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHJlcGVhdGVkIHN0cmVhbS52aWRlby5zZnUuZXZlbnQuVmlkZW9TZW5kZXIgdmlkZW9fc2VuZGVycyAqLyAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZpZGVvU2VuZGVycy5wdXNoKFZpZGVvU2VuZGVyLmludGVybmFsQmluYXJ5UmVhZChyZWFkZXIsIHJlYWRlci51aW50MzIoKSwgb3B0aW9ucykpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IG9wdGlvbnMucmVhZFVua25vd25GaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgPT09ICd0aHJvdycpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsVGhpcy5FcnJvcihgVW5rbm93biBmaWVsZCAke2ZpZWxkTm99ICh3aXJlIHR5cGUgJHt3aXJlVHlwZX0pIGZvciAke3RoaXMudHlwZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAodSA9PT0gdHJ1ZSA/IFVua25vd25GaWVsZEhhbmRsZXIub25SZWFkIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVdyaXRlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAvKiByZXBlYXRlZCBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkF1ZGlvU2VuZGVyIGF1ZGlvX3NlbmRlcnMgPSAxOyAqL1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2UuYXVkaW9TZW5kZXJzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgQXVkaW9TZW5kZXIuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLmF1ZGlvU2VuZGVyc1tpXSwgd3JpdGVyLnRhZygxLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICAvKiByZXBlYXRlZCBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LlZpZGVvU2VuZGVyIHZpZGVvX3NlbmRlcnMgPSAyOyAqL1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2UudmlkZW9TZW5kZXJzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgVmlkZW9TZW5kZXIuaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLnZpZGVvU2VuZGVyc1tpXSwgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmZvcmsoKSwgb3B0aW9ucykuam9pbigpO1xuICAgICAgICBsZXQgdSA9IG9wdGlvbnMud3JpdGVVbmtub3duRmllbGRzO1xuICAgICAgICBpZiAodSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAodSA9PSB0cnVlID8gVW5rbm93bkZpZWxkSGFuZGxlci5vbldyaXRlIDogdSkodGhpcy50eXBlTmFtZSwgbWVzc2FnZSwgd3JpdGVyKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9XG59XG4vKipcbiAqIEBnZW5lcmF0ZWQgTWVzc2FnZVR5cGUgZm9yIHByb3RvYnVmIG1lc3NhZ2Ugc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5DaGFuZ2VQdWJsaXNoUXVhbGl0eVxuICovXG5jb25zdCBDaGFuZ2VQdWJsaXNoUXVhbGl0eSA9IG5ldyBDaGFuZ2VQdWJsaXNoUXVhbGl0eSRUeXBlKCk7XG4vLyBAZ2VuZXJhdGVkIG1lc3NhZ2UgdHlwZSB3aXRoIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24sIG1heSBwcm92aWRlIHNwZWVkIG9wdGltaXplZCBtZXRob2RzXG5jbGFzcyBDYWxsR3JhbnRzVXBkYXRlZCRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5DYWxsR3JhbnRzVXBkYXRlZCcsIFtcbiAgICAgICAgICAgIHsgbm86IDEsIG5hbWU6ICdjdXJyZW50X2dyYW50cycsIGtpbmQ6ICdtZXNzYWdlJywgVDogKCkgPT4gQ2FsbEdyYW50cyB9LFxuICAgICAgICAgICAgeyBubzogMiwgbmFtZTogJ21lc3NhZ2UnLCBraW5kOiAnc2NhbGFyJywgVDogOSAvKlNjYWxhclR5cGUuU1RSSU5HKi8gfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2xvYmFsVGhpcy5PYmplY3QuY3JlYXRlKHRoaXMubWVzc2FnZVByb3RvdHlwZSk7XG4gICAgICAgIG1lc3NhZ2UubWVzc2FnZSA9ICcnO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJlZmxlY3Rpb25NZXJnZVBhcnRpYWwodGhpcywgbWVzc2FnZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgbGVuZ3RoLCBvcHRpb25zLCB0YXJnZXQpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0YXJnZXQgPz8gdGhpcy5jcmVhdGUoKSwgZW5kID0gcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGxldCBbZmllbGRObywgd2lyZVR5cGVdID0gcmVhZGVyLnRhZygpO1xuICAgICAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBzdHJlYW0udmlkZW8uc2Z1Lm1vZGVscy5DYWxsR3JhbnRzIGN1cnJlbnRfZ3JhbnRzICovIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY3VycmVudEdyYW50cyA9IENhbGxHcmFudHMuaW50ZXJuYWxCaW5hcnlSZWFkKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpLCBvcHRpb25zLCBtZXNzYWdlLmN1cnJlbnRHcmFudHMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmluZyBtZXNzYWdlICovIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWVzc2FnZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuQ2FsbEdyYW50cyBjdXJyZW50X2dyYW50cyA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLmN1cnJlbnRHcmFudHMpXG4gICAgICAgICAgICBDYWxsR3JhbnRzLmludGVybmFsQmluYXJ5V3JpdGUobWVzc2FnZS5jdXJyZW50R3JhbnRzLCB3cml0ZXIudGFnKDEsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpLCBvcHRpb25zKS5qb2luKCk7XG4gICAgICAgIC8qIHN0cmluZyBtZXNzYWdlID0gMjsgKi9cbiAgICAgICAgaWYgKG1lc3NhZ2UubWVzc2FnZSAhPT0gJycpXG4gICAgICAgICAgICB3cml0ZXIudGFnKDIsIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuc3RyaW5nKG1lc3NhZ2UubWVzc2FnZSk7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkNhbGxHcmFudHNVcGRhdGVkXG4gKi9cbmNvbnN0IENhbGxHcmFudHNVcGRhdGVkID0gbmV3IENhbGxHcmFudHNVcGRhdGVkJFR5cGUoKTtcbi8vIEBnZW5lcmF0ZWQgbWVzc2FnZSB0eXBlIHdpdGggcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiwgbWF5IHByb3ZpZGUgc3BlZWQgb3B0aW1pemVkIG1ldGhvZHNcbmNsYXNzIEdvQXdheSRUeXBlIGV4dGVuZHMgTWVzc2FnZVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtLnZpZGVvLnNmdS5ldmVudC5Hb0F3YXknLCBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm86IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3JlYXNvbicsXG4gICAgICAgICAgICAgICAga2luZDogJ2VudW0nLFxuICAgICAgICAgICAgICAgIFQ6ICgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgJ3N0cmVhbS52aWRlby5zZnUubW9kZWxzLkdvQXdheVJlYXNvbicsXG4gICAgICAgICAgICAgICAgICAgIEdvQXdheVJlYXNvbixcbiAgICAgICAgICAgICAgICAgICAgJ0dPX0FXQVlfUkVBU09OXycsXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjcmVhdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdsb2JhbFRoaXMuT2JqZWN0LmNyZWF0ZSh0aGlzLm1lc3NhZ2VQcm90b3R5cGUpO1xuICAgICAgICBtZXNzYWdlLnJlYXNvbiA9IDA7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmVmbGVjdGlvbk1lcmdlUGFydGlhbCh0aGlzLCBtZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBpbnRlcm5hbEJpbmFyeVJlYWQocmVhZGVyLCBsZW5ndGgsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHRhcmdldCA/PyB0aGlzLmNyZWF0ZSgpLCBlbmQgPSByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkTm8pIHtcbiAgICAgICAgICAgICAgICBjYXNlIC8qIHN0cmVhbS52aWRlby5zZnUubW9kZWxzLkdvQXdheVJlYXNvbiByZWFzb24gKi8gMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yZWFzb24gPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBvcHRpb25zLnJlYWRVbmtub3duRmllbGQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1ID09PSAndGhyb3cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbFRoaXMuRXJyb3IoYFVua25vd24gZmllbGQgJHtmaWVsZE5vfSAod2lyZSB0eXBlICR7d2lyZVR5cGV9KSBmb3IgJHt0aGlzLnR5cGVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IHJlYWRlci5za2lwKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgKHUgPT09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uUmVhZCA6IHUpKHRoaXMudHlwZU5hbWUsIG1lc3NhZ2UsIGZpZWxkTm8sIHdpcmVUeXBlLCBkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgaW50ZXJuYWxCaW5hcnlXcml0ZShtZXNzYWdlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgLyogc3RyZWFtLnZpZGVvLnNmdS5tb2RlbHMuR29Bd2F5UmVhc29uIHJlYXNvbiA9IDE7ICovXG4gICAgICAgIGlmIChtZXNzYWdlLnJlYXNvbiAhPT0gMClcbiAgICAgICAgICAgIHdyaXRlci50YWcoMSwgV2lyZVR5cGUuVmFyaW50KS5pbnQzMihtZXNzYWdlLnJlYXNvbik7XG4gICAgICAgIGxldCB1ID0gb3B0aW9ucy53cml0ZVVua25vd25GaWVsZHM7XG4gICAgICAgIGlmICh1ICE9PSBmYWxzZSlcbiAgICAgICAgICAgICh1ID09IHRydWUgPyBVbmtub3duRmllbGRIYW5kbGVyLm9uV3JpdGUgOiB1KSh0aGlzLnR5cGVOYW1lLCBtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH1cbn1cbi8qKlxuICogQGdlbmVyYXRlZCBNZXNzYWdlVHlwZSBmb3IgcHJvdG9idWYgbWVzc2FnZSBzdHJlYW0udmlkZW8uc2Z1LmV2ZW50LkdvQXdheVxuICovXG5jb25zdCBHb0F3YXkgPSBuZXcgR29Bd2F5JFR5cGUoKTtcblxudmFyIGV2ZW50cyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgICBfX3Byb3RvX186IG51bGwsXG4gICAgQXVkaW9MZXZlbDogQXVkaW9MZXZlbCxcbiAgICBBdWRpb0xldmVsQ2hhbmdlZDogQXVkaW9MZXZlbENoYW5nZWQsXG4gICAgQXVkaW9NZWRpYVJlcXVlc3Q6IEF1ZGlvTWVkaWFSZXF1ZXN0LFxuICAgIEF1ZGlvU2VuZGVyOiBBdWRpb1NlbmRlcixcbiAgICBDYWxsR3JhbnRzVXBkYXRlZDogQ2FsbEdyYW50c1VwZGF0ZWQsXG4gICAgQ2hhbmdlUHVibGlzaFF1YWxpdHk6IENoYW5nZVB1Ymxpc2hRdWFsaXR5LFxuICAgIENvbm5lY3Rpb25RdWFsaXR5Q2hhbmdlZDogQ29ubmVjdGlvblF1YWxpdHlDaGFuZ2VkLFxuICAgIENvbm5lY3Rpb25RdWFsaXR5SW5mbzogQ29ubmVjdGlvblF1YWxpdHlJbmZvLFxuICAgIERvbWluYW50U3BlYWtlckNoYW5nZWQ6IERvbWluYW50U3BlYWtlckNoYW5nZWQsXG4gICAgRXJyb3I6IEVycm9yJDEsXG4gICAgR29Bd2F5OiBHb0F3YXksXG4gICAgSGVhbHRoQ2hlY2tSZXF1ZXN0OiBIZWFsdGhDaGVja1JlcXVlc3QsXG4gICAgSGVhbHRoQ2hlY2tSZXNwb25zZTogSGVhbHRoQ2hlY2tSZXNwb25zZSxcbiAgICBJQ0VSZXN0YXJ0OiBJQ0VSZXN0YXJ0LFxuICAgIElDRVRyaWNrbGU6IElDRVRyaWNrbGUsXG4gICAgSm9pblJlcXVlc3Q6IEpvaW5SZXF1ZXN0LFxuICAgIEpvaW5SZXNwb25zZTogSm9pblJlc3BvbnNlLFxuICAgIE1pZ3JhdGlvbjogTWlncmF0aW9uLFxuICAgIFBhcnRpY2lwYW50Sm9pbmVkOiBQYXJ0aWNpcGFudEpvaW5lZCxcbiAgICBQYXJ0aWNpcGFudExlZnQ6IFBhcnRpY2lwYW50TGVmdCxcbiAgICBQaW5zQ2hhbmdlZDogUGluc0NoYW5nZWQsXG4gICAgUHVibGlzaGVyQW5zd2VyOiBQdWJsaXNoZXJBbnN3ZXIsXG4gICAgU2Z1RXZlbnQ6IFNmdUV2ZW50LFxuICAgIFNmdVJlcXVlc3Q6IFNmdVJlcXVlc3QsXG4gICAgU3Vic2NyaWJlck9mZmVyOiBTdWJzY3JpYmVyT2ZmZXIsXG4gICAgVHJhY2tQdWJsaXNoZWQ6IFRyYWNrUHVibGlzaGVkLFxuICAgIFRyYWNrVW5wdWJsaXNoZWQ6IFRyYWNrVW5wdWJsaXNoZWQsXG4gICAgVmlkZW9MYXllclNldHRpbmc6IFZpZGVvTGF5ZXJTZXR0aW5nLFxuICAgIGdldCBWaWRlb0xheWVyU2V0dGluZ19Qcmlvcml0eSAoKSB7IHJldHVybiBWaWRlb0xheWVyU2V0dGluZ19Qcmlvcml0eTsgfSxcbiAgICBWaWRlb01lZGlhUmVxdWVzdDogVmlkZW9NZWRpYVJlcXVlc3QsXG4gICAgVmlkZW9TZW5kZXI6IFZpZGVvU2VuZGVyXG59KTtcblxudmFyIFZpc2liaWxpdHlTdGF0ZTtcbihmdW5jdGlvbiAoVmlzaWJpbGl0eVN0YXRlKSB7XG4gICAgVmlzaWJpbGl0eVN0YXRlW1wiVU5LTk9XTlwiXSA9IFwiVU5LTk9XTlwiO1xuICAgIFZpc2liaWxpdHlTdGF0ZVtcIlZJU0lCTEVcIl0gPSBcIlZJU0lCTEVcIjtcbiAgICBWaXNpYmlsaXR5U3RhdGVbXCJJTlZJU0lCTEVcIl0gPSBcIklOVklTSUJMRVwiO1xufSkoVmlzaWJpbGl0eVN0YXRlIHx8IChWaXNpYmlsaXR5U3RhdGUgPSB7fSkpO1xudmFyIERlYm91bmNlVHlwZTtcbihmdW5jdGlvbiAoRGVib3VuY2VUeXBlKSB7XG4gICAgRGVib3VuY2VUeXBlW0RlYm91bmNlVHlwZVtcIklNTUVESUFURVwiXSA9IDIwXSA9IFwiSU1NRURJQVRFXCI7XG4gICAgRGVib3VuY2VUeXBlW0RlYm91bmNlVHlwZVtcIkZBU1RcIl0gPSAxMDBdID0gXCJGQVNUXCI7XG4gICAgRGVib3VuY2VUeXBlW0RlYm91bmNlVHlwZVtcIk1FRElVTVwiXSA9IDYwMF0gPSBcIk1FRElVTVwiO1xuICAgIERlYm91bmNlVHlwZVtEZWJvdW5jZVR5cGVbXCJTTE9XXCJdID0gMTIwMF0gPSBcIlNMT1dcIjtcbn0pKERlYm91bmNlVHlwZSB8fCAoRGVib3VuY2VUeXBlID0ge30pKTtcblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgc2VydmljZSBzdHJlYW0udmlkZW8uc2Z1LnNpZ25hbC5TaWduYWxTZXJ2ZXJcbiAqL1xuY2xhc3MgU2lnbmFsU2VydmVyQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvcihfdHJhbnNwb3J0KSB7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydCA9IF90cmFuc3BvcnQ7XG4gICAgICAgIHRoaXMudHlwZU5hbWUgPSBTaWduYWxTZXJ2ZXIudHlwZU5hbWU7XG4gICAgICAgIHRoaXMubWV0aG9kcyA9IFNpZ25hbFNlcnZlci5tZXRob2RzO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBTaWduYWxTZXJ2ZXIub3B0aW9ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0UHVibGlzaGVyIHNlbmRzIHRoZSBXZWJSVEMgb2ZmZXIgZm9yIHRoZSBwZWVyIGNvbm5lY3Rpb24gdXNlZCB0byBwdWJsaXNoIEEvVlxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIHJwYzogU2V0UHVibGlzaGVyKHN0cmVhbS52aWRlby5zZnUuc2lnbmFsLlNldFB1Ymxpc2hlclJlcXVlc3QpIHJldHVybnMgKHN0cmVhbS52aWRlby5zZnUuc2lnbmFsLlNldFB1Ymxpc2hlclJlc3BvbnNlKTtcbiAgICAgKi9cbiAgICBzZXRQdWJsaXNoZXIoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbWV0aG9kID0gdGhpcy5tZXRob2RzWzBdLCBvcHQgPSB0aGlzLl90cmFuc3BvcnQubWVyZ2VPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gc3RhY2tJbnRlcmNlcHQoJ3VuYXJ5JywgdGhpcy5fdHJhbnNwb3J0LCBtZXRob2QsIG9wdCwgaW5wdXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBhbnN3ZXIgaXMgc2VudCBieSB0aGUgY2xpZW50IHRvIHRoZSBTRlUgYWZ0ZXIgcmVjZWl2aW5nIGEgc3Vic2NyaWJlcl9vZmZlci5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBwcm90b2J1ZiBycGM6IFNlbmRBbnN3ZXIoc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuU2VuZEFuc3dlclJlcXVlc3QpIHJldHVybnMgKHN0cmVhbS52aWRlby5zZnUuc2lnbmFsLlNlbmRBbnN3ZXJSZXNwb25zZSk7XG4gICAgICovXG4gICAgc2VuZEFuc3dlcihpbnB1dCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBtZXRob2QgPSB0aGlzLm1ldGhvZHNbMV0sIG9wdCA9IHRoaXMuX3RyYW5zcG9ydC5tZXJnZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBzdGFja0ludGVyY2VwdCgndW5hcnknLCB0aGlzLl90cmFuc3BvcnQsIG1ldGhvZCwgb3B0LCBpbnB1dCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRJQ0VDYW5kaWRhdGUgc2VuZHMgYW4gSUNFIGNhbmRpZGF0ZSB0byB0aGUgY2xpZW50XG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcHJvdG9idWYgcnBjOiBJY2VUcmlja2xlKHN0cmVhbS52aWRlby5zZnUubW9kZWxzLklDRVRyaWNrbGUpIHJldHVybnMgKHN0cmVhbS52aWRlby5zZnUuc2lnbmFsLklDRVRyaWNrbGVSZXNwb25zZSk7XG4gICAgICovXG4gICAgaWNlVHJpY2tsZShpbnB1dCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBtZXRob2QgPSB0aGlzLm1ldGhvZHNbMl0sIG9wdCA9IHRoaXMuX3RyYW5zcG9ydC5tZXJnZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBzdGFja0ludGVyY2VwdCgndW5hcnknLCB0aGlzLl90cmFuc3BvcnQsIG1ldGhvZCwgb3B0LCBpbnB1dCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZVN1YnNjcmliZXJzIGlzIHVzZWQgdG8gbm90aWZ5IHRoZSBTRlUgYWJvdXQgdGhlIGxpc3Qgb2YgdmlkZW8gc3Vic2NyaXB0aW9uc1xuICAgICAqIFRPRE86IHN5bmMgc3Vic2NyaXB0aW9ucyBiYXNlZCBvbiB0aGlzICsgdXBkYXRlIHRyYWNrcyB1c2luZyB0aGUgZGltZW5zaW9uIGluZm8gc2VudCBieSB0aGUgdXNlclxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIHJwYzogVXBkYXRlU3Vic2NyaXB0aW9ucyhzdHJlYW0udmlkZW8uc2Z1LnNpZ25hbC5VcGRhdGVTdWJzY3JpcHRpb25zUmVxdWVzdCkgcmV0dXJucyAoc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuVXBkYXRlU3Vic2NyaXB0aW9uc1Jlc3BvbnNlKTtcbiAgICAgKi9cbiAgICB1cGRhdGVTdWJzY3JpcHRpb25zKGlucHV0LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHRoaXMubWV0aG9kc1szXSwgb3B0ID0gdGhpcy5fdHJhbnNwb3J0Lm1lcmdlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHN0YWNrSW50ZXJjZXB0KCd1bmFyeScsIHRoaXMuX3RyYW5zcG9ydCwgbWV0aG9kLCBvcHQsIGlucHV0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIHJwYzogVXBkYXRlTXV0ZVN0YXRlcyhzdHJlYW0udmlkZW8uc2Z1LnNpZ25hbC5VcGRhdGVNdXRlU3RhdGVzUmVxdWVzdCkgcmV0dXJucyAoc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuVXBkYXRlTXV0ZVN0YXRlc1Jlc3BvbnNlKTtcbiAgICAgKi9cbiAgICB1cGRhdGVNdXRlU3RhdGVzKGlucHV0LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHRoaXMubWV0aG9kc1s0XSwgb3B0ID0gdGhpcy5fdHJhbnNwb3J0Lm1lcmdlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHN0YWNrSW50ZXJjZXB0KCd1bmFyeScsIHRoaXMuX3RyYW5zcG9ydCwgbWV0aG9kLCBvcHQsIGlucHV0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIHJwYzogSWNlUmVzdGFydChzdHJlYW0udmlkZW8uc2Z1LnNpZ25hbC5JQ0VSZXN0YXJ0UmVxdWVzdCkgcmV0dXJucyAoc3RyZWFtLnZpZGVvLnNmdS5zaWduYWwuSUNFUmVzdGFydFJlc3BvbnNlKTtcbiAgICAgKi9cbiAgICBpY2VSZXN0YXJ0KGlucHV0LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHRoaXMubWV0aG9kc1s1XSwgb3B0ID0gdGhpcy5fdHJhbnNwb3J0Lm1lcmdlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHN0YWNrSW50ZXJjZXB0KCd1bmFyeScsIHRoaXMuX3RyYW5zcG9ydCwgbWV0aG9kLCBvcHQsIGlucHV0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHByb3RvYnVmIHJwYzogU2VuZFN0YXRzKHN0cmVhbS52aWRlby5zZnUuc2lnbmFsLlNlbmRTdGF0c1JlcXVlc3QpIHJldHVybnMgKHN0cmVhbS52aWRlby5zZnUuc2lnbmFsLlNlbmRTdGF0c1Jlc3BvbnNlKTtcbiAgICAgKi9cbiAgICBzZW5kU3RhdHMoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbWV0aG9kID0gdGhpcy5tZXRob2RzWzZdLCBvcHQgPSB0aGlzLl90cmFuc3BvcnQubWVyZ2VPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gc3RhY2tJbnRlcmNlcHQoJ3VuYXJ5JywgdGhpcy5fdHJhbnNwb3J0LCBtZXRob2QsIG9wdCwgaW5wdXQpO1xuICAgIH1cbn1cblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgYmFzZVVybDogJycsXG4gICAgc2VuZEpzb246IHRydWUsXG4gICAgdGltZW91dDogNSAqIDEwMDAsXG4gICAganNvbk9wdGlvbnM6IHtcbiAgICAgICAgaWdub3JlVW5rbm93bkZpZWxkczogdHJ1ZSxcbiAgICB9LFxufTtcbmNvbnN0IHdpdGhIZWFkZXJzID0gKGhlYWRlcnMpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpbnRlcmNlcHRVbmFyeShuZXh0LCBtZXRob2QsIGlucHV0LCBvcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRpb25zLm1ldGEgPSB7IC4uLm9wdGlvbnMubWV0YSwgLi4uaGVhZGVycyB9O1xuICAgICAgICAgICAgcmV0dXJuIG5leHQobWV0aG9kLCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG4vKipcbiAqIENyZWF0ZXMgbmV3IFNpZ25hbFNlcnZlckNsaWVudCBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyB0aGUgdHdpcnAgb3B0aW9ucy5cbiAqL1xuY29uc3QgY3JlYXRlU2lnbmFsQ2xpZW50ID0gKG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCB0cmFuc3BvcnQgPSBuZXcgVHdpcnBGZXRjaFRyYW5zcG9ydCh7XG4gICAgICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgICAgICAuLi5vcHRpb25zLFxuICAgIH0pO1xuICAgIHJldHVybiBuZXcgU2lnbmFsU2VydmVyQ2xpZW50KHRyYW5zcG9ydCk7XG59O1xuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHdlIGFyZSB1c2luZyBSZWFjdCBOYXRpdmVcbiAqL1xuY29uc3QgaXNSZWFjdE5hdGl2ZSA9ICgpID0+IHtcbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvciA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gbmF2aWdhdG9yLnByb2R1Y3Q/LnRvTG93ZXJDYXNlKCkgPT09ICdyZWFjdG5hdGl2ZSc7XG59O1xuXG4vLyBsb2cgbGV2ZWxzLCBzb3J0ZWQgYnkgdmVyYm9zaXR5XG5jb25zdCBsb2dMZXZlbHMgPSBPYmplY3QuZnJlZXplKHtcbiAgICB0cmFjZTogMCxcbiAgICBkZWJ1ZzogMSxcbiAgICBpbmZvOiAyLFxuICAgIHdhcm46IDMsXG4gICAgZXJyb3I6IDQsXG59KTtcbmxldCBsb2dnZXIkNDtcbmxldCBsZXZlbCA9ICdpbmZvJztcbmNvbnN0IGxvZ1RvQ29uc29sZSA9IChsb2dMZXZlbCwgbWVzc2FnZSwgLi4uYXJncykgPT4ge1xuICAgIGxldCBsb2dNZXRob2Q7XG4gICAgc3dpdGNoIChsb2dMZXZlbCkge1xuICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgICBsb2dNZXRob2QgPSBjb25zb2xlLmVycm9yO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3dhcm4nOlxuICAgICAgICAgICAgaWYgKGlzUmVhY3ROYXRpdmUoKSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgV0FSTjogJHttZXNzYWdlfWA7XG4gICAgICAgICAgICAgICAgbG9nTWV0aG9kID0gY29uc29sZS5pbmZvO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nTWV0aG9kID0gY29uc29sZS53YXJuO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2luZm8nOlxuICAgICAgICAgICAgbG9nTWV0aG9kID0gY29uc29sZS5pbmZvO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RyYWNlJzpcbiAgICAgICAgICAgIGxvZ01ldGhvZCA9IGNvbnNvbGUudHJhY2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGxvZ01ldGhvZCA9IGNvbnNvbGUubG9nO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGxvZ01ldGhvZChtZXNzYWdlLCAuLi5hcmdzKTtcbn07XG5jb25zdCBzZXRMb2dnZXIgPSAobCwgbHZsKSA9PiB7XG4gICAgbG9nZ2VyJDQgPSBsO1xuICAgIGlmIChsdmwpIHtcbiAgICAgICAgc2V0TG9nTGV2ZWwobHZsKTtcbiAgICB9XG59O1xuY29uc3Qgc2V0TG9nTGV2ZWwgPSAobCkgPT4ge1xuICAgIGxldmVsID0gbDtcbn07XG5jb25zdCBnZXRMb2dnZXIgPSAod2l0aFRhZ3MpID0+IHtcbiAgICBjb25zdCBsb2dnZXJNZXRob2QgPSBsb2dnZXIkNCB8fCBsb2dUb0NvbnNvbGU7XG4gICAgY29uc3QgdGFncyA9ICh3aXRoVGFncyB8fCBbXSkuam9pbignOicpO1xuICAgIGNvbnN0IHJlc3VsdCA9IChsb2dMZXZlbCwgbWVzc2FnZSwgLi4uYXJncykgPT4ge1xuICAgICAgICBpZiAobG9nTGV2ZWxzW2xvZ0xldmVsXSA+PSBsb2dMZXZlbHNbbGV2ZWxdKSB7XG4gICAgICAgICAgICBsb2dnZXJNZXRob2QobG9nTGV2ZWwsIGBbJHt0YWdzfV06ICR7bWVzc2FnZX1gLCAuLi5hcmdzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmNvbnN0IGdldFByZWZlcnJlZENvZGVjcyA9IChraW5kLCBwcmVmZXJyZWRDb2RlYywgY29kZWNUb1JlbW92ZSkgPT4ge1xuICAgIGNvbnN0IGxvZ2dlciA9IGdldExvZ2dlcihbJ2NvZGVjcyddKTtcbiAgICBpZiAoISgnZ2V0Q2FwYWJpbGl0aWVzJyBpbiBSVENSdHBTZW5kZXIpKSB7XG4gICAgICAgIGxvZ2dlcj8uKCd3YXJuJywgJ1JUQ1J0cFNlbmRlci5nZXRDYXBhYmlsaXRpZXMgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNhcCA9IFJUQ1J0cFNlbmRlci5nZXRDYXBhYmlsaXRpZXMoa2luZCk7XG4gICAgaWYgKCFjYXApXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBtYXRjaGVkID0gW107XG4gICAgY29uc3QgcGFydGlhbE1hdGNoZWQgPSBbXTtcbiAgICBjb25zdCB1bm1hdGNoZWQgPSBbXTtcbiAgICBjYXAuY29kZWNzLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgY29uc3QgY29kZWMgPSBjLm1pbWVUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGxvZ2dlcj8uKCdkZWJ1ZycsIGBGb3VuZCBzdXBwb3J0ZWQgY29kZWM6ICR7Y29kZWN9YCk7XG4gICAgICAgIGNvbnN0IHNob3VsZFJlbW92ZUNvZGVjID0gY29kZWNUb1JlbW92ZSAmJiBjb2RlYyA9PT0gYCR7a2luZH0vJHtjb2RlY1RvUmVtb3ZlLnRvTG93ZXJDYXNlKCl9YDtcbiAgICAgICAgaWYgKHNob3VsZFJlbW92ZUNvZGVjKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBtYXRjaGVzQ29kZWMgPSBjb2RlYyA9PT0gYCR7a2luZH0vJHtwcmVmZXJyZWRDb2RlYy50b0xvd2VyQ2FzZSgpfWA7XG4gICAgICAgIGlmICghbWF0Y2hlc0NvZGVjKSB7XG4gICAgICAgICAgICB1bm1hdGNoZWQucHVzaChjKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBmb3IgaDI2NCBjb2RlY3MgdGhhdCBoYXZlIHNkcEZtdHBMaW5lIGF2YWlsYWJsZSwgdXNlIG9ubHkgaWYgdGhlXG4gICAgICAgIC8vIHByb2ZpbGUtbGV2ZWwtaWQgaXMgNDJlMDFmIGZvciBjcm9zcy1icm93c2VyIGNvbXBhdGliaWxpdHlcbiAgICAgICAgaWYgKGNvZGVjID09PSAnaDI2NCcpIHtcbiAgICAgICAgICAgIGlmIChjLnNkcEZtdHBMaW5lICYmIGMuc2RwRm10cExpbmUuaW5jbHVkZXMoJ3Byb2ZpbGUtbGV2ZWwtaWQ9NDJlMDFmJykpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVkLnB1c2goYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsTWF0Y2hlZC5wdXNoKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG1hdGNoZWQucHVzaChjKTtcbiAgICB9KTtcbiAgICBjb25zdCByZXN1bHQgPSBbLi4ubWF0Y2hlZCwgLi4ucGFydGlhbE1hdGNoZWQsIC4uLnVubWF0Y2hlZF07XG4gICAgbG9nZ2VyPy4oJ2luZm8nLCBgUHJlZmZlcmVkIGNvZGVjczogYCwgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbmNvbnN0IGdldEdlbmVyaWNTZHAgPSBhc3luYyAoZGlyZWN0aW9uKSA9PiB7XG4gICAgY29uc3QgdGVtcFBjID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKCk7XG4gICAgdGVtcFBjLmFkZFRyYW5zY2VpdmVyKCd2aWRlbycsIHsgZGlyZWN0aW9uIH0pO1xuICAgIHRlbXBQYy5hZGRUcmFuc2NlaXZlcignYXVkaW8nLCB7IGRpcmVjdGlvbiB9KTtcbiAgICBjb25zdCBvZmZlciA9IGF3YWl0IHRlbXBQYy5jcmVhdGVPZmZlcigpO1xuICAgIGxldCBzZHAgPSBvZmZlci5zZHAgPz8gJyc7XG4gICAgdGVtcFBjLmdldFRyYW5zY2VpdmVycygpLmZvckVhY2goKHQpID0+IHtcbiAgICAgICAgdC5zdG9wKCk7XG4gICAgfSk7XG4gICAgdGVtcFBjLmNsb3NlKCk7XG4gICAgcmV0dXJuIHNkcDtcbn07XG5cbmNvbnN0IHNmdUV2ZW50S2luZHMgPSB7XG4gICAgc3Vic2NyaWJlck9mZmVyOiB1bmRlZmluZWQsXG4gICAgcHVibGlzaGVyQW5zd2VyOiB1bmRlZmluZWQsXG4gICAgY29ubmVjdGlvblF1YWxpdHlDaGFuZ2VkOiB1bmRlZmluZWQsXG4gICAgYXVkaW9MZXZlbENoYW5nZWQ6IHVuZGVmaW5lZCxcbiAgICBpY2VUcmlja2xlOiB1bmRlZmluZWQsXG4gICAgY2hhbmdlUHVibGlzaFF1YWxpdHk6IHVuZGVmaW5lZCxcbiAgICBwYXJ0aWNpcGFudEpvaW5lZDogdW5kZWZpbmVkLFxuICAgIHBhcnRpY2lwYW50TGVmdDogdW5kZWZpbmVkLFxuICAgIGRvbWluYW50U3BlYWtlckNoYW5nZWQ6IHVuZGVmaW5lZCxcbiAgICBqb2luUmVzcG9uc2U6IHVuZGVmaW5lZCxcbiAgICBoZWFsdGhDaGVja1Jlc3BvbnNlOiB1bmRlZmluZWQsXG4gICAgdHJhY2tQdWJsaXNoZWQ6IHVuZGVmaW5lZCxcbiAgICB0cmFja1VucHVibGlzaGVkOiB1bmRlZmluZWQsXG4gICAgZXJyb3I6IHVuZGVmaW5lZCxcbiAgICBjYWxsR3JhbnRzVXBkYXRlZDogdW5kZWZpbmVkLFxuICAgIGdvQXdheTogdW5kZWZpbmVkLFxuICAgIGljZVJlc3RhcnQ6IHVuZGVmaW5lZCxcbiAgICBwaW5zVXBkYXRlZDogdW5kZWZpbmVkLFxufTtcbmNvbnN0IGlzU2Z1RXZlbnQgPSAoZXZlbnROYW1lKSA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzZnVFdmVudEtpbmRzLCBldmVudE5hbWUpO1xufTtcbmNsYXNzIERpc3BhdGNoZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmxvZ2dlciA9IGdldExvZ2dlcihbJ0Rpc3BhdGNoZXInXSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlcnMgPSB7fTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCA9IChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBldmVudEtpbmQgPSBtZXNzYWdlLmV2ZW50UGF5bG9hZC5vbmVvZktpbmQ7XG4gICAgICAgICAgICBpZiAoIWV2ZW50S2luZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gbWVzc2FnZS5ldmVudFBheWxvYWRbZXZlbnRLaW5kXTtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdkZWJ1ZycsIGBEaXNwYXRjaGluZyAke2V2ZW50S2luZH1gLCBwYXlsb2FkKTtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuc3Vic2NyaWJlcnNbZXZlbnRLaW5kXTtcbiAgICAgICAgICAgIGlmICghbGlzdGVuZXJzKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZm4gb2YgbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm4ocGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCd3YXJuJywgJ0xpc3RlbmVyIGZhaWxlZCB3aXRoIGVycm9yJywgZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uID0gKGV2ZW50TmFtZSwgZm4pID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICgoX2EgPSB0aGlzLnN1YnNjcmliZXJzKVtldmVudE5hbWVdID8/IChfYVtldmVudE5hbWVdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vZmYoZXZlbnROYW1lLCBmbik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9mZiA9IChldmVudE5hbWUsIGZuKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZXJzW2V2ZW50TmFtZV0gPSAodGhpcy5zdWJzY3JpYmVyc1tldmVudE5hbWVdIHx8IFtdKS5maWx0ZXIoKGYpID0+IGYgIT09IGZuKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vZmZBbGwgPSAoZXZlbnROYW1lKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVyc1tldmVudE5hbWVdID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZXJzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vKipcbiAqIEEgYnVmZmVyIGZvciBJQ0UgQ2FuZGlkYXRlcy4gVXNlZCBmb3IgSUNFIFRyaWNrbGU6XG4gKiAtIGh0dHBzOi8vYmxvZ2dlZWsubWUvd2VicnRjZ2xvc3NhcnkvdHJpY2tsZS1pY2UvXG4gKi9cbmNsYXNzIEljZVRyaWNrbGVCdWZmZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnN1YnNjcmliZXJDYW5kaWRhdGVzID0gbmV3IFJlcGxheVN1YmplY3QoKTtcbiAgICAgICAgdGhpcy5wdWJsaXNoZXJDYW5kaWRhdGVzID0gbmV3IFJlcGxheVN1YmplY3QoKTtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBnZXRMb2dnZXIoWydzZnUtY2xpZW50J10pO1xuICAgICAgICB0aGlzLnB1c2ggPSAoaWNlVHJpY2tsZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGljZVRyaWNrbGUucGVlclR5cGUgPT09IFBlZXJUeXBlLlNVQlNDUklCRVIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZXJDYW5kaWRhdGVzLm5leHQoaWNlVHJpY2tsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpY2VUcmlja2xlLnBlZXJUeXBlID09PSBQZWVyVHlwZS5QVUJMSVNIRVJfVU5TUEVDSUZJRUQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnB1Ymxpc2hlckNhbmRpZGF0ZXMubmV4dChpY2VUcmlja2xlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCd3YXJuJywgYElDRVRyaWNrbGUsIFVua25vd24gcGVlciB0eXBlYCwgaWNlVHJpY2tsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRJY2VDYW5kaWRhdGUoY2FuZGlkYXRlKSB7XG4gICAgaWYgKCFjYW5kaWRhdGUudXNlcm5hbWVGcmFnbWVudCkge1xuICAgICAgICAvLyByZWFjdC1uYXRpdmUtd2VicnRjIGRvZXNuJ3QgaW5jbHVkZSB1c2VybmFtZUZyYWdtZW50IGluIHRoZSBjYW5kaWRhdGVcbiAgICAgICAgY29uc3Qgc3BsaXR0ZWRDYW5kaWRhdGUgPSBjYW5kaWRhdGUuY2FuZGlkYXRlLnNwbGl0KCcgJyk7XG4gICAgICAgIGNvbnN0IHVmcmFnSW5kZXggPSBzcGxpdHRlZENhbmRpZGF0ZS5maW5kSW5kZXgoKHMpID0+IHMgPT09ICd1ZnJhZycpICsgMTtcbiAgICAgICAgY29uc3QgdXNlcm5hbWVGcmFnbWVudCA9IHNwbGl0dGVkQ2FuZGlkYXRlW3VmcmFnSW5kZXhdO1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoeyAuLi5jYW5kaWRhdGUsIHVzZXJuYW1lRnJhZ21lbnQgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoY2FuZGlkYXRlLnRvSlNPTigpKTtcbiAgICB9XG59XG5cbmxldCBzZGtJbmZvO1xubGV0IG9zSW5mbztcbmxldCBkZXZpY2VJbmZvO1xubGV0IHdlYlJ0Y0luZm87XG5jb25zdCBzZXRTZGtJbmZvID0gKGluZm8pID0+IHtcbiAgICBzZGtJbmZvID0gaW5mbztcbn07XG5jb25zdCBnZXRTZGtJbmZvID0gKCkgPT4ge1xuICAgIHJldHVybiBzZGtJbmZvO1xufTtcbmNvbnN0IHNldE9TSW5mbyA9IChpbmZvKSA9PiB7XG4gICAgb3NJbmZvID0gaW5mbztcbn07XG5jb25zdCBnZXRPU0luZm8gPSAoKSA9PiB7XG4gICAgcmV0dXJuIG9zSW5mbztcbn07XG5jb25zdCBzZXREZXZpY2VJbmZvID0gKGluZm8pID0+IHtcbiAgICBkZXZpY2VJbmZvID0gaW5mbztcbn07XG5jb25zdCBnZXREZXZpY2VJbmZvID0gKCkgPT4ge1xuICAgIHJldHVybiBkZXZpY2VJbmZvO1xufTtcbmNvbnN0IGdldFdlYlJUQ0luZm8gPSAoKSA9PiB7XG4gICAgcmV0dXJuIHdlYlJ0Y0luZm87XG59O1xuY29uc3Qgc2V0V2ViUlRDSW5mbyA9IChpbmZvKSA9PiB7XG4gICAgd2ViUnRjSW5mbyA9IGluZm87XG59O1xuY29uc3QgZ2V0Q2xpZW50RGV0YWlscyA9ICgpID0+IHtcbiAgICBpZiAoaXNSZWFjdE5hdGl2ZSgpKSB7XG4gICAgICAgIC8vIFNpbmNlIFJOIGRvZXNuJ3Qgc3VwcG9ydCB3ZWIsIHNoYXJpbmcgYnJvd3NlciBpbmZvIGlzIG5vdCByZXF1aXJlZFxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2RrOiBnZXRTZGtJbmZvKCksXG4gICAgICAgICAgICBvczogZ2V0T1NJbmZvKCksXG4gICAgICAgICAgICBkZXZpY2U6IGdldERldmljZUluZm8oKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgdXNlckFnZW50ID0gbmV3IFVBUGFyc2VyKG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGNvbnN0IHsgYnJvd3Nlciwgb3MsIGRldmljZSwgY3B1IH0gPSB1c2VyQWdlbnQuZ2V0UmVzdWx0KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2RrOiBnZXRTZGtJbmZvKCksXG4gICAgICAgIGJyb3dzZXI6IHtcbiAgICAgICAgICAgIG5hbWU6IGJyb3dzZXIubmFtZSB8fCBuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAgICAgdmVyc2lvbjogYnJvd3Nlci52ZXJzaW9uIHx8ICcnLFxuICAgICAgICB9LFxuICAgICAgICBvczoge1xuICAgICAgICAgICAgbmFtZTogb3MubmFtZSB8fCAnJyxcbiAgICAgICAgICAgIHZlcnNpb246IG9zLnZlcnNpb24gfHwgJycsXG4gICAgICAgICAgICBhcmNoaXRlY3R1cmU6IGNwdS5hcmNoaXRlY3R1cmUgfHwgJycsXG4gICAgICAgIH0sXG4gICAgICAgIGRldmljZToge1xuICAgICAgICAgICAgbmFtZTogW2RldmljZS52ZW5kb3IsIGRldmljZS5tb2RlbCwgZGV2aWNlLnR5cGVdXG4gICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAgICAgICAgIC5qb2luKCcgJyksXG4gICAgICAgICAgICB2ZXJzaW9uOiAnJyxcbiAgICAgICAgfSxcbiAgICB9O1xufTtcblxuY29uc3QgREVGQVVMVF9CSVRSQVRFID0gMTI1MDAwMDtcbmNvbnN0IGRlZmF1bHRUYXJnZXRSZXNvbHV0aW9uID0ge1xuICAgIGJpdHJhdGU6IERFRkFVTFRfQklUUkFURSxcbiAgICB3aWR0aDogMTI4MCxcbiAgICBoZWlnaHQ6IDcyMCxcbn07XG4vKipcbiAqIERldGVybWluZXMgdGhlIG1vc3Qgb3B0aW1hbCB2aWRlbyBsYXllcnMgZm9yIHNpbXVsY2FzdGluZ1xuICogZm9yIHRoZSBnaXZlbiB0cmFjay5cbiAqXG4gKiBAcGFyYW0gdmlkZW9UcmFjayB0aGUgdmlkZW8gdHJhY2sgdG8gZmluZCBvcHRpbWFsIGxheWVycyBmb3IuXG4gKiBAcGFyYW0gdGFyZ2V0UmVzb2x1dGlvbiB0aGUgZXhwZWN0ZWQgdGFyZ2V0IHJlc29sdXRpb24uXG4gKi9cbmNvbnN0IGZpbmRPcHRpbWFsVmlkZW9MYXllcnMgPSAodmlkZW9UcmFjaywgdGFyZ2V0UmVzb2x1dGlvbiA9IGRlZmF1bHRUYXJnZXRSZXNvbHV0aW9uKSA9PiB7XG4gICAgY29uc3Qgb3B0aW1hbFZpZGVvTGF5ZXJzID0gW107XG4gICAgY29uc3Qgc2V0dGluZ3MgPSB2aWRlb1RyYWNrLmdldFNldHRpbmdzKCk7XG4gICAgY29uc3QgeyB3aWR0aDogdyA9IDAsIGhlaWdodDogaCA9IDAgfSA9IHNldHRpbmdzO1xuICAgIGNvbnN0IGlzUk5Jb3MgPSBpc1JlYWN0TmF0aXZlKCkgJiYgZ2V0T1NJbmZvKCk/Lm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lvcyc7XG4gICAgY29uc3QgbWF4Qml0cmF0ZSA9IGdldENvbXB1dGVkTWF4Qml0cmF0ZSh0YXJnZXRSZXNvbHV0aW9uLCB3LCBoKTtcbiAgICBsZXQgZG93bnNjYWxlRmFjdG9yID0gMTtcbiAgICBbJ2YnLCAnaCcsICdxJ10uZm9yRWFjaCgocmlkKSA9PiB7XG4gICAgICAgIC8vIFJldmVyc2luZyB0aGUgb3JkZXIgW2YsIGgsIHFdIHRvIFtxLCBoLCBmXSBhcyBDaHJvbWUgdXNlcyBlbmNvZGluZyBpbmRleFxuICAgICAgICAvLyB3aGVuIGRlY2lkaW5nIHdoaWNoIGxheWVyIHRvIGRpc2FibGUgd2hlbiBDUFUgb3IgYmFuZHdpZHRoIGlzIGNvbnN0cmFpbmVkLlxuICAgICAgICAvLyBFbmNvZGluZ3Mgc2hvdWxkIGJlIG9yZGVyZWQgaW4gaW5jcmVhc2luZyBzcGF0aWFsIHJlc29sdXRpb24gb3JkZXIuXG4gICAgICAgIG9wdGltYWxWaWRlb0xheWVycy51bnNoaWZ0KHtcbiAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgIHJpZCxcbiAgICAgICAgICAgIHdpZHRoOiBNYXRoLnJvdW5kKHcgLyBkb3duc2NhbGVGYWN0b3IpLFxuICAgICAgICAgICAgaGVpZ2h0OiBNYXRoLnJvdW5kKGggLyBkb3duc2NhbGVGYWN0b3IpLFxuICAgICAgICAgICAgbWF4Qml0cmF0ZTogTWF0aC5yb3VuZChtYXhCaXRyYXRlIC8gZG93bnNjYWxlRmFjdG9yKSxcbiAgICAgICAgICAgIHNjYWxlUmVzb2x1dGlvbkRvd25CeTogZG93bnNjYWxlRmFjdG9yLFxuICAgICAgICAgICAgLy8gU2ltdWxjYXN0IG9uIGlPUyBSZWFjdC1OYXRpdmUgcmVxdWlyZXMgYWxsIGVuY29kaW5ncyB0byBzaGFyZSB0aGUgc2FtZSBmcmFtZXJhdGVcbiAgICAgICAgICAgIG1heEZyYW1lcmF0ZToge1xuICAgICAgICAgICAgICAgIGY6IDMwLFxuICAgICAgICAgICAgICAgIGg6IGlzUk5Jb3MgPyAzMCA6IDI1LFxuICAgICAgICAgICAgICAgIHE6IGlzUk5Jb3MgPyAzMCA6IDIwLFxuICAgICAgICAgICAgfVtyaWRdLFxuICAgICAgICB9KTtcbiAgICAgICAgZG93bnNjYWxlRmFjdG9yICo9IDI7XG4gICAgfSk7XG4gICAgLy8gZm9yIHNpbXBsaWNpdHksIHdlIHN0YXJ0IHdpdGggYWxsIGxheWVycyBlbmFibGVkLCB0aGVuIHRoaXMgZnVuY3Rpb25cbiAgICAvLyB3aWxsIGNsZWFyL3JlYXNzaWduIHRoZSBsYXllcnMgdGhhdCBhcmUgbm90IG5lZWRlZFxuICAgIHJldHVybiB3aXRoU2ltdWxjYXN0Q29uc3RyYWludHMoc2V0dGluZ3MsIG9wdGltYWxWaWRlb0xheWVycyk7XG59O1xuLyoqXG4gKiBDb21wdXRlcyB0aGUgbWF4aW11bSBiaXRyYXRlIGZvciBhIGdpdmVuIHJlc29sdXRpb24uXG4gKiBJZiB0aGUgY3VycmVudCByZXNvbHV0aW9uIGlzIGxvd2VyIHRoYW4gdGhlIHRhcmdldCByZXNvbHV0aW9uLFxuICogd2Ugd2FudCB0byBwcm9wb3J0aW9uYWxseSByZWR1Y2UgdGhlIHRhcmdldCBiaXRyYXRlLlxuICogSWYgdGhlIGN1cnJlbnQgcmVzb2x1dGlvbiBpcyBoaWdoZXIgdGhhbiB0aGUgdGFyZ2V0IHJlc29sdXRpb24sXG4gKiB3ZSB3YW50IHRvIHVzZSB0aGUgdGFyZ2V0IGJpdHJhdGUuXG4gKlxuICogQHBhcmFtIHRhcmdldFJlc29sdXRpb24gdGhlIHRhcmdldCByZXNvbHV0aW9uLlxuICogQHBhcmFtIGN1cnJlbnRXaWR0aCB0aGUgY3VycmVudCB3aWR0aCBvZiB0aGUgdHJhY2suXG4gKiBAcGFyYW0gY3VycmVudEhlaWdodCB0aGUgY3VycmVudCBoZWlnaHQgb2YgdGhlIHRyYWNrLlxuICovXG5jb25zdCBnZXRDb21wdXRlZE1heEJpdHJhdGUgPSAodGFyZ2V0UmVzb2x1dGlvbiwgY3VycmVudFdpZHRoLCBjdXJyZW50SGVpZ2h0KSA9PiB7XG4gICAgLy8gaWYgdGhlIGN1cnJlbnQgcmVzb2x1dGlvbiBpcyBsb3dlciB0aGFuIHRoZSB0YXJnZXQgcmVzb2x1dGlvbixcbiAgICAvLyB3ZSB3YW50IHRvIHByb3BvcnRpb25hbGx5IHJlZHVjZSB0aGUgdGFyZ2V0IGJpdHJhdGVcbiAgICBjb25zdCB7IHdpZHRoOiB0YXJnZXRXaWR0aCwgaGVpZ2h0OiB0YXJnZXRIZWlnaHQgfSA9IHRhcmdldFJlc29sdXRpb247XG4gICAgaWYgKGN1cnJlbnRXaWR0aCA8IHRhcmdldFdpZHRoIHx8IGN1cnJlbnRIZWlnaHQgPCB0YXJnZXRIZWlnaHQpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFBpeGVscyA9IGN1cnJlbnRXaWR0aCAqIGN1cnJlbnRIZWlnaHQ7XG4gICAgICAgIGNvbnN0IHRhcmdldFBpeGVscyA9IHRhcmdldFdpZHRoICogdGFyZ2V0SGVpZ2h0O1xuICAgICAgICBjb25zdCByZWR1Y3Rpb25GYWN0b3IgPSBjdXJyZW50UGl4ZWxzIC8gdGFyZ2V0UGl4ZWxzO1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh0YXJnZXRSZXNvbHV0aW9uLmJpdHJhdGUgKiByZWR1Y3Rpb25GYWN0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0UmVzb2x1dGlvbi5iaXRyYXRlO1xufTtcbi8qKlxuICogQnJvd3NlcnMgaGF2ZSBkaWZmZXJlbnQgc2ltdWxjYXN0IGNvbnN0cmFpbnRzIGZvciBkaWZmZXJlbnQgdmlkZW8gcmVzb2x1dGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBtb2RpZmllcyB0aGUgcHJvdmlkZWQgbGlzdCBvZiB2aWRlbyBsYXllcnMgYWNjb3JkaW5nIHRvIHRoZVxuICogY3VycmVudCBpbXBsZW1lbnRhdGlvbiBvZiBzaW11bGNhc3QgY29uc3RyYWludHMgaW4gdGhlIENocm9taXVtIGJhc2VkIGJyb3dzZXJzLlxuICpcbiAqIGh0dHBzOi8vY2hyb21pdW0uZ29vZ2xlc291cmNlLmNvbS9leHRlcm5hbC93ZWJydGMvKy9yZWZzL2hlYWRzL21haW4vbWVkaWEvZW5naW5lL3NpbXVsY2FzdC5jYyM5MFxuICovXG5jb25zdCB3aXRoU2ltdWxjYXN0Q29uc3RyYWludHMgPSAoc2V0dGluZ3MsIG9wdGltYWxWaWRlb0xheWVycykgPT4ge1xuICAgIGxldCBsYXllcnM7XG4gICAgY29uc3Qgc2l6ZSA9IE1hdGgubWF4KHNldHRpbmdzLndpZHRoIHx8IDAsIHNldHRpbmdzLmhlaWdodCB8fCAwKTtcbiAgICBpZiAoc2l6ZSA8PSAzMjApIHtcbiAgICAgICAgLy8gcHJvdmlkZSBvbmx5IG9uZSBsYXllciAzMjB4MjQwIChxKSwgdGhlIG9uZSB3aXRoIHRoZSBoaWdoZXN0IHF1YWxpdHlcbiAgICAgICAgbGF5ZXJzID0gb3B0aW1hbFZpZGVvTGF5ZXJzLmZpbHRlcigobGF5ZXIpID0+IGxheWVyLnJpZCA9PT0gJ2YnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2l6ZSA8PSA2NDApIHtcbiAgICAgICAgLy8gcHJvdmlkZSB0d28gbGF5ZXJzLCAxNjB4MTIwIChxKSBhbmQgNjQweDQ4MCAoaClcbiAgICAgICAgbGF5ZXJzID0gb3B0aW1hbFZpZGVvTGF5ZXJzLmZpbHRlcigobGF5ZXIpID0+IGxheWVyLnJpZCAhPT0gJ2gnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIHByb3ZpZGUgdGhyZWUgbGF5ZXJzIGZvciBzaXplcyA+IDY0MHg0ODBcbiAgICAgICAgbGF5ZXJzID0gb3B0aW1hbFZpZGVvTGF5ZXJzO1xuICAgIH1cbiAgICBjb25zdCByaWRNYXBwaW5nID0gWydxJywgJ2gnLCAnZiddO1xuICAgIHJldHVybiBsYXllcnMubWFwKChsYXllciwgaW5kZXgpID0+ICh7XG4gICAgICAgIC4uLmxheWVyLFxuICAgICAgICByaWQ6IHJpZE1hcHBpbmdbaW5kZXhdLCAvLyByZWFzc2lnbiByaWRcbiAgICB9KSk7XG59O1xuY29uc3QgZmluZE9wdGltYWxTY3JlZW5TaGFyaW5nTGF5ZXJzID0gKHZpZGVvVHJhY2ssIHByZWZlcmVuY2VzKSA9PiB7XG4gICAgY29uc3Qgc2V0dGluZ3MgPSB2aWRlb1RyYWNrLmdldFNldHRpbmdzKCk7XG4gICAgcmV0dXJuIFtcbiAgICAgICAge1xuICAgICAgICAgICAgYWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgcmlkOiAncScsXG4gICAgICAgICAgICB3aWR0aDogc2V0dGluZ3Mud2lkdGggfHwgMCxcbiAgICAgICAgICAgIGhlaWdodDogc2V0dGluZ3MuaGVpZ2h0IHx8IDAsXG4gICAgICAgICAgICBzY2FsZVJlc29sdXRpb25Eb3duQnk6IDEsXG4gICAgICAgICAgICBtYXhCaXRyYXRlOiBwcmVmZXJlbmNlcz8ubWF4Qml0cmF0ZSA/PyAzMDAwMDAwLFxuICAgICAgICAgICAgbWF4RnJhbWVyYXRlOiBwcmVmZXJlbmNlcz8ubWF4RnJhbWVyYXRlID8/IDMwLFxuICAgICAgICB9LFxuICAgIF07XG59O1xuXG5jb25zdCB0cmFja1R5cGVUb1BhcnRpY2lwYW50U3RyZWFtS2V5ID0gKHRyYWNrVHlwZSkgPT4ge1xuICAgIHN3aXRjaCAodHJhY2tUeXBlKSB7XG4gICAgICAgIGNhc2UgVHJhY2tUeXBlLlNDUkVFTl9TSEFSRTpcbiAgICAgICAgICAgIHJldHVybiAnc2NyZWVuU2hhcmVTdHJlYW0nO1xuICAgICAgICBjYXNlIFRyYWNrVHlwZS5TQ1JFRU5fU0hBUkVfQVVESU86XG4gICAgICAgICAgICByZXR1cm4gJ3NjcmVlblNoYXJlQXVkaW9TdHJlYW0nO1xuICAgICAgICBjYXNlIFRyYWNrVHlwZS5WSURFTzpcbiAgICAgICAgICAgIHJldHVybiAndmlkZW9TdHJlYW0nO1xuICAgICAgICBjYXNlIFRyYWNrVHlwZS5BVURJTzpcbiAgICAgICAgICAgIHJldHVybiAnYXVkaW9TdHJlYW0nO1xuICAgICAgICBjYXNlIFRyYWNrVHlwZS5VTlNQRUNJRklFRDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVHJhY2sgdHlwZSBpcyB1bnNwZWNpZmllZCcpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29uc3QgZXhoYXVzdGl2ZVRyYWNrVHlwZUNoZWNrID0gdHJhY2tUeXBlO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHRyYWNrIHR5cGU6ICR7ZXhoYXVzdGl2ZVRyYWNrVHlwZUNoZWNrfWApO1xuICAgIH1cbn07XG5jb25zdCBtdXRlVHlwZVRvVHJhY2tUeXBlID0gKG11dGVUeXBlKSA9PiB7XG4gICAgc3dpdGNoIChtdXRlVHlwZSkge1xuICAgICAgICBjYXNlICdhdWRpbyc6XG4gICAgICAgICAgICByZXR1cm4gVHJhY2tUeXBlLkFVRElPO1xuICAgICAgICBjYXNlICd2aWRlbyc6XG4gICAgICAgICAgICByZXR1cm4gVHJhY2tUeXBlLlZJREVPO1xuICAgICAgICBjYXNlICdzY3JlZW5zaGFyZSc6XG4gICAgICAgICAgICByZXR1cm4gVHJhY2tUeXBlLlNDUkVFTl9TSEFSRTtcbiAgICAgICAgY2FzZSAnc2NyZWVuc2hhcmVfYXVkaW8nOlxuICAgICAgICAgICAgcmV0dXJuIFRyYWNrVHlwZS5TQ1JFRU5fU0hBUkVfQVVESU87XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjb25zdCBleGhhdXN0aXZlTXV0ZVR5cGVDaGVjayA9IG11dGVUeXBlO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIG11dGUgdHlwZTogJHtleGhhdXN0aXZlTXV0ZVR5cGVDaGVja31gKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgcHJvdmlkZWQgdXBkYXRlIGlzIGEgZnVuY3Rpb24gcGF0Y2guXG4gKlxuICogQHBhcmFtIHVwZGF0ZSB0aGUgdmFsdWUgdG8gY2hlY2suXG4gKi9cbmNvbnN0IGlzRnVuY3Rpb25QYXRjaCA9ICh1cGRhdGUpID0+IHR5cGVvZiB1cGRhdGUgPT09ICdmdW5jdGlvbic7XG4vKipcbiAqIEdldHMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgYW4gb2JzZXJ2YWJsZSwgb3IgdW5kZWZpbmVkIGlmIHRoZSBvYnNlcnZhYmxlIGhhc1xuICogbm90IGVtaXR0ZWQgYSB2YWx1ZSB5ZXQuXG4gKlxuICogQHBhcmFtIG9ic2VydmFibGUkIHRoZSBvYnNlcnZhYmxlIHRvIGdldCB0aGUgdmFsdWUgZnJvbS5cbiAqL1xuY29uc3QgZ2V0Q3VycmVudFZhbHVlID0gKG9ic2VydmFibGUkKSA9PiB7XG4gICAgbGV0IHZhbHVlO1xuICAgIGxldCBlcnIgPSB1bmRlZmluZWQ7XG4gICAgY29tYmluZUxhdGVzdChbb2JzZXJ2YWJsZSRdKVxuICAgICAgICAuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogKFt2XSkgPT4ge1xuICAgICAgICAgICAgdmFsdWUgPSB2O1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogKGUpID0+IHtcbiAgICAgICAgICAgIGVyciA9IGU7XG4gICAgICAgIH0sXG4gICAgfSlcbiAgICAgICAgLnVuc3Vic2NyaWJlKCk7XG4gICAgaWYgKGVycilcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgIHJldHVybiB2YWx1ZTtcbn07XG4vKipcbiAqIFVwZGF0ZXMgdGhlIHZhbHVlIG9mIHRoZSBwcm92aWRlZCBTdWJqZWN0LlxuICogQW4gYHVwZGF0ZWAgY2FuIGVpdGhlciBiZSBhIG5ldyB2YWx1ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHRha2VzXG4gKiB0aGUgY3VycmVudCB2YWx1ZSBhbmQgcmV0dXJucyBhIG5ldyB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0gc3ViamVjdCB0aGUgc3ViamVjdCB0byB1cGRhdGUuXG4gKiBAcGFyYW0gdXBkYXRlIHRoZSB1cGRhdGUgdG8gYXBwbHkgdG8gdGhlIHN1YmplY3QuXG4gKiBAcmV0dXJuIHRoZSB1cGRhdGVkIHZhbHVlLlxuICovXG5jb25zdCBzZXRDdXJyZW50VmFsdWUgPSAoc3ViamVjdCwgdXBkYXRlKSA9PiB7XG4gICAgY29uc3QgbmV4dCA9IGlzRnVuY3Rpb25QYXRjaCh1cGRhdGUpXG4gICAgICAgID8gdXBkYXRlKGdldEN1cnJlbnRWYWx1ZShzdWJqZWN0KSlcbiAgICAgICAgOiB1cGRhdGU7XG4gICAgc3ViamVjdC5uZXh0KG5leHQpO1xuICAgIHJldHVybiBuZXh0O1xufTtcbi8qKlxuICogQ3JlYXRlcyBhIHN1YnNjcmlwdGlvbiBhbmQgcmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVuc3Vic2NyaWJlLlxuICpcbiAqIEBwYXJhbSBvYnNlcnZhYmxlIHRoZSBvYnNlcnZhYmxlIHRvIHN1YnNjcmliZSB0by5cbiAqIEBwYXJhbSBoYW5kbGVyIHRoZSBoYW5kbGVyIHRvIGNhbGwgd2hlbiB0aGUgb2JzZXJ2YWJsZSBlbWl0cyBhIHZhbHVlLlxuICovXG5jb25zdCBjcmVhdGVTdWJzY3JpcHRpb24gPSAob2JzZXJ2YWJsZSwgaGFuZGxlcikgPT4ge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IG9ic2VydmFibGUuc3Vic2NyaWJlKGhhbmRsZXIpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG59O1xuXG52YXIgcnhVdGlscyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgICBfX3Byb3RvX186IG51bGwsXG4gICAgY3JlYXRlU3Vic2NyaXB0aW9uOiBjcmVhdGVTdWJzY3JpcHRpb24sXG4gICAgZ2V0Q3VycmVudFZhbHVlOiBnZXRDdXJyZW50VmFsdWUsXG4gICAgc2V0Q3VycmVudFZhbHVlOiBzZXRDdXJyZW50VmFsdWVcbn0pO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgY29tYmluZWQge0BsaW5rIENvbXBhcmF0b3I8VD59IHdoaWNoIHNvcnRzIGl0ZW1zIGJ5IHRoZSBnaXZlbiBjb21wYXJhdG9ycy5cbiAqIFRoZSBjb21wYXJhdG9ycyBhcmUgYXBwbGllZCBpbiB0aGUgb3JkZXIgdGhleSBhcmUgZ2l2ZW4gKGxlZnQgLT4gcmlnaHQpLlxuICpcbiAqIEBwYXJhbSBjb21wYXJhdG9ycyB0aGUgY29tcGFyYXRvcnMgdG8gdXNlIGZvciBzb3J0aW5nLlxuICogQHJldHVybnMgYSBjb21iaW5lZCB7QGxpbmsgQ29tcGFyYXRvcjxUPn0uXG4gKi9cbmNvbnN0IGNvbWJpbmVDb21wYXJhdG9ycyA9ICguLi5jb21wYXJhdG9ycykgPT4ge1xuICAgIHJldHVybiAoYSwgYikgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGNvbXBhcmF0b3Igb2YgY29tcGFyYXRvcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbXBhcmF0b3IoYSwgYik7XG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfTtcbn07XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgY29tcGFyYXRvciB3aGljaCBzb3J0cyBpdGVtcyBpbiBkZXNjZW5kaW5nIG9yZGVyLlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBieVZhbHVlID0gKGEsIGIpID0+IGEgPCBiID8gLSAxIDogYSA+IGIgPyAxIDogMDtcbiAqIGNvbnN0IGJ5VmFsdWVEZXNjID0gZGVzY2VuZGluZyhieVZhbHVlKTtcbiAqXG4gKiBAcGFyYW0gY29tcGFyYXRvciB0aGUgY29tcGFyYXRvciB0byB3cmFwLlxuICovXG5jb25zdCBkZXNjZW5kaW5nID0gKGNvbXBhcmF0b3IpID0+IHtcbiAgICByZXR1cm4gKGEsIGIpID0+IGNvbXBhcmF0b3IoYiwgYSk7XG59O1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGNvbXBhcmF0b3Igd2hpY2ggY29uZGl0aW9uYWxseSBhcHBsaWVzIHRoZSBnaXZlbiBjb21wYXJhdG9yLlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBzaG91bGRTb3J0QnlWYWx1ZSA9IChhLCBiKSA9PiBhICUgMiA9PT0gMDsgLy8gcmV0dXJuIGZhbHNlIHRvIHR1cm4gaXQgb2ZmXG4gKiBjb25zdCBieVZhbHVlID0gKGEsIGIpID0+IGEgPCBiID8gLSAxIDogYSA+IGIgPyAxIDogMDtcbiAqIGNvbnN0IGNvbXBhcmF0b3IgPSBjb25kaXRpb25hbChzaG91bGRTb3J0QnlWYWx1ZSkoYnlWYWx1ZSk7XG4gKlxuICogQHBhcmFtIHByZWRpY2F0ZSB0aGUgcHJlZGljYXRlIHRvIHVzZSBmb3IgZGV0ZXJtaW5pbmcgd2hldGhlciB0byBhcHBseSB0aGUgY29tcGFyYXRvci5cbiAqL1xuY29uc3QgY29uZGl0aW9uYWwgPSAocHJlZGljYXRlKSA9PiB7XG4gICAgcmV0dXJuIChjb21wYXJhdG9yKSA9PiB7XG4gICAgICAgIHJldHVybiAoYSwgYikgPT4ge1xuICAgICAgICAgICAgaWYgKCFwcmVkaWNhdGUoYSwgYikpXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICByZXR1cm4gY29tcGFyYXRvcihhLCBiKTtcbiAgICAgICAgfTtcbiAgICB9O1xufTtcbi8qKlxuICogQSBuby1vcCBjb21wYXJhdG9yIHdoaWNoIGFsd2F5cyByZXR1cm5zIDAuXG4gKi9cbmNvbnN0IG5vb3BDb21wYXJhdG9yID0gKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiAwO1xufTtcblxuLyoqXG4gKiBBIGNvbXBhcmF0b3Igd2hpY2ggc29ydHMgcGFydGljaXBhbnRzIGJ5IHRoZSBmYWN0IHRoYXQgdGhleSBhcmUgdGhlIGRvbWluYW50IHNwZWFrZXIgb3Igbm90LlxuICpcbiAqIEBwYXJhbSBhIHRoZSBmaXJzdCBwYXJ0aWNpcGFudC5cbiAqIEBwYXJhbSBiIHRoZSBzZWNvbmQgcGFydGljaXBhbnQuXG4gKi9cbmNvbnN0IGRvbWluYW50U3BlYWtlciA9IChhLCBiKSA9PiB7XG4gICAgaWYgKGEuaXNEb21pbmFudFNwZWFrZXIgJiYgIWIuaXNEb21pbmFudFNwZWFrZXIpXG4gICAgICAgIHJldHVybiAtMTtcbiAgICBpZiAoIWEuaXNEb21pbmFudFNwZWFrZXIgJiYgYi5pc0RvbWluYW50U3BlYWtlcilcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgcmV0dXJuIDA7XG59O1xuLyoqXG4gKiBBIGNvbXBhcmF0b3Igd2hpY2ggc29ydHMgcGFydGljaXBhbnRzIGJ5IHRoZSBmYWN0IHRoYXQgdGhleSBhcmUgc3BlYWtpbmcgb3Igbm90LlxuICpcbiAqIEBwYXJhbSBhIHRoZSBmaXJzdCBwYXJ0aWNpcGFudC5cbiAqIEBwYXJhbSBiIHRoZSBzZWNvbmQgcGFydGljaXBhbnQuXG4gKi9cbmNvbnN0IHNwZWFraW5nID0gKGEsIGIpID0+IHtcbiAgICBpZiAoYS5pc1NwZWFraW5nICYmICFiLmlzU3BlYWtpbmcpXG4gICAgICAgIHJldHVybiAtMTtcbiAgICBpZiAoIWEuaXNTcGVha2luZyAmJiBiLmlzU3BlYWtpbmcpXG4gICAgICAgIHJldHVybiAxO1xuICAgIHJldHVybiAwO1xufTtcbi8qKlxuICogQSBjb21wYXJhdG9yIHdoaWNoIHNvcnRzIHBhcnRpY2lwYW50cyBieSBzY3JlZW4gc2hhcmluZyBzdGF0dXMuXG4gKlxuICogQHBhcmFtIGEgdGhlIGZpcnN0IHBhcnRpY2lwYW50LlxuICogQHBhcmFtIGIgdGhlIHNlY29uZCBwYXJ0aWNpcGFudC5cbiAqL1xuY29uc3Qgc2NyZWVuU2hhcmluZyA9IChhLCBiKSA9PiB7XG4gICAgaWYgKGhhc1NjcmVlblNoYXJlKGEpICYmICFoYXNTY3JlZW5TaGFyZShiKSlcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIGlmICghaGFzU2NyZWVuU2hhcmUoYSkgJiYgaGFzU2NyZWVuU2hhcmUoYikpXG4gICAgICAgIHJldHVybiAxO1xuICAgIHJldHVybiAwO1xufTtcbi8qKlxuICogQSBjb21wYXJhdG9yIHdoaWNoIHNvcnRzIHBhcnRpY2lwYW50cyBieSB2aWRlbyBzdGF0dXMuXG4gKlxuICogQHBhcmFtIGEgdGhlIGZpcnN0IHBhcnRpY2lwYW50LlxuICogQHBhcmFtIGIgdGhlIHNlY29uZCBwYXJ0aWNpcGFudC5cbiAqL1xuY29uc3QgcHVibGlzaGluZ1ZpZGVvID0gKGEsIGIpID0+IHtcbiAgICBpZiAoaGFzVmlkZW8oYSkgJiYgIWhhc1ZpZGVvKGIpKVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgaWYgKCFoYXNWaWRlbyhhKSAmJiBoYXNWaWRlbyhiKSlcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgcmV0dXJuIDA7XG59O1xuLyoqXG4gKiBBIGNvbXBhcmF0b3Igd2hpY2ggc29ydHMgcGFydGljaXBhbnRzIGJ5IGF1ZGlvIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0gYSB0aGUgZmlyc3QgcGFydGljaXBhbnQuXG4gKiBAcGFyYW0gYiB0aGUgc2Vjb25kIHBhcnRpY2lwYW50LlxuICovXG5jb25zdCBwdWJsaXNoaW5nQXVkaW8gPSAoYSwgYikgPT4ge1xuICAgIGlmIChoYXNBdWRpbyhhKSAmJiAhaGFzQXVkaW8oYikpXG4gICAgICAgIHJldHVybiAtMTtcbiAgICBpZiAoIWhhc0F1ZGlvKGEpICYmIGhhc0F1ZGlvKGIpKVxuICAgICAgICByZXR1cm4gMTtcbiAgICByZXR1cm4gMDtcbn07XG4vKipcbiAqIEEgY29tcGFyYXRvciB3aGljaCBwcmlvcml0aXplcyBwYXJ0aWNpcGFudHMgd2hvIGFyZSBwaW5uZWQuXG4gKlxuICogQHBhcmFtIGEgdGhlIGZpcnN0IHBhcnRpY2lwYW50LlxuICogQHBhcmFtIGIgdGhlIHNlY29uZCBwYXJ0aWNpcGFudC5cbiAqL1xuY29uc3QgcGlubmVkID0gKGEsIGIpID0+IHtcbiAgICBpZiAoYS5waW4gJiYgYi5waW4pIHtcbiAgICAgICAgaWYgKCFhLnBpbi5pc0xvY2FsUGluICYmIGIucGluLmlzTG9jYWxQaW4pXG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIGlmIChhLnBpbi5pc0xvY2FsUGluICYmICFiLnBpbi5pc0xvY2FsUGluKVxuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIGlmIChhLnBpbi5waW5uZWRBdCA+IGIucGluLnBpbm5lZEF0KVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICBpZiAoYS5waW4ucGlubmVkQXQgPCBiLnBpbi5waW5uZWRBdClcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBpZiAoYS5waW4gJiYgIWIucGluKVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgaWYgKCFhLnBpbiAmJiBiLnBpbilcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgcmV0dXJuIDA7XG59O1xuLyoqXG4gKiBBIGNvbXBhcmF0b3IgY3JlYXRvciB3aGljaCB3aWxsIHNldCB1cCBhIGNvbXBhcmF0b3Igd2hpY2ggcHJpb3JpdGl6ZXNcbiAqIHBhcnRpY2lwYW50cyB3aG8gaGF2ZSBhIHNwZWNpZmljIHJlYWN0aW9uLlxuICpcbiAqIEBwYXJhbSB0eXBlIHRoZSByZWFjdGlvbiB0eXBlLlxuICovXG5jb25zdCByZWFjdGlvblR5cGUgPSAodHlwZSkgPT4ge1xuICAgIHJldHVybiAoYSwgYikgPT4ge1xuICAgICAgICBpZiAoYS5yZWFjdGlvbj8udHlwZSA9PT0gdHlwZSAmJiBiLnJlYWN0aW9uPy50eXBlICE9PSB0eXBlKVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICBpZiAoYS5yZWFjdGlvbj8udHlwZSAhPT0gdHlwZSAmJiBiLnJlYWN0aW9uPy50eXBlID09PSB0eXBlKVxuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH07XG59O1xuLyoqXG4gKiBBIGNvbXBhcmF0b3IgY3JlYXRvciB3aGljaCB3aWxsIHNldCB1cCBhIGNvbXBhcmF0b3Igd2hpY2ggcHJpb3JpdGl6ZXNcbiAqIHBhcnRpY2lwYW50cyB3aG8gaGF2ZSBhIHNwZWNpZmljIHJvbGUuXG4gKlxuICogQHBhcmFtIHJvbGVzIHRoZSByb2xlcyB0byBwcmlvcml0aXplLlxuICovXG5jb25zdCByb2xlID0gKC4uLnJvbGVzKSA9PiAoYSwgYikgPT4ge1xuICAgIGlmIChoYXNBbnlSb2xlKGEsIHJvbGVzKSAmJiAhaGFzQW55Um9sZShiLCByb2xlcykpXG4gICAgICAgIHJldHVybiAtMTtcbiAgICBpZiAoIWhhc0FueVJvbGUoYSwgcm9sZXMpICYmIGhhc0FueVJvbGUoYiwgcm9sZXMpKVxuICAgICAgICByZXR1cm4gMTtcbiAgICByZXR1cm4gMDtcbn07XG4vKipcbiAqIEEgY29tcGFyYXRvciB3aGljaCBzb3J0cyBwYXJ0aWNpcGFudHMgYnkgbmFtZS5cbiAqXG4gKiBAcGFyYW0gYSB0aGUgZmlyc3QgcGFydGljaXBhbnQuXG4gKiBAcGFyYW0gYiB0aGUgc2Vjb25kIHBhcnRpY2lwYW50LlxuICovXG5jb25zdCBuYW1lID0gKGEsIGIpID0+IHtcbiAgICBpZiAoYS5uYW1lIDwgYi5uYW1lKVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgaWYgKGEubmFtZSA+IGIubmFtZSlcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgcmV0dXJuIDA7XG59O1xuY29uc3QgaGFzQW55Um9sZSA9IChwLCByb2xlcykgPT4gKHAucm9sZXMgfHwgW10pLnNvbWUoKHIpID0+IHJvbGVzLmluY2x1ZGVzKHIpKTtcbmNvbnN0IGhhc1NjcmVlblNoYXJlID0gKHApID0+IHAucHVibGlzaGVkVHJhY2tzLmluY2x1ZGVzKFRyYWNrVHlwZS5TQ1JFRU5fU0hBUkUpO1xuY29uc3QgaGFzVmlkZW8gPSAocCkgPT4gcC5wdWJsaXNoZWRUcmFja3MuaW5jbHVkZXMoVHJhY2tUeXBlLlZJREVPKTtcbmNvbnN0IGhhc0F1ZGlvID0gKHApID0+IHAucHVibGlzaGVkVHJhY2tzLmluY2x1ZGVzKFRyYWNrVHlwZS5BVURJTyk7XG5cbi8vIGEgY29tcGFyYXRvciBkZWNvcmF0b3Igd2hpY2ggYXBwbGllcyB0aGUgZGVjb3JhdGVkIGNvbXBhcmF0b3Igb25seSBpZiB0aGVcbi8vIHBhcnRpY2lwYW50IGlzIGludmlzaWJsZS5cbi8vIFRoaXMgZW5zdXJlcyBzdGFibGUgc29ydGluZyB3aGVuIGFsbCBwYXJ0aWNpcGFudHMgYXJlIHZpc2libGUuXG5jb25zdCBpZkludmlzaWJsZUJ5ID0gY29uZGl0aW9uYWwoKGEsIGIpID0+IGEudmlld3BvcnRWaXNpYmlsaXR5U3RhdGU/LnZpZGVvVHJhY2sgPT09IFZpc2liaWxpdHlTdGF0ZS5JTlZJU0lCTEUgfHxcbiAgICBiLnZpZXdwb3J0VmlzaWJpbGl0eVN0YXRlPy52aWRlb1RyYWNrID09PSBWaXNpYmlsaXR5U3RhdGUuSU5WSVNJQkxFKTtcbi8qKlxuICogQSBjb21wYXJhdG9yIHRoYXQgYXBwbGllcyB0aGUgZGVjb3JhdGVkIGNvbXBhcmF0b3Igd2hlbiBhIHBhcnRpY2lwYW50IGlzXG4gKiBlaXRoZXIgaW52aXNpYmxlIG9yIGl0cyB2aXNpYmlsaXR5IHN0YXRlIGlzbid0IGtub3duLlxuICogRm9yIHZpc2libGUgcGFydGljaXBhbnRzLCBpdCBlbnN1cmVzIHN0YWJsZSBzb3J0aW5nLlxuICovXG5jb25zdCBpZkludmlzaWJsZU9yVW5rbm93bkJ5ID0gY29uZGl0aW9uYWwoKGEsIGIpID0+IGEudmlld3BvcnRWaXNpYmlsaXR5U3RhdGU/LnZpZGVvVHJhY2sgPT09IFZpc2liaWxpdHlTdGF0ZS5JTlZJU0lCTEUgfHxcbiAgICBhLnZpZXdwb3J0VmlzaWJpbGl0eVN0YXRlPy52aWRlb1RyYWNrID09PSBWaXNpYmlsaXR5U3RhdGUuVU5LTk9XTiB8fFxuICAgIGIudmlld3BvcnRWaXNpYmlsaXR5U3RhdGU/LnZpZGVvVHJhY2sgPT09IFZpc2liaWxpdHlTdGF0ZS5JTlZJU0lCTEUgfHxcbiAgICBiLnZpZXdwb3J0VmlzaWJpbGl0eVN0YXRlPy52aWRlb1RyYWNrID09PSBWaXNpYmlsaXR5U3RhdGUuVU5LTk9XTik7XG4vKipcbiAqIFRoZSBkZWZhdWx0IHNvcnRpbmcgcHJlc2V0LlxuICovXG5jb25zdCBkZWZhdWx0U29ydFByZXNldCA9IGNvbWJpbmVDb21wYXJhdG9ycyhwaW5uZWQsIHNjcmVlblNoYXJpbmcsIGlmSW52aXNpYmxlQnkoY29tYmluZUNvbXBhcmF0b3JzKGRvbWluYW50U3BlYWtlciwgc3BlYWtpbmcsIHJlYWN0aW9uVHlwZSgncmFpc2VkLWhhbmQnKSwgcHVibGlzaGluZ1ZpZGVvLCBwdWJsaXNoaW5nQXVkaW8pKSk7XG4vKipcbiAqIFRoZSBzb3J0aW5nIHByZXNldCBmb3Igc3BlYWtlciBsYXlvdXQuXG4gKi9cbmNvbnN0IHNwZWFrZXJMYXlvdXRTb3J0UHJlc2V0ID0gY29tYmluZUNvbXBhcmF0b3JzKHBpbm5lZCwgc2NyZWVuU2hhcmluZywgZG9taW5hbnRTcGVha2VyLCBpZkludmlzaWJsZUJ5KGNvbWJpbmVDb21wYXJhdG9ycyhzcGVha2luZywgcmVhY3Rpb25UeXBlKCdyYWlzZWQtaGFuZCcpLCBwdWJsaXNoaW5nVmlkZW8sIHB1Ymxpc2hpbmdBdWRpbykpKTtcbi8qKlxuICogVGhlIHNvcnRpbmcgcHJlc2V0IGZvciBsYXlvdXRzIHRoYXQgZG9uJ3QgcmVuZGVyIGFsbCBwYXJ0aWNpcGFudHMgYnV0XG4gKiBpbnN0ZWFkLCByZW5kZXIgdGhlbSBpbiBwYWdlcy5cbiAqL1xuY29uc3QgcGFnaW5hdGVkTGF5b3V0U29ydFByZXNldCA9IGNvbWJpbmVDb21wYXJhdG9ycyhwaW5uZWQsIGlmSW52aXNpYmxlT3JVbmtub3duQnkoY29tYmluZUNvbXBhcmF0b3JzKGRvbWluYW50U3BlYWtlciwgc3BlYWtpbmcsIHJlYWN0aW9uVHlwZSgncmFpc2VkLWhhbmQnKSwgcHVibGlzaGluZ1ZpZGVvLCBwdWJsaXNoaW5nQXVkaW8pKSk7XG4vKipcbiAqIFRoZSBzb3J0aW5nIHByZXNldCBmb3IgbGl2ZXN0cmVhbXMgYW5kIGF1ZGlvIHJvb21zLlxuICovXG5jb25zdCBsaXZlc3RyZWFtT3JBdWRpb1Jvb21Tb3J0UHJlc2V0ID0gY29tYmluZUNvbXBhcmF0b3JzKGlmSW52aXNpYmxlQnkoY29tYmluZUNvbXBhcmF0b3JzKGRvbWluYW50U3BlYWtlciwgc3BlYWtpbmcsIHJlYWN0aW9uVHlwZSgncmFpc2VkLWhhbmQnKSwgcHVibGlzaGluZ1ZpZGVvLCBwdWJsaXNoaW5nQXVkaW8pKSwgcm9sZSgnYWRtaW4nLCAnaG9zdCcsICdzcGVha2VyJykpO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHN0YXRlIG9mIHRoZSBjdXJyZW50IGNhbGwuXG4gKi9cbnZhciBDYWxsaW5nU3RhdGU7XG4oZnVuY3Rpb24gKENhbGxpbmdTdGF0ZSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBjYWxsIGlzIGluIGFuIHVua25vd24gc3RhdGUuXG4gICAgICovXG4gICAgQ2FsbGluZ1N0YXRlW1wiVU5LTk9XTlwiXSA9IFwidW5rbm93blwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBjYWxsIGlzIGluIGFuIGlkbGUgc3RhdGUuXG4gICAgICovXG4gICAgQ2FsbGluZ1N0YXRlW1wiSURMRVwiXSA9IFwiaWRsZVwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBjYWxsIGlzIGluIHRoZSBwcm9jZXNzIG9mIHJpbmdpbmcuXG4gICAgICogKFVzZXIgaGFzbid0IGFjY2VwdGVkIG5vciByZWplY3RlZCB0aGUgY2FsbCB5ZXQuKVxuICAgICAqL1xuICAgIENhbGxpbmdTdGF0ZVtcIlJJTkdJTkdcIl0gPSBcInJpbmdpbmdcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgY2FsbCBpcyBpbiB0aGUgcHJvY2VzcyBvZiBqb2luaW5nLlxuICAgICAqL1xuICAgIENhbGxpbmdTdGF0ZVtcIkpPSU5JTkdcIl0gPSBcImpvaW5pbmdcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgY2FsbCBpcyBjdXJyZW50bHkgYWN0aXZlLlxuICAgICAqL1xuICAgIENhbGxpbmdTdGF0ZVtcIkpPSU5FRFwiXSA9IFwiam9pbmVkXCI7XG4gICAgLyoqXG4gICAgICogVGhlIGNhbGwgaGFzIGJlZW4gbGVmdC5cbiAgICAgKi9cbiAgICBDYWxsaW5nU3RhdGVbXCJMRUZUXCJdID0gXCJsZWZ0XCI7XG4gICAgLyoqXG4gICAgICogVGhlIGNhbGwgaXMgaW4gdGhlIHByb2Nlc3Mgb2YgcmVjb25uZWN0aW5nLlxuICAgICAqL1xuICAgIENhbGxpbmdTdGF0ZVtcIlJFQ09OTkVDVElOR1wiXSA9IFwicmVjb25uZWN0aW5nXCI7XG4gICAgLyoqXG4gICAgICogVGhlIGNhbGwgaXMgaW4gdGhlIHByb2Nlc3Mgb2YgbWlncmF0aW5nIGZyb20gb25lIG5vZGUgdG8gYW5vdGhlci5cbiAgICAgKi9cbiAgICBDYWxsaW5nU3RhdGVbXCJNSUdSQVRJTkdcIl0gPSBcIm1pZ3JhdGluZ1wiO1xuICAgIC8qKlxuICAgICAqIFRoZSBjYWxsIGhhcyBmYWlsZWQgdG8gcmVjb25uZWN0LlxuICAgICAqL1xuICAgIENhbGxpbmdTdGF0ZVtcIlJFQ09OTkVDVElOR19GQUlMRURcIl0gPSBcInJlY29ubmVjdGluZy1mYWlsZWRcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgY2FsbCBpcyBpbiBvZmZsaW5lIG1vZGUuXG4gICAgICovXG4gICAgQ2FsbGluZ1N0YXRlW1wiT0ZGTElORVwiXSA9IFwib2ZmbGluZVwiO1xufSkoQ2FsbGluZ1N0YXRlIHx8IChDYWxsaW5nU3RhdGUgPSB7fSkpO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBkZWZhdWx0IGVncmVzcyBvYmplY3QgLSB3aGVuIG5vIGVncmVzcyBkYXRhIGlzIGF2YWlsYWJsZS5cbiAqL1xuY29uc3QgZGVmYXVsdEVncmVzcyA9IHtcbiAgICBicm9hZGNhc3Rpbmc6IGZhbHNlLFxuICAgIGhsczogeyBwbGF5bGlzdF91cmw6ICcnIH0sXG4gICAgcnRtcHM6IFtdLFxufTtcbi8qKlxuICogSG9sZHMgdGhlIHN0YXRlIG9mIHRoZSBjdXJyZW50IGNhbGwuXG4gKiBAcmVhY3QgWW91IGRvbid0IGhhdmUgdG8gdXNlIHRoaXMgY2xhc3MgZGlyZWN0bHksIGFzIHdlIGFyZSBleHBvc2luZyB0aGUgc3RhdGUgdGhyb3VnaCBIb29rcy5cbiAqL1xuY2xhc3MgQ2FsbFN0YXRlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBDYWxsU3RhdGUgY2xhc3MuXG4gICAgICpcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5iYWNrc3RhZ2VTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdCh0cnVlKTtcbiAgICAgICAgdGhpcy5ibG9ja2VkVXNlcklkc1N1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KFtdKTtcbiAgICAgICAgdGhpcy5jcmVhdGVkQXRTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdChuZXcgRGF0ZSgpKTtcbiAgICAgICAgdGhpcy5lbmRlZEF0U3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3QodW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5zdGFydHNBdFN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHVuZGVmaW5lZCk7XG4gICAgICAgIHRoaXMudXBkYXRlZEF0U3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3QobmV3IERhdGUoKSk7XG4gICAgICAgIHRoaXMuY3JlYXRlZEJ5U3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3QodW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5jdXN0b21TdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdCh7fSk7XG4gICAgICAgIHRoaXMuZWdyZXNzU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3QodW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5pbmdyZXNzU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3QodW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5yZWNvcmRpbmdTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG4gICAgICAgIHRoaXMuc2Vzc2lvblN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHVuZGVmaW5lZCk7XG4gICAgICAgIHRoaXMuc2V0dGluZ3NTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdCh1bmRlZmluZWQpO1xuICAgICAgICB0aGlzLnRyYW5zY3JpYmluZ1N1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKTtcbiAgICAgICAgdGhpcy5lbmRlZEJ5U3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3QodW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy50aHVtYm5haWxzU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3QodW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5tZW1iZXJzU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3QoW10pO1xuICAgICAgICB0aGlzLm93bkNhcGFiaWxpdGllc1N1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KFtdKTtcbiAgICAgICAgdGhpcy5jYWxsaW5nU3RhdGVTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdChDYWxsaW5nU3RhdGUuVU5LTk9XTik7XG4gICAgICAgIHRoaXMuc3RhcnRlZEF0U3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3QodW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudENvdW50U3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3QoMCk7XG4gICAgICAgIHRoaXMuYW5vbnltb3VzUGFydGljaXBhbnRDb3VudFN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KDApO1xuICAgICAgICB0aGlzLnBhcnRpY2lwYW50c1N1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KFtdKTtcbiAgICAgICAgdGhpcy5jYWxsU3RhdHNSZXBvcnRTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdCh1bmRlZmluZWQpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBsaXN0IG9mIGNvbXBhcmF0b3JzIHRoYXQgYXJlIHVzZWQgdG8gc29ydCB0aGUgcGFydGljaXBhbnRzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zb3J0UGFydGljaXBhbnRzQnkgPSBkZWZhdWx0U29ydFByZXNldDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIGxpc3Qgb2YgY3JpdGVyaWEgdGhhdCBhcmUgdXNlZCB0byBzb3J0IHRoZSBwYXJ0aWNpcGFudHMuXG4gICAgICAgICAqIFRvIGRpc2FibGUgc29ydGluZywgeW91IGNhbiBwYXNzIGBub29wQ29tcGFyYXRvcigpYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGNvbXBhcmF0b3IgdGhlIGNvbXBhcmF0b3IgdG8gdXNlIHRvIHNvcnQgdGhlIHBhcnRpY2lwYW50cy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2V0U29ydFBhcnRpY2lwYW50c0J5ID0gKGNvbXBhcmF0b3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc29ydFBhcnRpY2lwYW50c0J5ID0gY29tcGFyYXRvcjtcbiAgICAgICAgICAgIC8vIHRyaWdnZXIgcmUtc29ydGluZyBvZiBwYXJ0aWNpcGFudHNcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMucGFydGljaXBhbnRzU3ViamVjdCwgKHBzKSA9PiBwcyk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBjdXJyZW50IHZhbHVlIG9mIGFuIG9ic2VydmFibGUsIG9yIHVuZGVmaW5lZCBpZiB0aGUgb2JzZXJ2YWJsZSBoYXNcbiAgICAgICAgICogbm90IGVtaXR0ZWQgYSB2YWx1ZSB5ZXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBvYnNlcnZhYmxlJCB0aGUgb2JzZXJ2YWJsZSB0byBnZXQgdGhlIHZhbHVlIGZyb20uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdldEN1cnJlbnRWYWx1ZSA9IGdldEN1cnJlbnRWYWx1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZGF0ZXMgdGhlIHZhbHVlIG9mIHRoZSBwcm92aWRlZCBTdWJqZWN0LlxuICAgICAgICAgKiBBbiBgdXBkYXRlYCBjYW4gZWl0aGVyIGJlIGEgbmV3IHZhbHVlIG9yIGEgZnVuY3Rpb24gd2hpY2ggdGFrZXNcbiAgICAgICAgICogdGhlIGN1cnJlbnQgdmFsdWUgYW5kIHJldHVybnMgYSBuZXcgdmFsdWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gc3ViamVjdCB0aGUgc3ViamVjdCB0byB1cGRhdGUuXG4gICAgICAgICAqIEBwYXJhbSB1cGRhdGUgdGhlIHVwZGF0ZSB0byBhcHBseSB0byB0aGUgc3ViamVjdC5cbiAgICAgICAgICogQHJldHVybiB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2V0Q3VycmVudFZhbHVlID0gc2V0Q3VycmVudFZhbHVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgbnVtYmVyIG9mIHBhcnRpY2lwYW50cyBpbiB0aGUgY3VycmVudCBjYWxsLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICogQHBhcmFtIGNvdW50IHRoZSBudW1iZXIgb2YgcGFydGljaXBhbnRzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZXRQYXJ0aWNpcGFudENvdW50ID0gKGNvdW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5wYXJ0aWNpcGFudENvdW50U3ViamVjdCwgY291bnQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgdGltZSB0aGUgY2FsbCBzZXNzaW9uIGFjdHVhbGx5IHN0YXJ0ZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKiBAcGFyYW0gc3RhcnRlZEF0IHRoZSB0aW1lIHRoZSBjYWxsIHNlc3Npb24gYWN0dWFsbHkgc3RhcnRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2V0U3RhcnRlZEF0ID0gKHN0YXJ0ZWRBdCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMuc3RhcnRlZEF0U3ViamVjdCwgc3RhcnRlZEF0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIG51bWJlciBvZiBhbm9ueW1vdXMgcGFydGljaXBhbnRzIGluIHRoZSBjdXJyZW50IGNhbGwuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKiBAcGFyYW0gY291bnQgdGhlIG51bWJlciBvZiBhbm9ueW1vdXMgcGFydGljaXBhbnRzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZXRBbm9ueW1vdXNQYXJ0aWNpcGFudENvdW50ID0gKGNvdW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5hbm9ueW1vdXNQYXJ0aWNpcGFudENvdW50U3ViamVjdCwgY291bnQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgbGlzdCBvZiBwYXJ0aWNpcGFudHMgaW4gdGhlIGN1cnJlbnQgY2FsbC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBwYXJ0aWNpcGFudHMgdGhlIGxpc3Qgb2YgcGFydGljaXBhbnRzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZXRQYXJ0aWNpcGFudHMgPSAocGFydGljaXBhbnRzKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5wYXJ0aWNpcGFudHNTdWJqZWN0LCBwYXJ0aWNpcGFudHMpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgY2FsbGluZyBzdGF0ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqIEBwYXJhbSBzdGF0ZSB0aGUgbmV3IGNhbGxpbmcgc3RhdGUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNldENhbGxpbmdTdGF0ZSA9IChzdGF0ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMuY2FsbGluZ1N0YXRlU3ViamVjdCwgc3RhdGUpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgY2FsbCBzdGF0cyByZXBvcnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKiBAcGFyYW0gcmVwb3J0IHRoZSByZXBvcnQgdG8gc2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZXRDYWxsU3RhdHNSZXBvcnQgPSAocmVwb3J0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5jYWxsU3RhdHNSZXBvcnRTdWJqZWN0LCByZXBvcnQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgbWVtYmVycyBvZiB0aGUgY3VycmVudCBjYWxsLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICogQHBhcmFtIG1lbWJlcnMgdGhlIG1lbWJlcnMgdG8gc2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZXRNZW1iZXJzID0gKG1lbWJlcnMpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMubWVtYmVyc1N1YmplY3QsIG1lbWJlcnMpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgb3duIGNhcGFiaWxpdGllcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqIEBwYXJhbSBjYXBhYmlsaXRpZXMgdGhlIGNhcGFiaWxpdGllcyB0byBzZXQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNldE93bkNhcGFiaWxpdGllcyA9IChjYXBhYmlsaXRpZXMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldEN1cnJlbnRWYWx1ZSh0aGlzLm93bkNhcGFiaWxpdGllc1N1YmplY3QsIGNhcGFiaWxpdGllcyk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaWxsIHRyeSB0byBmaW5kIHRoZSBwYXJ0aWNpcGFudCB3aXRoIHRoZSBnaXZlbiBzZXNzaW9uSWQgaW4gdGhlIGN1cnJlbnQgY2FsbC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHNlc3Npb25JZCB0aGUgc2Vzc2lvbklkIG9mIHRoZSBwYXJ0aWNpcGFudCB0byBmaW5kLlxuICAgICAgICAgKiBAcmV0dXJucyB0aGUgcGFydGljaXBhbnQgd2l0aCB0aGUgZ2l2ZW4gc2Vzc2lvbklkIG9yIHVuZGVmaW5lZCBpZiBub3QgZm91bmQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZpbmRQYXJ0aWNpcGFudEJ5U2Vzc2lvbklkID0gKHNlc3Npb25JZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFydGljaXBhbnRzLmZpbmQoKHApID0+IHAuc2Vzc2lvbklkID09PSBzZXNzaW9uSWQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBhIG5ldyBsb29rdXAgdGFibGUgb2YgcGFydGljaXBhbnRzIGluZGV4ZWQgYnkgdGhlaXIgc2Vzc2lvbiBJRC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2V0UGFydGljaXBhbnRMb29rdXBCeVNlc3Npb25JZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnRpY2lwYW50cy5yZWR1Y2UoKGxvb2t1cFRhYmxlLCBwYXJ0aWNpcGFudCkgPT4ge1xuICAgICAgICAgICAgICAgIGxvb2t1cFRhYmxlW3BhcnRpY2lwYW50LnNlc3Npb25JZF0gPSBwYXJ0aWNpcGFudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9va3VwVGFibGU7XG4gICAgICAgICAgICB9LCB7fSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGVzIGEgcGFydGljaXBhbnQgaW4gdGhlIGN1cnJlbnQgY2FsbCBpZGVudGlmaWVkIGJ5IHRoZSBnaXZlbiBgc2Vzc2lvbklkYC5cbiAgICAgICAgICogSWYgdGhlIHBhcnRpY2lwYW50IGNhbid0IGJlIGZvdW5kLCB0aGlzIG9wZXJhdGlvbiBpcyBuby1vcC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBzZXNzaW9uSWQgdGhlIHNlc3Npb24gSUQgb2YgdGhlIHBhcnRpY2lwYW50IHRvIHVwZGF0ZS5cbiAgICAgICAgICogQHBhcmFtIHBhdGNoIHRoZSBwYXRjaCB0byBhcHBseSB0byB0aGUgcGFydGljaXBhbnQuXG4gICAgICAgICAqIEByZXR1cm5zIHRoZSB1cGRhdGVkIHBhcnRpY2lwYW50IG9yIGB1bmRlZmluZWRgIGlmIHRoZSBwYXJ0aWNpcGFudCBjb3VsZG4ndCBiZSBmb3VuZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudXBkYXRlUGFydGljaXBhbnQgPSAoc2Vzc2lvbklkLCBwYXRjaCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFydGljaXBhbnQgPSB0aGlzLmZpbmRQYXJ0aWNpcGFudEJ5U2Vzc2lvbklkKHNlc3Npb25JZCk7XG4gICAgICAgICAgICBpZiAoIXBhcnRpY2lwYW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ3dhcm4nLCBgUGFydGljaXBhbnQgd2l0aCBzZXNzaW9uSWQgJHtzZXNzaW9uSWR9IG5vdCBmb3VuZGApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRoZVBhdGNoID0gdHlwZW9mIHBhdGNoID09PSAnZnVuY3Rpb24nID8gcGF0Y2gocGFydGljaXBhbnQpIDogcGF0Y2g7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkUGFydGljaXBhbnQgPSB7XG4gICAgICAgICAgICAgICAgLy8gRklYTUUgT0w6IHRoaXMgaXMgbm90IGEgZGVlcCBtZXJnZSwgd2UgbWlnaHQgd2FudCB0byByZXZpc2l0IHRoaXNcbiAgICAgICAgICAgICAgICAuLi5wYXJ0aWNpcGFudCxcbiAgICAgICAgICAgICAgICAuLi50aGVQYXRjaCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRQYXJ0aWNpcGFudHMoKHBhcnRpY2lwYW50cykgPT4gcGFydGljaXBhbnRzLm1hcCgocCkgPT4gcC5zZXNzaW9uSWQgPT09IHNlc3Npb25JZCA/IHVwZGF0ZWRQYXJ0aWNpcGFudCA6IHApKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZGF0ZXMgYSBwYXJ0aWNpcGFudCBpbiB0aGUgY3VycmVudCBjYWxsIGlkZW50aWZpZWQgYnkgdGhlIGdpdmVuIGBzZXNzaW9uSWRgLlxuICAgICAgICAgKiBJZiBhIHBhcnRpY2lwYW50IHdpdGggbWF0Y2hpbmcgYHNlc3Npb25JZGAgY2FuJ3QgYmUgZm91bmQsIHRoZSBwcm92aWRlZFxuICAgICAgICAgKiBgcGFydGljaXBhbnRgIGlzIGFkZGVkIHRvIHRoZSBsaXN0IG9mIHBhcnRpY2lwYW50cy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHNlc3Npb25JZCB0aGUgc2Vzc2lvbiBJRCBvZiB0aGUgcGFydGljaXBhbnQgdG8gdXBkYXRlLlxuICAgICAgICAgKiBAcGFyYW0gcGFydGljaXBhbnQgdGhlIHBhcnRpY2lwYW50IHRvIHVwZGF0ZSBvciBhZGQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVwZGF0ZU9yQWRkUGFydGljaXBhbnQgPSAoc2Vzc2lvbklkLCBwYXJ0aWNpcGFudCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmZpbmRQYXJ0aWNpcGFudEJ5U2Vzc2lvbklkKHNlc3Npb25JZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRQYXJ0aWNpcGFudHMoKHBhcnRpY2lwYW50cykgPT4gW1xuICAgICAgICAgICAgICAgICAgICAuLi5wYXJ0aWNpcGFudHMsXG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2lwYW50LFxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0UGFydGljaXBhbnRzKChwYXJ0aWNpcGFudHMpID0+IHBhcnRpY2lwYW50cy5tYXAoKHApID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocC5zZXNzaW9uSWQgPT09IHNlc3Npb25JZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ucCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnBhcnRpY2lwYW50LFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcDtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZGF0ZXMgYWxsIHBhcnRpY2lwYW50cyBpbiB0aGUgY3VycmVudCBjYWxsIHdob3NlIHNlc3Npb24gSUQgaXMgaW4gdGhlIGdpdmVuIGBzZXNzaW9uSWRzYC5cbiAgICAgICAgICogSWYgbm8gcGF0Y2hlcyBhcmUgcHJvdmlkZWQsIHRoaXMgb3BlcmF0aW9uIGlzIG5vLW9wLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHBhdGNoIHRoZSBwYXRjaCB0byBhcHBseSB0byB0aGUgcGFydGljaXBhbnRzLlxuICAgICAgICAgKiBAcmV0dXJucyBhbGwgcGFydGljaXBhbnRzLCB3aXRoIGFsbCBwYXRjaCBhcHBsaWVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51cGRhdGVQYXJ0aWNpcGFudHMgPSAocGF0Y2gpID0+IHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhwYXRjaCkubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldFBhcnRpY2lwYW50cygocGFydGljaXBhbnRzKSA9PiBwYXJ0aWNpcGFudHMubWFwKChwKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGhlUGF0Y2ggPSBwYXRjaFtwLnNlc3Npb25JZF07XG4gICAgICAgICAgICAgICAgaWYgKHRoZVBhdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5wLFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhlUGF0Y2gsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlcyB0aGUgY2FsbCBzdGF0ZSB3aXRoIHRoZSBkYXRhIHJlY2VpdmVkIGZyb20gdGhlIHNlcnZlci5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBldmVudCB0aGUgdmlkZW8gZXZlbnQgdGhhdCBvdXIgYmFja2VuZCBzZW50IHVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51cGRhdGVGcm9tRXZlbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZSA9IHRoaXMuZXZlbnRIYW5kbGVyc1tldmVudC50eXBlXTtcbiAgICAgICAgICAgIGlmICh1cGRhdGUpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGUoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlcyB0aGUgcGFydGljaXBhbnQgcGlubmVkIHN0YXRlIHdpdGggc2VydmVyIHNpZGUgcGlubmluZyBkYXRhLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gcGlucyB0aGUgbGF0ZXN0IHBpbnMgZnJvbSB0aGUgc2VydmVyLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZXRTZXJ2ZXJTaWRlUGlucyA9IChwaW5zKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwaW5zTG9va3VwID0gcGlucy5yZWR1Y2UoKGxvb2t1cCwgcGluKSA9PiB7XG4gICAgICAgICAgICAgICAgbG9va3VwW3Bpbi5zZXNzaW9uSWRdID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9va3VwO1xuICAgICAgICAgICAgfSwge30pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0UGFydGljaXBhbnRzKChwYXJ0aWNpcGFudHMpID0+IHBhcnRpY2lwYW50cy5tYXAoKHBhcnRpY2lwYW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VydmVyU2lkZVBpbm5lZEF0ID0gcGluc0xvb2t1cFtwYXJ0aWNpcGFudC5zZXNzaW9uSWRdO1xuICAgICAgICAgICAgICAgIC8vIHRoZSBwYXJ0aWNpcGFudCBpcyBuZXdseSBwaW5uZWRcbiAgICAgICAgICAgICAgICBpZiAoc2VydmVyU2lkZVBpbm5lZEF0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5wYXJ0aWNpcGFudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTG9jYWxQaW46IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpbm5lZEF0OiBzZXJ2ZXJTaWRlUGlubmVkQXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyB0aGUgcGFydGljaXBhbnQgaXMgbm8gbG9uZ2VyIHBpbm5lZCBzZXJ2ZXIgc2lkZVxuICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gcmVzZXQgdGhlIHBpblxuICAgICAgICAgICAgICAgIGlmIChwYXJ0aWNpcGFudC5waW4gJiYgIXBhcnRpY2lwYW50LnBpbi5pc0xvY2FsUGluKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5wYXJ0aWNpcGFudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBubyBjaGFuZ2VzIHRvIGJlIGFwcGxpZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFydGljaXBhbnQ7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGVzIHRoZSBjYWxsIHN0YXRlIHdpdGggdGhlIGRhdGEgcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGNhbGwgdGhlIGNhbGwgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51cGRhdGVGcm9tQ2FsbFJlc3BvbnNlID0gKGNhbGwpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMuYmFja3N0YWdlU3ViamVjdCwgY2FsbC5iYWNrc3RhZ2UpO1xuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5ibG9ja2VkVXNlcklkc1N1YmplY3QsIGNhbGwuYmxvY2tlZF91c2VyX2lkcyk7XG4gICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRWYWx1ZSh0aGlzLmNyZWF0ZWRBdFN1YmplY3QsIG5ldyBEYXRlKGNhbGwuY3JlYXRlZF9hdCkpO1xuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy51cGRhdGVkQXRTdWJqZWN0LCBuZXcgRGF0ZShjYWxsLnVwZGF0ZWRfYXQpKTtcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMuc3RhcnRzQXRTdWJqZWN0LCBjYWxsLnN0YXJ0c19hdCA/IG5ldyBEYXRlKGNhbGwuc3RhcnRzX2F0KSA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRWYWx1ZSh0aGlzLmVuZGVkQXRTdWJqZWN0LCBjYWxsLmVuZGVkX2F0ID8gbmV3IERhdGUoY2FsbC5lbmRlZF9hdCkgOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5jcmVhdGVkQnlTdWJqZWN0LCBjYWxsLmNyZWF0ZWRfYnkpO1xuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5jdXN0b21TdWJqZWN0LCBjYWxsLmN1c3RvbSk7XG4gICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRWYWx1ZSh0aGlzLmVncmVzc1N1YmplY3QsIGNhbGwuZWdyZXNzKTtcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMuaW5ncmVzc1N1YmplY3QsIGNhbGwuaW5ncmVzcyk7XG4gICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRWYWx1ZSh0aGlzLnJlY29yZGluZ1N1YmplY3QsIGNhbGwucmVjb3JkaW5nKTtcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMuc2Vzc2lvblN1YmplY3QsIGNhbGwuc2Vzc2lvbik7XG4gICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRWYWx1ZSh0aGlzLnNldHRpbmdzU3ViamVjdCwgY2FsbC5zZXR0aW5ncyk7XG4gICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRWYWx1ZSh0aGlzLnRyYW5zY3JpYmluZ1N1YmplY3QsIGNhbGwudHJhbnNjcmliaW5nKTtcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMudGh1bWJuYWlsc1N1YmplY3QsIGNhbGwudGh1bWJuYWlscyk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlRnJvbU1lbWJlclJlbW92ZWQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMubWVtYmVyc1N1YmplY3QsIChtZW1iZXJzKSA9PiBtZW1iZXJzLmZpbHRlcigobSkgPT4gZXZlbnQubWVtYmVycy5pbmRleE9mKG0udXNlcl9pZCkgPT09IC0xKSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlRnJvbU1lbWJlckFkZGVkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRWYWx1ZSh0aGlzLm1lbWJlcnNTdWJqZWN0LCAobWVtYmVycykgPT4gW1xuICAgICAgICAgICAgICAgIC4uLm1lbWJlcnMsXG4gICAgICAgICAgICAgICAgLi4uZXZlbnQubWVtYmVycyxcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVwZGF0ZUZyb21ITFNCcm9hZGNhc3RTdG9wcGVkID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5lZ3Jlc3NTdWJqZWN0LCAoZWdyZXNzID0gZGVmYXVsdEVncmVzcykgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5lZ3Jlc3MsXG4gICAgICAgICAgICAgICAgYnJvYWRjYXN0aW5nOiBmYWxzZSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51cGRhdGVGcm9tSExTQnJvYWRjYXN0aW5nRmFpbGVkID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5lZ3Jlc3NTdWJqZWN0LCAoZWdyZXNzID0gZGVmYXVsdEVncmVzcykgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5lZ3Jlc3MsXG4gICAgICAgICAgICAgICAgYnJvYWRjYXN0aW5nOiBmYWxzZSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51cGRhdGVGcm9tSExTQnJvYWRjYXN0U3RhcnRlZCA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5lZ3Jlc3NTdWJqZWN0LCAoZWdyZXNzID0gZGVmYXVsdEVncmVzcykgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5lZ3Jlc3MsXG4gICAgICAgICAgICAgICAgYnJvYWRjYXN0aW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIGhsczoge1xuICAgICAgICAgICAgICAgICAgICAuLi5lZ3Jlc3MuaGxzLFxuICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdF91cmw6IGV2ZW50Lmhsc19wbGF5bGlzdF91cmwsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51cGRhdGVGcm9tU2Vzc2lvblBhcnRpY2lwYW50TGVmdCA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5zZXNzaW9uU3ViamVjdCwgKHNlc3Npb24pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ3dhcm4nLCBgUmVjZWl2ZWQgY2FsbC5zZXNzaW9uX3BhcnRpY2lwYW50X2xlZnQgZXZlbnQgYnV0IG5vIHNlc3Npb24gaXMgYXZhaWxhYmxlLmAsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlc3Npb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHsgcGFydGljaXBhbnRzLCBwYXJ0aWNpcGFudHNfY291bnRfYnlfcm9sZSB9ID0gc2Vzc2lvbjtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHVzZXIsIHVzZXJfc2Vzc2lvbl9pZCB9ID0gZXZlbnQucGFydGljaXBhbnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uc2Vzc2lvbixcbiAgICAgICAgICAgICAgICAgICAgcGFydGljaXBhbnRzOiBwYXJ0aWNpcGFudHMuZmlsdGVyKChwKSA9PiBwLnVzZXJfc2Vzc2lvbl9pZCAhPT0gdXNlcl9zZXNzaW9uX2lkKSxcbiAgICAgICAgICAgICAgICAgICAgcGFydGljaXBhbnRzX2NvdW50X2J5X3JvbGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnBhcnRpY2lwYW50c19jb3VudF9ieV9yb2xlLFxuICAgICAgICAgICAgICAgICAgICAgICAgW3VzZXIucm9sZV06IE1hdGgubWF4KDAsIChwYXJ0aWNpcGFudHNfY291bnRfYnlfcm9sZVt1c2VyLnJvbGVdIHx8IDApIC0gMSksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVwZGF0ZUZyb21TZXNzaW9uUGFydGljaXBhbnRKb2luZWQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMuc2Vzc2lvblN1YmplY3QsIChzZXNzaW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCd3YXJuJywgYFJlY2VpdmVkIGNhbGwuc2Vzc2lvbl9wYXJ0aWNpcGFudF9qb2luZWQgZXZlbnQgYnV0IG5vIHNlc3Npb24gaXMgYXZhaWxhYmxlLmAsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlc3Npb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHsgcGFydGljaXBhbnRzLCBwYXJ0aWNpcGFudHNfY291bnRfYnlfcm9sZSB9ID0gc2Vzc2lvbjtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHVzZXIsIHVzZXJfc2Vzc2lvbl9pZCB9ID0gZXZlbnQucGFydGljaXBhbnQ7XG4gICAgICAgICAgICAgICAgLy8gSXQgY291bGQgaGFwcGVuIHRoYXQgdGhlIGJhY2tlbmQgZGVsaXZlcnMgdGhlIHNhbWUgcGFydGljaXBhbnQgbW9yZSB0aGFuIG9uY2UuXG4gICAgICAgICAgICAgICAgLy8gT25jZSB3aXRoIHRoZSBjYWxsLnNlc3Npb25fc3RhcnRlZCBldmVudCBhbmQgb25jZSBhZ2FpbiB3aXRoIHRoZVxuICAgICAgICAgICAgICAgIC8vIGNhbGwuc2Vzc2lvbl9wYXJ0aWNpcGFudF9qb2luZWQgZXZlbnQuIEluIHRoaXMgY2FzZSxcbiAgICAgICAgICAgICAgICAvLyB3ZSBzaG91bGQgdXBkYXRlIHRoZSBleGlzdGluZyBwYXJ0aWNpcGFudCBhbmQgcHJldmVudCBkdXBsaWNhdGluZyBpdC5cbiAgICAgICAgICAgICAgICBsZXQgc2hvdWxkSW5zZXJ0UGFydGljaXBhbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRQYXJ0aWNpcGFudHMgPSBwYXJ0aWNpcGFudHMubWFwKChwKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwLnVzZXJfc2Vzc2lvbl9pZCA9PT0gdXNlcl9zZXNzaW9uX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRJbnNlcnRQYXJ0aWNpcGFudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LnBhcnRpY2lwYW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChzaG91bGRJbnNlcnRQYXJ0aWNpcGFudCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGEgbmV3IGFycmF5LCB3ZSBjYW4gc2FmZWx5IHB1c2ggdGhlIG5ldyBwYXJ0aWNpcGFudFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkUGFydGljaXBhbnRzLnB1c2goZXZlbnQucGFydGljaXBhbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBhcmUgdXBkYXRpbmcgYW4gZXhpc3RpbmcgcGFydGljaXBhbnQsIHdlIGRvbid0IHdhbnQgdG8gaW5jcmVtZW50XG4gICAgICAgICAgICAgICAgLy8gdGhlIHBhcnRpY2lwYW50X2J5X3JvbGUgY291bnQuXG4gICAgICAgICAgICAgICAgY29uc3QgaW5jcmVtZW50ID0gc2hvdWxkSW5zZXJ0UGFydGljaXBhbnQgPyAxIDogMDtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi5zZXNzaW9uLFxuICAgICAgICAgICAgICAgICAgICBwYXJ0aWNpcGFudHM6IHVwZGF0ZWRQYXJ0aWNpcGFudHMsXG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2lwYW50c19jb3VudF9ieV9yb2xlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5wYXJ0aWNpcGFudHNfY291bnRfYnlfcm9sZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFt1c2VyLnJvbGVdOiAocGFydGljaXBhbnRzX2NvdW50X2J5X3JvbGVbdXNlci5yb2xlXSB8fCAwKSArIGluY3JlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlTWVtYmVycyA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5tZW1iZXJzU3ViamVjdCwgKG1lbWJlcnMpID0+IG1lbWJlcnMubWFwKChtZW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZW1iZXJVcGRhdGUgPSBldmVudC5tZW1iZXJzLmZpbmQoKG0pID0+IG0udXNlcl9pZCA9PT0gbWVtYmVyLnVzZXJfaWQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBtZW1iZXJVcGRhdGUgPyBtZW1iZXJVcGRhdGUgOiBtZW1iZXI7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlUGFydGljaXBhbnRSZWFjdGlvbiA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyB1c2VyLCBjdXN0b20sIHR5cGUsIGVtb2ppX2NvZGUgfSA9IGV2ZW50LnJlYWN0aW9uO1xuICAgICAgICAgICAgdGhpcy5zZXRQYXJ0aWNpcGFudHMoKHBhcnRpY2lwYW50cykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJ0aWNpcGFudHMubWFwKChwKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNraXAgaWYgdGhlIHJlYWN0aW9uIGlzIG5vdCBmb3IgdGhpcyBwYXJ0aWNpcGFudFxuICAgICAgICAgICAgICAgICAgICBpZiAocC51c2VySWQgIT09IHVzZXIuaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcDtcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBwYXJ0aWNpcGFudCB3aXRoIHRoZSBuZXcgcmVhY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnAsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFjdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1vamlfY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b20sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudW5ibG9ja1VzZXIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMuYmxvY2tlZFVzZXJJZHNTdWJqZWN0LCAoY3VycmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghY3VycmVudClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQuZmlsdGVyKChpZCkgPT4gaWQgIT09IGV2ZW50LnVzZXIuaWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYmxvY2tVc2VyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRWYWx1ZSh0aGlzLmJsb2NrZWRVc2VySWRzU3ViamVjdCwgKGN1cnJlbnQpID0+IFtcbiAgICAgICAgICAgICAgICAuLi4oY3VycmVudCB8fCBbXSksXG4gICAgICAgICAgICAgICAgZXZlbnQudXNlci5pZCxcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVwZGF0ZU93bkNhcGFiaWxpdGllcyA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnVzZXIuaWQgPT09IHRoaXMubG9jYWxQYXJ0aWNpcGFudD8udXNlcklkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5vd25DYXBhYmlsaXRpZXNTdWJqZWN0LCBldmVudC5vd25fY2FwYWJpbGl0aWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBnZXRMb2dnZXIoWydDYWxsU3RhdGUnXSk7XG4gICAgICAgIHRoaXMucGFydGljaXBhbnRzJCA9IHRoaXMucGFydGljaXBhbnRzU3ViamVjdC5hc09ic2VydmFibGUoKS5waXBlKFxuICAgICAgICAvLyBtYWludGFpbiBzdGFibGUtc29ydCBieSBtdXRhdGluZyB0aGUgcGFydGljaXBhbnRzIHN0b3JlZFxuICAgICAgICAvLyBpbiB0aGUgb3JpZ2luYWwgc3ViamVjdFxuICAgICAgICBtYXAkMSgocHMpID0+IHBzLnNvcnQodGhpcy5zb3J0UGFydGljaXBhbnRzQnkpKSwgc2hhcmVSZXBsYXkoeyBidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZSB9KSk7XG4gICAgICAgIHRoaXMubG9jYWxQYXJ0aWNpcGFudCQgPSB0aGlzLnBhcnRpY2lwYW50cyQucGlwZShtYXAkMSgocGFydGljaXBhbnRzKSA9PiBwYXJ0aWNpcGFudHMuZmluZCgocCkgPT4gcC5pc0xvY2FsUGFydGljaXBhbnQpKSwgc2hhcmVSZXBsYXkoeyBidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZSB9KSk7XG4gICAgICAgIHRoaXMucmVtb3RlUGFydGljaXBhbnRzJCA9IHRoaXMucGFydGljaXBhbnRzJC5waXBlKG1hcCQxKChwYXJ0aWNpcGFudHMpID0+IHBhcnRpY2lwYW50cy5maWx0ZXIoKHApID0+ICFwLmlzTG9jYWxQYXJ0aWNpcGFudCkpLCBzaGFyZVJlcGxheSh7IGJ1ZmZlclNpemU6IDEsIHJlZkNvdW50OiB0cnVlIH0pKTtcbiAgICAgICAgdGhpcy5waW5uZWRQYXJ0aWNpcGFudHMkID0gdGhpcy5wYXJ0aWNpcGFudHMkLnBpcGUobWFwJDEoKHBhcnRpY2lwYW50cykgPT4gcGFydGljaXBhbnRzLmZpbHRlcigocCkgPT4gISFwLnBpbikpLCBzaGFyZVJlcGxheSh7IGJ1ZmZlclNpemU6IDEsIHJlZkNvdW50OiB0cnVlIH0pKTtcbiAgICAgICAgdGhpcy5kb21pbmFudFNwZWFrZXIkID0gdGhpcy5wYXJ0aWNpcGFudHMkLnBpcGUobWFwJDEoKHBhcnRpY2lwYW50cykgPT4gcGFydGljaXBhbnRzLmZpbmQoKHApID0+IHAuaXNEb21pbmFudFNwZWFrZXIpKSwgc2hhcmVSZXBsYXkoeyBidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZSB9KSk7XG4gICAgICAgIHRoaXMuaGFzT25nb2luZ1NjcmVlblNoYXJlJCA9IHRoaXMucGFydGljaXBhbnRzJC5waXBlKG1hcCQxKChwYXJ0aWNpcGFudHMpID0+IHBhcnRpY2lwYW50cy5zb21lKChwKSA9PiBwLnB1Ymxpc2hlZFRyYWNrcy5pbmNsdWRlcyhUcmFja1R5cGUuU0NSRUVOX1NIQVJFKSkpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLCBzaGFyZVJlcGxheSh7IGJ1ZmZlclNpemU6IDEsIHJlZkNvdW50OiB0cnVlIH0pKTtcbiAgICAgICAgdGhpcy5zdGFydGVkQXQkID0gdGhpcy5zdGFydGVkQXRTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICB0aGlzLnBhcnRpY2lwYW50Q291bnQkID0gdGhpcy5wYXJ0aWNpcGFudENvdW50U3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgICAgICAgdGhpcy5hbm9ueW1vdXNQYXJ0aWNpcGFudENvdW50JCA9XG4gICAgICAgICAgICB0aGlzLmFub255bW91c1BhcnRpY2lwYW50Q291bnRTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICB0aGlzLmNhbGxTdGF0c1JlcG9ydCQgPSB0aGlzLmNhbGxTdGF0c1JlcG9ydFN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgICAgIHRoaXMubWVtYmVycyQgPSB0aGlzLm1lbWJlcnNTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICB0aGlzLm93bkNhcGFiaWxpdGllcyQgPSB0aGlzLm93bkNhcGFiaWxpdGllc1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgICAgIHRoaXMuY2FsbGluZ1N0YXRlJCA9IHRoaXMuY2FsbGluZ1N0YXRlU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgICAgICAgdGhpcy5iYWNrc3RhZ2UkID0gdGhpcy5iYWNrc3RhZ2VTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICB0aGlzLmJsb2NrZWRVc2VySWRzJCA9IHRoaXMuYmxvY2tlZFVzZXJJZHNTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICB0aGlzLmNyZWF0ZWRBdCQgPSB0aGlzLmNyZWF0ZWRBdFN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgICAgIHRoaXMuZW5kZWRBdCQgPSB0aGlzLmVuZGVkQXRTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICB0aGlzLnN0YXJ0c0F0JCA9IHRoaXMuc3RhcnRzQXRTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICB0aGlzLnVwZGF0ZWRBdCQgPSB0aGlzLnVwZGF0ZWRBdFN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgICAgIHRoaXMuY3JlYXRlZEJ5JCA9IHRoaXMuY3JlYXRlZEJ5U3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgICAgICAgdGhpcy5jdXN0b20kID0gdGhpcy5jdXN0b21TdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICB0aGlzLmVncmVzcyQgPSB0aGlzLmVncmVzc1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgICAgIHRoaXMuaW5ncmVzcyQgPSB0aGlzLmluZ3Jlc3NTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICB0aGlzLnJlY29yZGluZyQgPSB0aGlzLnJlY29yZGluZ1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgICAgIHRoaXMuc2Vzc2lvbiQgPSB0aGlzLnNlc3Npb25TdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICB0aGlzLnNldHRpbmdzJCA9IHRoaXMuc2V0dGluZ3NTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICB0aGlzLnRyYW5zY3JpYmluZyQgPSB0aGlzLnRyYW5zY3JpYmluZ1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgICAgIHRoaXMuZW5kZWRCeSQgPSB0aGlzLmVuZGVkQnlTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICB0aGlzLnRodW1ibmFpbHMkID0gdGhpcy50aHVtYm5haWxzU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzID0ge1xuICAgICAgICAgICAgLy8gdGhlc2UgZXZlbnRzIGFyZSBub3QgdXBkYXRpbmcgdGhlIGNhbGwgc3RhdGU6XG4gICAgICAgICAgICAnY2FsbC5wZXJtaXNzaW9uX3JlcXVlc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2FsbC5yZWNvcmRpbmdfZmFpbGVkJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2NhbGwucmVjb3JkaW5nX3JlYWR5JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2NhbGwudXNlcl9tdXRlZCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjb25uZWN0aW9uLmVycm9yJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Nvbm5lY3Rpb24ub2snOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnaGVhbHRoLmNoZWNrJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY3VzdG9tOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAvLyBldmVudHMgdGhhdCB1cGRhdGUgY2FsbCBzdGF0ZTpcbiAgICAgICAgICAgICdjYWxsLmFjY2VwdGVkJzogKGUpID0+IHRoaXMudXBkYXRlRnJvbUNhbGxSZXNwb25zZShlLmNhbGwpLFxuICAgICAgICAgICAgJ2NhbGwuYmxvY2tlZF91c2VyJzogdGhpcy5ibG9ja1VzZXIsXG4gICAgICAgICAgICAnY2FsbC5jcmVhdGVkJzogKGUpID0+IHRoaXMudXBkYXRlRnJvbUNhbGxSZXNwb25zZShlLmNhbGwpLFxuICAgICAgICAgICAgJ2NhbGwuZW5kZWQnOiAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRnJvbUNhbGxSZXNwb25zZShlLmNhbGwpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMuZW5kZWRCeVN1YmplY3QsIGUudXNlcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2NhbGwuaGxzX2Jyb2FkY2FzdGluZ19mYWlsZWQnOiB0aGlzLnVwZGF0ZUZyb21ITFNCcm9hZGNhc3RpbmdGYWlsZWQsXG4gICAgICAgICAgICAnY2FsbC5obHNfYnJvYWRjYXN0aW5nX3N0YXJ0ZWQnOiB0aGlzLnVwZGF0ZUZyb21ITFNCcm9hZGNhc3RTdGFydGVkLFxuICAgICAgICAgICAgJ2NhbGwuaGxzX2Jyb2FkY2FzdGluZ19zdG9wcGVkJzogdGhpcy51cGRhdGVGcm9tSExTQnJvYWRjYXN0U3RvcHBlZCxcbiAgICAgICAgICAgICdjYWxsLmxpdmVfc3RhcnRlZCc6IChlKSA9PiB0aGlzLnVwZGF0ZUZyb21DYWxsUmVzcG9uc2UoZS5jYWxsKSxcbiAgICAgICAgICAgICdjYWxsLm1lbWJlcl9hZGRlZCc6IHRoaXMudXBkYXRlRnJvbU1lbWJlckFkZGVkLFxuICAgICAgICAgICAgJ2NhbGwubWVtYmVyX3JlbW92ZWQnOiB0aGlzLnVwZGF0ZUZyb21NZW1iZXJSZW1vdmVkLFxuICAgICAgICAgICAgJ2NhbGwubWVtYmVyX3VwZGF0ZWRfcGVybWlzc2lvbic6IHRoaXMudXBkYXRlTWVtYmVycyxcbiAgICAgICAgICAgICdjYWxsLm1lbWJlcl91cGRhdGVkJzogdGhpcy51cGRhdGVNZW1iZXJzLFxuICAgICAgICAgICAgJ2NhbGwubm90aWZpY2F0aW9uJzogKGUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUZyb21DYWxsUmVzcG9uc2UoZS5jYWxsKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldE1lbWJlcnMoZS5tZW1iZXJzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnY2FsbC5wZXJtaXNzaW9uc191cGRhdGVkJzogdGhpcy51cGRhdGVPd25DYXBhYmlsaXRpZXMsXG4gICAgICAgICAgICAnY2FsbC5yZWFjdGlvbl9uZXcnOiB0aGlzLnVwZGF0ZVBhcnRpY2lwYW50UmVhY3Rpb24sXG4gICAgICAgICAgICAnY2FsbC5yZWNvcmRpbmdfc3RhcnRlZCc6ICgpID0+IHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMucmVjb3JkaW5nU3ViamVjdCwgdHJ1ZSksXG4gICAgICAgICAgICAnY2FsbC5yZWNvcmRpbmdfc3RvcHBlZCc6ICgpID0+IHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMucmVjb3JkaW5nU3ViamVjdCwgZmFsc2UpLFxuICAgICAgICAgICAgJ2NhbGwucmVqZWN0ZWQnOiAoZSkgPT4gdGhpcy51cGRhdGVGcm9tQ2FsbFJlc3BvbnNlKGUuY2FsbCksXG4gICAgICAgICAgICAnY2FsbC5yaW5nJzogKGUpID0+IHRoaXMudXBkYXRlRnJvbUNhbGxSZXNwb25zZShlLmNhbGwpLFxuICAgICAgICAgICAgJ2NhbGwuc2Vzc2lvbl9lbmRlZCc6IChlKSA9PiB0aGlzLnVwZGF0ZUZyb21DYWxsUmVzcG9uc2UoZS5jYWxsKSxcbiAgICAgICAgICAgICdjYWxsLnNlc3Npb25fcGFydGljaXBhbnRfam9pbmVkJzogdGhpcy51cGRhdGVGcm9tU2Vzc2lvblBhcnRpY2lwYW50Sm9pbmVkLFxuICAgICAgICAgICAgJ2NhbGwuc2Vzc2lvbl9wYXJ0aWNpcGFudF9sZWZ0JzogdGhpcy51cGRhdGVGcm9tU2Vzc2lvblBhcnRpY2lwYW50TGVmdCxcbiAgICAgICAgICAgICdjYWxsLnNlc3Npb25fc3RhcnRlZCc6IChlKSA9PiB0aGlzLnVwZGF0ZUZyb21DYWxsUmVzcG9uc2UoZS5jYWxsKSxcbiAgICAgICAgICAgICdjYWxsLnVuYmxvY2tlZF91c2VyJzogdGhpcy51bmJsb2NrVXNlcixcbiAgICAgICAgICAgICdjYWxsLnVwZGF0ZWQnOiAoZSkgPT4gdGhpcy51cGRhdGVGcm9tQ2FsbFJlc3BvbnNlKGUuY2FsbCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBzZXJ2ZXItc2lkZSBjb3VudGVkIG51bWJlciBvZiBwYXJ0aWNpcGFudHMgY29ubmVjdGVkIHRvIHRoZSBjdXJyZW50IGNhbGwuXG4gICAgICogVGhpcyBudW1iZXIgaW5jbHVkZXMgdGhlIGFub255bW91cyBwYXJ0aWNpcGFudHMgYXMgd2VsbC5cbiAgICAgKi9cbiAgICBnZXQgcGFydGljaXBhbnRDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFZhbHVlKHRoaXMucGFydGljaXBhbnRDb3VudCQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgdGltZSB0aGUgY2FsbCBzZXNzaW9uIGFjdHVhbGx5IHN0YXJ0ZWQuXG4gICAgICogVXNlZnVsIGZvciBkaXNwbGF5aW5nIHRoZSBjYWxsIGR1cmF0aW9uLlxuICAgICAqL1xuICAgIGdldCBzdGFydGVkQXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLnN0YXJ0ZWRBdCQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgc2VydmVyLXNpZGUgY291bnRlZCBudW1iZXIgb2YgYW5vbnltb3VzIHBhcnRpY2lwYW50cyBjb25uZWN0ZWQgdG8gdGhlIGN1cnJlbnQgY2FsbC5cbiAgICAgKiBUaGlzIG51bWJlciBpbmNsdWRlcyB0aGUgYW5vbnltb3VzIHBhcnRpY2lwYW50cyBhcyB3ZWxsLlxuICAgICAqL1xuICAgIGdldCBhbm9ueW1vdXNQYXJ0aWNpcGFudENvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50VmFsdWUodGhpcy5hbm9ueW1vdXNQYXJ0aWNpcGFudENvdW50JCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBsaXN0IG9mIHBhcnRpY2lwYW50cyBpbiB0aGUgY3VycmVudCBjYWxsLlxuICAgICAqL1xuICAgIGdldCBwYXJ0aWNpcGFudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLnBhcnRpY2lwYW50cyQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbG9jYWwgcGFydGljaXBhbnQgaW4gdGhlIGN1cnJlbnQgY2FsbC5cbiAgICAgKi9cbiAgICBnZXQgbG9jYWxQYXJ0aWNpcGFudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFZhbHVlKHRoaXMubG9jYWxQYXJ0aWNpcGFudCQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbGlzdCBvZiByZW1vdGUgcGFydGljaXBhbnRzIGluIHRoZSBjdXJyZW50IGNhbGwuXG4gICAgICovXG4gICAgZ2V0IHJlbW90ZVBhcnRpY2lwYW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFZhbHVlKHRoaXMucmVtb3RlUGFydGljaXBhbnRzJCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBkb21pbmFudCBzcGVha2VyIGluIHRoZSBjdXJyZW50IGNhbGwuXG4gICAgICovXG4gICAgZ2V0IGRvbWluYW50U3BlYWtlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFZhbHVlKHRoaXMuZG9taW5hbnRTcGVha2VyJCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBsaXN0IG9mIHBpbm5lZCBwYXJ0aWNpcGFudHMgaW4gdGhlIGN1cnJlbnQgY2FsbC5cbiAgICAgKi9cbiAgICBnZXQgcGlubmVkUGFydGljaXBhbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50VmFsdWUodGhpcy5waW5uZWRQYXJ0aWNpcGFudHMkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGVsbCBpZiB0aGVyZSBpcyBhbiBvbmdvaW5nIHNjcmVlbiBzaGFyZSBpbiB0aGlzIGNhbGwuXG4gICAgICovXG4gICAgZ2V0IGhhc09uZ29pbmdTY3JlZW5TaGFyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFZhbHVlKHRoaXMuaGFzT25nb2luZ1NjcmVlblNoYXJlJCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjYWxsaW5nIHN0YXRlLlxuICAgICAqL1xuICAgIGdldCBjYWxsaW5nU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLmNhbGxpbmdTdGF0ZSQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY2FsbCBzdGF0cyByZXBvcnQuXG4gICAgICovXG4gICAgZ2V0IGNhbGxTdGF0c1JlcG9ydCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFZhbHVlKHRoaXMuY2FsbFN0YXRzUmVwb3J0JCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBtZW1iZXJzIG9mIHRoZSBjdXJyZW50IGNhbGwuXG4gICAgICovXG4gICAgZ2V0IG1lbWJlcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLm1lbWJlcnMkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGNhcGFiaWxpdGllcyBvZiB0aGUgY3VycmVudCB1c2VyIGZvciB0aGUgY3VycmVudCBjYWxsLlxuICAgICAqL1xuICAgIGdldCBvd25DYXBhYmlsaXRpZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLm93bkNhcGFiaWxpdGllcyQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgYmFja3N0YWdlIHN0YXRlLlxuICAgICAqL1xuICAgIGdldCBiYWNrc3RhZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLmJhY2tzdGFnZSQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaWxsIHByb3ZpZGUgdGhlIGxpc3Qgb2YgYmxvY2tlZCB1c2VyIElEcy5cbiAgICAgKi9cbiAgICBnZXQgYmxvY2tlZFVzZXJJZHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLmJsb2NrZWRVc2VySWRzJCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdpbGwgcHJvdmlkZSB0aGUgdGltZSB3aGVuIHRoaXMgY2FsbCBoYXMgYmVlbiBjcmVhdGVkLlxuICAgICAqL1xuICAgIGdldCBjcmVhdGVkQXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLmNyZWF0ZWRBdCQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaWxsIHByb3ZpZGUgdGhlIHRpbWUgd2hlbiB0aGlzIGNhbGwgaGFzIGJlZW4gZW5kZWQuXG4gICAgICovXG4gICAgZ2V0IGVuZGVkQXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLmVuZGVkQXQkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2lsbCBwcm92aWRlIHRoZSB0aW1lIHdoZW4gdGhpcyBjYWxsIGhhcyBiZWVuIHNjaGVkdWxlZCB0byBzdGFydC5cbiAgICAgKi9cbiAgICBnZXQgc3RhcnRzQXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLnN0YXJ0c0F0JCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdpbGwgcHJvdmlkZSB0aGUgdGltZSB3aGVuIHRoaXMgY2FsbCBoYXMgYmVlbiB1cGRhdGVkLlxuICAgICAqL1xuICAgIGdldCB1cGRhdGVkQXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLnVwZGF0ZWRBdCQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaWxsIHByb3ZpZGUgdGhlIHVzZXIgd2hvIGNyZWF0ZWQgdGhpcyBjYWxsLlxuICAgICAqL1xuICAgIGdldCBjcmVhdGVkQnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLmNyZWF0ZWRCeSQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaWxsIHByb3ZpZGUgdGhlIGN1c3RvbSBkYXRhIG9mIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICBnZXQgY3VzdG9tKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50VmFsdWUodGhpcy5jdXN0b20kKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2lsbCBwcm92aWRlIHRoZSBlZ3Jlc3MgZGF0YSBvZiB0aGlzIGNhbGwuXG4gICAgICovXG4gICAgZ2V0IGVncmVzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFZhbHVlKHRoaXMuZWdyZXNzJCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdpbGwgcHJvdmlkZSB0aGUgaW5ncmVzcyBkYXRhIG9mIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICBnZXQgaW5ncmVzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFZhbHVlKHRoaXMuaW5ncmVzcyQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaWxsIHByb3ZpZGUgdGhlIHJlY29yZGluZyBzdGF0ZSBvZiB0aGlzIGNhbGwuXG4gICAgICovXG4gICAgZ2V0IHJlY29yZGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFZhbHVlKHRoaXMucmVjb3JkaW5nJCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdpbGwgcHJvdmlkZSB0aGUgc2Vzc2lvbiBkYXRhIG9mIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICBnZXQgc2Vzc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFZhbHVlKHRoaXMuc2Vzc2lvbiQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaWxsIHByb3ZpZGUgdGhlIHNldHRpbmdzIG9mIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICBnZXQgc2V0dGluZ3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLnNldHRpbmdzJCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdpbGwgcHJvdmlkZSB0aGUgdHJhbnNjcmliaW5nIHN0YXRlIG9mIHRoaXMgY2FsbC5cbiAgICAgKi9cbiAgICBnZXQgdHJhbnNjcmliaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50VmFsdWUodGhpcy50cmFuc2NyaWJpbmckKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2lsbCBwcm92aWRlIHRoZSB1c2VyIHdobyBlbmRlZCB0aGlzIGNhbGwuXG4gICAgICovXG4gICAgZ2V0IGVuZGVkQnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLmVuZGVkQnkkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2lsbCBwcm92aWRlIHRoZSB0aHVtYm5haWxzIG9mIHRoaXMgY2FsbCwgaWYgZW5hYmxlZCBpbiB0aGUgY2FsbCBzZXR0aW5ncy5cbiAgICAgKi9cbiAgICBnZXQgdGh1bWJuYWlscygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFZhbHVlKHRoaXMudGh1bWJuYWlscyQpO1xuICAgIH1cbn1cblxuY2xhc3MgU3RyZWFtVmlkZW9Xcml0ZWFibGVTdGF0ZVN0b3JlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgc3RvcmUga2VlcGluZyBkYXRhIG9mIGEgc3VjY2Vzc2Z1bGx5IGNvbm5lY3RlZCB1c2VyIG92ZXIgV1MgdG8gdGhlIGNvb3JkaW5hdG9yIHNlcnZlci5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29ubmVjdGVkVXNlclN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHVuZGVmaW5lZCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGxpc3Qgb2Yge0BsaW5rIENhbGx9IG9iamVjdHMgY3JlYXRlZC90cmFja2VkIGJ5IHRoaXMgY2xpZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jYWxsc1N1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KFtdKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgYW4gb2JzZXJ2YWJsZSwgb3IgdW5kZWZpbmVkIGlmIHRoZSBvYnNlcnZhYmxlIGhhc1xuICAgICAgICAgKiBub3QgZW1pdHRlZCBhIHZhbHVlIHlldC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIG9ic2VydmFibGUkIHRoZSBvYnNlcnZhYmxlIHRvIGdldCB0aGUgdmFsdWUgZnJvbS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2V0Q3VycmVudFZhbHVlID0gZ2V0Q3VycmVudFZhbHVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlcyB0aGUgdmFsdWUgb2YgdGhlIHByb3ZpZGVkIFN1YmplY3QuXG4gICAgICAgICAqIEFuIGB1cGRhdGVgIGNhbiBlaXRoZXIgYmUgYSBuZXcgdmFsdWUgb3IgYSBmdW5jdGlvbiB3aGljaCB0YWtlc1xuICAgICAgICAgKiB0aGUgY3VycmVudCB2YWx1ZSBhbmQgcmV0dXJucyBhIG5ldyB2YWx1ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHN1YmplY3QgdGhlIHN1YmplY3QgdG8gdXBkYXRlLlxuICAgICAgICAgKiBAcGFyYW0gdXBkYXRlIHRoZSB1cGRhdGUgdG8gYXBwbHkgdG8gdGhlIHN1YmplY3QuXG4gICAgICAgICAqIEByZXR1cm4gdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNldEN1cnJlbnRWYWx1ZSA9IHNldEN1cnJlbnRWYWx1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIGN1cnJlbnRseSBjb25uZWN0ZWQgdXNlci5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqIEBwYXJhbSB1c2VyIHRoZSB1c2VyIHRvIHNldCBhcyBjb25uZWN0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNldENvbm5lY3RlZFVzZXIgPSAodXNlcikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMuY29ubmVjdGVkVXNlclN1YmplY3QsIHVzZXIpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgbGlzdCBvZiB7QGxpbmsgQ2FsbH0gb2JqZWN0cyBjcmVhdGVkL3RyYWNrZWQgYnkgdGhpcyBjbGllbnQuXG4gICAgICAgICAqIEBwYXJhbSBjYWxsc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZXRDYWxscyA9IChjYWxscykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMuY2FsbHNTdWJqZWN0LCBjYWxscyk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRzIGEge0BsaW5rIENhbGx9IG9iamVjdCB0byB0aGUgbGlzdCBvZiB7QGxpbmsgQ2FsbH0gb2JqZWN0cyBjcmVhdGVkL3RyYWNrZWQgYnkgdGhpcyBjbGllbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBjYWxsIHRoZSBjYWxsIHRvIGFkZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVnaXN0ZXJDYWxsID0gKGNhbGwpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jYWxscy5maW5kKChjKSA9PiBjLmNpZCA9PT0gY2FsbC5jaWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDYWxscygoY2FsbHMpID0+IFsuLi5jYWxscywgY2FsbF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlcyBhIHtAbGluayBDYWxsfSBvYmplY3QgZnJvbSB0aGUgbGlzdCBvZiB7QGxpbmsgQ2FsbH0gb2JqZWN0cyBjcmVhdGVkL3RyYWNrZWQgYnkgdGhpcyBjbGllbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBjYWxsIHRoZSBjYWxsIHRvIHJlbW92ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51bnJlZ2lzdGVyQ2FsbCA9IChjYWxsKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRDYWxscygoY2FsbHMpID0+IGNhbGxzLmZpbHRlcigoYykgPT4gYyAhPT0gY2FsbCkpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogRmluZHMgYSB7QGxpbmsgQ2FsbH0gb2JqZWN0IGluIHRoZSBsaXN0IG9mIHtAbGluayBDYWxsfSBvYmplY3RzIGNyZWF0ZWQvdHJhY2tlZCBieSB0aGlzIGNsaWVudC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHR5cGUgdGhlIHR5cGUgb2YgY2FsbCB0byBmaW5kLlxuICAgICAgICAgKiBAcGFyYW0gaWQgdGhlIGlkIG9mIHRoZSBjYWxsIHRvIGZpbmQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZpbmRDYWxsID0gKHR5cGUsIGlkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxscy5maW5kKChjKSA9PiBjLnR5cGUgPT09IHR5cGUgJiYgYy5pZCA9PT0gaWQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNvbm5lY3RlZFVzZXJTdWJqZWN0LnN1YnNjcmliZShhc3luYyAodXNlcikgPT4ge1xuICAgICAgICAgICAgLy8gbGVhdmUgYWxsIGNhbGxzIHdoZW4gdGhlIHVzZXIgZGlzY29ubmVjdHMuXG4gICAgICAgICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2dnZXIgPSBnZXRMb2dnZXIoWydjbGllbnQtc3RhdGUnXSk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjYWxsIG9mIHRoaXMuY2FsbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGwuc3RhdGUuY2FsbGluZ1N0YXRlID09PSBDYWxsaW5nU3RhdGUuTEVGVClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIoJ2luZm8nLCBgVXNlciBkaXNjb25uZWN0ZWQsIGxlYXZpbmcgY2FsbDogJHtjYWxsLmNpZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgY2FsbFxuICAgICAgICAgICAgICAgICAgICAgICAgLmxlYXZlKHsgcmVhc29uOiAnY2xpZW50LmRpc2Nvbm5lY3RVc2VyKCkgY2FsbGVkJyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlcignZXJyb3InLCBgRXJyb3IgbGVhdmluZyBjYWxsOiAke2NhbGwuY2lkfWAsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50bHkgY29ubmVjdGVkIHVzZXIuXG4gICAgICovXG4gICAgZ2V0IGNvbm5lY3RlZFVzZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLmNvbm5lY3RlZFVzZXJTdWJqZWN0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBsaXN0IG9mIHtAbGluayBDYWxsfSBvYmplY3RzIGNyZWF0ZWQvdHJhY2tlZCBieSB0aGlzIGNsaWVudC5cbiAgICAgKi9cbiAgICBnZXQgY2FsbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLmNhbGxzU3ViamVjdCk7XG4gICAgfVxufVxuLyoqXG4gKiBBIHJlYWN0aXZlIHN0b3JlIHRoYXQgZXhwb3NlcyBzdGF0ZSB2YXJpYWJsZXMgaW4gYSByZWFjdGl2ZSBtYW5uZXIuXG4gKiBZb3UgY2FuIHN1YnNjcmliZSB0byBjaGFuZ2VzIG9mIHRoZSBkaWZmZXJlbnQgc3RhdGUgdmFyaWFibGVzLlxuICogVGhpcyBjZW50cmFsIHN0b3JlIGNvbnRhaW5zIGFsbCB0aGUgc3RhdGUgdmFyaWFibGVzIHJlbGF0ZWQgdG8gW2BTdHJlYW1WaWRlb0NsaWVudGBdKC4vU3RyZWFtVmlkZUNsaWVudC5tZCkgYW5kIFtgQ2FsbGBdKC4vQ2FsbC5tZCkuXG4gKi9cbmNsYXNzIFN0cmVhbVZpZGVvUmVhZE9ubHlTdGF0ZVN0b3JlIHtcbiAgICBjb25zdHJ1Y3RvcihzdG9yZSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBtZXRob2QgYWxsb3dzIHlvdSB0aGUgZ2V0IHRoZSBjdXJyZW50IHZhbHVlIG9mIGEgc3RhdGUgdmFyaWFibGUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBvYnNlcnZhYmxlIHRoZSBvYnNlcnZhYmxlIHRvIGdldCB0aGUgY3VycmVudCB2YWx1ZSBvZi5cbiAgICAgICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIG9ic2VydmFibGUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdldEN1cnJlbnRWYWx1ZSA9IGdldEN1cnJlbnRWYWx1ZTtcbiAgICAgICAgLy8gY29udmVydCBhbmQgZXhwb3NlIHN1YmplY3RzIGFzIG9ic2VydmFibGVzXG4gICAgICAgIHRoaXMuY29ubmVjdGVkVXNlciQgPSBzdG9yZS5jb25uZWN0ZWRVc2VyU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgICAgICAgdGhpcy5jYWxscyQgPSBzdG9yZS5jYWxsc1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHVzZXIgY29ubmVjdGVkIG92ZXIgV1MgdG8gdGhlIGJhY2tlbmQuXG4gICAgICovXG4gICAgZ2V0IGNvbm5lY3RlZFVzZXIoKSB7XG4gICAgICAgIHJldHVybiBnZXRDdXJyZW50VmFsdWUodGhpcy5jb25uZWN0ZWRVc2VyJCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgbGlzdCBvZiB7QGxpbmsgQ2FsbH0gb2JqZWN0cyBjcmVhdGVkL3RyYWNrZWQgYnkgdGhpcyBjbGllbnQuXG4gICAgICovXG4gICAgZ2V0IGNhbGxzKCkge1xuICAgICAgICByZXR1cm4gZ2V0Q3VycmVudFZhbHVlKHRoaXMuY2FsbHMkKTtcbiAgICB9XG59XG5cbmNvbnN0IGdldFJ0cE1hcCA9IChsaW5lKSA9PiB7XG4gICAgLy8gRXhhbXBsZTogYT1ydHBtYXA6MTEwIG9wdXMvNDgwMDAvMlxuICAgIGNvbnN0IHJ0cFJlZ2V4ID0gL15hPXJ0cG1hcDooXFxkKikgKFtcXHdcXC0uXSopKD86XFxzKlxcLyhcXGQqKSg/OlxccypcXC8oXFxTKikpPyk/LztcbiAgICAvLyBUaGUgZmlyc3QgY2FwdHVyZWQgZ3JvdXAgaXMgdGhlIHBheWxvYWQgdHlwZSBudW1iZXIsIHRoZSBzZWNvbmQgY2FwdHVyZWQgZ3JvdXAgaXMgdGhlIGVuY29kaW5nIG5hbWUsIHRoZSB0aGlyZCBjYXB0dXJlZCBncm91cCBpcyB0aGUgY2xvY2sgcmF0ZSwgYW5kIHRoZSBmb3VydGggY2FwdHVyZWQgZ3JvdXAgaXMgYW55IGFkZGl0aW9uYWwgcGFyYW1ldGVycy5cbiAgICBjb25zdCBydHBNYXRjaCA9IHJ0cFJlZ2V4LmV4ZWMobGluZSk7XG4gICAgaWYgKHJ0cE1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcmlnaW5hbDogcnRwTWF0Y2hbMF0sXG4gICAgICAgICAgICBwYXlsb2FkOiBydHBNYXRjaFsxXSxcbiAgICAgICAgICAgIGNvZGVjOiBydHBNYXRjaFsyXSxcbiAgICAgICAgfTtcbiAgICB9XG59O1xuY29uc3QgZ2V0Rm10cCA9IChsaW5lKSA9PiB7XG4gICAgLy8gRXhhbXBsZTogYT1mbXRwOjExMSBtaW5wdGltZT0xMDsgdXNlaW5iYW5kZmVjPTFcbiAgICBjb25zdCBmbXRwUmVnZXggPSAvXmE9Zm10cDooXFxkKikgKC4qKS87XG4gICAgY29uc3QgZm10cE1hdGNoID0gZm10cFJlZ2V4LmV4ZWMobGluZSk7XG4gICAgLy8gVGhlIGZpcnN0IGNhcHR1cmVkIGdyb3VwIGlzIHRoZSBwYXlsb2FkIHR5cGUgbnVtYmVyLCB0aGUgc2Vjb25kIGNhcHR1cmVkIGdyb3VwIGlzIGFueSBhZGRpdGlvbmFsIHBhcmFtZXRlcnMuXG4gICAgaWYgKGZtdHBNYXRjaCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3JpZ2luYWw6IGZtdHBNYXRjaFswXSxcbiAgICAgICAgICAgIHBheWxvYWQ6IGZtdHBNYXRjaFsxXSxcbiAgICAgICAgICAgIGNvbmZpZzogZm10cE1hdGNoWzJdLFxuICAgICAgICB9O1xuICAgIH1cbn07XG4vKipcbiAqIGdldHMgdGhlIG1lZGlhIHNlY3Rpb24gZm9yIHRoZSBzcGVjaWZpZWQgbWVkaWEgdHlwZS5cbiAqIFRoZSBtZWRpYSBzZWN0aW9uIGNvbnRhaW5zIHRoZSBtZWRpYSB0eXBlLCBwb3J0LCBjb2RlYywgYW5kIHBheWxvYWQgdHlwZS5cbiAqIEV4YW1wbGU6IG09dmlkZW8gOSBVRFAvVExTL1JUUC9TQVZQRiAxMDAgMTAxIDk2IDk3IDM1IDM2IDEwMiAxMjUgMTI3XG4gKi9cbmNvbnN0IGdldE1lZGlhID0gKGxpbmUsIG1lZGlhVHlwZSkgPT4ge1xuICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChgKG09JHttZWRpYVR5cGV9IFxcXFxkKyBbXFxcXHcvXSspIChbXFxcXGRcXFxcc10rKWApO1xuICAgIGNvbnN0IG1hdGNoID0gcmVnZXguZXhlYyhsaW5lKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9yaWdpbmFsOiBtYXRjaFswXSxcbiAgICAgICAgICAgIG1lZGlhV2l0aFBvcnRzOiBtYXRjaFsxXSxcbiAgICAgICAgICAgIGNvZGVjT3JkZXI6IG1hdGNoWzJdLFxuICAgICAgICB9O1xuICAgIH1cbn07XG5jb25zdCBnZXRNZWRpYVNlY3Rpb24gPSAoc2RwLCBtZWRpYVR5cGUpID0+IHtcbiAgICBsZXQgbWVkaWE7XG4gICAgY29uc3QgcnRwTWFwID0gW107XG4gICAgY29uc3QgZm10cCA9IFtdO1xuICAgIGxldCBpc1RoZVJlcXVpcmVkTWVkaWFTZWN0aW9uID0gZmFsc2U7XG4gICAgc2RwLnNwbGl0KC8oXFxyXFxufFxccnxcXG4pLykuZm9yRWFjaCgobGluZSkgPT4ge1xuICAgICAgICBjb25zdCBpc1ZhbGlkTGluZSA9IC9eKFthLXpdKT0oLiopLy50ZXN0KGxpbmUpO1xuICAgICAgICBpZiAoIWlzVmFsaWRMaW5lKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvKlxuICAgICAgICAgIE5PVEU6IGFjY29yZGluZyB0byBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjODg2Ni5wZGZcbiAgICAgICAgICBFYWNoIG1lZGlhIGRlc2NyaXB0aW9uIHN0YXJ0cyB3aXRoIGFuIFwibT1cIiBsaW5lIGFuZCBjb250aW51ZXMgdG8gdGhlIG5leHQgbWVkaWEgZGVzY3JpcHRpb24gb3IgdGhlIGVuZCBvZiB0aGUgd2hvbGUgc2Vzc2lvbiBkZXNjcmlwdGlvbiwgd2hpY2hldmVyIGNvbWVzIGZpcnN0XG4gICAgICAgICovXG4gICAgICAgIGNvbnN0IHR5cGUgPSBsaW5lWzBdO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ20nKSB7XG4gICAgICAgICAgICBjb25zdCBfbWVkaWEgPSBnZXRNZWRpYShsaW5lLCBtZWRpYVR5cGUpO1xuICAgICAgICAgICAgaXNUaGVSZXF1aXJlZE1lZGlhU2VjdGlvbiA9ICEhX21lZGlhO1xuICAgICAgICAgICAgaWYgKF9tZWRpYSkge1xuICAgICAgICAgICAgICAgIG1lZGlhID0gX21lZGlhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzVGhlUmVxdWlyZWRNZWRpYVNlY3Rpb24gJiYgdHlwZSA9PT0gJ2EnKSB7XG4gICAgICAgICAgICBjb25zdCBydHBNYXBMaW5lID0gZ2V0UnRwTWFwKGxpbmUpO1xuICAgICAgICAgICAgY29uc3QgZm10cExpbmUgPSBnZXRGbXRwKGxpbmUpO1xuICAgICAgICAgICAgaWYgKHJ0cE1hcExpbmUpIHtcbiAgICAgICAgICAgICAgICBydHBNYXAucHVzaChydHBNYXBMaW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGZtdHBMaW5lKSB7XG4gICAgICAgICAgICAgICAgZm10cC5wdXNoKGZtdHBMaW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChtZWRpYSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWVkaWEsXG4gICAgICAgICAgICBydHBNYXAsXG4gICAgICAgICAgICBmbXRwLFxuICAgICAgICB9O1xuICAgIH1cbn07XG4vKipcbiAqIEdldHMgdGhlIGZtdHAgbGluZSBjb3JyZXNwb25kaW5nIHRvIG9wdXNcbiAqL1xuY29uc3QgZ2V0T3B1c0ZtdHAgPSAoc2RwKSA9PiB7XG4gICAgY29uc3Qgc2VjdGlvbiA9IGdldE1lZGlhU2VjdGlvbihzZHAsICdhdWRpbycpO1xuICAgIGNvbnN0IHJ0cE1hcCA9IHNlY3Rpb24/LnJ0cE1hcC5maW5kKChyKSA9PiByLmNvZGVjLnRvTG93ZXJDYXNlKCkgPT09ICdvcHVzJyk7XG4gICAgY29uc3QgY29kZWNJZCA9IHJ0cE1hcD8ucGF5bG9hZDtcbiAgICBpZiAoY29kZWNJZCkge1xuICAgICAgICByZXR1cm4gc2VjdGlvbj8uZm10cC5maW5kKChmKSA9PiBmLnBheWxvYWQgPT09IGNvZGVjSWQpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgYW4gU0RQIHdpdGggRFRYIGVuYWJsZWQgb3IgZGlzYWJsZWQuXG4gKi9cbmNvbnN0IHRvZ2dsZUR0eCA9IChzZHAsIGVuYWJsZSkgPT4ge1xuICAgIGNvbnN0IG9wdXNGbXRwID0gZ2V0T3B1c0ZtdHAoc2RwKTtcbiAgICBpZiAob3B1c0ZtdHApIHtcbiAgICAgICAgY29uc3QgbWF0Y2hEdHggPSAvdXNlZHR4PShcXGQpLy5leGVjKG9wdXNGbXRwLmNvbmZpZyk7XG4gICAgICAgIGNvbnN0IHJlcXVpcmVkRHR4Q29uZmlnID0gYHVzZWR0eD0ke2VuYWJsZSA/ICcxJyA6ICcwJ31gO1xuICAgICAgICBpZiAobWF0Y2hEdHgpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0ZtdHAgPSBvcHVzRm10cC5vcmlnaW5hbC5yZXBsYWNlKC91c2VkdHg9KFxcZCkvLCByZXF1aXJlZER0eENvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm4gc2RwLnJlcGxhY2Uob3B1c0ZtdHAub3JpZ2luYWwsIG5ld0ZtdHApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbmV3Rm10cCA9IGAke29wdXNGbXRwLm9yaWdpbmFsfTske3JlcXVpcmVkRHR4Q29uZmlnfWA7XG4gICAgICAgICAgICByZXR1cm4gc2RwLnJlcGxhY2Uob3B1c0ZtdHAub3JpZ2luYWwsIG5ld0ZtdHApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZHA7XG59O1xuLyoqXG4gKiBFbmFibGVzIGhpZ2gtcXVhbGl0eSBhdWRpbyB0aHJvdWdoIFNEUCBtdW5naW5nIGZvciB0aGUgZ2l2ZW4gdHJhY2tNaWQuXG4gKlxuICogQHBhcmFtIHNkcCB0aGUgU0RQIHRvIG11bmdlLlxuICogQHBhcmFtIHRyYWNrTWlkIHRoZSB0cmFja01pZC5cbiAqIEBwYXJhbSBtYXhCaXRyYXRlIHRoZSBtYXggYml0cmF0ZSB0byBzZXQuXG4gKi9cbmNvbnN0IGVuYWJsZUhpZ2hRdWFsaXR5QXVkaW8gPSAoc2RwLCB0cmFja01pZCwgbWF4Qml0cmF0ZSA9IDUxMDAwMCkgPT4ge1xuICAgIG1heEJpdHJhdGUgPSBNYXRoLm1heChNYXRoLm1pbihtYXhCaXRyYXRlLCA1MTAwMDApLCA5NjAwMCk7XG4gICAgY29uc3QgcGFyc2VkU2RwID0gU0RQLnBhcnNlKHNkcCk7XG4gICAgY29uc3QgYXVkaW9NZWRpYSA9IHBhcnNlZFNkcC5tZWRpYS5maW5kKChtKSA9PiBtLnR5cGUgPT09ICdhdWRpbycgJiYgU3RyaW5nKG0ubWlkKSA9PT0gdHJhY2tNaWQpO1xuICAgIGlmICghYXVkaW9NZWRpYSlcbiAgICAgICAgcmV0dXJuIHNkcDtcbiAgICBjb25zdCBvcHVzUnRwID0gYXVkaW9NZWRpYS5ydHAuZmluZCgocikgPT4gci5jb2RlYyA9PT0gJ29wdXMnKTtcbiAgICBpZiAoIW9wdXNSdHApXG4gICAgICAgIHJldHVybiBzZHA7XG4gICAgY29uc3Qgb3B1c0ZtdHAgPSBhdWRpb01lZGlhLmZtdHAuZmluZCgoZikgPT4gZi5wYXlsb2FkID09PSBvcHVzUnRwLnBheWxvYWQpO1xuICAgIGlmICghb3B1c0ZtdHApXG4gICAgICAgIHJldHVybiBzZHA7XG4gICAgLy8gZW5hYmxlIHN0ZXJlbywgaWYgbm90IGFscmVhZHkgZW5hYmxlZFxuICAgIGlmIChvcHVzRm10cC5jb25maWcubWF0Y2goL3N0ZXJlbz0oXFxkKS8pKSB7XG4gICAgICAgIG9wdXNGbXRwLmNvbmZpZyA9IG9wdXNGbXRwLmNvbmZpZy5yZXBsYWNlKC9zdGVyZW89KFxcZCkvLCAnc3RlcmVvPTEnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG9wdXNGbXRwLmNvbmZpZyA9IGAke29wdXNGbXRwLmNvbmZpZ307c3RlcmVvPTFgO1xuICAgIH1cbiAgICAvLyBzZXQgbWF4YXZlcmFnZWJpdHJhdGUsIHRvIHRoZSBnaXZlbiB2YWx1ZVxuICAgIGlmIChvcHVzRm10cC5jb25maWcubWF0Y2goL21heGF2ZXJhZ2ViaXRyYXRlPShcXGQqKS8pKSB7XG4gICAgICAgIG9wdXNGbXRwLmNvbmZpZyA9IG9wdXNGbXRwLmNvbmZpZy5yZXBsYWNlKC9tYXhhdmVyYWdlYml0cmF0ZT0oXFxkKikvLCBgbWF4YXZlcmFnZWJpdHJhdGU9JHttYXhCaXRyYXRlfWApO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgb3B1c0ZtdHAuY29uZmlnID0gYCR7b3B1c0ZtdHAuY29uZmlnfTttYXhhdmVyYWdlYml0cmF0ZT0ke21heEJpdHJhdGV9YDtcbiAgICB9XG4gICAgcmV0dXJuIFNEUC53cml0ZShwYXJzZWRTZHApO1xufTtcblxuY29uc3QgbG9nZ2VyJDMgPSBnZXRMb2dnZXIoWydQdWJsaXNoZXInXSk7XG4vKipcbiAqIFRoZSBgUHVibGlzaGVyYCBpcyByZXNwb25zaWJsZSBmb3IgcHVibGlzaGluZy91bnB1Ymxpc2hpbmcgbWVkaWEgc3RyZWFtcyB0by9mcm9tIHRoZSBTRlVcbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBQdWJsaXNoZXIge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgY29ubmVjdGlvbiBjb25maWd1cmF0aW9uLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZ2V0IGNvbm5lY3Rpb25Db25maWd1cmF0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5wYy5nZXRDb25maWd1cmF0aW9uKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGMuZ2V0Q29uZmlndXJhdGlvbigpO1xuICAgICAgICByZXR1cm4gdGhpcy5fY29ubmVjdGlvbkNvbmZpZ3VyYXRpb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBuZXcgYFB1Ymxpc2hlcmAgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29ubmVjdGlvbkNvbmZpZyB0aGUgY29ubmVjdGlvbiBjb25maWd1cmF0aW9uIHRvIHVzZS5cbiAgICAgKiBAcGFyYW0gc2Z1Q2xpZW50IHRoZSBTRlUgY2xpZW50IHRvIHVzZS5cbiAgICAgKiBAcGFyYW0gc3RhdGUgdGhlIGNhbGwgc3RhdGUgdG8gdXNlLlxuICAgICAqIEBwYXJhbSBkaXNwYXRjaGVyIHRoZSBkaXNwYXRjaGVyIHRvIHVzZS5cbiAgICAgKiBAcGFyYW0gaXNEdHhFbmFibGVkIHdoZXRoZXIgRFRYIGlzIGVuYWJsZWQuXG4gICAgICogQHBhcmFtIGlzUmVkRW5hYmxlZCB3aGV0aGVyIFJFRCBpcyBlbmFibGVkLlxuICAgICAqIEBwYXJhbSBpY2VSZXN0YXJ0RGVsYXkgdGhlIGRlbGF5IGluIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSByZXN0YXJ0aW5nIElDRSBvbmNlIGNvbm5lY3Rpb24gZ29lcyB0byBgZGlzY29ubmVjdGVkYCBzdGF0ZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih7IGNvbm5lY3Rpb25Db25maWcsIHNmdUNsaWVudCwgZGlzcGF0Y2hlciwgc3RhdGUsIGlzRHR4RW5hYmxlZCwgaXNSZWRFbmFibGVkLCBpY2VSZXN0YXJ0RGVsYXkgPSAyNTAwLCB9KSB7XG4gICAgICAgIHRoaXMudHJhbnNjZWl2ZXJSZWdpc3RyeSA9IHtcbiAgICAgICAgICAgIFtUcmFja1R5cGUuQVVESU9dOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBbVHJhY2tUeXBlLlZJREVPXTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgW1RyYWNrVHlwZS5TQ1JFRU5fU0hBUkVdOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBbVHJhY2tUeXBlLlNDUkVFTl9TSEFSRV9BVURJT106IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIFtUcmFja1R5cGUuVU5TUEVDSUZJRURdOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHVibGlzaE9wdGlvbnNQZXJUcmFja1R5cGUgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBhcnJheSBtYWludGFpbmluZyB0aGUgb3JkZXIgaG93IHRyYW5zY2VpdmVycyB3ZXJlIGFkZGVkIHRvIHRoZSBwZWVyIGNvbm5lY3Rpb24uXG4gICAgICAgICAqIFRoaXMgaXMgbmVlZGVkIGJlY2F1c2Ugc29tZSBicm93c2VycyAoRmlyZWZveCkgZG9uJ3QgcmVsaWFibHkgcmVwb3J0XG4gICAgICAgICAqIHRyYWNrSWQgYW5kIGBtaWRgIHBhcmFtZXRlcnMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRyYW5zY2VpdmVySW5pdE9yZGVyID0gW107XG4gICAgICAgIHRoaXMudHJhY2tLaW5kTWFwcGluZyA9IHtcbiAgICAgICAgICAgIFtUcmFja1R5cGUuQVVESU9dOiAnYXVkaW8nLFxuICAgICAgICAgICAgW1RyYWNrVHlwZS5WSURFT106ICd2aWRlbycsXG4gICAgICAgICAgICBbVHJhY2tUeXBlLlNDUkVFTl9TSEFSRV06ICd2aWRlbycsXG4gICAgICAgICAgICBbVHJhY2tUeXBlLlNDUkVFTl9TSEFSRV9BVURJT106ICdhdWRpbycsXG4gICAgICAgICAgICBbVHJhY2tUeXBlLlVOU1BFQ0lGSUVEXTogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnRyYWNrTGF5ZXJzQ2FjaGUgPSB7XG4gICAgICAgICAgICBbVHJhY2tUeXBlLkFVRElPXTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgW1RyYWNrVHlwZS5WSURFT106IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIFtUcmFja1R5cGUuU0NSRUVOX1NIQVJFXTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgW1RyYWNrVHlwZS5TQ1JFRU5fU0hBUkVfQVVESU9dOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBbVHJhY2tUeXBlLlVOU1BFQ0lGSUVEXTogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmlzSWNlUmVzdGFydGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNyZWF0ZVBlZXJDb25uZWN0aW9uID0gKGNvbm5lY3Rpb25Db25maWcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBjID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKGNvbm5lY3Rpb25Db25maWcpO1xuICAgICAgICAgICAgdGhpcy5fY29ubmVjdGlvbkNvbmZpZ3VyYXRpb24gPSBjb25uZWN0aW9uQ29uZmlnO1xuICAgICAgICAgICAgcGMuYWRkRXZlbnRMaXN0ZW5lcignaWNlY2FuZGlkYXRlJywgdGhpcy5vbkljZUNhbmRpZGF0ZSk7XG4gICAgICAgICAgICBwYy5hZGRFdmVudExpc3RlbmVyKCduZWdvdGlhdGlvbm5lZWRlZCcsIHRoaXMub25OZWdvdGlhdGlvbk5lZWRlZCk7XG4gICAgICAgICAgICBwYy5hZGRFdmVudExpc3RlbmVyKCdpY2VjYW5kaWRhdGVlcnJvcicsIHRoaXMub25JY2VDYW5kaWRhdGVFcnJvcik7XG4gICAgICAgICAgICBwYy5hZGRFdmVudExpc3RlbmVyKCdpY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCB0aGlzLm9uSWNlQ29ubmVjdGlvblN0YXRlQ2hhbmdlKTtcbiAgICAgICAgICAgIHBjLmFkZEV2ZW50TGlzdGVuZXIoJ2ljZWdhdGhlcmluZ3N0YXRlY2hhbmdlJywgdGhpcy5vbkljZUdhdGhlcmluZ1N0YXRlQ2hhbmdlKTtcbiAgICAgICAgICAgIHBjLmFkZEV2ZW50TGlzdGVuZXIoJ3NpZ25hbGluZ3N0YXRlY2hhbmdlJywgdGhpcy5vblNpZ25hbGluZ1N0YXRlQ2hhbmdlKTtcbiAgICAgICAgICAgIHJldHVybiBwYztcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENsb3NlcyB0aGUgcHVibGlzaGVyIFBlZXJDb25uZWN0aW9uIGFuZCBjbGVhbnMgdXAgdGhlIHJlc291cmNlcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2xvc2UgPSAoeyBzdG9wVHJhY2tzID0gdHJ1ZSB9ID0ge30pID0+IHtcbiAgICAgICAgICAgIGlmIChzdG9wVHJhY2tzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wUHVibGlzaGluZygpO1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMudHJhbnNjZWl2ZXJSZWdpc3RyeSkuZm9yRWFjaCgodHJhY2tUeXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2NlaXZlclJlZ2lzdHJ5W3RyYWNrVHlwZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy50cmFja0xheWVyc0NhY2hlKS5mb3JFYWNoKCh0cmFja1R5cGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYWNrTGF5ZXJzQ2FjaGVbdHJhY2tUeXBlXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmljZVJlc3RhcnRUaW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmVPbkljZVJlc3RhcnQoKTtcbiAgICAgICAgICAgIHRoaXMucGMucmVtb3ZlRXZlbnRMaXN0ZW5lcignbmVnb3RpYXRpb25uZWVkZWQnLCB0aGlzLm9uTmVnb3RpYXRpb25OZWVkZWQpO1xuICAgICAgICAgICAgdGhpcy5wYy5jbG9zZSgpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU3RhcnRzIHB1Ymxpc2hpbmcgdGhlIGdpdmVuIHRyYWNrIG9mIHRoZSBnaXZlbiBtZWRpYSBzdHJlYW0uXG4gICAgICAgICAqXG4gICAgICAgICAqIENvbnNlY3V0aXZlIGNhbGxzIHRvIHRoaXMgbWV0aG9kIHdpbGwgcmVwbGFjZSB0aGUgc3RyZWFtLlxuICAgICAgICAgKiBUaGUgcHJldmlvdXMgc3RyZWFtIHdpbGwgYmUgc3RvcHBlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIG1lZGlhU3RyZWFtIHRoZSBtZWRpYSBzdHJlYW0gdG8gcHVibGlzaC5cbiAgICAgICAgICogQHBhcmFtIHRyYWNrIHRoZSB0cmFjayB0byBwdWJsaXNoLlxuICAgICAgICAgKiBAcGFyYW0gdHJhY2tUeXBlIHRoZSB0cmFjayB0eXBlIHRvIHB1Ymxpc2guXG4gICAgICAgICAqIEBwYXJhbSBvcHRzIHRoZSBvcHRpb25hbCBwdWJsaXNoIG9wdGlvbnMgdG8gdXNlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wdWJsaXNoU3RyZWFtID0gYXN5bmMgKG1lZGlhU3RyZWFtLCB0cmFjaywgdHJhY2tUeXBlLCBvcHRzID0ge30pID0+IHtcbiAgICAgICAgICAgIGlmICh0cmFjay5yZWFkeVN0YXRlID09PSAnZW5kZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBwdWJsaXNoIGEgdHJhY2sgdGhhdCBoYXMgZW5kZWQgYWxyZWFkeS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB0cmFuc2NlaXZlciA9IHRoaXMucGNcbiAgICAgICAgICAgICAgICAuZ2V0VHJhbnNjZWl2ZXJzKClcbiAgICAgICAgICAgICAgICAuZmluZCgodCkgPT4gdCA9PT0gdGhpcy50cmFuc2NlaXZlclJlZ2lzdHJ5W3RyYWNrVHlwZV0gJiZcbiAgICAgICAgICAgICAgICB0LnNlbmRlci50cmFjayAmJlxuICAgICAgICAgICAgICAgIHQuc2VuZGVyLnRyYWNrPy5raW5kID09PSB0aGlzLnRyYWNrS2luZE1hcHBpbmdbdHJhY2tUeXBlXSk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFuIGV2ZW50IGhhbmRsZXIgd2hpY2ggbGlzdGVucyBmb3IgdGhlICdlbmRlZCcgZXZlbnQgb24gdGhlIHRyYWNrLlxuICAgICAgICAgICAgICogT25jZSB0aGUgdHJhY2sgaGFzIGVuZGVkLCBpdCB3aWxsIG5vdGlmeSB0aGUgU0ZVIGFuZCB1cGRhdGUgdGhlIHN0YXRlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBoYW5kbGVUcmFja0VuZGVkID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxvZ2dlciQzKCdpbmZvJywgYFRyYWNrICR7VHJhY2tUeXBlW3RyYWNrVHlwZV19IGhhcyBlbmRlZCwgbm90aWZ5aW5nIHRoZSBTRlVgKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm5vdGlmeVRyYWNrTXV0ZVN0YXRlQ2hhbmdlZChtZWRpYVN0cmVhbSwgdHJhY2tUeXBlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAvLyBjbGVhbi11cCwgdGhpcyBldmVudCBsaXN0ZW5lciBuZWVkcyB0byBydW4gb25seSBvbmNlLlxuICAgICAgICAgICAgICAgIHRyYWNrLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgaGFuZGxlVHJhY2tFbmRlZCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCF0cmFuc2NlaXZlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgc2V0dGluZ3MgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0UmVzb2x1dGlvbiA9IHNldHRpbmdzPy52aWRlby50YXJnZXRfcmVzb2x1dGlvbjtcbiAgICAgICAgICAgICAgICBjb25zdCB2aWRlb0VuY29kaW5ncyA9IHRyYWNrVHlwZSA9PT0gVHJhY2tUeXBlLlZJREVPXG4gICAgICAgICAgICAgICAgICAgID8gZmluZE9wdGltYWxWaWRlb0xheWVycyh0cmFjaywgdGFyZ2V0UmVzb2x1dGlvbilcbiAgICAgICAgICAgICAgICAgICAgOiB0cmFja1R5cGUgPT09IFRyYWNrVHlwZS5TQ1JFRU5fU0hBUkVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZmluZE9wdGltYWxTY3JlZW5TaGFyaW5nTGF5ZXJzKHRyYWNrLCBvcHRzLnNjcmVlblNoYXJlU2V0dGluZ3MpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBsZXQgcHJlZmVycmVkQ29kZWMgPSBvcHRzLnByZWZlcnJlZENvZGVjO1xuICAgICAgICAgICAgICAgIGlmICghcHJlZmVycmVkQ29kZWMgJiYgdHJhY2tUeXBlID09PSBUcmFja1R5cGUuVklERU8pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzUmVhY3ROYXRpdmUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3NOYW1lID0gZ2V0T1NJbmZvKCk/Lm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvc05hbWUgPT09ICdpcGFkb3MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW4gaXBhZHMgaXQgd2FzIG5vdGljZWQgdGhhdCBpZiB2cDggY29kZWMgaXMgdXNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZW4gdGhlIGJ5dGVzIHNlbnQgaXMgMCBpbiB0aGUgb3V0Ym91bmQtcnRwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc28gd2UgYXJlIGZvcmNpbmcgaDI2NCBjb2RlYyBmb3IgaXBhZHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVmZXJyZWRDb2RlYyA9ICdIMjY0JztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9zTmFtZSA9PT0gJ2FuZHJvaWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZmVycmVkQ29kZWMgPSAnVlA4JztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlY1ByZWZlcmVuY2VzID0gdGhpcy5nZXRDb2RlY1ByZWZlcmVuY2VzKHRyYWNrVHlwZSwgcHJlZmVycmVkQ29kZWMpO1xuICAgICAgICAgICAgICAgIC8vIGxpc3RlbiBmb3IgJ2VuZGVkJyBldmVudCBvbiB0aGUgdHJhY2sgYXMgaXQgbWlnaHQgYmUgZW5kZWQgYWJydXB0bHlcbiAgICAgICAgICAgICAgICAvLyBieSBhbiBleHRlcm5hbCBmYWN0b3IgYXMgcGVybWlzc2lvbiByZXZva2VzLCBkZXZpY2UgZGlzY29ubmVjdGVkLCBldGMuXG4gICAgICAgICAgICAgICAgLy8ga2VlcCBpbiBtaW5kIHRoYXQgYHRyYWNrLnN0b3AoKWAgZG9lc24ndCB0cmlnZ2VyIHRoaXMgZXZlbnQuXG4gICAgICAgICAgICAgICAgdHJhY2suYWRkRXZlbnRMaXN0ZW5lcignZW5kZWQnLCBoYW5kbGVUcmFja0VuZGVkKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRyYWNrLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhY2suZW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyYW5zY2VpdmVyID0gdGhpcy5wYy5hZGRUcmFuc2NlaXZlcih0cmFjaywge1xuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICdzZW5kb25seScsXG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbXM6IHRyYWNrVHlwZSA9PT0gVHJhY2tUeXBlLlZJREVPIHx8IHRyYWNrVHlwZSA9PT0gVHJhY2tUeXBlLlNDUkVFTl9TSEFSRVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBbbWVkaWFTdHJlYW1dXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgc2VuZEVuY29kaW5nczogdmlkZW9FbmNvZGluZ3MsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbG9nZ2VyJDMoJ2RlYnVnJywgYEFkZGVkICR7VHJhY2tUeXBlW3RyYWNrVHlwZV19IHRyYW5zY2VpdmVyYCk7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2NlaXZlckluaXRPcmRlci5wdXNoKHRyYWNrVHlwZSk7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2NlaXZlclJlZ2lzdHJ5W3RyYWNrVHlwZV0gPSB0cmFuc2NlaXZlcjtcbiAgICAgICAgICAgICAgICB0aGlzLnB1Ymxpc2hPcHRpb25zUGVyVHJhY2tUeXBlLnNldCh0cmFja1R5cGUsIG9wdHMpO1xuICAgICAgICAgICAgICAgIGlmICgnc2V0Q29kZWNQcmVmZXJlbmNlcycgaW4gdHJhbnNjZWl2ZXIgJiYgY29kZWNQcmVmZXJlbmNlcykge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIkMygnaW5mbycsIGBTZXR0aW5nICR7VHJhY2tUeXBlW3RyYWNrVHlwZV19IGNvZGVjIHByZWZlcmVuY2VzYCwgY29kZWNQcmVmZXJlbmNlcyk7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zY2VpdmVyLnNldENvZGVjUHJlZmVyZW5jZXMoY29kZWNQcmVmZXJlbmNlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldmlvdXNUcmFjayA9IHRyYW5zY2VpdmVyLnNlbmRlci50cmFjaztcbiAgICAgICAgICAgICAgICAvLyBkb24ndCBzdG9wIHRoZSB0cmFjayBpZiB3ZSBhcmUgcmUtcHVibGlzaGluZyB0aGUgc2FtZSB0cmFja1xuICAgICAgICAgICAgICAgIGlmIChwcmV2aW91c1RyYWNrICYmIHByZXZpb3VzVHJhY2sgIT09IHRyYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzVHJhY2suc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1RyYWNrLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgaGFuZGxlVHJhY2tFbmRlZCk7XG4gICAgICAgICAgICAgICAgICAgIHRyYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgaGFuZGxlVHJhY2tFbmRlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdHJhY2suZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0cmFjay5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXdhaXQgdHJhbnNjZWl2ZXIuc2VuZGVyLnJlcGxhY2VUcmFjayh0cmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm5vdGlmeVRyYWNrTXV0ZVN0YXRlQ2hhbmdlZChtZWRpYVN0cmVhbSwgdHJhY2tUeXBlLCBmYWxzZSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9wcyBwdWJsaXNoaW5nIHRoZSBnaXZlbiB0cmFjayB0eXBlIHRvIHRoZSBTRlUsIGlmIGl0IGlzIGN1cnJlbnRseSBiZWluZyBwdWJsaXNoZWQuXG4gICAgICAgICAqIFVuZGVybHlpbmcgdHJhY2sgd2lsbCBiZSBzdG9wcGVkIGFuZCByZW1vdmVkIGZyb20gdGhlIHB1Ymxpc2hlci5cbiAgICAgICAgICogQHBhcmFtIHRyYWNrVHlwZSB0aGUgdHJhY2sgdHlwZSB0byB1bnB1Ymxpc2guXG4gICAgICAgICAqIEBwYXJhbSBzdG9wVHJhY2sgc3BlY2lmaWVzIHdoZXRoZXIgdHJhY2sgc2hvdWxkIGJlIHN0b3BwZWQgb3IganVzdCBkaXNhYmxlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51bnB1Ymxpc2hTdHJlYW0gPSBhc3luYyAodHJhY2tUeXBlLCBzdG9wVHJhY2spID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyID0gdGhpcy5wY1xuICAgICAgICAgICAgICAgIC5nZXRUcmFuc2NlaXZlcnMoKVxuICAgICAgICAgICAgICAgIC5maW5kKCh0KSA9PiB0ID09PSB0aGlzLnRyYW5zY2VpdmVyUmVnaXN0cnlbdHJhY2tUeXBlXSAmJiB0LnNlbmRlci50cmFjayk7XG4gICAgICAgICAgICBpZiAodHJhbnNjZWl2ZXIgJiZcbiAgICAgICAgICAgICAgICB0cmFuc2NlaXZlci5zZW5kZXIudHJhY2sgJiZcbiAgICAgICAgICAgICAgICAoc3RvcFRyYWNrXG4gICAgICAgICAgICAgICAgICAgID8gdHJhbnNjZWl2ZXIuc2VuZGVyLnRyYWNrLnJlYWR5U3RhdGUgPT09ICdsaXZlJ1xuICAgICAgICAgICAgICAgICAgICA6IHRyYW5zY2VpdmVyLnNlbmRlci50cmFjay5lbmFibGVkKSkge1xuICAgICAgICAgICAgICAgIHN0b3BUcmFja1xuICAgICAgICAgICAgICAgICAgICA/IHRyYW5zY2VpdmVyLnNlbmRlci50cmFjay5zdG9wKClcbiAgICAgICAgICAgICAgICAgICAgOiAodHJhbnNjZWl2ZXIuc2VuZGVyLnRyYWNrLmVuYWJsZWQgPSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBub3RpZnkgU0ZVIGlmIHVucHVibGlzaGluZyBpbiByZXNwb25zZSB0byByZW1vdGUgc29mdCBtdXRlXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUubG9jYWxQYXJ0aWNpcGFudD8ucHVibGlzaGVkVHJhY2tzLmluY2x1ZGVzKHRyYWNrVHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5ub3RpZnlUcmFja011dGVTdGF0ZUNoYW5nZWQodW5kZWZpbmVkLCB0cmFja1R5cGUsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdHJhY2sgdHlwZSBpcyBjdXJyZW50bHkgYmVpbmcgcHVibGlzaGVkIHRvIHRoZSBTRlUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB0cmFja1R5cGUgdGhlIHRyYWNrIHR5cGUgdG8gY2hlY2suXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmlzUHVibGlzaGluZyA9ICh0cmFja1R5cGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyRm9yVHJhY2tUeXBlID0gdGhpcy50cmFuc2NlaXZlclJlZ2lzdHJ5W3RyYWNrVHlwZV07XG4gICAgICAgICAgICBpZiAodHJhbnNjZWl2ZXJGb3JUcmFja1R5cGUgJiYgdHJhbnNjZWl2ZXJGb3JUcmFja1R5cGUuc2VuZGVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VuZGVyID0gdHJhbnNjZWl2ZXJGb3JUcmFja1R5cGUuc2VuZGVyO1xuICAgICAgICAgICAgICAgIHJldHVybiAoISFzZW5kZXIudHJhY2sgJiZcbiAgICAgICAgICAgICAgICAgICAgc2VuZGVyLnRyYWNrLnJlYWR5U3RhdGUgPT09ICdsaXZlJyAmJlxuICAgICAgICAgICAgICAgICAgICBzZW5kZXIudHJhY2suZW5hYmxlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHRyYWNrIHR5cGUgaXMgY3VycmVudGx5IGxpdmVcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHRyYWNrVHlwZSB0aGUgdHJhY2sgdHlwZSB0byBjaGVjay5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaXNMaXZlID0gKHRyYWNrVHlwZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdHJhbnNjZWl2ZXJGb3JUcmFja1R5cGUgPSB0aGlzLnRyYW5zY2VpdmVyUmVnaXN0cnlbdHJhY2tUeXBlXTtcbiAgICAgICAgICAgIGlmICh0cmFuc2NlaXZlckZvclRyYWNrVHlwZSAmJiB0cmFuc2NlaXZlckZvclRyYWNrVHlwZS5zZW5kZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZW5kZXIgPSB0cmFuc2NlaXZlckZvclRyYWNrVHlwZS5zZW5kZXI7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhc2VuZGVyLnRyYWNrICYmIHNlbmRlci50cmFjay5yZWFkeVN0YXRlID09PSAnbGl2ZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubm90aWZ5VHJhY2tNdXRlU3RhdGVDaGFuZ2VkID0gYXN5bmMgKG1lZGlhU3RyZWFtLCB0cmFja1R5cGUsIGlzTXV0ZWQpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2Z1Q2xpZW50LnVwZGF0ZU11dGVTdGF0ZSh0cmFja1R5cGUsIGlzTXV0ZWQpO1xuICAgICAgICAgICAgY29uc3QgYXVkaW9PclZpZGVvT3JTY3JlZW5TaGFyZVN0cmVhbSA9IHRyYWNrVHlwZVRvUGFydGljaXBhbnRTdHJlYW1LZXkodHJhY2tUeXBlKTtcbiAgICAgICAgICAgIGlmIChpc011dGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS51cGRhdGVQYXJ0aWNpcGFudCh0aGlzLnNmdUNsaWVudC5zZXNzaW9uSWQsIChwKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICBwdWJsaXNoZWRUcmFja3M6IHAucHVibGlzaGVkVHJhY2tzLmZpbHRlcigodCkgPT4gdCAhPT0gdHJhY2tUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgW2F1ZGlvT3JWaWRlb09yU2NyZWVuU2hhcmVTdHJlYW1dOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS51cGRhdGVQYXJ0aWNpcGFudCh0aGlzLnNmdUNsaWVudC5zZXNzaW9uSWQsIChwKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwdWJsaXNoZWRUcmFja3M6IHAucHVibGlzaGVkVHJhY2tzLmluY2x1ZGVzKHRyYWNrVHlwZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHAucHVibGlzaGVkVHJhY2tzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBbLi4ucC5wdWJsaXNoZWRUcmFja3MsIHRyYWNrVHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbYXVkaW9PclZpZGVvT3JTY3JlZW5TaGFyZVN0cmVhbV06IG1lZGlhU3RyZWFtLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU3RvcHMgcHVibGlzaGluZyBhbGwgdHJhY2tzIGFuZCBzdG9wIGFsbCB0cmFja3MuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0b3BQdWJsaXNoaW5nID0gKCkgPT4ge1xuICAgICAgICAgICAgbG9nZ2VyJDMoJ2RlYnVnJywgJ1N0b3BwaW5nIHB1Ymxpc2hpbmcgYWxsIHRyYWNrcycpO1xuICAgICAgICAgICAgdGhpcy5wYy5nZXRTZW5kZXJzKCkuZm9yRWFjaCgocykgPT4ge1xuICAgICAgICAgICAgICAgIHMudHJhY2s/LnN0b3AoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wYy5zaWduYWxpbmdTdGF0ZSAhPT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYy5yZW1vdmVUcmFjayhzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51cGRhdGVWaWRlb1B1Ymxpc2hRdWFsaXR5ID0gYXN5bmMgKGVuYWJsZWRMYXllcnMpID0+IHtcbiAgICAgICAgICAgIGxvZ2dlciQzKCdpbmZvJywgJ1VwZGF0ZSBwdWJsaXNoIHF1YWxpdHksIHJlcXVlc3RlZCBsYXllcnMgYnkgU0ZVOicsIGVuYWJsZWRMYXllcnMpO1xuICAgICAgICAgICAgY29uc3QgdmlkZW9TZW5kZXIgPSB0aGlzLnRyYW5zY2VpdmVyUmVnaXN0cnlbVHJhY2tUeXBlLlZJREVPXT8uc2VuZGVyO1xuICAgICAgICAgICAgaWYgKCF2aWRlb1NlbmRlcikge1xuICAgICAgICAgICAgICAgIGxvZ2dlciQzKCd3YXJuJywgJ1VwZGF0ZSBwdWJsaXNoIHF1YWxpdHksIG5vIHZpZGVvIHNlbmRlciBmb3VuZC4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB2aWRlb1NlbmRlci5nZXRQYXJhbWV0ZXJzKCk7XG4gICAgICAgICAgICBpZiAocGFyYW1zLmVuY29kaW5ncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIkMygnd2FybicsICdVcGRhdGUgcHVibGlzaCBxdWFsaXR5LCBObyBzdWl0YWJsZSB2aWRlbyBlbmNvZGluZyBxdWFsaXR5IGZvdW5kJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCBlbmFibGVkUmlkcyA9IGVuYWJsZWRMYXllcnNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChseSkgPT4gbHkuYWN0aXZlKVxuICAgICAgICAgICAgICAgIC5tYXAoKGx5KSA9PiBseS5uYW1lKTtcbiAgICAgICAgICAgIHBhcmFtcy5lbmNvZGluZ3MuZm9yRWFjaCgoZW5jKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gZmxpcCAnYWN0aXZlJyBmbGFnIG9ubHkgd2hlbiBuZWNlc3NhcnlcbiAgICAgICAgICAgICAgICBjb25zdCBzaG91bGRFbmFibGUgPSBlbmFibGVkUmlkcy5pbmNsdWRlcyhlbmMucmlkKTtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkRW5hYmxlICE9PSBlbmMuYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuYy5hY3RpdmUgPSBzaG91bGRFbmFibGU7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkRW5hYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBsYXllciA9IGVuYWJsZWRMYXllcnMuZmluZCgodmxzKSA9PiB2bHMubmFtZSA9PT0gZW5jLnJpZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXllciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIuc2NhbGVSZXNvbHV0aW9uRG93bkJ5ID49IDEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5zY2FsZVJlc29sdXRpb25Eb3duQnkgIT09IGVuYy5zY2FsZVJlc29sdXRpb25Eb3duQnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIkMygnZGVidWcnLCAnW2R5bmFzY2FsZV06IHNldHRpbmcgc2NhbGVSZXNvbHV0aW9uRG93bkJ5IGZyb20gc2VydmVyJywgJ2xheWVyJywgbGF5ZXIubmFtZSwgJ3NjYWxlLXJlc29sdXRpb24tZG93bi1ieScsIGxheWVyLnNjYWxlUmVzb2x1dGlvbkRvd25CeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5jLnNjYWxlUmVzb2x1dGlvbkRvd25CeSA9IGxheWVyLnNjYWxlUmVzb2x1dGlvbkRvd25CeTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5tYXhCaXRyYXRlID4gMCAmJiBsYXllci5tYXhCaXRyYXRlICE9PSBlbmMubWF4Qml0cmF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlciQzKCdkZWJ1ZycsICdbZHluYXNjYWxlXSBzZXR0aW5nIG1heC1iaXRyYXRlIGZyb20gdGhlIHNlcnZlcicsICdsYXllcicsIGxheWVyLm5hbWUsICdtYXgtYml0cmF0ZScsIGxheWVyLm1heEJpdHJhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYy5tYXhCaXRyYXRlID0gbGF5ZXIubWF4Qml0cmF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5tYXhGcmFtZXJhdGUgPiAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIubWF4RnJhbWVyYXRlICE9PSBlbmMubWF4RnJhbWVyYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyJDMoJ2RlYnVnJywgJ1tkeW5hc2NhbGVdOiBzZXR0aW5nIG1heEZyYW1lcmF0ZSBmcm9tIHNlcnZlcicsICdsYXllcicsIGxheWVyLm5hbWUsICdtYXgtZnJhbWVyYXRlJywgbGF5ZXIubWF4RnJhbWVyYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmMubWF4RnJhbWVyYXRlID0gbGF5ZXIubWF4RnJhbWVyYXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBhY3RpdmVMYXllcnMgPSBwYXJhbXMuZW5jb2RpbmdzLmZpbHRlcigoZSkgPT4gZS5hY3RpdmUpO1xuICAgICAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB2aWRlb1NlbmRlci5zZXRQYXJhbWV0ZXJzKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgbG9nZ2VyJDMoJ2luZm8nLCBgVXBkYXRlIHB1Ymxpc2ggcXVhbGl0eSwgZW5hYmxlZCByaWRzOiBgLCBhY3RpdmVMYXllcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyJDMoJ2luZm8nLCBgVXBkYXRlIHB1Ymxpc2ggcXVhbGl0eSwgbm8gY2hhbmdlOiBgLCBhY3RpdmVMYXllcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBgUlRDUGVlckNvbm5lY3Rpb24uZ2V0U3RhdHMoKWAgbWV0aG9kXG4gICAgICAgICAqIEBwYXJhbSBzZWxlY3RvclxuICAgICAgICAgKiBAcmV0dXJuc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nZXRTdGF0cyA9IChzZWxlY3RvcikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGMuZ2V0U3RhdHMoc2VsZWN0b3IpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldENvZGVjUHJlZmVyZW5jZXMgPSAodHJhY2tUeXBlLCBwcmVmZXJyZWRDb2RlYykgPT4ge1xuICAgICAgICAgICAgaWYgKHRyYWNrVHlwZSA9PT0gVHJhY2tUeXBlLlZJREVPKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFByZWZlcnJlZENvZGVjcygndmlkZW8nLCBwcmVmZXJyZWRDb2RlYyB8fCAndnA4Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHJhY2tUeXBlID09PSBUcmFja1R5cGUuQVVESU8pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0QXVkaW9Db2RlYyA9IHRoaXMuaXNSZWRFbmFibGVkID8gJ3JlZCcgOiAnb3B1cyc7XG4gICAgICAgICAgICAgICAgY29uc3QgY29kZWNUb1JlbW92ZSA9ICF0aGlzLmlzUmVkRW5hYmxlZCA/ICdyZWQnIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRQcmVmZXJyZWRDb2RlY3MoJ2F1ZGlvJywgcHJlZmVycmVkQ29kZWMgPz8gZGVmYXVsdEF1ZGlvQ29kZWMsIGNvZGVjVG9SZW1vdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uSWNlQ2FuZGlkYXRlID0gYXN5bmMgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgY2FuZGlkYXRlIH0gPSBlO1xuICAgICAgICAgICAgaWYgKCFjYW5kaWRhdGUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIkMygnZGVidWcnLCAnbnVsbCBpY2UgY2FuZGlkYXRlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5zZnVDbGllbnQuaWNlVHJpY2tsZSh7XG4gICAgICAgICAgICAgICAgaWNlQ2FuZGlkYXRlOiBnZXRJY2VDYW5kaWRhdGUoY2FuZGlkYXRlKSxcbiAgICAgICAgICAgICAgICBwZWVyVHlwZTogUGVlclR5cGUuUFVCTElTSEVSX1VOU1BFQ0lGSUVELFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXRzIHRoZSBTRlUgY2xpZW50IHRvIHVzZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHNmdUNsaWVudCB0aGUgU0ZVIGNsaWVudCB0byB1c2UuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNldFNmdUNsaWVudCA9IChzZnVDbGllbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2Z1Q2xpZW50ID0gc2Z1Q2xpZW50O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUGVyZm9ybXMgYSBtaWdyYXRpb24gb2YgdGhpcyBwdWJsaXNoZXIgaW5zdGFuY2UgdG8gYSBuZXcgU0ZVLlxuICAgICAgICAgKlxuICAgICAgICAgKiBJbml0aWF0ZXMgYSBuZXcgYGljZVJlc3RhcnRgIG9mZmVyL2Fuc3dlciBleGNoYW5nZSB3aXRoIHRoZSBuZXcgU0ZVLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gc2Z1Q2xpZW50IHRoZSBuZXcgU0ZVIGNsaWVudCB0byBtaWdyYXRlIHRvLlxuICAgICAgICAgKiBAcGFyYW0gY29ubmVjdGlvbkNvbmZpZyB0aGUgbmV3IGNvbm5lY3Rpb24gY29uZmlndXJhdGlvbiB0byB1c2UuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1pZ3JhdGVUbyA9IGFzeW5jIChzZnVDbGllbnQsIGNvbm5lY3Rpb25Db25maWcpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2Z1Q2xpZW50ID0gc2Z1Q2xpZW50O1xuICAgICAgICAgICAgdGhpcy5wYy5zZXRDb25maWd1cmF0aW9uKGNvbm5lY3Rpb25Db25maWcpO1xuICAgICAgICAgICAgdGhpcy5fY29ubmVjdGlvbkNvbmZpZ3VyYXRpb24gPSBjb25uZWN0aW9uQ29uZmlnO1xuICAgICAgICAgICAgY29uc3Qgc2hvdWxkUmVzdGFydEljZSA9IHRoaXMucGMuaWNlQ29ubmVjdGlvblN0YXRlID09PSAnY29ubmVjdGVkJztcbiAgICAgICAgICAgIGlmIChzaG91bGRSZXN0YXJ0SWNlKSB7XG4gICAgICAgICAgICAgICAgLy8gbmVnb3RpYXRlIG9ubHkgaWYgdGhlcmUgYXJlIHRyYWNrcyB0byBwdWJsaXNoXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5uZWdvdGlhdGUoeyBpY2VSZXN0YXJ0OiB0cnVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVzdGFydHMgdGhlIElDRSBjb25uZWN0aW9uIGFuZCByZW5lZ290aWF0ZXMgd2l0aCB0aGUgU0ZVLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZXN0YXJ0SWNlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbG9nZ2VyJDMoJ2RlYnVnJywgJ1Jlc3RhcnRpbmcgSUNFIGNvbm5lY3Rpb24nKTtcbiAgICAgICAgICAgIGNvbnN0IHNpZ25hbGluZ1N0YXRlID0gdGhpcy5wYy5zaWduYWxpbmdTdGF0ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSWNlUmVzdGFydGluZyB8fCBzaWduYWxpbmdTdGF0ZSA9PT0gJ2hhdmUtbG9jYWwtb2ZmZXInKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyJDMoJ2RlYnVnJywgJ0lDRSByZXN0YXJ0IGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3MnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm5lZ290aWF0ZSh7IGljZVJlc3RhcnQ6IHRydWUgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25OZWdvdGlhdGlvbk5lZWRlZCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubmVnb3RpYXRlKCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbml0aWF0ZXMgYSBuZXcgb2ZmZXIvYW5zd2VyIGV4Y2hhbmdlIHdpdGggdGhlIGN1cnJlbnRseSBjb25uZWN0ZWQgU0ZVLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucyB0aGUgb3B0aW9uYWwgb2ZmZXIgb3B0aW9ucyB0byB1c2UuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5lZ290aWF0ZSA9IGFzeW5jIChvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzSWNlUmVzdGFydGluZyA9IG9wdGlvbnM/LmljZVJlc3RhcnQgPz8gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBvZmZlciA9IGF3YWl0IHRoaXMucGMuY3JlYXRlT2ZmZXIob3B0aW9ucyk7XG4gICAgICAgICAgICBsZXQgc2RwID0gdGhpcy5tdW5nZUNvZGVjcyhvZmZlci5zZHApO1xuICAgICAgICAgICAgaWYgKHNkcCAmJiB0aGlzLmlzUHVibGlzaGluZyhUcmFja1R5cGUuU0NSRUVOX1NIQVJFX0FVRElPKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyID0gdGhpcy50cmFuc2NlaXZlclJlZ2lzdHJ5W1RyYWNrVHlwZS5TQ1JFRU5fU0hBUkVfQVVESU9dO1xuICAgICAgICAgICAgICAgIGlmICh0cmFuc2NlaXZlciAmJiB0cmFuc2NlaXZlci5zZW5kZXIudHJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWlkID0gdHJhbnNjZWl2ZXIubWlkID8/XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV4dHJhY3RNaWQoc2RwLCB0cmFuc2NlaXZlci5zZW5kZXIudHJhY2ssIFRyYWNrVHlwZS5TQ1JFRU5fU0hBUkVfQVVESU8pO1xuICAgICAgICAgICAgICAgICAgICBzZHAgPSBlbmFibGVIaWdoUXVhbGl0eUF1ZGlvKHNkcCwgbWlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBzZXQgdGhlIG11bmdlZCBTRFAgYmFjayB0byB0aGUgb2ZmZXJcbiAgICAgICAgICAgIG9mZmVyLnNkcCA9IHNkcDtcbiAgICAgICAgICAgIGNvbnN0IHRyYWNrSW5mb3MgPSB0aGlzLmdldEN1cnJlbnRUcmFja0luZm9zKG9mZmVyLnNkcCk7XG4gICAgICAgICAgICBpZiAodHJhY2tJbmZvcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGluaXRpYXRlIG5lZ290aWF0aW9uIHdpdGhvdXQgYW5ub3VuY2luZyBhbnkgdHJhY2tzYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBjLnNldExvY2FsRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICAgICAgY29uc3QgeyByZXNwb25zZSB9ID0gYXdhaXQgdGhpcy5zZnVDbGllbnQuc2V0UHVibGlzaGVyKHtcbiAgICAgICAgICAgICAgICBzZHA6IG9mZmVyLnNkcCB8fCAnJyxcbiAgICAgICAgICAgICAgICB0cmFja3M6IHRyYWNrSW5mb3MsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbih7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdhbnN3ZXInLFxuICAgICAgICAgICAgICAgICAgICBzZHA6IHJlc3BvbnNlLnNkcCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyJDMoJ2Vycm9yJywgYHNldFJlbW90ZURlc2NyaXB0aW9uIGVycm9yYCwge1xuICAgICAgICAgICAgICAgICAgICBzZHA6IHJlc3BvbnNlLnNkcCxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmlzSWNlUmVzdGFydGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zZnVDbGllbnQuaWNlVHJpY2tsZUJ1ZmZlci5wdWJsaXNoZXJDYW5kaWRhdGVzLnN1YnNjcmliZShhc3luYyAoY2FuZGlkYXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWNlQ2FuZGlkYXRlID0gSlNPTi5wYXJzZShjYW5kaWRhdGUuaWNlQ2FuZGlkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYy5hZGRJY2VDYW5kaWRhdGUoaWNlQ2FuZGlkYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyJDMoJ3dhcm4nLCBgSUNFIGNhbmRpZGF0ZSBlcnJvcmAsIFtlLCBjYW5kaWRhdGVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tdW5nZUNvZGVjcyA9IChzZHApID0+IHtcbiAgICAgICAgICAgIGlmIChzZHApIHtcbiAgICAgICAgICAgICAgICBzZHAgPSB0b2dnbGVEdHgoc2RwLCB0aGlzLmlzRHR4RW5hYmxlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2RwO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmV4dHJhY3RNaWQgPSAoc2RwLCB0cmFjaywgdHJhY2tUeXBlKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXNkcCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlciQzKCd3YXJuJywgJ05vIFNEUCBmb3VuZC4gUmV0dXJuaW5nIGVtcHR5IG1pZCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZ2dlciQzKCdkZWJ1ZycsIGBObyAnbWlkJyBmb3VuZCBmb3IgdHJhY2suIFRyeWluZyB0byBmaW5kIGl0IGZyb20gdGhlIE9mZmVyIFNEUGApO1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkU2RwID0gU0RQLnBhcnNlKHNkcCk7XG4gICAgICAgICAgICBjb25zdCBtZWRpYSA9IHBhcnNlZFNkcC5tZWRpYS5maW5kKChtKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChtLnR5cGUgPT09IHRyYWNrLmtpbmQgJiZcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgYG1zaWRgIGlzIG5vdCBwcmVzZW50LCB3ZSBhc3N1bWUgdGhhdCB0aGUgdHJhY2sgaXMgdGhlIGZpcnN0IG9uZVxuICAgICAgICAgICAgICAgICAgICAobS5tc2lkPy5pbmNsdWRlcyh0cmFjay5pZCkgPz8gdHJ1ZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lZGlhPy5taWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyJDMoJ2RlYnVnJywgYE5vIG1pZCBmb3VuZCBpbiBTRFAgZm9yIHRyYWNrIHR5cGUgJHt0cmFjay5raW5kfSBhbmQgaWQgJHt0cmFjay5pZH0uIEF0dGVtcHRpbmcgdG8gZmluZCBhIGhldXJpc3RpYyBtaWRgKTtcbiAgICAgICAgICAgICAgICBjb25zdCBoZXVyaXN0aWNNaWQgPSB0aGlzLnRyYW5zY2VpdmVySW5pdE9yZGVyLmluZGV4T2YodHJhY2tUeXBlKTtcbiAgICAgICAgICAgICAgICBpZiAoaGV1cmlzdGljTWlkICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKGhldXJpc3RpY01pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxvZ2dlciQzKCdkZWJ1ZycsICdObyBoZXVyaXN0aWMgbWlkIGZvdW5kLiBSZXR1cm5pbmcgZW1wdHkgbWlkJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhtZWRpYS5taWQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldEN1cnJlbnRUcmFja0luZm9zID0gKHNkcCkgPT4ge1xuICAgICAgICAgICAgc2RwID0gc2RwIHx8IHRoaXMucGMubG9jYWxEZXNjcmlwdGlvbj8uc2RwO1xuICAgICAgICAgICAgY29uc3QgeyBzZXR0aW5ncyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldFJlc29sdXRpb24gPSBzZXR0aW5ncz8udmlkZW8udGFyZ2V0X3Jlc29sdXRpb247XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wY1xuICAgICAgICAgICAgICAgIC5nZXRUcmFuc2NlaXZlcnMoKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKHQpID0+IHQuZGlyZWN0aW9uID09PSAnc2VuZG9ubHknICYmIHQuc2VuZGVyLnRyYWNrKVxuICAgICAgICAgICAgICAgIC5tYXAoKHRyYW5zY2VpdmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhY2tUeXBlID0gTnVtYmVyKE9iamVjdC5rZXlzKHRoaXMudHJhbnNjZWl2ZXJSZWdpc3RyeSkuZmluZCgoa2V5KSA9PiB0aGlzLnRyYW5zY2VpdmVyUmVnaXN0cnlba2V5XSA9PT0gdHJhbnNjZWl2ZXIpKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFjayA9IHRyYW5zY2VpdmVyLnNlbmRlci50cmFjaztcbiAgICAgICAgICAgICAgICBsZXQgb3B0aW1hbExheWVycztcbiAgICAgICAgICAgICAgICBpZiAodHJhY2sucmVhZHlTdGF0ZSA9PT0gJ2xpdmUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHB1Ymxpc2hPcHRzID0gdGhpcy5wdWJsaXNoT3B0aW9uc1BlclRyYWNrVHlwZS5nZXQodHJhY2tUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW1hbExheWVycyA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFja1R5cGUgPT09IFRyYWNrVHlwZS5WSURFT1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmluZE9wdGltYWxWaWRlb0xheWVycyh0cmFjaywgdGFyZ2V0UmVzb2x1dGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRyYWNrVHlwZSA9PT0gVHJhY2tUeXBlLlNDUkVFTl9TSEFSRVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZpbmRPcHRpbWFsU2NyZWVuU2hhcmluZ0xheWVycyh0cmFjaywgcHVibGlzaE9wdHM/LnNjcmVlblNoYXJlU2V0dGluZ3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhY2tMYXllcnNDYWNoZVt0cmFja1R5cGVdID0gb3B0aW1hbExheWVycztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIHJlcG9ydCB0aGUgbGFzdCBrbm93biBvcHRpbWFsIGxheWVycyBmb3IgZW5kZWQgdHJhY2tzXG4gICAgICAgICAgICAgICAgICAgIG9wdGltYWxMYXllcnMgPSB0aGlzLnRyYWNrTGF5ZXJzQ2FjaGVbdHJhY2tUeXBlXSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyJDMoJ2RlYnVnJywgYFRyYWNrICR7VHJhY2tUeXBlW3RyYWNrVHlwZV19IGlzIGVuZGVkLiBBbm5vdW5jaW5nIGxhc3Qga25vd24gb3B0aW1hbCBsYXllcnNgLCBvcHRpbWFsTGF5ZXJzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgbGF5ZXJzID0gb3B0aW1hbExheWVycy5tYXAoKG9wdGltYWxMYXllcikgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgcmlkOiBvcHRpbWFsTGF5ZXIucmlkIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBiaXRyYXRlOiBvcHRpbWFsTGF5ZXIubWF4Qml0cmF0ZSB8fCAwLFxuICAgICAgICAgICAgICAgICAgICBmcHM6IG9wdGltYWxMYXllci5tYXhGcmFtZXJhdGUgfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgcXVhbGl0eTogdGhpcy5yaWRUb1ZpZGVvUXVhbGl0eShvcHRpbWFsTGF5ZXIucmlkIHx8ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgdmlkZW9EaW1lbnNpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBvcHRpbWFsTGF5ZXIud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IG9wdGltYWxMYXllci5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzQXVkaW9UcmFjayA9IFtcbiAgICAgICAgICAgICAgICAgICAgVHJhY2tUeXBlLkFVRElPLFxuICAgICAgICAgICAgICAgICAgICBUcmFja1R5cGUuU0NSRUVOX1NIQVJFX0FVRElPLFxuICAgICAgICAgICAgICAgIF0uaW5jbHVkZXModHJhY2tUeXBlKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFja1NldHRpbmdzID0gdHJhY2suZ2V0U2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpc1N0ZXJlbyA9IGlzQXVkaW9UcmFjayAmJiB0cmFja1NldHRpbmdzLmNoYW5uZWxDb3VudCA9PT0gMjtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0cmFja0lkOiB0cmFjay5pZCxcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJzOiBsYXllcnMsXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgbWlkOiB0cmFuc2NlaXZlci5taWQgPz8gdGhpcy5leHRyYWN0TWlkKHNkcCwgdHJhY2ssIHRyYWNrVHlwZSksXG4gICAgICAgICAgICAgICAgICAgIHN0ZXJlbzogaXNTdGVyZW8sXG4gICAgICAgICAgICAgICAgICAgIGR0eDogaXNBdWRpb1RyYWNrICYmIHRoaXMuaXNEdHhFbmFibGVkLFxuICAgICAgICAgICAgICAgICAgICByZWQ6IGlzQXVkaW9UcmFjayAmJiB0aGlzLmlzUmVkRW5hYmxlZCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25JY2VDYW5kaWRhdGVFcnJvciA9IChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlIGluc3RhbmNlb2YgUlRDUGVlckNvbm5lY3Rpb25JY2VFcnJvckV2ZW50ICYmXG4gICAgICAgICAgICAgICAgYCR7ZS5lcnJvckNvZGV9OiAke2UuZXJyb3JUZXh0fWA7XG4gICAgICAgICAgICBjb25zdCBpY2VTdGF0ZSA9IHRoaXMucGMuaWNlQ29ubmVjdGlvblN0YXRlO1xuICAgICAgICAgICAgY29uc3QgbG9nTGV2ZWwgPSBpY2VTdGF0ZSA9PT0gJ2Nvbm5lY3RlZCcgfHwgaWNlU3RhdGUgPT09ICdjaGVja2luZycgPyAnZGVidWcnIDogJ3dhcm4nO1xuICAgICAgICAgICAgbG9nZ2VyJDMobG9nTGV2ZWwsIGBJQ0UgQ2FuZGlkYXRlIGVycm9yYCwgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkljZUNvbm5lY3Rpb25TdGF0ZUNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYy5pY2VDb25uZWN0aW9uU3RhdGU7XG4gICAgICAgICAgICBsb2dnZXIkMygnZGVidWcnLCBgSUNFIENvbm5lY3Rpb24gc3RhdGUgY2hhbmdlZCB0b2AsIHN0YXRlKTtcbiAgICAgICAgICAgIGNvbnN0IGhhc05ldHdvcmtDb25uZWN0aW9uID0gdGhpcy5zdGF0ZS5jYWxsaW5nU3RhdGUgIT09IENhbGxpbmdTdGF0ZS5PRkZMSU5FO1xuICAgICAgICAgICAgaWYgKHN0YXRlID09PSAnZmFpbGVkJykge1xuICAgICAgICAgICAgICAgIGxvZ2dlciQzKCd3YXJuJywgYEF0dGVtcHRpbmcgdG8gcmVzdGFydCBJQ0VgKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3RhcnRJY2UoKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIkMygnZXJyb3InLCBgSUNFIHJlc3RhcnQgZXJyb3JgLCBlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHN0YXRlID09PSAnZGlzY29ubmVjdGVkJyAmJiBoYXNOZXR3b3JrQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgIC8vIHdoZW4gaW4gYGRpc2Nvbm5lY3RlZGAgc3RhdGUsIHRoZSBicm93c2VyIG1heSByZWNvdmVyIGF1dG9tYXRpY2FsbHksXG4gICAgICAgICAgICAgICAgLy8gaGVuY2UsIHdlIGRlbGF5IHRoZSBJQ0UgcmVzdGFydFxuICAgICAgICAgICAgICAgIGxvZ2dlciQzKCd3YXJuJywgYFNjaGVkdWxpbmcgSUNFIHJlc3RhcnQgaW4gJHt0aGlzLmljZVJlc3RhcnREZWxheX0gbXMuYCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pY2VSZXN0YXJ0VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgc3RhdGUgaXMgc3RpbGwgYGRpc2Nvbm5lY3RlZGAgb3IgYGZhaWxlZGBcbiAgICAgICAgICAgICAgICAgICAgLy8gYXMgdGhlIGNvbm5lY3Rpb24gbWF5IGhhdmUgcmVjb3ZlcmVkIChvciBmYWlsZWQpIGluIHRoZSBtZWFudGltZVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wYy5pY2VDb25uZWN0aW9uU3RhdGUgPT09ICdkaXNjb25uZWN0ZWQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBjLmljZUNvbm5lY3Rpb25TdGF0ZSA9PT0gJ2ZhaWxlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdGFydEljZSgpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyJDMoJ2Vycm9yJywgYElDRSByZXN0YXJ0IGVycm9yYCwgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlciQzKCdkZWJ1ZycsIGBTY2hlZHVsZWQgSUNFIHJlc3RhcnQ6IGNvbm5lY3Rpb24gcmVjb3ZlcmVkLCBjYW5jZWxlZC5gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHRoaXMuaWNlUmVzdGFydERlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkljZUdhdGhlcmluZ1N0YXRlQ2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgbG9nZ2VyJDMoJ2RlYnVnJywgYElDRSBHYXRoZXJpbmcgU3RhdGVgLCB0aGlzLnBjLmljZUdhdGhlcmluZ1N0YXRlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vblNpZ25hbGluZ1N0YXRlQ2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgbG9nZ2VyJDMoJ2RlYnVnJywgYFNpZ25hbGluZyBzdGF0ZSBjaGFuZ2VkYCwgdGhpcy5wYy5zaWduYWxpbmdTdGF0ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmlkVG9WaWRlb1F1YWxpdHkgPSAocmlkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmlkID09PSAncSdcbiAgICAgICAgICAgICAgICA/IFZpZGVvUXVhbGl0eS5MT1dfVU5TUEVDSUZJRURcbiAgICAgICAgICAgICAgICA6IHJpZCA9PT0gJ2gnXG4gICAgICAgICAgICAgICAgICAgID8gVmlkZW9RdWFsaXR5Lk1JRFxuICAgICAgICAgICAgICAgICAgICA6IFZpZGVvUXVhbGl0eS5ISUdIOyAvLyBkZWZhdWx0IHRvIEhJR0hcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wYyA9IHRoaXMuY3JlYXRlUGVlckNvbm5lY3Rpb24oY29ubmVjdGlvbkNvbmZpZyk7XG4gICAgICAgIHRoaXMuc2Z1Q2xpZW50ID0gc2Z1Q2xpZW50O1xuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHRoaXMuaXNEdHhFbmFibGVkID0gaXNEdHhFbmFibGVkO1xuICAgICAgICB0aGlzLmlzUmVkRW5hYmxlZCA9IGlzUmVkRW5hYmxlZDtcbiAgICAgICAgdGhpcy5pY2VSZXN0YXJ0RGVsYXkgPSBpY2VSZXN0YXJ0RGVsYXk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmVPbkljZVJlc3RhcnQgPSBkaXNwYXRjaGVyLm9uKCdpY2VSZXN0YXJ0JywgYXN5bmMgKGljZVJlc3RhcnQpID0+IHtcbiAgICAgICAgICAgIGlmIChpY2VSZXN0YXJ0LnBlZXJUeXBlICE9PSBQZWVyVHlwZS5QVUJMSVNIRVJfVU5TUEVDSUZJRUQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5yZXN0YXJ0SWNlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY29uc3QgbG9nZ2VyJDIgPSBnZXRMb2dnZXIoWydTdWJzY3JpYmVyJ10pO1xuLyoqXG4gKiBBIHdyYXBwZXIgYXJvdW5kIHRoZSBgUlRDUGVlckNvbm5lY3Rpb25gIHRoYXQgaGFuZGxlcyB0aGUgaW5jb21pbmdcbiAqIG1lZGlhIHN0cmVhbXMgZnJvbSB0aGUgU0ZVLlxuICovXG5jbGFzcyBTdWJzY3JpYmVyIHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IGNvbm5lY3Rpb24gY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGdldCBjb25uZWN0aW9uQ29uZmlndXJhdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMucGMuZ2V0Q29uZmlndXJhdGlvbilcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBjLmdldENvbmZpZ3VyYXRpb24oKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb25Db25maWd1cmF0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IGBTdWJzY3JpYmVyYCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzZnVDbGllbnQgdGhlIFNGVSBjbGllbnQgdG8gdXNlLlxuICAgICAqIEBwYXJhbSBkaXNwYXRjaGVyIHRoZSBkaXNwYXRjaGVyIHRvIHVzZS5cbiAgICAgKiBAcGFyYW0gc3RhdGUgdGhlIHN0YXRlIG9mIHRoZSBjYWxsLlxuICAgICAqIEBwYXJhbSBjb25uZWN0aW9uQ29uZmlnIHRoZSBjb25uZWN0aW9uIGNvbmZpZ3VyYXRpb24gdG8gdXNlLlxuICAgICAqIEBwYXJhbSBpY2VSZXN0YXJ0RGVsYXkgdGhlIGRlbGF5IGluIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSByZXN0YXJ0aW5nIElDRSB3aGVuIGNvbm5lY3Rpb24gZ29lcyB0byBgZGlzY29ubmVjdGVkYCBzdGF0ZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih7IHNmdUNsaWVudCwgZGlzcGF0Y2hlciwgc3RhdGUsIGNvbm5lY3Rpb25Db25maWcsIGljZVJlc3RhcnREZWxheSA9IDI1MDAsIH0pIHtcbiAgICAgICAgdGhpcy5pc0ljZVJlc3RhcnRpbmcgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBuZXcgYFJUQ1BlZXJDb25uZWN0aW9uYCBpbnN0YW5jZSB3aXRoIHRoZSBnaXZlbiBjb25maWd1cmF0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gY29ubmVjdGlvbkNvbmZpZyB0aGUgY29ubmVjdGlvbiBjb25maWd1cmF0aW9uIHRvIHVzZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY3JlYXRlUGVlckNvbm5lY3Rpb24gPSAoY29ubmVjdGlvbkNvbmZpZykgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGMgPSBuZXcgUlRDUGVlckNvbm5lY3Rpb24oY29ubmVjdGlvbkNvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0aW9uQ29uZmlndXJhdGlvbiA9IGNvbm5lY3Rpb25Db25maWc7XG4gICAgICAgICAgICBwYy5hZGRFdmVudExpc3RlbmVyKCdpY2VjYW5kaWRhdGUnLCB0aGlzLm9uSWNlQ2FuZGlkYXRlKTtcbiAgICAgICAgICAgIHBjLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYWNrJywgdGhpcy5oYW5kbGVPblRyYWNrKTtcbiAgICAgICAgICAgIHBjLmFkZEV2ZW50TGlzdGVuZXIoJ2ljZWNhbmRpZGF0ZWVycm9yJywgdGhpcy5vbkljZUNhbmRpZGF0ZUVycm9yKTtcbiAgICAgICAgICAgIHBjLmFkZEV2ZW50TGlzdGVuZXIoJ2ljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsIHRoaXMub25JY2VDb25uZWN0aW9uU3RhdGVDaGFuZ2UpO1xuICAgICAgICAgICAgcGMuYWRkRXZlbnRMaXN0ZW5lcignaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2UnLCB0aGlzLm9uSWNlR2F0aGVyaW5nU3RhdGVDaGFuZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIHBjO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2xvc2VzIHRoZSBgUlRDUGVlckNvbm5lY3Rpb25gIGFuZCB1bnN1YnNjcmliZXMgZnJvbSB0aGUgZGlzcGF0Y2hlci5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5pY2VSZXN0YXJ0VGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLnVucmVnaXN0ZXJPblN1YnNjcmliZXJPZmZlcigpO1xuICAgICAgICAgICAgdGhpcy51bnJlZ2lzdGVyT25JY2VSZXN0YXJ0KCk7XG4gICAgICAgICAgICB0aGlzLnBjLmNsb3NlKCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGBSVENQZWVyQ29ubmVjdGlvbi5nZXRTdGF0cygpYCBtZXRob2RcbiAgICAgICAgICogQHBhcmFtIHNlbGVjdG9yXG4gICAgICAgICAqIEByZXR1cm5zXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdldFN0YXRzID0gKHNlbGVjdG9yKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYy5nZXRTdGF0cyhzZWxlY3Rvcik7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXRzIHRoZSBTRlUgY2xpZW50IHRvIHVzZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHNmdUNsaWVudCB0aGUgU0ZVIGNsaWVudCB0byB1c2UuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNldFNmdUNsaWVudCA9IChzZnVDbGllbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2Z1Q2xpZW50ID0gc2Z1Q2xpZW50O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogTWlncmF0ZXMgdGhlIHN1YnNjcmliZXIgdG8gYSBuZXcgU0ZVIGNsaWVudC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHNmdUNsaWVudCB0aGUgbmV3IFNGVSBjbGllbnQgdG8gbWlncmF0ZSB0by5cbiAgICAgICAgICogQHBhcmFtIGNvbm5lY3Rpb25Db25maWcgdGhlIG5ldyBjb25uZWN0aW9uIGNvbmZpZ3VyYXRpb24gdG8gdXNlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5taWdyYXRlVG8gPSAoc2Z1Q2xpZW50LCBjb25uZWN0aW9uQ29uZmlnKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFNmdUNsaWVudChzZnVDbGllbnQpO1xuICAgICAgICAgICAgLy8gd2hlbiBtaWdyYXRpbmcsIHdlIHdhbnQgdG8ga2VlcCB0aGUgcHJldmlvdXMgc3Vic2NyaWJlciBvcGVuXG4gICAgICAgICAgICAvLyB1bnRpbCB0aGUgbmV3IG9uZSBpcyBjb25uZWN0ZWRcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzUEMgPSB0aGlzLnBjO1xuICAgICAgICAgICAgLy8gd2Uga2VlcCBhIHJlY29yZCBvZiBwcmV2aW91c2x5IGF2YWlsYWJsZSB2aWRlbyB0cmFja3NcbiAgICAgICAgICAgIC8vIHNvIHRoYXQgd2UgY2FuIG1vbml0b3Igd2hlbiB0aGV5IGJlY29tZSBhdmFpbGFibGUgb24gdGhlIG5ld1xuICAgICAgICAgICAgLy8gc3Vic2NyaWJlciBhbmQgY2xvc2UgdGhlIHByZXZpb3VzIG9uZS5cbiAgICAgICAgICAgIGNvbnN0IHRyYWNrSWRzVG9NaWdyYXRlID0gbmV3IFNldCgpO1xuICAgICAgICAgICAgcHJldmlvdXNQQy5nZXRSZWNlaXZlcnMoKS5mb3JFYWNoKChyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHIudHJhY2sua2luZCA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgICAgICAgICAgICB0cmFja0lkc1RvTWlncmF0ZS5hZGQoci50cmFjay5pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBzZXQgdXAgYSBuZXcgc3Vic2NyaWJlciBwZWVyIGNvbm5lY3Rpb24sIGNvbmZpZ3VyZWQgdG8gY29ubmVjdFxuICAgICAgICAgICAgLy8gdG8gdGhlIG5ldyBTRlUgbm9kZVxuICAgICAgICAgICAgY29uc3QgcGMgPSB0aGlzLmNyZWF0ZVBlZXJDb25uZWN0aW9uKGNvbm5lY3Rpb25Db25maWcpO1xuICAgICAgICAgICAgbGV0IG1pZ3JhdGlvblRpbWVvdXRJZDtcbiAgICAgICAgICAgIGNvbnN0IGNsZWFudXBNaWdyYXRpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNQQy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChtaWdyYXRpb25UaW1lb3V0SWQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIFdoZW4gbWlncmF0aW5nLCB3ZSB3YW50IHRvIGtlZXAgdHJhY2sgb2YgdGhlIHZpZGVvIHRyYWNrc1xuICAgICAgICAgICAgLy8gdGhhdCBhcmUgbWlncmF0aW5nIHRvIHRoZSBuZXcgc3Vic2NyaWJlci5cbiAgICAgICAgICAgIC8vIE9uY2UgYWxsIG9mIHRoZW0gYXJlIGF2YWlsYWJsZSwgd2UgY2FuIGNsb3NlIHRoZSBwcmV2aW91cyBzdWJzY3JpYmVyLlxuICAgICAgICAgICAgY29uc3QgaGFuZGxlVHJhY2tNaWdyYXRpb24gPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxvZ2dlciQyKCdkZWJ1ZycsIGBbTWlncmF0aW9uXTogTWlncmF0ZWQgdHJhY2s6ICR7ZS50cmFjay5pZH0sICR7ZS50cmFjay5raW5kfWApO1xuICAgICAgICAgICAgICAgIHRyYWNrSWRzVG9NaWdyYXRlLmRlbGV0ZShlLnRyYWNrLmlkKTtcbiAgICAgICAgICAgICAgICBpZiAodHJhY2tJZHNUb01pZ3JhdGUuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIkMignZGVidWcnLCBgW01pZ3JhdGlvbl06IE1pZ3JhdGlvbiBjb21wbGV0ZWApO1xuICAgICAgICAgICAgICAgICAgICBwYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFjaycsIGhhbmRsZVRyYWNrTWlncmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYW51cE1pZ3JhdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBXaGVuIG1pZ3JhdGluZywgd2Ugd2FudCB0byBrZWVwIHRyYWNrIG9mIHRoZSBjb25uZWN0aW9uIHN0YXRlXG4gICAgICAgICAgICAvLyBvZiB0aGUgbmV3IHN1YnNjcmliZXIuXG4gICAgICAgICAgICAvLyBPbmNlIGl0IGlzIGNvbm5lY3RlZCwgd2UgZ2l2ZSBpdCBhIDItc2Vjb25kIGdyYWNlIHBlcmlvZCB0byByZWNlaXZlXG4gICAgICAgICAgICAvLyBhbGwgdGhlIHZpZGVvIHRyYWNrcyB0aGF0IGFyZSBtaWdyYXRpbmcgZnJvbSB0aGUgcHJldmlvdXMgc3Vic2NyaWJlci5cbiAgICAgICAgICAgIC8vIEFmdGVyIHRoaXMgdGhyZXNob2xkLCB3ZSBhYnJ1cHRseSBjbG9zZSB0aGUgcHJldmlvdXMgc3Vic2NyaWJlci5cbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZUNvbm5lY3Rpb25TdGF0ZUNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocGMuY29ubmVjdGlvblN0YXRlID09PSAnY29ubmVjdGVkJykge1xuICAgICAgICAgICAgICAgICAgICBtaWdyYXRpb25UaW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBjLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYWNrJywgaGFuZGxlVHJhY2tNaWdyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYW51cE1pZ3JhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgcGMucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgaGFuZGxlQ29ubmVjdGlvblN0YXRlQ2hhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcGMuYWRkRXZlbnRMaXN0ZW5lcigndHJhY2snLCBoYW5kbGVUcmFja01pZ3JhdGlvbik7XG4gICAgICAgICAgICBwYy5hZGRFdmVudExpc3RlbmVyKCdjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCBoYW5kbGVDb25uZWN0aW9uU3RhdGVDaGFuZ2UpO1xuICAgICAgICAgICAgLy8gcmVwbGFjZSB0aGUgUGVlckNvbm5lY3Rpb24gaW5zdGFuY2VcbiAgICAgICAgICAgIHRoaXMucGMgPSBwYztcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3RhcnRzIHRoZSBJQ0UgY29ubmVjdGlvbiBhbmQgcmVuZWdvdGlhdGVzIHdpdGggdGhlIFNGVS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVzdGFydEljZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGxvZ2dlciQyKCdkZWJ1ZycsICdSZXN0YXJ0aW5nIElDRSBjb25uZWN0aW9uJyk7XG4gICAgICAgICAgICBpZiAodGhpcy5wYy5zaWduYWxpbmdTdGF0ZSA9PT0gJ2hhdmUtcmVtb3RlLW9mZmVyJykge1xuICAgICAgICAgICAgICAgIGxvZ2dlciQyKCdkZWJ1ZycsICdJQ0UgcmVzdGFydCBpcyBhbHJlYWR5IGluIHByb2dyZXNzJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNJc0ljZVJlc3RhcnRpbmcgPSB0aGlzLmlzSWNlUmVzdGFydGluZztcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0ljZVJlc3RhcnRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2Z1Q2xpZW50LmljZVJlc3RhcnQoe1xuICAgICAgICAgICAgICAgICAgICBwZWVyVHlwZTogUGVlclR5cGUuU1VCU0NSSUJFUixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gcmVzdG9yZSB0aGUgcHJldmlvdXMgc3RhdGUsIGFzIG91ciBpbnRlbnQgZm9yIHJlc3RhcnRpbmcgSUNFIGZhaWxlZFxuICAgICAgICAgICAgICAgIHRoaXMuaXNJY2VSZXN0YXJ0aW5nID0gcHJldmlvdXNJc0ljZVJlc3RhcnRpbmc7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVPblRyYWNrID0gKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IFtwcmltYXJ5U3RyZWFtXSA9IGUuc3RyZWFtcztcbiAgICAgICAgICAgIC8vIGV4YW1wbGU6IGBlM2Y2YWFmOC1iMDNkLTQ5MTEtYmUzNi04M2Y0N2QzN2E3NmE6VFJBQ0tfVFlQRV9WSURFT2BcbiAgICAgICAgICAgIGNvbnN0IFt0cmFja0lkLCB0cmFja1R5cGVdID0gcHJpbWFyeVN0cmVhbS5pZC5zcGxpdCgnOicpO1xuICAgICAgICAgICAgY29uc3QgcGFydGljaXBhbnRUb1VwZGF0ZSA9IHRoaXMuc3RhdGUucGFydGljaXBhbnRzLmZpbmQoKHApID0+IHAudHJhY2tMb29rdXBQcmVmaXggPT09IHRyYWNrSWQpO1xuICAgICAgICAgICAgbG9nZ2VyJDIoJ2RlYnVnJywgYFtvblRyYWNrXTogR290IHJlbW90ZSAke3RyYWNrVHlwZX0gdHJhY2sgZm9yIHVzZXJJZDogJHtwYXJ0aWNpcGFudFRvVXBkYXRlPy51c2VySWR9YCwgZS50cmFjay5pZCwgZS50cmFjayk7XG4gICAgICAgICAgICBpZiAoIXBhcnRpY2lwYW50VG9VcGRhdGUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIkMignZXJyb3InLCBgW29uVHJhY2tdOiBSZWNlaXZlZCB0cmFjayBmb3IgdW5rbm93biBwYXJ0aWNpcGFudDogJHt0cmFja0lkfWAsIGUpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUudHJhY2suYWRkRXZlbnRMaXN0ZW5lcignbXV0ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBsb2dnZXIkMignaW5mbycsIGBbb25UcmFja106IFRyYWNrIG11dGVkOiAke3BhcnRpY2lwYW50VG9VcGRhdGUudXNlcklkfSAke3RyYWNrVHlwZX06JHt0cmFja0lkfWApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlLnRyYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ3VubXV0ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBsb2dnZXIkMignaW5mbycsIGBbb25UcmFja106IFRyYWNrIHVubXV0ZWQ6ICR7cGFydGljaXBhbnRUb1VwZGF0ZS51c2VySWR9ICR7dHJhY2tUeXBlfToke3RyYWNrSWR9YCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGUudHJhY2suYWRkRXZlbnRMaXN0ZW5lcignZW5kZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyJDIoJ2luZm8nLCBgW29uVHJhY2tdOiBUcmFjayBlbmRlZDogJHtwYXJ0aWNpcGFudFRvVXBkYXRlLnVzZXJJZH0gJHt0cmFja1R5cGV9OiR7dHJhY2tJZH1gKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3Qgc3RyZWFtS2luZFByb3AgPSB7XG4gICAgICAgICAgICAgICAgVFJBQ0tfVFlQRV9BVURJTzogJ2F1ZGlvU3RyZWFtJyxcbiAgICAgICAgICAgICAgICBUUkFDS19UWVBFX1ZJREVPOiAndmlkZW9TdHJlYW0nLFxuICAgICAgICAgICAgICAgIFRSQUNLX1RZUEVfU0NSRUVOX1NIQVJFOiAnc2NyZWVuU2hhcmVTdHJlYW0nLFxuICAgICAgICAgICAgICAgIFRSQUNLX1RZUEVfU0NSRUVOX1NIQVJFX0FVRElPOiAnc2NyZWVuU2hhcmVBdWRpb1N0cmVhbScsXG4gICAgICAgICAgICB9W3RyYWNrVHlwZV07XG4gICAgICAgICAgICBpZiAoIXN0cmVhbUtpbmRQcm9wKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyJDIoJ2Vycm9yJywgYFVua25vd24gdHJhY2sgdHlwZTogJHt0cmFja1R5cGV9YCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNTdHJlYW0gPSBwYXJ0aWNpcGFudFRvVXBkYXRlW3N0cmVhbUtpbmRQcm9wXTtcbiAgICAgICAgICAgIGlmIChwcmV2aW91c1N0cmVhbSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlciQyKCdpbmZvJywgYFtvblRyYWNrXTogQ2xlYW5pbmcgdXAgcHJldmlvdXMgcmVtb3RlICR7ZS50cmFjay5raW5kfSB0cmFja3MgZm9yIHVzZXJJZDogJHtwYXJ0aWNpcGFudFRvVXBkYXRlLnVzZXJJZH1gKTtcbiAgICAgICAgICAgICAgICBwcmV2aW91c1N0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHQuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1N0cmVhbS5yZW1vdmVUcmFjayh0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RhdGUudXBkYXRlUGFydGljaXBhbnQocGFydGljaXBhbnRUb1VwZGF0ZS5zZXNzaW9uSWQsIHtcbiAgICAgICAgICAgICAgICBbc3RyZWFtS2luZFByb3BdOiBwcmltYXJ5U3RyZWFtLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25JY2VDYW5kaWRhdGUgPSBhc3luYyAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBjYW5kaWRhdGUgfSA9IGU7XG4gICAgICAgICAgICBpZiAoIWNhbmRpZGF0ZSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlciQyKCdkZWJ1ZycsICdudWxsIGljZSBjYW5kaWRhdGUnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNmdUNsaWVudC5pY2VUcmlja2xlKHtcbiAgICAgICAgICAgICAgICBpY2VDYW5kaWRhdGU6IGdldEljZUNhbmRpZGF0ZShjYW5kaWRhdGUpLFxuICAgICAgICAgICAgICAgIHBlZXJUeXBlOiBQZWVyVHlwZS5TVUJTQ1JJQkVSLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubmVnb3RpYXRlID0gYXN5bmMgKHN1YnNjcmliZXJPZmZlcikgPT4ge1xuICAgICAgICAgICAgbG9nZ2VyJDIoJ2luZm8nLCBgUmVjZWl2ZWQgc3Vic2NyaWJlck9mZmVyYCwgc3Vic2NyaWJlck9mZmVyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdvZmZlcicsXG4gICAgICAgICAgICAgICAgc2RwOiBzdWJzY3JpYmVyT2ZmZXIuc2RwLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnNmdUNsaWVudC5pY2VUcmlja2xlQnVmZmVyLnN1YnNjcmliZXJDYW5kaWRhdGVzLnN1YnNjcmliZShhc3luYyAoY2FuZGlkYXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWNlQ2FuZGlkYXRlID0gSlNPTi5wYXJzZShjYW5kaWRhdGUuaWNlQ2FuZGlkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYy5hZGRJY2VDYW5kaWRhdGUoaWNlQ2FuZGlkYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyJDIoJ3dhcm4nLCBgSUNFIGNhbmRpZGF0ZSBlcnJvcmAsIFtlLCBjYW5kaWRhdGVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IHRoaXMucGMuY3JlYXRlQW5zd2VyKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBjLnNldExvY2FsRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2Z1Q2xpZW50LnNlbmRBbnN3ZXIoe1xuICAgICAgICAgICAgICAgIHBlZXJUeXBlOiBQZWVyVHlwZS5TVUJTQ1JJQkVSLFxuICAgICAgICAgICAgICAgIHNkcDogYW5zd2VyLnNkcCB8fCAnJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5pc0ljZVJlc3RhcnRpbmcgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkljZUNvbm5lY3Rpb25TdGF0ZUNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYy5pY2VDb25uZWN0aW9uU3RhdGU7XG4gICAgICAgICAgICBsb2dnZXIkMignZGVidWcnLCBgSUNFIGNvbm5lY3Rpb24gc3RhdGUgY2hhbmdlZGAsIHN0YXRlKTtcbiAgICAgICAgICAgIC8vIGRvIG5vdGhpbmcgd2hlbiBJQ0UgaXMgcmVzdGFydGluZ1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNJY2VSZXN0YXJ0aW5nKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IGhhc05ldHdvcmtDb25uZWN0aW9uID0gdGhpcy5zdGF0ZS5jYWxsaW5nU3RhdGUgIT09IENhbGxpbmdTdGF0ZS5PRkZMSU5FO1xuICAgICAgICAgICAgaWYgKHN0YXRlID09PSAnZmFpbGVkJykge1xuICAgICAgICAgICAgICAgIGxvZ2dlciQyKCd3YXJuJywgYEF0dGVtcHRpbmcgdG8gcmVzdGFydCBJQ0VgKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3RhcnRJY2UoKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIkMignZXJyb3InLCBgSUNFIHJlc3RhcnQgZmFpbGVkYCwgZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdGF0ZSA9PT0gJ2Rpc2Nvbm5lY3RlZCcgJiYgaGFzTmV0d29ya0Nvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAvLyB3aGVuIGluIGBkaXNjb25uZWN0ZWRgIHN0YXRlLCB0aGUgYnJvd3NlciBtYXkgcmVjb3ZlciBhdXRvbWF0aWNhbGx5LFxuICAgICAgICAgICAgICAgIC8vIGhlbmNlLCB3ZSBkZWxheSB0aGUgSUNFIHJlc3RhcnRcbiAgICAgICAgICAgICAgICBsb2dnZXIkMignd2FybicsIGBTY2hlZHVsaW5nIElDRSByZXN0YXJ0IGluICR7dGhpcy5pY2VSZXN0YXJ0RGVsYXl9IG1zLmApO1xuICAgICAgICAgICAgICAgIHRoaXMuaWNlUmVzdGFydFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHN0YXRlIGlzIHN0aWxsIGBkaXNjb25uZWN0ZWRgIG9yIGBmYWlsZWRgXG4gICAgICAgICAgICAgICAgICAgIC8vIGFzIHRoZSBjb25uZWN0aW9uIG1heSBoYXZlIHJlY292ZXJlZCAob3IgZmFpbGVkKSBpbiB0aGUgbWVhbnRpbWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGMuaWNlQ29ubmVjdGlvblN0YXRlID09PSAnZGlzY29ubmVjdGVkJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYy5pY2VDb25uZWN0aW9uU3RhdGUgPT09ICdmYWlsZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3RhcnRJY2UoKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlciQyKCdlcnJvcicsIGBJQ0UgcmVzdGFydCBmYWlsZWRgLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyJDIoJ2RlYnVnJywgYFNjaGVkdWxlZCBJQ0UgcmVzdGFydDogY29ubmVjdGlvbiByZWNvdmVyZWQsIGNhbmNlbGVkLmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgNTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25JY2VHYXRoZXJpbmdTdGF0ZUNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGxvZ2dlciQyKCdkZWJ1ZycsIGBJQ0UgZ2F0aGVyaW5nIHN0YXRlIGNoYW5nZWRgLCB0aGlzLnBjLmljZUdhdGhlcmluZ1N0YXRlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkljZUNhbmRpZGF0ZUVycm9yID0gKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGUgaW5zdGFuY2VvZiBSVENQZWVyQ29ubmVjdGlvbkljZUVycm9yRXZlbnQgJiZcbiAgICAgICAgICAgICAgICBgJHtlLmVycm9yQ29kZX06ICR7ZS5lcnJvclRleHR9YDtcbiAgICAgICAgICAgIGNvbnN0IGljZVN0YXRlID0gdGhpcy5wYy5pY2VDb25uZWN0aW9uU3RhdGU7XG4gICAgICAgICAgICBjb25zdCBsb2dMZXZlbCA9IGljZVN0YXRlID09PSAnY29ubmVjdGVkJyB8fCBpY2VTdGF0ZSA9PT0gJ2NoZWNraW5nJyA/ICdkZWJ1ZycgOiAnd2Fybic7XG4gICAgICAgICAgICBsb2dnZXIkMihsb2dMZXZlbCwgYElDRSBDYW5kaWRhdGUgZXJyb3JgLCBlcnJvck1lc3NhZ2UpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNmdUNsaWVudCA9IHNmdUNsaWVudDtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLmljZVJlc3RhcnREZWxheSA9IGljZVJlc3RhcnREZWxheTtcbiAgICAgICAgdGhpcy5wYyA9IHRoaXMuY3JlYXRlUGVlckNvbm5lY3Rpb24oY29ubmVjdGlvbkNvbmZpZyk7XG4gICAgICAgIHRoaXMudW5yZWdpc3Rlck9uU3Vic2NyaWJlck9mZmVyID0gZGlzcGF0Y2hlci5vbignc3Vic2NyaWJlck9mZmVyJywgYXN5bmMgKHN1YnNjcmliZXJPZmZlcikgPT4ge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5uZWdvdGlhdGUoc3Vic2NyaWJlck9mZmVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudW5yZWdpc3Rlck9uSWNlUmVzdGFydCA9IGRpc3BhdGNoZXIub24oJ2ljZVJlc3RhcnQnLCBhc3luYyAoaWNlUmVzdGFydCkgPT4ge1xuICAgICAgICAgICAgaWYgKGljZVJlc3RhcnQucGVlclR5cGUgIT09IFBlZXJUeXBlLlNVQlNDUklCRVIpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5yZXN0YXJ0SWNlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY29uc3QgY3JlYXRlV2ViU29ja2V0U2lnbmFsQ2hhbm5lbCA9IChvcHRzKSA9PiB7XG4gICAgY29uc3QgbG9nZ2VyID0gZ2V0TG9nZ2VyKFsnc2Z1LWNsaWVudCddKTtcbiAgICBjb25zdCB7IGVuZHBvaW50LCBvbk1lc3NhZ2UgfSA9IG9wdHM7XG4gICAgY29uc3Qgd3MgPSBuZXcgV2ViU29ja2V0KGVuZHBvaW50KTtcbiAgICB3cy5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJzsgLy8gZG8gd2UgbmVlZCB0aGlzP1xuICAgIHdzLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGUpID0+IHtcbiAgICAgICAgbG9nZ2VyKCdlcnJvcicsICdTaWduYWxpbmcgV1MgY2hhbm5lbCBlcnJvcicsIGUpO1xuICAgIH0pO1xuICAgIHdzLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgKGUpID0+IHtcbiAgICAgICAgbG9nZ2VyKCdpbmZvJywgJ1NpZ25hbGluZyBXUyBjaGFubmVsIGlzIGNsb3NlZCcsIGUpO1xuICAgIH0pO1xuICAgIHdzLmFkZEV2ZW50TGlzdGVuZXIoJ29wZW4nLCAoZSkgPT4ge1xuICAgICAgICBsb2dnZXIoJ2luZm8nLCAnU2lnbmFsaW5nIFdTIGNoYW5uZWwgaXMgb3BlbicsIGUpO1xuICAgIH0pO1xuICAgIHdzLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCAoZSkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGUuZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyXG4gICAgICAgICAgICAgICAgPyBTZnVFdmVudC5mcm9tQmluYXJ5KG5ldyBVaW50OEFycmF5KGUuZGF0YSkpXG4gICAgICAgICAgICAgICAgOiBTZnVFdmVudC5mcm9tSnNvblN0cmluZyhlLmRhdGEudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBvbk1lc3NhZ2UobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgbG9nZ2VyKCdlcnJvcicsICdGYWlsZWQgdG8gZGVjb2RlIGEgbWVzc2FnZS4gQ2hlY2sgd2hldGhlciB0aGUgUHJvdG8gbW9kZWxzIG1hdGNoLicsIHsgZXZlbnQ6IGUsIGVycm9yOiBlcnIgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gd3M7XG59O1xuXG5jb25zdCBzbGVlcCA9IChtKSA9PiBuZXcgUHJvbWlzZSgocikgPT4gc2V0VGltZW91dChyLCBtKSk7XG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmJlxuICAgICAgICAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJyB8fFxuICAgICAgICAgICAgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICAgICAgICB2YWx1ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSk7XG59XG4vKipcbiAqIEEgbWFwIG9mIGtub3duIGVycm9yIGNvZGVzLlxuICovXG5jb25zdCBLbm93bkNvZGVzID0ge1xuICAgIFRPS0VOX0VYUElSRUQ6IDQwLFxuICAgIFdTX0NMT1NFRF9TVUNDRVNTOiAxMDAwLFxuICAgIFdTX0NMT1NFRF9BQlJVUFRMWTogMTAwNixcbiAgICBXU19QT0xJQ1lfVklPTEFUSU9OOiAxMDA4LFxufTtcbi8qKlxuICogcmV0cnlJbnRlcnZhbCAtIEEgcmV0cnkgaW50ZXJ2YWwgd2hpY2ggaW5jcmVhc2VzIGFjYyB0byBudW1iZXIgb2YgZmFpbHVyZXNcbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IER1cmF0aW9uIHRvIHdhaXQgaW4gbWlsbGlzZWNvbmRzXG4gKi9cbmZ1bmN0aW9uIHJldHJ5SW50ZXJ2YWwobnVtYmVyT2ZGYWlsdXJlcykge1xuICAgIC8vIHRyeSB0byByZWNvbm5lY3QgaW4gMC4yNS01IHNlY29uZHMgKHJhbmRvbSB0byBzcHJlYWQgb3V0IHRoZSBsb2FkIGZyb20gZmFpbHVyZXMpXG4gICAgY29uc3QgbWF4ID0gTWF0aC5taW4oNTAwICsgbnVtYmVyT2ZGYWlsdXJlcyAqIDIwMDAsIDUwMDApO1xuICAgIGNvbnN0IG1pbiA9IE1hdGgubWluKE1hdGgubWF4KDI1MCwgKG51bWJlck9mRmFpbHVyZXMgLSAxKSAqIDIwMDApLCA1MDAwKTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW4pO1xufVxuZnVuY3Rpb24gcmFuZG9tSWQoKSB7XG4gICAgcmV0dXJuIGdlbmVyYXRlVVVJRHY0KCk7XG59XG5mdW5jdGlvbiBoZXgoYnl0ZXMpIHtcbiAgICBsZXQgcyA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcyArPSBieXRlc1tpXS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKTtcbiAgICB9XG4gICAgcmV0dXJuIHM7XG59XG4vLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNDEyMlxuZnVuY3Rpb24gZ2VuZXJhdGVVVUlEdjQoKSB7XG4gICAgY29uc3QgYnl0ZXMgPSBnZXRSYW5kb21CeXRlcygxNik7XG4gICAgYnl0ZXNbNl0gPSAoYnl0ZXNbNl0gJiAweDBmKSB8IDB4NDA7IC8vIHZlcnNpb25cbiAgICBieXRlc1s4XSA9IChieXRlc1s4XSAmIDB4YmYpIHwgMHg4MDsgLy8gdmFyaWFudFxuICAgIHJldHVybiAoaGV4KGJ5dGVzLnN1YmFycmF5KDAsIDQpKSArXG4gICAgICAgICctJyArXG4gICAgICAgIGhleChieXRlcy5zdWJhcnJheSg0LCA2KSkgK1xuICAgICAgICAnLScgK1xuICAgICAgICBoZXgoYnl0ZXMuc3ViYXJyYXkoNiwgOCkpICtcbiAgICAgICAgJy0nICtcbiAgICAgICAgaGV4KGJ5dGVzLnN1YmFycmF5KDgsIDEwKSkgK1xuICAgICAgICAnLScgK1xuICAgICAgICBoZXgoYnl0ZXMuc3ViYXJyYXkoMTAsIDE2KSkpO1xufVxuZnVuY3Rpb24gZ2V0UmFuZG9tVmFsdWVzV2l0aE1hdGhSYW5kb20oYnl0ZXMpIHtcbiAgICBjb25zdCBtYXggPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVzLmJ5dGVMZW5ndGgpIC8gYnl0ZXMubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJ5dGVzW2ldID0gTWF0aC5yYW5kb20oKSAqIG1heDtcbiAgICB9XG59XG5jb25zdCBnZXRSYW5kb21WYWx1ZXMgPSAoKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB0eXBlb2YgY3J5cHRvPy5nZXRSYW5kb21WYWx1ZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIG1zQ3J5cHRvICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQobXNDcnlwdG8pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGdldFJhbmRvbVZhbHVlc1dpdGhNYXRoUmFuZG9tO1xuICAgIH1cbn0pKCk7XG5mdW5jdGlvbiBnZXRSYW5kb21CeXRlcyhsZW5ndGgpIHtcbiAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgZ2V0UmFuZG9tVmFsdWVzKGJ5dGVzKTtcbiAgICByZXR1cm4gYnl0ZXM7XG59XG5mdW5jdGlvbiBjb252ZXJ0RXJyb3JUb0pzb24oZXJyKSB7XG4gICAgY29uc3QganNvbk9iaiA9IHt9O1xuICAgIGlmICghZXJyKVxuICAgICAgICByZXR1cm4ganNvbk9iajtcbiAgICB0cnkge1xuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlcnIpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAganNvbk9ialtrZXldID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlcnIsIGtleSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjYXRjaCAoXykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXJyb3I6ICdmYWlsZWQgdG8gc2VyaWFsaXplIHRoZSBlcnJvcicsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBqc29uT2JqO1xufVxuLyoqXG4gKiBpc09ubGluZSBzYWZlbHkgcmV0dXJuIHRoZSBuYXZpZ2F0b3Iub25saW5lIHZhbHVlIGZvciBicm93c2VyIGVudlxuICogaWYgbmF2aWdhdG9yIGlzIG5vdCBpbiBnbG9iYWwgb2JqZWN0LCBpdCBhbHdheXMgcmV0dXJuIHRydWVcbiAqL1xuZnVuY3Rpb24gaXNPbmxpbmUobG9nZ2VyKSB7XG4gICAgY29uc3QgbmF2ID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyBuYXZpZ2F0b3JcbiAgICAgICAgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubmF2aWdhdG9yXG4gICAgICAgICAgICA/IHdpbmRvdy5uYXZpZ2F0b3JcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgIGlmICghbmF2KSB7XG4gICAgICAgIGxvZ2dlcignd2FybicsICdpc09ubGluZSBmYWlsZWQgdG8gYWNjZXNzIHdpbmRvdy5uYXZpZ2F0b3IgYW5kIGFzc3VtZSBicm93c2VyIGlzIG9ubGluZScpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gUk4gbmF2aWdhdG9yIGhhcyB1bmRlZmluZWQgZm9yIG9uTGluZVxuICAgIGlmICh0eXBlb2YgbmF2Lm9uTGluZSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gbmF2Lm9uTGluZTtcbn1cbi8qKlxuICogbGlzdGVuRm9yQ29ubmVjdGlvbkNoYW5nZXMgLSBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIGZpcmVkIG9uIGJyb3dzZXIgZ29pbmcgb25saW5lIG9yIG9mZmxpbmVcbiAqL1xuZnVuY3Rpb24gYWRkQ29ubmVjdGlvbkV2ZW50TGlzdGVuZXJzKGNiKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvZmZsaW5lJywgY2IpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25saW5lJywgY2IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlbW92ZUNvbm5lY3Rpb25FdmVudExpc3RlbmVycyhjYikge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIGNiKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29ubGluZScsIGNiKTtcbiAgICB9XG59XG5cbi8qKlxuICogVGhlIGNsaWVudCB1c2VkIGZvciBleGNoYW5naW5nIGluZm9ybWF0aW9uIHdpdGggdGhlIFNGVS5cbiAqL1xuY2xhc3MgU3RyZWFtU2Z1Q2xpZW50IHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFNGVSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGlzcGF0Y2hlciB0aGUgZXZlbnQgZGlzcGF0Y2hlciB0byB1c2UuXG4gICAgICogQHBhcmFtIHNmdVNlcnZlciB0aGUgU0ZVIHNlcnZlciB0byBjb25uZWN0IHRvLlxuICAgICAqIEBwYXJhbSB0b2tlbiB0aGUgSldUIHRva2VuIHRvIHVzZSBmb3IgYXV0aGVudGljYXRpb24uXG4gICAgICogQHBhcmFtIHNlc3Npb25JZCB0aGUgYHNlc3Npb25JZGAgb2YgdGhlIGN1cnJlbnRseSBjb25uZWN0ZWQgcGFydGljaXBhbnQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoeyBkaXNwYXRjaGVyLCBzZnVTZXJ2ZXIsIHRva2VuLCBzZXNzaW9uSWQsIH0pIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgYnVmZmVyIGZvciBJQ0UgQ2FuZGlkYXRlcyB0aGF0IGFyZSByZWNlaXZlZCBiZWZvcmVcbiAgICAgICAgICogdGhlIFBlZXJDb25uZWN0aW9ucyBhcmUgcmVhZHkgdG8gaGFuZGxlIHRoZW0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmljZVRyaWNrbGVCdWZmZXIgPSBuZXcgSWNlVHJpY2tsZUJ1ZmZlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBmbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUgY2xpZW50IGlzIGN1cnJlbnRseSBtaWdyYXRpbmcgYXdheVxuICAgICAgICAgKiBmcm9tIHRoaXMgU0ZVLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pc01pZ3JhdGluZ0F3YXkgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgZmxhZyBpbmRpY2F0aW5nIHRoYXQgdGhlIGNsaWVudCBjb25uZWN0aW9uIGlzIGJyb2tlbiBmb3IgdGhlIGN1cnJlbnRcbiAgICAgICAgICogY2xpZW50IGFuZCB0aGF0IGEgZmFzdC1yZWNvbm5lY3Qgd2l0aCBhIG5ldyBjbGllbnQgc2hvdWxkIGJlIGF0dGVtcHRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaXNGYXN0UmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGluZ0ludGVydmFsSW5NcyA9IDEwICogMTAwMDtcbiAgICAgICAgdGhpcy51bmhlYWx0aHlUaW1lb3V0SW5NcyA9IHRoaXMucGluZ0ludGVydmFsSW5NcyArIDUgKiAxMDAwO1xuICAgICAgICB0aGlzLmNsb3NlID0gKGNvZGUsIHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ2RlYnVnJywgYENsb3NpbmcgU0ZVIFdTIGNvbm5lY3Rpb246ICR7Y29kZX0gLSAke3JlYXNvbn1gKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNpZ25hbFdzLnJlYWR5U3RhdGUgIT09IHRoaXMuc2lnbmFsV3MuQ0xPU0VEKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaWduYWxXcy5jbG9zZShjb2RlLCBganMtY2xpZW50OiAke3JlYXNvbn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmVJY2VUcmlja2xlKCk7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMua2VlcEFsaXZlSW50ZXJ2YWwpO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY29ubmVjdGlvbkNoZWNrVGltZW91dCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlU3Vic2NyaXB0aW9ucyA9IGFzeW5jIChzdWJzY3JpcHRpb25zKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmV0cnlhYmxlKCgpID0+IHRoaXMucnBjLnVwZGF0ZVN1YnNjcmlwdGlvbnMoe1xuICAgICAgICAgICAgICAgIHNlc3Npb25JZDogdGhpcy5zZXNzaW9uSWQsXG4gICAgICAgICAgICAgICAgdHJhY2tzOiBzdWJzY3JpcHRpb25zLFxuICAgICAgICAgICAgfSksIHRoaXMubG9nZ2VyKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXRQdWJsaXNoZXIgPSBhc3luYyAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJldHJ5YWJsZSgoKSA9PiB0aGlzLnJwYy5zZXRQdWJsaXNoZXIoe1xuICAgICAgICAgICAgICAgIC4uLmRhdGEsXG4gICAgICAgICAgICAgICAgc2Vzc2lvbklkOiB0aGlzLnNlc3Npb25JZCxcbiAgICAgICAgICAgIH0pLCB0aGlzLmxvZ2dlcik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2VuZEFuc3dlciA9IGFzeW5jIChkYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmV0cnlhYmxlKCgpID0+IHRoaXMucnBjLnNlbmRBbnN3ZXIoe1xuICAgICAgICAgICAgICAgIC4uLmRhdGEsXG4gICAgICAgICAgICAgICAgc2Vzc2lvbklkOiB0aGlzLnNlc3Npb25JZCxcbiAgICAgICAgICAgIH0pLCB0aGlzLmxvZ2dlcik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaWNlVHJpY2tsZSA9IGFzeW5jIChkYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmV0cnlhYmxlKCgpID0+IHRoaXMucnBjLmljZVRyaWNrbGUoe1xuICAgICAgICAgICAgICAgIC4uLmRhdGEsXG4gICAgICAgICAgICAgICAgc2Vzc2lvbklkOiB0aGlzLnNlc3Npb25JZCxcbiAgICAgICAgICAgIH0pLCB0aGlzLmxvZ2dlcik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaWNlUmVzdGFydCA9IGFzeW5jIChkYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmV0cnlhYmxlKCgpID0+IHRoaXMucnBjLmljZVJlc3RhcnQoe1xuICAgICAgICAgICAgICAgIC4uLmRhdGEsXG4gICAgICAgICAgICAgICAgc2Vzc2lvbklkOiB0aGlzLnNlc3Npb25JZCxcbiAgICAgICAgICAgIH0pLCB0aGlzLmxvZ2dlcik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlTXV0ZVN0YXRlID0gYXN5bmMgKHRyYWNrVHlwZSwgbXV0ZWQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZU11dGVTdGF0ZXMoe1xuICAgICAgICAgICAgICAgIG11dGVTdGF0ZXM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbXV0ZWQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVwZGF0ZU11dGVTdGF0ZXMgPSBhc3luYyAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJldHJ5YWJsZSgoKSA9PiB0aGlzLnJwYy51cGRhdGVNdXRlU3RhdGVzKHtcbiAgICAgICAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICAgICAgICAgIHNlc3Npb25JZDogdGhpcy5zZXNzaW9uSWQsXG4gICAgICAgICAgICB9KSwgdGhpcy5sb2dnZXIpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNlbmRTdGF0cyA9IGFzeW5jIChzdGF0cykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJldHJ5YWJsZSgoKSA9PiB0aGlzLnJwYy5zZW5kU3RhdHMoe1xuICAgICAgICAgICAgICAgIC4uLnN0YXRzLFxuICAgICAgICAgICAgICAgIHNlc3Npb25JZDogdGhpcy5zZXNzaW9uSWQsXG4gICAgICAgICAgICB9KSwgdGhpcy5sb2dnZXIpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmpvaW4gPSBhc3luYyAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgam9pblJlcXVlc3QgPSBKb2luUmVxdWVzdC5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIC4uLmRhdGEsXG4gICAgICAgICAgICAgICAgc2Vzc2lvbklkOiB0aGlzLnNlc3Npb25JZCxcbiAgICAgICAgICAgICAgICB0b2tlbjogdGhpcy50b2tlbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZChTZnVSZXF1ZXN0LmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgcmVxdWVzdFBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgb25lb2ZLaW5kOiAnam9pblJlcXVlc3QnLFxuICAgICAgICAgICAgICAgICAgICBqb2luUmVxdWVzdCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNlbmQgPSBhc3luYyAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2lnbmFsUmVhZHkudGhlbigoc2lnbmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNpZ25hbC5yZWFkeVN0YXRlICE9PSBzaWduYWwuT1BFTilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdkZWJ1ZycsIGBTZW5kaW5nIG1lc3NhZ2UgdG86ICR7dGhpcy5lZGdlTmFtZX1gLCBTZnVSZXF1ZXN0LnRvSnNvbihtZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgc2lnbmFsLnNlbmQoU2Z1UmVxdWVzdC50b0JpbmFyeShtZXNzYWdlKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5rZWVwQWxpdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMua2VlcEFsaXZlSW50ZXJ2YWwpO1xuICAgICAgICAgICAgdGhpcy5rZWVwQWxpdmVJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlcigndHJhY2UnLCAnU2VuZGluZyBoZWFsdGhDaGVja1JlcXVlc3QgdG8gU0ZVJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IFNmdVJlcXVlc3QuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uZW9mS2luZDogJ2hlYWx0aENoZWNrUmVxdWVzdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFsdGhDaGVja1JlcXVlc3Q6IHt9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZChtZXNzYWdlKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlcignZXJyb3InLCAnRXJyb3Igc2VuZGluZyBoZWFsdGhDaGVja1JlcXVlc3QgdG8gU0ZVJywgZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCB0aGlzLnBpbmdJbnRlcnZhbEluTXMpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNjaGVkdWxlQ29ubmVjdGlvbkNoZWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY29ubmVjdGlvbkNoZWNrVGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25DaGVja1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sYXN0TWVzc2FnZVRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lU2luY2VMYXN0TWVzc2FnZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdGhpcy5sYXN0TWVzc2FnZVRpbWVzdGFtcC5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lU2luY2VMYXN0TWVzc2FnZSA+IHRoaXMudW5oZWFsdGh5VGltZW91dEluTXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoU3RyZWFtU2Z1Q2xpZW50LkVSUk9SX0NPTk5FQ1RJT05fVU5IRUFMVEhZLCBgU0ZVIGNvbm5lY3Rpb24gdW5oZWFsdGh5LiBEaWRuJ3QgcmVjZWl2ZSBhbnkgbWVzc2FnZSBmb3IgJHt0aGlzLnVuaGVhbHRoeVRpbWVvdXRJbk1zfW1zYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzLnVuaGVhbHRoeVRpbWVvdXRJbk1zKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXNzaW9uSWQgPSBzZXNzaW9uSWQgfHwgZ2VuZXJhdGVVVUlEdjQoKTtcbiAgICAgICAgdGhpcy5zZnVTZXJ2ZXIgPSBzZnVTZXJ2ZXI7XG4gICAgICAgIHRoaXMuZWRnZU5hbWUgPSBzZnVTZXJ2ZXIuZWRnZV9uYW1lO1xuICAgICAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgICAgIHRoaXMubG9nZ2VyID0gZ2V0TG9nZ2VyKFsnc2Z1LWNsaWVudCddKTtcbiAgICAgICAgY29uc3QgbG9nSW50ZXJjZXB0b3IgPSB7XG4gICAgICAgICAgICBpbnRlcmNlcHRVbmFyeTogKG5leHQsIG1ldGhvZCwgaW5wdXQsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlcigndHJhY2UnLCBgQ2FsbGluZyBTRlUgUlBDIG1ldGhvZCAke21ldGhvZC5uYW1lfWAsIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHQobWV0aG9kLCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJwYyA9IGNyZWF0ZVNpZ25hbENsaWVudCh7XG4gICAgICAgICAgICBiYXNlVXJsOiBzZnVTZXJ2ZXIudXJsLFxuICAgICAgICAgICAgaW50ZXJjZXB0b3JzOiBbXG4gICAgICAgICAgICAgICAgd2l0aEhlYWRlcnMoe1xuICAgICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW59YCxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBsb2dJbnRlcmNlcHRvcixcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBTcGVjaWFsIGhhbmRsaW5nIGZvciB0aGUgSUNFVHJpY2tsZSBraW5kIG9mIGV2ZW50cy5cbiAgICAgICAgLy8gVGhlc2UgZXZlbnRzIG1pZ2h0IGJlIHRyaWdnZXJlZCBieSB0aGUgU0ZVIGJlZm9yZSB0aGUgaW5pdGlhbCBSVENcbiAgICAgICAgLy8gY29ubmVjdGlvbiBpcyBlc3RhYmxpc2hlZC4gSW4gdGhhdCBjYXNlLCB0aG9zZSBldmVudHMgKElDRSBjYW5kaWRhdGVzKVxuICAgICAgICAvLyBuZWVkIHRvIGJlIGJ1ZmZlcmVkIGFuZCBsYXRlciBhZGRlZCB0byB0aGUgYXBwcm9wcmlhdGUgUGVlckNvbm5lY3Rpb25cbiAgICAgICAgLy8gb25jZSB0aGUgcmVtb3RlRGVzY3JpcHRpb24gaXMga25vd24gYW5kIHNldC5cbiAgICAgICAgdGhpcy51bnN1YnNjcmliZUljZVRyaWNrbGUgPSBkaXNwYXRjaGVyLm9uKCdpY2VUcmlja2xlJywgKGljZVRyaWNrbGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaWNlVHJpY2tsZUJ1ZmZlci5wdXNoKGljZVRyaWNrbGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zaWduYWxXcyA9IGNyZWF0ZVdlYlNvY2tldFNpZ25hbENoYW5uZWwoe1xuICAgICAgICAgICAgZW5kcG9pbnQ6IHNmdVNlcnZlci53c19lbmRwb2ludCxcbiAgICAgICAgICAgIG9uTWVzc2FnZTogKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RNZXNzYWdlVGltZXN0YW1wID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlQ29ubmVjdGlvbkNoZWNrKCk7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hlci5kaXNwYXRjaChtZXNzYWdlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNpZ25hbFJlYWR5ID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG9uT3BlbiA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNpZ25hbFdzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29wZW4nLCBvbk9wZW4pO1xuICAgICAgICAgICAgICAgIHRoaXMua2VlcEFsaXZlKCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLnNpZ25hbFdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnNpZ25hbFdzLmFkZEV2ZW50TGlzdGVuZXIoJ29wZW4nLCBvbk9wZW4pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vKipcbiAqIFRoZSBub3JtYWwgY2xvc3VyZSBjb2RlLiBVc2VkIGZvciBjb250cm9sbGVkIHNodXRkb3ducy5cbiAqL1xuU3RyZWFtU2Z1Q2xpZW50Lk5PUk1BTF9DTE9TVVJFID0gMTAwMDtcbi8qKlxuICogVGhlIGVycm9yIGNvZGUgdXNlZCB3aGVuIHRoZSBTRlUgY29ubmVjdGlvbiBpcyB1bmhlYWx0aHkuXG4gKiBVc3VhbGx5LCB0aGlzIG1lYW5zIHRoYXQgbm8gbWVzc2FnZSBoYXMgYmVlbiByZWNlaXZlZCBmcm9tIHRoZSBTRlUgZm9yXG4gKiBhIGNlcnRhaW4gYW1vdW50IG9mIHRpbWUgKGBjb25uZWN0aW9uQ2hlY2tUaW1lb3V0YCkuXG4gKi9cblN0cmVhbVNmdUNsaWVudC5FUlJPUl9DT05ORUNUSU9OX1VOSEVBTFRIWSA9IDQwMDE7XG4vKipcbiAqIFRoZSBlcnJvciBjb2RlIHVzZWQgd2hlbiB0aGUgU0ZVIGNvbm5lY3Rpb24gaXMgYnJva2VuLlxuICogVXN1YWxseSwgdGhpcyBtZWFucyB0aGF0IHRoZSBXUyBjb25uZWN0aW9uIGhhcyBiZWVuIGNsb3NlZCB1bmV4cGVjdGVkbHkuXG4gKiBUaGlzIGVycm9yIGNvZGUgaXMgdXNlZCB0byBhbm5vdW5jZSBhIGZhc3QtcmVjb25uZWN0LlxuICovXG5TdHJlYW1TZnVDbGllbnQuRVJST1JfQ09OTkVDVElPTl9CUk9LRU4gPSA0MDAyOyAvLyB1c2VkIGluIGZhc3QtcmVjb25uZWN0c1xuY29uc3QgTUFYX1JFVFJJRVMgPSA1O1xuLyoqXG4gKiBDcmVhdGVzIGEgY2xvc3VyZSB3aGljaCB3cmFwcyB0aGUgZ2l2ZW4gUlBDIGNhbGwgYW5kIHJldHJpZXMgaW52b2tpbmdcbiAqIHRoZSBSUEMgdW50aWwgaXQgc3VjY2VlZHMgb3IgdGhlIG1heGltdW0gbnVtYmVyIG9mIHJldHJpZXMgaXMgcmVhY2hlZC5cbiAqXG4gKiBCZXR3ZWVuIGVhY2ggcmV0cnksIHRoZXJlIHdvdWxkIGJlIGEgcmFuZG9tIGRlbGF5IGluIG9yZGVyIHRvIGF2b2lkXG4gKiByZXF1ZXN0IGJ1cnN0cyB0b3dhcmRzIHRoZSBTRlUuXG4gKlxuICogQHBhcmFtIHJwYyB0aGUgY2xvc3VyZSBhcm91bmQgdGhlIFJQQyBjYWxsIHRvIGV4ZWN1dGUuXG4gKiBAcGFyYW0gbG9nZ2VyIGEgbG9nZ2VyIGluc3RhbmNlIHRvIHVzZS5cbiAqIEBwYXJhbSA8ST4gdGhlIHR5cGUgb2YgdGhlIHJlcXVlc3Qgb2JqZWN0LlxuICogQHBhcmFtIDxPPiB0aGUgdHlwZSBvZiB0aGUgcmVzcG9uc2Ugb2JqZWN0LlxuICovXG5jb25zdCByZXRyeWFibGUgPSBhc3luYyAocnBjLCBsb2dnZXIpID0+IHtcbiAgICBsZXQgcmV0cnlBdHRlbXB0ID0gMDtcbiAgICBsZXQgcnBjQ2FsbFJlc3VsdDtcbiAgICBkbyB7XG4gICAgICAgIC8vIGRvbid0IGRlbGF5IHRoZSBmaXJzdCBpbnZvY2F0aW9uXG4gICAgICAgIGlmIChyZXRyeUF0dGVtcHQgPiAwKSB7XG4gICAgICAgICAgICBhd2FpdCBzbGVlcChyZXRyeUludGVydmFsKHJldHJ5QXR0ZW1wdCkpO1xuICAgICAgICB9XG4gICAgICAgIHJwY0NhbGxSZXN1bHQgPSBhd2FpdCBycGMoKTtcbiAgICAgICAgbG9nZ2VyKCd0cmFjZScsIGBTRlUgUlBDIHJlc3BvbnNlIHJlY2VpdmVkIGZvciAke3JwY0NhbGxSZXN1bHQubWV0aG9kLm5hbWV9YCwgcnBjQ2FsbFJlc3VsdCk7XG4gICAgICAgIC8vIGlmIHRoZSBSUEMgY2FsbCBmYWlsZWQsIGxvZyB0aGUgZXJyb3IgYW5kIHJldHJ5XG4gICAgICAgIGlmIChycGNDYWxsUmVzdWx0LnJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgICBsb2dnZXIoJ2Vycm9yJywgYFNGVSBSUEMgRXJyb3IgKCR7cnBjQ2FsbFJlc3VsdC5tZXRob2QubmFtZX0pOmAsIHJwY0NhbGxSZXN1bHQucmVzcG9uc2UuZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHJ5QXR0ZW1wdCsrO1xuICAgIH0gd2hpbGUgKHJwY0NhbGxSZXN1bHQucmVzcG9uc2UuZXJyb3I/LnNob3VsZFJldHJ5ICYmXG4gICAgICAgIHJldHJ5QXR0ZW1wdCA8IE1BWF9SRVRSSUVTKTtcbiAgICBpZiAocnBjQ2FsbFJlc3VsdC5yZXNwb25zZS5lcnJvcikge1xuICAgICAgICB0aHJvdyBycGNDYWxsUmVzdWx0LnJlc3BvbnNlLmVycm9yO1xuICAgIH1cbiAgICByZXR1cm4gcnBjQ2FsbFJlc3VsdDtcbn07XG5cbi8qKlxuICogRXZlbnQgaGFuZGxlciB0aGF0IHdhdGNoZWQgdGhlIGRlbGl2ZXJ5IG9mIGBjYWxsLmFjY2VwdGVkYC5cbiAqIE9uY2UgdGhlIGV2ZW50IGlzIHJlY2VpdmVkLCB0aGUgY2FsbCBpcyBqb2luZWQuXG4gKi9cbmNvbnN0IHdhdGNoQ2FsbEFjY2VwdGVkID0gKGNhbGwpID0+IHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gb25DYWxsQWNjZXB0ZWQoZXZlbnQpIHtcbiAgICAgICAgLy8gV2Ugd2FudCB0byBkaXNjYXJkIHRoZSBldmVudCBpZiBpdCdzIGZyb20gdGhlIGN1cnJlbnQgdXNlclxuICAgICAgICBpZiAoZXZlbnQudXNlci5pZCA9PT0gY2FsbC5jdXJyZW50VXNlcklkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB7IHN0YXRlIH0gPSBjYWxsO1xuICAgICAgICBpZiAoZXZlbnQuY2FsbC5jcmVhdGVkX2J5LmlkID09PSBjYWxsLmN1cnJlbnRVc2VySWQgJiZcbiAgICAgICAgICAgIHN0YXRlLmNhbGxpbmdTdGF0ZSA9PT0gQ2FsbGluZ1N0YXRlLlJJTkdJTkcpIHtcbiAgICAgICAgICAgIGF3YWl0IGNhbGwuam9pbigpO1xuICAgICAgICB9XG4gICAgfTtcbn07XG4vKipcbiAqIEV2ZW50IGhhbmRsZXIgdGhhdCB3YXRjaGVzIGRlbGl2ZXJ5IG9mIGBjYWxsLnJlamVjdGVkYCBXZWJzb2NrZXQgZXZlbnQuXG4gKiBPbmNlIHRoZSBldmVudCBpcyByZWNlaXZlZCwgdGhlIGNhbGwgaXMgbGVmdC5cbiAqL1xuY29uc3Qgd2F0Y2hDYWxsUmVqZWN0ZWQgPSAoY2FsbCkgPT4ge1xuICAgIHJldHVybiBhc3luYyBmdW5jdGlvbiBvbkNhbGxSZWplY3RlZChldmVudCkge1xuICAgICAgICAvLyBXZSB3YW50IHRvIGRpc2NhcmQgdGhlIGV2ZW50IGlmIGl0J3MgZnJvbSB0aGUgY3VycmVudCB1c2VyXG4gICAgICAgIGlmIChldmVudC51c2VyLmlkID09PSBjYWxsLmN1cnJlbnRVc2VySWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHsgY2FsbDogZXZlbnRDYWxsIH0gPSBldmVudDtcbiAgICAgICAgY29uc3QgeyBzZXNzaW9uOiBjYWxsU2Vzc2lvbiB9ID0gZXZlbnRDYWxsO1xuICAgICAgICBpZiAoIWNhbGxTZXNzaW9uKSB7XG4gICAgICAgICAgICBjYWxsLmxvZ2dlcignd2FybicsICdObyBjYWxsIHNlc3Npb24gcHJvdmlkZWQuIElnbm9yaW5nIGNhbGwucmVqZWN0ZWQgZXZlbnQuJywgZXZlbnQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlamVjdGVkQnkgPSBjYWxsU2Vzc2lvbi5yZWplY3RlZF9ieTtcbiAgICAgICAgY29uc3QgeyBtZW1iZXJzLCBjYWxsaW5nU3RhdGUgfSA9IGNhbGwuc3RhdGU7XG4gICAgICAgIGlmIChjYWxsaW5nU3RhdGUgIT09IENhbGxpbmdTdGF0ZS5SSU5HSU5HKSB7XG4gICAgICAgICAgICBjYWxsLmxvZ2dlcignaW5mbycsICdDYWxsIGlzIG5vdCBpbiByaW5naW5nIG1vZGUgKGl0IGlzIGVpdGhlciBhY2NlcHRlZCBvciByZWplY3RlZCBhbHJlYWR5KS4gSWdub3JpbmcgY2FsbC5yZWplY3RlZCBldmVudC4nLCBldmVudCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGwuaXNDcmVhdGVkQnlNZSkge1xuICAgICAgICAgICAgY29uc3QgZXZlcnlvbmVFbHNlUmVqZWN0ZWQgPSBtZW1iZXJzXG4gICAgICAgICAgICAgICAgLmZpbHRlcigobSkgPT4gbS51c2VyX2lkICE9PSBjYWxsLmN1cnJlbnRVc2VySWQpXG4gICAgICAgICAgICAgICAgLmV2ZXJ5KChtKSA9PiByZWplY3RlZEJ5W20udXNlcl9pZF0pO1xuICAgICAgICAgICAgaWYgKGV2ZXJ5b25lRWxzZVJlamVjdGVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbC5sb2dnZXIoJ2luZm8nLCAnZXZlcnlvbmUgcmVqZWN0ZWQsIGxlYXZpbmcgdGhlIGNhbGwnKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBjYWxsLmxlYXZlKHsgcmVhc29uOiAncmluZzogZXZlcnlvbmUgcmVqZWN0ZWQnIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHJlamVjdGVkQnlbZXZlbnRDYWxsLmNyZWF0ZWRfYnkuaWRdKSB7XG4gICAgICAgICAgICAgICAgY2FsbC5sb2dnZXIoJ2luZm8nLCAnY2FsbCBjcmVhdG9yIHJlamVjdGVkLCBsZWF2aW5nIGNhbGwnKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBjYWxsLmxlYXZlKHsgcmVhc29uOiAncmluZzogY3JlYXRvciByZWplY3RlZCcgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufTtcbi8qKlxuICogRXZlbnQgaGFuZGxlciB0aGF0IHdhdGNoZXMgdGhlIGRlbGl2ZXJ5IG9mIGBjYWxsLmVuZGVkYCBXZWJzb2NrZXQgZXZlbnQuXG4gKi9cbmNvbnN0IHdhdGNoQ2FsbEVuZGVkID0gKGNhbGwpID0+IHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gb25DYWxsRW5kZWQoKSB7XG4gICAgICAgIGNvbnN0IHsgY2FsbGluZ1N0YXRlIH0gPSBjYWxsLnN0YXRlO1xuICAgICAgICBpZiAoY2FsbGluZ1N0YXRlID09PSBDYWxsaW5nU3RhdGUuUklOR0lORyB8fFxuICAgICAgICAgICAgY2FsbGluZ1N0YXRlID09PSBDYWxsaW5nU3RhdGUuSk9JTkVEIHx8XG4gICAgICAgICAgICBjYWxsaW5nU3RhdGUgPT09IENhbGxpbmdTdGF0ZS5KT0lOSU5HKSB7XG4gICAgICAgICAgICBhd2FpdCBjYWxsLmxlYXZlKHsgcmVhc29uOiAnY2FsbC5lbmRlZCBldmVudCByZWNlaXZlZCcgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuLyoqXG4gKiBFdmVudCBoYW5kbGVyIHRoYXQgd2F0Y2hlcyBmb3IgYGNhbGxHcmFudHNVcGRhdGVkYCBldmVudHMuXG4gKlxuICogQHBhcmFtIHN0YXRlIHRoZSBjYWxsIHN0YXRlIHRvIHVwZGF0ZS5cbiAqL1xuY29uc3Qgd2F0Y2hDYWxsR3JhbnRzVXBkYXRlZCA9IChzdGF0ZSkgPT4ge1xuICAgIHJldHVybiBmdW5jdGlvbiBvbkNhbGxHcmFudHNVcGRhdGVkKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHsgY3VycmVudEdyYW50cyB9ID0gZXZlbnQ7XG4gICAgICAgIGlmIChjdXJyZW50R3JhbnRzKSB7XG4gICAgICAgICAgICBjb25zdCB7IGNhblB1Ymxpc2hBdWRpbywgY2FuUHVibGlzaFZpZGVvLCBjYW5TY3JlZW5zaGFyZSB9ID0gY3VycmVudEdyYW50cztcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBbT3duQ2FwYWJpbGl0eS5TRU5EX0FVRElPXTogY2FuUHVibGlzaEF1ZGlvLFxuICAgICAgICAgICAgICAgIFtPd25DYXBhYmlsaXR5LlNFTkRfVklERU9dOiBjYW5QdWJsaXNoVmlkZW8sXG4gICAgICAgICAgICAgICAgW093bkNhcGFiaWxpdHkuU0NSRUVOU0hBUkVdOiBjYW5TY3JlZW5zaGFyZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBuZXh0Q2FwYWJpbGl0aWVzID0gc3RhdGUub3duQ2FwYWJpbGl0aWVzLmZpbHRlcigoY2FwYWJpbGl0eSkgPT4gdXBkYXRlW2NhcGFiaWxpdHldICE9PSBmYWxzZSk7XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyh1cGRhdGUpLmZvckVhY2goKFtjYXBhYmlsaXR5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgJiYgIW5leHRDYXBhYmlsaXRpZXMuaW5jbHVkZXMoY2FwYWJpbGl0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dENhcGFiaWxpdGllcy5wdXNoKGNhcGFiaWxpdHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3RhdGUuc2V0T3duQ2FwYWJpbGl0aWVzKG5leHRDYXBhYmlsaXRpZXMpO1xuICAgICAgICB9XG4gICAgfTtcbn07XG5cbmNvbnN0IGxvZ2dlciQxID0gZ2V0TG9nZ2VyKFsnZXZlbnRzJ10pO1xuLyoqXG4gKiBBbiBldmVudCByZXNwb25kZXIgd2hpY2ggaGFuZGxlcyB0aGUgYGNoYW5nZVB1Ymxpc2hRdWFsaXR5YCBldmVudC5cbiAqL1xuY29uc3Qgd2F0Y2hDaGFuZ2VQdWJsaXNoUXVhbGl0eSA9IChkaXNwYXRjaGVyLCBjYWxsKSA9PiB7XG4gICAgcmV0dXJuIGRpc3BhdGNoZXIub24oJ2NoYW5nZVB1Ymxpc2hRdWFsaXR5JywgKGUpID0+IHtcbiAgICAgICAgY29uc3QgeyB2aWRlb1NlbmRlcnMgfSA9IGU7XG4gICAgICAgIHZpZGVvU2VuZGVycy5mb3JFYWNoKCh2aWRlb1NlbmRlcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBsYXllcnMgfSA9IHZpZGVvU2VuZGVyO1xuICAgICAgICAgICAgY2FsbC51cGRhdGVQdWJsaXNoUXVhbGl0eShsYXllcnMuZmlsdGVyKChsKSA9PiBsLmFjdGl2ZSkpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5jb25zdCB3YXRjaENvbm5lY3Rpb25RdWFsaXR5Q2hhbmdlZCA9IChkaXNwYXRjaGVyLCBzdGF0ZSkgPT4ge1xuICAgIHJldHVybiBkaXNwYXRjaGVyLm9uKCdjb25uZWN0aW9uUXVhbGl0eUNoYW5nZWQnLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCB7IGNvbm5lY3Rpb25RdWFsaXR5VXBkYXRlcyB9ID0gZTtcbiAgICAgICAgaWYgKCFjb25uZWN0aW9uUXVhbGl0eVVwZGF0ZXMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHN0YXRlLnVwZGF0ZVBhcnRpY2lwYW50cyhjb25uZWN0aW9uUXVhbGl0eVVwZGF0ZXMucmVkdWNlKChwYXRjaGVzLCB1cGRhdGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgc2Vzc2lvbklkLCBjb25uZWN0aW9uUXVhbGl0eSB9ID0gdXBkYXRlO1xuICAgICAgICAgICAgcGF0Y2hlc1tzZXNzaW9uSWRdID0ge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25RdWFsaXR5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBwYXRjaGVzO1xuICAgICAgICB9LCB7fSkpO1xuICAgIH0pO1xufTtcbi8qKlxuICogVXBkYXRlcyB0aGUgYXBwcm94aW1hdGUgbnVtYmVyIG9mIHBhcnRpY2lwYW50cyBpbiB0aGUgY2FsbCBieSBwZWVraW5nIGF0IHRoZVxuICogaGVhbHRoIGNoZWNrIGV2ZW50cyB0aGF0IG91ciBTRlUgc2VuZHMuXG4gKi9cbmNvbnN0IHdhdGNoUGFydGljaXBhbnRDb3VudENoYW5nZWQgPSAoZGlzcGF0Y2hlciwgc3RhdGUpID0+IHtcbiAgICByZXR1cm4gZGlzcGF0Y2hlci5vbignaGVhbHRoQ2hlY2tSZXNwb25zZScsIChlKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgcGFydGljaXBhbnRDb3VudCB9ID0gZTtcbiAgICAgICAgaWYgKHBhcnRpY2lwYW50Q291bnQpIHtcbiAgICAgICAgICAgIHN0YXRlLnNldFBhcnRpY2lwYW50Q291bnQocGFydGljaXBhbnRDb3VudC50b3RhbCk7XG4gICAgICAgICAgICBzdGF0ZS5zZXRBbm9ueW1vdXNQYXJ0aWNpcGFudENvdW50KHBhcnRpY2lwYW50Q291bnQuYW5vbnltb3VzKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcbmNvbnN0IHdhdGNoTGl2ZUVuZGVkID0gKGRpc3BhdGNoZXIsIGNhbGwpID0+IHtcbiAgICByZXR1cm4gZGlzcGF0Y2hlci5vbignZXJyb3InLCAoZSkgPT4ge1xuICAgICAgICBpZiAoZS5lcnJvciAmJiBlLmVycm9yLmNvZGUgIT09IEVycm9yQ29kZS5MSVZFX0VOREVEKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoIWNhbGwucGVybWlzc2lvbnNDb250ZXh0Lmhhc1Blcm1pc3Npb24oT3duQ2FwYWJpbGl0eS5KT0lOX0JBQ0tTVEFHRSkpIHtcbiAgICAgICAgICAgIGNhbGwubGVhdmUoeyByZWFzb246ICdsaXZlIGVuZGVkJyB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyJDEoJ2Vycm9yJywgJ0ZhaWxlZCB0byBsZWF2ZSBjYWxsIGFmdGVyIGxpdmUgZW5kZWQnLCBlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG4vKipcbiAqIFdhdGNoZXMgYW5kIGxvZ3MgdGhlIGVycm9ycyByZXBvcnRlZCBieSB0aGUgY3VycmVudGx5IGNvbm5lY3RlZCBTRlUuXG4gKi9cbmNvbnN0IHdhdGNoU2Z1RXJyb3JSZXBvcnRzID0gKGRpc3BhdGNoZXIpID0+IHtcbiAgICByZXR1cm4gZGlzcGF0Y2hlci5vbignZXJyb3InLCAoZSkgPT4ge1xuICAgICAgICBpZiAoIWUuZXJyb3IpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGU7XG4gICAgICAgIGxvZ2dlciQxKCdlcnJvcicsICdTRlUgcmVwb3J0ZWQgZXJyb3InLCB7XG4gICAgICAgICAgICBjb2RlOiBFcnJvckNvZGVbZXJyb3IuY29kZV0sXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgc2hvdWxkUmV0cnk6IGVycm9yLnNob3VsZFJldHJ5LFxuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG4vKipcbiAqIFdhdGNoZXMgZm9yIGBwaW5zVXBkYXRlZGAgZXZlbnRzIGFuZCB1cGRhdGVzIHRoZSBwaW5uZWQgc3RhdGUgb2YgcGFydGljaXBhbnRzXG4gKiBpbiB0aGUgY2FsbC5cbiAqL1xuY29uc3Qgd2F0Y2hQaW5zVXBkYXRlZCA9IChzdGF0ZSkgPT4ge1xuICAgIHJldHVybiBmdW5jdGlvbiBvblBpbnNVcGRhdGVkKGUpIHtcbiAgICAgICAgY29uc3QgeyBwaW5zIH0gPSBlO1xuICAgICAgICBzdGF0ZS5zZXRTZXJ2ZXJTaWRlUGlucyhwaW5zKTtcbiAgICB9O1xufTtcblxuLyoqXG4gKiBBbiBldmVudCBoYW5kbGVyIHRoYXQgaGFuZGxlcyBzb2Z0IG11dGVzLlxuICpcbiAqIEBwYXJhbSBjYWxsIHRoZSBjYWxsLlxuICovXG5jb25zdCBoYW5kbGVSZW1vdGVTb2Z0TXV0ZSA9IChjYWxsKSA9PiB7XG4gICAgcmV0dXJuIGNhbGwub24oJ3RyYWNrVW5wdWJsaXNoZWQnLCBhc3luYyAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgeyBjYXVzZSwgdHlwZSwgc2Vzc2lvbklkIH0gPSBldmVudDtcbiAgICAgICAgY29uc3QgeyBsb2NhbFBhcnRpY2lwYW50IH0gPSBjYWxsLnN0YXRlO1xuICAgICAgICBpZiAoY2F1c2UgPT09IFRyYWNrVW5wdWJsaXNoUmVhc29uLk1PREVSQVRJT04gJiZcbiAgICAgICAgICAgIHNlc3Npb25JZCA9PT0gbG9jYWxQYXJ0aWNpcGFudD8uc2Vzc2lvbklkKSB7XG4gICAgICAgICAgICBjb25zdCBsb2dnZXIgPSBjYWxsLmxvZ2dlcjtcbiAgICAgICAgICAgIGxvZ2dlcignaW5mbycsIGBMb2NhbCBwYXJ0aWNpcGFudCdzICR7VHJhY2tUeXBlW3R5cGVdfSB0cmFjayBpcyBtdXRlZCByZW1vdGVseWApO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gVHJhY2tUeXBlLlZJREVPKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGNhbGwuY2FtZXJhLmRpc2FibGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gVHJhY2tUeXBlLkFVRElPKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGNhbGwubWljcm9waG9uZS5kaXNhYmxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIoJ3dhcm4nLCAnVW5zdXBwb3J0ZWQgdHJhY2sgdHlwZSB0byBzb2Z0IG11dGUnLCBUcmFja1R5cGVbdHlwZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2FsbC5wdWJsaXNoZXI/LmlzUHVibGlzaGluZyh0eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBjYWxsLnN0b3BQdWJsaXNoKHR5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGxvZ2dlcignZXJyb3InLCAnRmFpbGVkIHRvIHN0b3AgcHVibGlzaGluZycsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuLyoqXG4gKiBBbiBldmVudCByZXNwb25kZXIgd2hpY2ggaGFuZGxlcyB0aGUgYHBhcnRpY2lwYW50Sm9pbmVkYCBldmVudC5cbiAqL1xuY29uc3Qgd2F0Y2hQYXJ0aWNpcGFudEpvaW5lZCA9IChzdGF0ZSkgPT4ge1xuICAgIHJldHVybiBmdW5jdGlvbiBvblBhcnRpY2lwYW50Sm9pbmVkKGUpIHtcbiAgICAgICAgY29uc3QgeyBwYXJ0aWNpcGFudCB9ID0gZTtcbiAgICAgICAgaWYgKCFwYXJ0aWNpcGFudClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gYHN0YXRlLnVwZGF0ZU9yQWRkUGFydGljaXBhbnRgIGFjdHMgYXMgYSBzYWZlZ3VhcmQgYWdhaW5zdFxuICAgICAgICAvLyBwb3RlbnRpYWwgZHVwbGljYXRlIGV2ZW50cyBmcm9tIHRoZSBTRlUuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEFsdGhvdWdoIHRoZSBTRlUgc2hvdWxkIG5vdCBzZW5kIGR1cGxpY2F0ZSBldmVudHMsIHdlIGhhdmUgc2VlblxuICAgICAgICAvLyBzb21lIHJhY2UgY29uZGl0aW9ucyBpbiB0aGUgcGFzdCBkdXJpbmcgdGhlIGBqb2luLWZsb3dgIHdoZXJlXG4gICAgICAgIC8vIHRoZSBTRlUgd291bGQgc2VuZCBwYXJ0aWNpcGFudCBpbmZvIGFzIHBhcnQgb2YgdGhlIGBqb2luYFxuICAgICAgICAvLyByZXNwb25zZSBhbmQgdGhlbiBmb2xsb3cgdXAgd2l0aCBhIGBwYXJ0aWNpcGFudEpvaW5lZGAgZXZlbnQgZm9yXG4gICAgICAgIC8vIGFscmVhZHkgYW5ub3VuY2VkIHBhcnRpY2lwYW50cy5cbiAgICAgICAgc3RhdGUudXBkYXRlT3JBZGRQYXJ0aWNpcGFudChwYXJ0aWNpcGFudC5zZXNzaW9uSWQsIE9iamVjdC5hc3NpZ24ocGFydGljaXBhbnQsIHtcbiAgICAgICAgICAgIHZpZXdwb3J0VmlzaWJpbGl0eVN0YXRlOiB7XG4gICAgICAgICAgICAgICAgdmlkZW9UcmFjazogVmlzaWJpbGl0eVN0YXRlLlVOS05PV04sXG4gICAgICAgICAgICAgICAgc2NyZWVuU2hhcmVUcmFjazogVmlzaWJpbGl0eVN0YXRlLlVOS05PV04sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSk7XG4gICAgfTtcbn07XG4vKipcbiAqIEFuIGV2ZW50IHJlc3BvbmRlciB3aGljaCBoYW5kbGVzIHRoZSBgcGFydGljaXBhbnRMZWZ0YCBldmVudC5cbiAqL1xuY29uc3Qgd2F0Y2hQYXJ0aWNpcGFudExlZnQgPSAoc3RhdGUpID0+IHtcbiAgICByZXR1cm4gZnVuY3Rpb24gb25QYXJ0aWNpcGFudExlZnQoZSkge1xuICAgICAgICBjb25zdCB7IHBhcnRpY2lwYW50IH0gPSBlO1xuICAgICAgICBpZiAoIXBhcnRpY2lwYW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzdGF0ZS5zZXRQYXJ0aWNpcGFudHMoKHBhcnRpY2lwYW50cykgPT4gcGFydGljaXBhbnRzLmZpbHRlcigocCkgPT4gcC5zZXNzaW9uSWQgIT09IHBhcnRpY2lwYW50LnNlc3Npb25JZCkpO1xuICAgIH07XG59O1xuLyoqXG4gKiBBbiBldmVudCByZXNwb25kZXIgd2hpY2ggaGFuZGxlcyB0aGUgYHRyYWNrUHVibGlzaGVkYCBldmVudC5cbiAqIFRoZSBTRlUgd2lsbCBzZW5kIHRoaXMgZXZlbnQgd2hlbiBhIHBhcnRpY2lwYW50IHB1Ymxpc2hlcyBhIHRyYWNrLlxuICovXG5jb25zdCB3YXRjaFRyYWNrUHVibGlzaGVkID0gKHN0YXRlKSA9PiB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG9uVHJhY2tQdWJsaXNoZWQoZSkge1xuICAgICAgICBjb25zdCB7IHR5cGUsIHNlc3Npb25JZCwgcGFydGljaXBhbnQgfSA9IGU7XG4gICAgICAgIC8vIEFuIG9wdGltaXphdGlvbiBmb3IgbGFyZ2UgY2FsbHMuXG4gICAgICAgIC8vIEFmdGVyIGEgY2VydGFpbiB0aHJlc2hvbGQsIHRoZSBTRlUgd291bGQgc3RvcCBlbWl0dGluZyBgcGFydGljaXBhbnRKb2luZWRgXG4gICAgICAgIC8vIGV2ZW50cywgYW5kIGluc3RlYWQsIGl0IHdvdWxkIG9ubHkgcHJvdmlkZSB0aGUgcGFydGljaXBhbnQncyBpbmZvcm1hdGlvblxuICAgICAgICAvLyBvbmNlIHRoZXkgc3RhcnQgcHVibGlzaGluZyBhIHRyYWNrLlxuICAgICAgICBpZiAocGFydGljaXBhbnQpIHtcbiAgICAgICAgICAgIHN0YXRlLnVwZGF0ZU9yQWRkUGFydGljaXBhbnQoc2Vzc2lvbklkLCBwYXJ0aWNpcGFudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZS51cGRhdGVQYXJ0aWNpcGFudChzZXNzaW9uSWQsIChwKSA9PiAoe1xuICAgICAgICAgICAgICAgIHB1Ymxpc2hlZFRyYWNrczogWy4uLnAucHVibGlzaGVkVHJhY2tzLCB0eXBlXS5maWx0ZXIodW5pcXVlKSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuLyoqXG4gKiBBbiBldmVudCByZXNwb25kZXIgd2hpY2ggaGFuZGxlcyB0aGUgYHRyYWNrVW5wdWJsaXNoZWRgIGV2ZW50LlxuICogVGhlIFNGVSB3aWxsIHNlbmQgdGhpcyBldmVudCB3aGVuIGEgcGFydGljaXBhbnQgdW5wdWJsaXNoZXMgYSB0cmFjay5cbiAqL1xuY29uc3Qgd2F0Y2hUcmFja1VucHVibGlzaGVkID0gKHN0YXRlKSA9PiB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG9uVHJhY2tVbnB1Ymxpc2hlZChlKSB7XG4gICAgICAgIGNvbnN0IHsgdHlwZSwgc2Vzc2lvbklkLCBwYXJ0aWNpcGFudCB9ID0gZTtcbiAgICAgICAgLy8gQW4gb3B0aW1pemF0aW9uIGZvciBsYXJnZSBjYWxscy4gU2VlIGB3YXRjaFRyYWNrUHVibGlzaGVkYC5cbiAgICAgICAgaWYgKHBhcnRpY2lwYW50KSB7XG4gICAgICAgICAgICBzdGF0ZS51cGRhdGVPckFkZFBhcnRpY2lwYW50KHNlc3Npb25JZCwgcGFydGljaXBhbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhdGUudXBkYXRlUGFydGljaXBhbnQoc2Vzc2lvbklkLCAocCkgPT4gKHtcbiAgICAgICAgICAgICAgICBwdWJsaXNoZWRUcmFja3M6IHAucHVibGlzaGVkVHJhY2tzLmZpbHRlcigodCkgPT4gdCAhPT0gdHlwZSksXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbmNvbnN0IHVuaXF1ZSA9ICh2LCBpLCBhcnIpID0+IGFyci5pbmRleE9mKHYpID09PSBpO1xuXG4vKipcbiAqIFdhdGNoZXMgZm9yIGBkb21pbmFudFNwZWFrZXJDaGFuZ2VkYCBldmVudHMuXG4gKi9cbmNvbnN0IHdhdGNoRG9taW5hbnRTcGVha2VyQ2hhbmdlZCA9IChkaXNwYXRjaGVyLCBzdGF0ZSkgPT4ge1xuICAgIHJldHVybiBkaXNwYXRjaGVyLm9uKCdkb21pbmFudFNwZWFrZXJDaGFuZ2VkJywgKGUpID0+IHtcbiAgICAgICAgY29uc3QgeyBzZXNzaW9uSWQgfSA9IGU7XG4gICAgICAgIGlmIChzZXNzaW9uSWQgPT09IHN0YXRlLmRvbWluYW50U3BlYWtlcj8uc2Vzc2lvbklkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzdGF0ZS5zZXRQYXJ0aWNpcGFudHMoKHBhcnRpY2lwYW50cykgPT4gcGFydGljaXBhbnRzLm1hcCgocGFydGljaXBhbnQpID0+IHtcbiAgICAgICAgICAgIC8vIG1hcmsgdGhlIG5ldyBkb21pbmFudCBzcGVha2VyXG4gICAgICAgICAgICBpZiAocGFydGljaXBhbnQuc2Vzc2lvbklkID09PSBzZXNzaW9uSWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi5wYXJ0aWNpcGFudCxcbiAgICAgICAgICAgICAgICAgICAgaXNEb21pbmFudFNwZWFrZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHVubWFyayB0aGUgb2xkIGRvbWluYW50IHNwZWFrZXJcbiAgICAgICAgICAgIGlmIChwYXJ0aWNpcGFudC5pc0RvbWluYW50U3BlYWtlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnBhcnRpY2lwYW50LFxuICAgICAgICAgICAgICAgICAgICBpc0RvbWluYW50U3BlYWtlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXJ0aWNpcGFudDsgLy8gbm8gY2hhbmdlXG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn07XG4vKipcbiAqIFdhdGNoZXMgZm9yIGBhdWRpb0xldmVsQ2hhbmdlZGAgZXZlbnRzLlxuICovXG5jb25zdCB3YXRjaEF1ZGlvTGV2ZWxDaGFuZ2VkID0gKGRpc3BhdGNoZXIsIHN0YXRlKSA9PiB7XG4gICAgcmV0dXJuIGRpc3BhdGNoZXIub24oJ2F1ZGlvTGV2ZWxDaGFuZ2VkJywgKGUpID0+IHtcbiAgICAgICAgY29uc3QgeyBhdWRpb0xldmVscyB9ID0gZTtcbiAgICAgICAgc3RhdGUudXBkYXRlUGFydGljaXBhbnRzKGF1ZGlvTGV2ZWxzLnJlZHVjZSgocGF0Y2hlcywgY3VycmVudCkgPT4ge1xuICAgICAgICAgICAgcGF0Y2hlc1tjdXJyZW50LnNlc3Npb25JZF0gPSB7XG4gICAgICAgICAgICAgICAgYXVkaW9MZXZlbDogY3VycmVudC5sZXZlbCxcbiAgICAgICAgICAgICAgICBpc1NwZWFraW5nOiBjdXJyZW50LmlzU3BlYWtpbmcsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHBhdGNoZXM7XG4gICAgICAgIH0sIHt9KSk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFJlZ2lzdGVycyB0aGUgZGVmYXVsdCBldmVudCBoYW5kbGVycyBmb3IgYSBjYWxsIGR1cmluZyBpdHMgbGlmZWN5Y2xlLlxuICpcbiAqIEBwYXJhbSBjYWxsIHRoZSBjYWxsIHRvIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzIGZvci5cbiAqIEBwYXJhbSBzdGF0ZSB0aGUgY2FsbCBzdGF0ZS5cbiAqIEBwYXJhbSBkaXNwYXRjaGVyIHRoZSBkaXNwYXRjaGVyLlxuICovXG5jb25zdCByZWdpc3RlckV2ZW50SGFuZGxlcnMgPSAoY2FsbCwgc3RhdGUsIGRpc3BhdGNoZXIpID0+IHtcbiAgICBjb25zdCBldmVudEhhbmRsZXJzID0gW1xuICAgICAgICBjYWxsLm9uKCdjYWxsLmVuZGVkJywgd2F0Y2hDYWxsRW5kZWQoY2FsbCkpLFxuICAgICAgICB3YXRjaExpdmVFbmRlZChkaXNwYXRjaGVyLCBjYWxsKSxcbiAgICAgICAgd2F0Y2hTZnVFcnJvclJlcG9ydHMoZGlzcGF0Y2hlciksXG4gICAgICAgIHdhdGNoQ2hhbmdlUHVibGlzaFF1YWxpdHkoZGlzcGF0Y2hlciwgY2FsbCksXG4gICAgICAgIHdhdGNoQ29ubmVjdGlvblF1YWxpdHlDaGFuZ2VkKGRpc3BhdGNoZXIsIHN0YXRlKSxcbiAgICAgICAgd2F0Y2hQYXJ0aWNpcGFudENvdW50Q2hhbmdlZChkaXNwYXRjaGVyLCBzdGF0ZSksXG4gICAgICAgIGNhbGwub24oJ3BhcnRpY2lwYW50Sm9pbmVkJywgd2F0Y2hQYXJ0aWNpcGFudEpvaW5lZChzdGF0ZSkpLFxuICAgICAgICBjYWxsLm9uKCdwYXJ0aWNpcGFudExlZnQnLCB3YXRjaFBhcnRpY2lwYW50TGVmdChzdGF0ZSkpLFxuICAgICAgICBjYWxsLm9uKCd0cmFja1B1Ymxpc2hlZCcsIHdhdGNoVHJhY2tQdWJsaXNoZWQoc3RhdGUpKSxcbiAgICAgICAgY2FsbC5vbigndHJhY2tVbnB1Ymxpc2hlZCcsIHdhdGNoVHJhY2tVbnB1Ymxpc2hlZChzdGF0ZSkpLFxuICAgICAgICB3YXRjaEF1ZGlvTGV2ZWxDaGFuZ2VkKGRpc3BhdGNoZXIsIHN0YXRlKSxcbiAgICAgICAgd2F0Y2hEb21pbmFudFNwZWFrZXJDaGFuZ2VkKGRpc3BhdGNoZXIsIHN0YXRlKSxcbiAgICAgICAgY2FsbC5vbignY2FsbEdyYW50c1VwZGF0ZWQnLCB3YXRjaENhbGxHcmFudHNVcGRhdGVkKHN0YXRlKSksXG4gICAgICAgIGNhbGwub24oJ3BpbnNVcGRhdGVkJywgd2F0Y2hQaW5zVXBkYXRlZChzdGF0ZSkpLFxuICAgICAgICBoYW5kbGVSZW1vdGVTb2Z0TXV0ZShjYWxsKSxcbiAgICBdO1xuICAgIGlmIChjYWxsLnJpbmdpbmcpIHtcbiAgICAgICAgLy8gdGhlc2UgZXZlbnRzIGFyZSBvbmx5IHJlbGV2YW50IHdoZW4gdGhlIGNhbGwgaXMgcmluZ2luZ1xuICAgICAgICBldmVudEhhbmRsZXJzLnB1c2gocmVnaXN0ZXJSaW5naW5nQ2FsbEV2ZW50SGFuZGxlcnMoY2FsbCkpO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBldmVudEhhbmRsZXJzLmZvckVhY2goKHVuc3Vic2NyaWJlKSA9PiB1bnN1YnNjcmliZSgpKTtcbiAgICB9O1xufTtcbi8qKlxuICogUmVnaXN0ZXJzIGV2ZW50IGhhbmRsZXJzIGZvciBhIGNhbGwgdGhhdCBpcyBvZiByaW5naW5nIHR5cGUuXG4gKlxuICogQHBhcmFtIGNhbGwgdGhlIGNhbGwgdG8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnMgZm9yLlxuICovXG5jb25zdCByZWdpc3RlclJpbmdpbmdDYWxsRXZlbnRIYW5kbGVycyA9IChjYWxsKSA9PiB7XG4gICAgY29uc3QgY29vcmRpbmF0b3JSaW5nRXZlbnRzID0ge1xuICAgICAgICAnY2FsbC5hY2NlcHRlZCc6IHdhdGNoQ2FsbEFjY2VwdGVkKGNhbGwpLFxuICAgICAgICAnY2FsbC5yZWplY3RlZCc6IHdhdGNoQ2FsbFJlamVjdGVkKGNhbGwpLFxuICAgIH07XG4gICAgY29uc3QgZXZlbnRIYW5kbGVycyA9IE9iamVjdC5rZXlzKGNvb3JkaW5hdG9yUmluZ0V2ZW50cykubWFwKChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBldmVudE5hbWUgPSBldmVudDtcbiAgICAgICAgcmV0dXJuIGNhbGwub24oZXZlbnROYW1lLCBjb29yZGluYXRvclJpbmdFdmVudHNbZXZlbnROYW1lXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZXZlbnRIYW5kbGVycy5mb3JFYWNoKCh1bnN1YnNjcmliZSkgPT4gdW5zdWJzY3JpYmUoKSk7XG4gICAgfTtcbn07XG5cbi8qKlxuICogQ29sbGVjdHMgYWxsIG5lY2Vzc2FyeSBpbmZvcm1hdGlvbiB0byBqb2luIGEgY2FsbCwgdGFsa3MgdG8gdGhlIGNvb3JkaW5hdG9yXG4gKiBhbmQgcmV0dXJucyB0aGUgbmVjZXNzYXJ5IGluZm9ybWF0aW9uIHRvIGpvaW4gdGhlIGNhbGwuXG4gKlxuICogQHBhcmFtIGh0dHBDbGllbnQgdGhlIGh0dHAgY2xpZW50IHRvIHVzZS5cbiAqIEBwYXJhbSB0eXBlIHRoZSB0eXBlIG9mIHRoZSBjYWxsLlxuICogQHBhcmFtIGlkIHRoZSBpZCBvZiB0aGUgY2FsbC5cbiAqIEBwYXJhbSBkYXRhIHRoZSBkYXRhIGZvciB0aGUgY2FsbC5cbiAqL1xuY29uc3Qgam9pbiA9IGFzeW5jIChodHRwQ2xpZW50LCB0eXBlLCBpZCwgZGF0YSkgPT4ge1xuICAgIGNvbnN0IHsgY2FsbCwgY3JlZGVudGlhbHMsIG1lbWJlcnMsIG93bl9jYXBhYmlsaXRpZXMsIHN0YXRzX29wdGlvbnMgfSA9IGF3YWl0IGRvSm9pbihodHRwQ2xpZW50LCB0eXBlLCBpZCwgZGF0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29ubmVjdGlvbkNvbmZpZzogdG9SdGNDb25maWd1cmF0aW9uKGNyZWRlbnRpYWxzLmljZV9zZXJ2ZXJzKSxcbiAgICAgICAgc2Z1U2VydmVyOiBjcmVkZW50aWFscy5zZXJ2ZXIsXG4gICAgICAgIHRva2VuOiBjcmVkZW50aWFscy50b2tlbixcbiAgICAgICAgbWV0YWRhdGE6IGNhbGwsXG4gICAgICAgIG1lbWJlcnMsXG4gICAgICAgIG93bkNhcGFiaWxpdGllczogb3duX2NhcGFiaWxpdGllcyxcbiAgICAgICAgc3RhdHNPcHRpb25zOiBzdGF0c19vcHRpb25zLFxuICAgIH07XG59O1xuY29uc3QgZG9Kb2luID0gYXN5bmMgKGh0dHBDbGllbnQsIHR5cGUsIGlkLCBkYXRhKSA9PiB7XG4gICAgY29uc3QgbG9jYXRpb24gPSBhd2FpdCBodHRwQ2xpZW50LmdldExvY2F0aW9uSGludCgpO1xuICAgIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICAgIC4uLmRhdGEsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgIH07XG4gICAgcmV0dXJuIGh0dHBDbGllbnQucG9zdChgL2NhbGwvJHt0eXBlfS8ke2lkfS9qb2luYCwgcmVxdWVzdCk7XG59O1xuY29uc3QgdG9SdGNDb25maWd1cmF0aW9uID0gKGNvbmZpZykgPT4ge1xuICAgIGlmICghY29uZmlnIHx8IGNvbmZpZy5sZW5ndGggPT09IDApXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcnRjQ29uZmlnID0ge1xuICAgICAgICBpY2VTZXJ2ZXJzOiBjb25maWcubWFwKChpY2UpID0+ICh7XG4gICAgICAgICAgICB1cmxzOiBpY2UudXJscyxcbiAgICAgICAgICAgIHVzZXJuYW1lOiBpY2UudXNlcm5hbWUsXG4gICAgICAgICAgICBjcmVkZW50aWFsOiBpY2UucGFzc3dvcmQsXG4gICAgICAgIH0pKSxcbiAgICB9O1xuICAgIHJldHVybiBydGNDb25maWc7XG59O1xuXG4vKipcbiAqIEZsYXR0ZW4gdGhlIHN0YXRzIHJlcG9ydCBpbnRvIGFuIGFycmF5IG9mIHN0YXRzIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHJlcG9ydCB0aGUgcmVwb3J0IHRvIGZsYXR0ZW4uXG4gKi9cbmNvbnN0IGZsYXR0ZW4kMSA9IChyZXBvcnQpID0+IHtcbiAgICBjb25zdCBzdGF0cyA9IFtdO1xuICAgIHJlcG9ydC5mb3JFYWNoKChzKSA9PiB7XG4gICAgICAgIHN0YXRzLnB1c2gocyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0YXRzO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFN0YXRzUmVwb3J0ZXIgaW5zdGFuY2UgdGhhdCBjb2xsZWN0cyBtZXRyaWNzIGFib3V0IHRoZSBvbmdvaW5nIGNhbGwgYW5kIHJlcG9ydHMgdGhlbSB0byB0aGUgc3RhdGUgc3RvcmVcbiAqL1xuY29uc3QgY3JlYXRlU3RhdHNSZXBvcnRlciA9ICh7IHN1YnNjcmliZXIsIHB1Ymxpc2hlciwgc3RhdGUsIHBvbGxpbmdJbnRlcnZhbEluTXMgPSAyMDAwLCB9KSA9PiB7XG4gICAgY29uc3QgbG9nZ2VyID0gZ2V0TG9nZ2VyKFsnc3RhdHMnXSk7XG4gICAgY29uc3QgZ2V0UmF3U3RhdHNGb3JUcmFjayA9IGFzeW5jIChraW5kLCBzZWxlY3RvcikgPT4ge1xuICAgICAgICBpZiAoa2luZCA9PT0gJ3N1YnNjcmliZXInICYmIHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVyLmdldFN0YXRzKHNlbGVjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChraW5kID09PSAncHVibGlzaGVyJyAmJiBwdWJsaXNoZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBwdWJsaXNoZXIuZ2V0U3RhdHMoc2VsZWN0b3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyKCd3YXJuJywgYENhbid0IHJldHJpZXZlIFJUQyBzdGF0cyBmb3IgJHtraW5kfWApO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgZ2V0U3RhdHNGb3JTdHJlYW0gPSBhc3luYyAoa2luZCwgbWVkaWFTdHJlYW0pID0+IHtcbiAgICAgICAgY29uc3QgcGMgPSBraW5kID09PSAnc3Vic2NyaWJlcicgPyBzdWJzY3JpYmVyIDogcHVibGlzaGVyO1xuICAgICAgICBjb25zdCBzdGF0c0ZvclN0cmVhbSA9IFtdO1xuICAgICAgICBmb3IgKGxldCB0cmFjayBvZiBtZWRpYVN0cmVhbS5nZXRUcmFja3MoKSkge1xuICAgICAgICAgICAgY29uc3QgcmVwb3J0ID0gYXdhaXQgcGMuZ2V0U3RhdHModHJhY2spO1xuICAgICAgICAgICAgY29uc3Qgc3RhdHMgPSB0cmFuc2Zvcm0ocmVwb3J0LCB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIHRyYWNrS2luZDogdHJhY2sua2luZCxcbiAgICAgICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzdGF0c0ZvclN0cmVhbS5wdXNoKHN0YXRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdHNGb3JTdHJlYW07XG4gICAgfTtcbiAgICBjb25zdCBzdGFydFJlcG9ydGluZ1N0YXRzRm9yID0gKHNlc3Npb25JZCkgPT4ge1xuICAgICAgICBzZXNzaW9uSWRzVG9UcmFjay5hZGQoc2Vzc2lvbklkKTtcbiAgICAgICAgdm9pZCBydW4oKTtcbiAgICB9O1xuICAgIGNvbnN0IHN0b3BSZXBvcnRpbmdTdGF0c0ZvciA9IChzZXNzaW9uSWQpID0+IHtcbiAgICAgICAgc2Vzc2lvbklkc1RvVHJhY2suZGVsZXRlKHNlc3Npb25JZCk7XG4gICAgICAgIHZvaWQgcnVuKCk7XG4gICAgfTtcbiAgICBjb25zdCBzZXNzaW9uSWRzVG9UcmFjayA9IG5ldyBTZXQoKTtcbiAgICAvKipcbiAgICAgKiBUaGUgbWFpbiBzdGF0cyByZXBvcnRpbmcgbG9vcC5cbiAgICAgKi9cbiAgICBjb25zdCBydW4gPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcnRpY2lwYW50U3RhdHMgPSB7fTtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbklkcyA9IG5ldyBTZXQoc2Vzc2lvbklkc1RvVHJhY2spO1xuICAgICAgICBpZiAoc2Vzc2lvbklkcy5zaXplID4gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgcGFydGljaXBhbnQgb2Ygc3RhdGUucGFydGljaXBhbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzZXNzaW9uSWRzLmhhcyhwYXJ0aWNpcGFudC5zZXNzaW9uSWQpKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBraW5kID0gcGFydGljaXBhbnQuaXNMb2NhbFBhcnRpY2lwYW50XG4gICAgICAgICAgICAgICAgICAgID8gJ3B1Ymxpc2hlcidcbiAgICAgICAgICAgICAgICAgICAgOiAnc3Vic2NyaWJlcic7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVyZ2VkU3RyZWFtID0gbmV3IE1lZGlhU3RyZWFtKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLihwYXJ0aWNpcGFudC52aWRlb1N0cmVhbT8uZ2V0VmlkZW9UcmFja3MoKSB8fCBbXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi4ocGFydGljaXBhbnQuYXVkaW9TdHJlYW0/LmdldEF1ZGlvVHJhY2tzKCkgfHwgW10pLFxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgcGFydGljaXBhbnRTdGF0c1twYXJ0aWNpcGFudC5zZXNzaW9uSWRdID0gYXdhaXQgZ2V0U3RhdHNGb3JTdHJlYW0oa2luZCwgbWVyZ2VkU3RyZWFtKTtcbiAgICAgICAgICAgICAgICAgICAgbWVyZ2VkU3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goKHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlZFN0cmVhbS5yZW1vdmVUcmFjayh0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlcignZXJyb3InLCBgRmFpbGVkIHRvIGNvbGxlY3Qgc3RhdHMgZm9yICR7a2luZH0gaWYgJHtwYXJ0aWNpcGFudC51c2VySWR9YCwgZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFtzdWJzY3JpYmVyU3RhdHMsIHB1Ymxpc2hlclN0YXRzXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHN1YnNjcmliZXJcbiAgICAgICAgICAgICAgICAuZ2V0U3RhdHMoKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXBvcnQpID0+IHRyYW5zZm9ybShyZXBvcnQsIHtcbiAgICAgICAgICAgICAgICBraW5kOiAnc3Vic2NyaWJlcicsXG4gICAgICAgICAgICAgICAgdHJhY2tLaW5kOiAndmlkZW8nLFxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgLnRoZW4oYWdncmVnYXRlKSxcbiAgICAgICAgICAgIHB1Ymxpc2hlclxuICAgICAgICAgICAgICAgIC5nZXRTdGF0cygpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlcG9ydCkgPT4gdHJhbnNmb3JtKHJlcG9ydCwge1xuICAgICAgICAgICAgICAgIGtpbmQ6ICdwdWJsaXNoZXInLFxuICAgICAgICAgICAgICAgIHRyYWNrS2luZDogJ3ZpZGVvJyxcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIC50aGVuKGFnZ3JlZ2F0ZSksXG4gICAgICAgIF0pO1xuICAgICAgICBjb25zdCBbc3Vic2NyaWJlclJhd1N0YXRzLCBwdWJsaXNoZXJSYXdTdGF0c10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICBnZXRSYXdTdGF0c0ZvclRyYWNrKCdzdWJzY3JpYmVyJyksXG4gICAgICAgICAgICBnZXRSYXdTdGF0c0ZvclRyYWNrKCdwdWJsaXNoZXInKSxcbiAgICAgICAgXSk7XG4gICAgICAgIHN0YXRlLnNldENhbGxTdGF0c1JlcG9ydCh7XG4gICAgICAgICAgICBkYXRhY2VudGVyOiBwdWJsaXNoZXIuc2Z1Q2xpZW50LmVkZ2VOYW1lLFxuICAgICAgICAgICAgcHVibGlzaGVyU3RhdHMsXG4gICAgICAgICAgICBzdWJzY3JpYmVyU3RhdHMsXG4gICAgICAgICAgICBzdWJzY3JpYmVyUmF3U3RhdHMsXG4gICAgICAgICAgICBwdWJsaXNoZXJSYXdTdGF0cyxcbiAgICAgICAgICAgIHBhcnRpY2lwYW50czogcGFydGljaXBhbnRTdGF0cyxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBsZXQgdGltZW91dElkO1xuICAgIGlmIChwb2xsaW5nSW50ZXJ2YWxJbk1zID4gMCkge1xuICAgICAgICBjb25zdCBsb29wID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgcnVuKCkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICBsb2dnZXIoJ2RlYnVnJywgJ0ZhaWxlZCB0byBjb2xsZWN0IHN0YXRzJywgZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQobG9vcCwgcG9sbGluZ0ludGVydmFsSW5Ncyk7XG4gICAgICAgIH07XG4gICAgICAgIHZvaWQgbG9vcCgpO1xuICAgIH1cbiAgICBjb25zdCBzdG9wID0gKCkgPT4ge1xuICAgICAgICBpZiAodGltZW91dElkKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0UmF3U3RhdHNGb3JUcmFjayxcbiAgICAgICAgZ2V0U3RhdHNGb3JTdHJlYW0sXG4gICAgICAgIHN0YXJ0UmVwb3J0aW5nU3RhdHNGb3IsXG4gICAgICAgIHN0b3BSZXBvcnRpbmdTdGF0c0ZvcixcbiAgICAgICAgc3RvcCxcbiAgICB9O1xufTtcbi8qKlxuICogVHJhbnNmb3JtcyByYXcgUlRDIHN0YXRzIGludG8gYSBzbGltbWVyIGFuZCB1bmlmb3JtIGFjcm9zcyBicm93c2VycyBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHJlcG9ydCB0aGUgcmVwb3J0IHRvIHRyYW5zZm9ybS5cbiAqIEBwYXJhbSBvcHRzIHRoZSB0cmFuc2Zvcm0gb3B0aW9ucy5cbiAqL1xuY29uc3QgdHJhbnNmb3JtID0gKHJlcG9ydCwgb3B0cykgPT4ge1xuICAgIGNvbnN0IHsgdHJhY2tLaW5kLCBraW5kIH0gPSBvcHRzO1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IGtpbmQgPT09ICdzdWJzY3JpYmVyJyA/ICdpbmJvdW5kLXJ0cCcgOiAnb3V0Ym91bmQtcnRwJztcbiAgICBjb25zdCBzdGF0cyA9IGZsYXR0ZW4kMShyZXBvcnQpO1xuICAgIGNvbnN0IHN0cmVhbXMgPSBzdGF0c1xuICAgICAgICAuZmlsdGVyKChzdGF0KSA9PiBzdGF0LnR5cGUgPT09IGRpcmVjdGlvbiAmJlxuICAgICAgICBzdGF0LmtpbmQgPT09IHRyYWNrS2luZClcbiAgICAgICAgLm1hcCgoc3RhdCkgPT4ge1xuICAgICAgICBjb25zdCBydGNTdHJlYW1TdGF0cyA9IHN0YXQ7XG4gICAgICAgIGNvbnN0IGNvZGVjID0gc3RhdHMuZmluZCgocykgPT4gcy50eXBlID09PSAnY29kZWMnICYmIHMuaWQgPT09IHJ0Y1N0cmVhbVN0YXRzLmNvZGVjSWQpOyAvLyBGSVhNRSBPTDogaW5jb3JyZWN0IHR5cGUhXG4gICAgICAgIGNvbnN0IHRyYW5zcG9ydCA9IHN0YXRzLmZpbmQoKHMpID0+IHMudHlwZSA9PT0gJ3RyYW5zcG9ydCcgJiYgcy5pZCA9PT0gcnRjU3RyZWFtU3RhdHMudHJhbnNwb3J0SWQpO1xuICAgICAgICBsZXQgcm91bmRUcmlwVGltZTtcbiAgICAgICAgaWYgKHRyYW5zcG9ydCAmJiB0cmFuc3BvcnQuZHRsc1N0YXRlID09PSAnY29ubmVjdGVkJykge1xuICAgICAgICAgICAgY29uc3QgY2FuZGlkYXRlUGFpciA9IHN0YXRzLmZpbmQoKHMpID0+IHMudHlwZSA9PT0gJ2NhbmRpZGF0ZS1wYWlyJyAmJlxuICAgICAgICAgICAgICAgIHMuaWQgPT09IHRyYW5zcG9ydC5zZWxlY3RlZENhbmRpZGF0ZVBhaXJJZCk7XG4gICAgICAgICAgICByb3VuZFRyaXBUaW1lID0gY2FuZGlkYXRlUGFpcj8uY3VycmVudFJvdW5kVHJpcFRpbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJ5dGVzU2VudDogcnRjU3RyZWFtU3RhdHMuYnl0ZXNTZW50LFxuICAgICAgICAgICAgYnl0ZXNSZWNlaXZlZDogcnRjU3RyZWFtU3RhdHMuYnl0ZXNSZWNlaXZlZCxcbiAgICAgICAgICAgIGNvZGVjOiBjb2RlYz8ubWltZVR5cGUsXG4gICAgICAgICAgICBjdXJyZW50Um91bmRUcmlwVGltZTogcm91bmRUcmlwVGltZSxcbiAgICAgICAgICAgIGZyYW1lSGVpZ2h0OiBydGNTdHJlYW1TdGF0cy5mcmFtZUhlaWdodCxcbiAgICAgICAgICAgIGZyYW1lV2lkdGg6IHJ0Y1N0cmVhbVN0YXRzLmZyYW1lV2lkdGgsXG4gICAgICAgICAgICBmcmFtZXNQZXJTZWNvbmQ6IHJ0Y1N0cmVhbVN0YXRzLmZyYW1lc1BlclNlY29uZCxcbiAgICAgICAgICAgIGppdHRlcjogcnRjU3RyZWFtU3RhdHMuaml0dGVyLFxuICAgICAgICAgICAga2luZDogcnRjU3RyZWFtU3RhdHMua2luZCxcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmU6IGF2YWlsYWJsZSBpbiBDaHJvbWUgb25seSwgVFMgZG9lc24ndCByZWNvZ25pemUgdGhpc1xuICAgICAgICAgICAgcXVhbGl0eUxpbWl0YXRpb25SZWFzb246IHJ0Y1N0cmVhbVN0YXRzLnF1YWxpdHlMaW1pdGF0aW9uUmVhc29uLFxuICAgICAgICAgICAgcmlkOiBydGNTdHJlYW1TdGF0cy5yaWQsXG4gICAgICAgICAgICBzc3JjOiBydGNTdHJlYW1TdGF0cy5zc3JjLFxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJhd1N0YXRzOiByZXBvcnQsXG4gICAgICAgIHN0cmVhbXMsXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICB9O1xufTtcbi8qKlxuICogQWdncmVnYXRlcyBnZW5lcmljIHN0YXRzLlxuICpcbiAqIEBwYXJhbSBzdGF0cyB0aGUgc3RhdHMgdG8gYWdncmVnYXRlLlxuICovXG5jb25zdCBhZ2dyZWdhdGUgPSAoc3RhdHMpID0+IHtcbiAgICBjb25zdCBhZ2dyZWdhdGVkU3RhdHMgPSB7XG4gICAgICAgIHJhd1JlcG9ydDogc3RhdHMsXG4gICAgICAgIHRvdGFsQnl0ZXNTZW50OiAwLFxuICAgICAgICB0b3RhbEJ5dGVzUmVjZWl2ZWQ6IDAsXG4gICAgICAgIGF2ZXJhZ2VKaXR0ZXJJbk1zOiAwLFxuICAgICAgICBhdmVyYWdlUm91bmRUcmlwVGltZUluTXM6IDAsXG4gICAgICAgIHF1YWxpdHlMaW1pdGF0aW9uUmVhc29uczogJ25vbmUnLFxuICAgICAgICBoaWdoZXN0RnJhbWVXaWR0aDogMCxcbiAgICAgICAgaGlnaGVzdEZyYW1lSGVpZ2h0OiAwLFxuICAgICAgICBoaWdoZXN0RnJhbWVzUGVyU2Vjb25kOiAwLFxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgfTtcbiAgICBsZXQgbWF4QXJlYSA9IC0xO1xuICAgIGNvbnN0IGFyZWEgPSAodywgaCkgPT4gdyAqIGg7XG4gICAgY29uc3QgcXVhbGl0eUxpbWl0YXRpb25SZWFzb25zID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IHN0cmVhbXMgPSBzdGF0cy5zdHJlYW1zO1xuICAgIGNvbnN0IHJlcG9ydCA9IHN0cmVhbXMucmVkdWNlKChhY2MsIHN0cmVhbSkgPT4ge1xuICAgICAgICBhY2MudG90YWxCeXRlc1NlbnQgKz0gc3RyZWFtLmJ5dGVzU2VudCB8fCAwO1xuICAgICAgICBhY2MudG90YWxCeXRlc1JlY2VpdmVkICs9IHN0cmVhbS5ieXRlc1JlY2VpdmVkIHx8IDA7XG4gICAgICAgIGFjYy5hdmVyYWdlSml0dGVySW5NcyArPSBzdHJlYW0uaml0dGVyIHx8IDA7XG4gICAgICAgIGFjYy5hdmVyYWdlUm91bmRUcmlwVGltZUluTXMgKz0gc3RyZWFtLmN1cnJlbnRSb3VuZFRyaXBUaW1lIHx8IDA7XG4gICAgICAgIC8vIG5haXZlIGNhbGN1bGF0aW9uIG9mIHRoZSBoaWdoZXN0IHJlc29sdXRpb25cbiAgICAgICAgY29uc3Qgc3RyZWFtQXJlYSA9IGFyZWEoc3RyZWFtLmZyYW1lV2lkdGggfHwgMCwgc3RyZWFtLmZyYW1lSGVpZ2h0IHx8IDApO1xuICAgICAgICBpZiAoc3RyZWFtQXJlYSA+IG1heEFyZWEpIHtcbiAgICAgICAgICAgIGFjYy5oaWdoZXN0RnJhbWVXaWR0aCA9IHN0cmVhbS5mcmFtZVdpZHRoIHx8IDA7XG4gICAgICAgICAgICBhY2MuaGlnaGVzdEZyYW1lSGVpZ2h0ID0gc3RyZWFtLmZyYW1lSGVpZ2h0IHx8IDA7XG4gICAgICAgICAgICBhY2MuaGlnaGVzdEZyYW1lc1BlclNlY29uZCA9IHN0cmVhbS5mcmFtZXNQZXJTZWNvbmQgfHwgMDtcbiAgICAgICAgICAgIG1heEFyZWEgPSBzdHJlYW1BcmVhO1xuICAgICAgICB9XG4gICAgICAgIHF1YWxpdHlMaW1pdGF0aW9uUmVhc29ucy5hZGQoc3RyZWFtLnF1YWxpdHlMaW1pdGF0aW9uUmVhc29uIHx8ICcnKTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBhZ2dyZWdhdGVkU3RhdHMpO1xuICAgIGlmIChzdHJlYW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVwb3J0LmF2ZXJhZ2VKaXR0ZXJJbk1zID0gTWF0aC5yb3VuZCgocmVwb3J0LmF2ZXJhZ2VKaXR0ZXJJbk1zIC8gc3RyZWFtcy5sZW5ndGgpICogMTAwMCk7XG4gICAgICAgIHJlcG9ydC5hdmVyYWdlUm91bmRUcmlwVGltZUluTXMgPSBNYXRoLnJvdW5kKChyZXBvcnQuYXZlcmFnZVJvdW5kVHJpcFRpbWVJbk1zIC8gc3RyZWFtcy5sZW5ndGgpICogMTAwMCk7XG4gICAgfVxuICAgIGNvbnN0IHF1YWxpdHlMaW1pdGF0aW9uUmVhc29uID0gW1xuICAgICAgICBxdWFsaXR5TGltaXRhdGlvblJlYXNvbnMuaGFzKCdjcHUnKSAmJiAnY3B1JyxcbiAgICAgICAgcXVhbGl0eUxpbWl0YXRpb25SZWFzb25zLmhhcygnYmFuZHdpZHRoJykgJiYgJ2JhbmR3aWR0aCcsXG4gICAgICAgIHF1YWxpdHlMaW1pdGF0aW9uUmVhc29ucy5oYXMoJ290aGVyJykgJiYgJ290aGVyJyxcbiAgICBdXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgLmpvaW4oJywgJyk7XG4gICAgaWYgKHF1YWxpdHlMaW1pdGF0aW9uUmVhc29uKSB7XG4gICAgICAgIHJlcG9ydC5xdWFsaXR5TGltaXRhdGlvblJlYXNvbnMgPSBxdWFsaXR5TGltaXRhdGlvblJlYXNvbjtcbiAgICB9XG4gICAgcmV0dXJuIHJlcG9ydDtcbn07XG5cbmNsYXNzIFNmdVN0YXRzUmVwb3J0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHNmdUNsaWVudCwgeyBvcHRpb25zLCBjbGllbnREZXRhaWxzLCBzdWJzY3JpYmVyLCBwdWJsaXNoZXIgfSkge1xuICAgICAgICB0aGlzLmxvZ2dlciA9IGdldExvZ2dlcihbJ1NmdVN0YXRzUmVwb3J0ZXInXSk7XG4gICAgICAgIHRoaXMucnVuID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgW3N1YnNjcmliZXJTdGF0cywgcHVibGlzaGVyU3RhdHNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlci5nZXRTdGF0cygpLnRoZW4oZmxhdHRlbiQxKS50aGVuKEpTT04uc3RyaW5naWZ5KSxcbiAgICAgICAgICAgICAgICB0aGlzLnB1Ymxpc2hlci5nZXRTdGF0cygpLnRoZW4oZmxhdHRlbiQxKS50aGVuKEpTT04uc3RyaW5naWZ5KSxcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zZnVDbGllbnQuc2VuZFN0YXRzKHtcbiAgICAgICAgICAgICAgICBzZGs6IHRoaXMuc2RrTmFtZSxcbiAgICAgICAgICAgICAgICBzZGtWZXJzaW9uOiB0aGlzLnNka1ZlcnNpb24sXG4gICAgICAgICAgICAgICAgd2VicnRjVmVyc2lvbjogdGhpcy53ZWJSVENWZXJzaW9uLFxuICAgICAgICAgICAgICAgIHN1YnNjcmliZXJTdGF0cyxcbiAgICAgICAgICAgICAgICBwdWJsaXNoZXJTdGF0cyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnN0YXJ0ID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZXBvcnRpbmdfaW50ZXJ2YWxfbXMgPD0gMClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmludGVydmFsSWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5ydW4oKS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCd3YXJuJywgJ0ZhaWxlZCB0byByZXBvcnQgc3RhdHMnLCBlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgdGhpcy5vcHRpb25zLnJlcG9ydGluZ19pbnRlcnZhbF9tcyk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3RvcCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbElkKTtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWxJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZnVDbGllbnQgPSBzZnVDbGllbnQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlciA9IHN1YnNjcmliZXI7XG4gICAgICAgIHRoaXMucHVibGlzaGVyID0gcHVibGlzaGVyO1xuICAgICAgICBjb25zdCB3ZWJSVENJbmZvID0gZ2V0V2ViUlRDSW5mbygpO1xuICAgICAgICBjb25zdCB7IHNkaywgYnJvd3NlciB9ID0gY2xpZW50RGV0YWlscztcbiAgICAgICAgdGhpcy5zZGtOYW1lID1cbiAgICAgICAgICAgIHNkayAmJiBzZGsudHlwZSA9PT0gU2RrVHlwZS5SRUFDVFxuICAgICAgICAgICAgICAgID8gJ3N0cmVhbS1yZWFjdCdcbiAgICAgICAgICAgICAgICA6IHNkayAmJiBzZGsudHlwZSA9PT0gU2RrVHlwZS5SRUFDVF9OQVRJVkVcbiAgICAgICAgICAgICAgICAgICAgPyAnc3RyZWFtLXJlYWN0LW5hdGl2ZSdcbiAgICAgICAgICAgICAgICAgICAgOiAnc3RyZWFtLWpzJztcbiAgICAgICAgdGhpcy5zZGtWZXJzaW9uID0gc2RrXG4gICAgICAgICAgICA/IGAke3Nkay5tYWpvcn0uJHtzZGsubWlub3J9LiR7c2RrLnBhdGNofWBcbiAgICAgICAgICAgIDogJzAuMC4wLWRldmVsb3BtZW50JztcbiAgICAgICAgLy8gVGhlIFdlYlJUQyB2ZXJzaW9uIGlmIHBhc3NlZCBmcm9tIHRoZSBTREssIGl0IGlzIHRha2VuIGVsc2UgdGhlIGJyb3dzZXIgaW5mbyBpcyBzZW50LlxuICAgICAgICB0aGlzLndlYlJUQ1ZlcnNpb24gPVxuICAgICAgICAgICAgd2ViUlRDSW5mbz8udmVyc2lvbiB8fFxuICAgICAgICAgICAgICAgIGAke2Jyb3dzZXI/Lm5hbWUgfHwgJyd9LSR7YnJvd3Nlcj8udmVyc2lvbiB8fCAnJ31gIHx8XG4gICAgICAgICAgICAgICAgJ04vQSc7XG4gICAgfVxufVxuXG5jb25zdCBERUZBVUxUX1RIUkVTSE9MRCA9IDAuMzU7XG5jbGFzcyBWaWV3cG9ydFRyYWNrZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZWxlbWVudEhhbmRsZXJNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IG51bGw7XG4gICAgICAgIC8vIGluIFJlYWN0IGNoaWxkcmVuIHJlbmRlciBiZWZvcmUgdmlld3BvcnQgaXMgc2V0LCBhZGRcbiAgICAgICAgLy8gdGhlbSB0byB0aGUgcXVldWUgYW5kIG9ic2VydmUgdGhlbSBvbmNlIHRoZSBvYnNlcnZlciBpcyByZWFkeVxuICAgICAgICAvKipcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucXVldWVTZXQgPSBuZXcgU2V0KCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNZXRob2QgdG8gc2V0IHNjcm9sbGFibGUgdmlld3BvcnQgYXMgcm9vdCBmb3IgdGhlIEludGVyc2VjdGlvbk9ic2VydmVyLCByZXR1cm5zXG4gICAgICAgICAqIGNsZWFudXAgZnVuY3Rpb24gdG8gYmUgaW52b2tlZCB1cG9uIGRpc3Bvc2luZyBvZiB0aGUgRE9NIGVsZW1lbnQgdG8gcHJldmVudCBtZW1vcnkgbGVha3NcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHZpZXdwb3J0RWxlbWVudFxuICAgICAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyBVbm9ic2VydmVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2V0Vmlld3BvcnQgPSAodmlld3BvcnRFbGVtZW50LCBvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjbGVhbnVwID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXI/LmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRIYW5kbGVyTWFwLmNsZWFyKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgICAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IHRoaXMuZWxlbWVudEhhbmRsZXJNYXAuZ2V0KGVudHJ5LnRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXI/LihlbnRyeSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgcm9vdDogdmlld3BvcnRFbGVtZW50LFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkOiBvcHRpb25zPy50aHJlc2hvbGQgPz8gREVGQVVMVF9USFJFU0hPTEQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh0aGlzLnF1ZXVlU2V0LnNpemUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlU2V0LmZvckVhY2goKFtxdWV1ZUVsZW1lbnQsIHF1ZXVlSGFuZGxlcl0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgZWxlbWVudCB3aGljaCByZXF1ZXN0ZWQgb2JzZXJ2YXRpb24gaXNcbiAgICAgICAgICAgICAgICAgICAgLy8gYSBjaGlsZCBvZiBhIHZpZXdwb3J0IGVsZW1lbnQsIHNraXAgaWYgaXNuJ3RcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2aWV3cG9ydEVsZW1lbnQuY29udGFpbnMocXVldWVFbGVtZW50KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKHF1ZXVlRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudEhhbmRsZXJNYXAuc2V0KHF1ZXVlRWxlbWVudCwgcXVldWVIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlU2V0LmNsZWFyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2xlYW51cDtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1ldGhvZCB0byBzZXQgZWxlbWVudCB0byBvYnNlcnZlIGFuZCBoYW5kbGVyIHRvIGJlIHRyaWdnZXJlZCB3aGVuZXZlciBJbnRlcnNlY3Rpb25PYnNlcnZlclxuICAgICAgICAgKiBkZXRlY3RzIGEgcG9zc2libGUgY2hhbmdlIGluIGVsZW1lbnQncyB2aXNpYmlsaXR5IHdpdGhpbiBzcGVjaWZpZWQgdmlld3BvcnQsIHJldHVybnNcbiAgICAgICAgICogY2xlYW51cCBmdW5jdGlvbiB0byBiZSBpbnZva2VkIHVwb24gZGlzcG9zaW5nIG9mIHRoZSBET00gZWxlbWVudCB0byBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gZWxlbWVudFxuICAgICAgICAgKiBAcGFyYW0gaGFuZGxlclxuICAgICAgICAgKiBAcmV0dXJucyBVbm9ic2VydmVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub2JzZXJ2ZSA9IChlbGVtZW50LCBoYW5kbGVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBxdWV1ZUl0ZW0gPSBbZWxlbWVudCwgaGFuZGxlcl07XG4gICAgICAgICAgICBjb25zdCBjbGVhbnVwID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudEhhbmRsZXJNYXAuZGVsZXRlKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXI/LnVub2JzZXJ2ZShlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlU2V0LmRlbGV0ZShxdWV1ZUl0ZW0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnRIYW5kbGVyTWFwLmhhcyhlbGVtZW50KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xlYW51cDtcbiAgICAgICAgICAgIGlmICghdGhpcy5vYnNlcnZlcikge1xuICAgICAgICAgICAgICAgIHRoaXMucXVldWVTZXQuYWRkKHF1ZXVlSXRlbSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsZWFudXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5vYnNlcnZlci5yb290LmNvbnRhaW5zKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50SGFuZGxlck1hcC5zZXQoZWxlbWVudCwgaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNsZWFudXA7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSBjdXJyZW50IGJyb3dzZXIgaXMgU2FmYXJpLlxuICovXG5jb25zdCBpc1NhZmFyaSA9ICgpID0+IHtcbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvciA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnKTtcbn07XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSBjdXJyZW50IGJyb3dzZXIgaXMgRmlyZWZveC5cbiAqL1xuY29uc3QgaXNGaXJlZm94ID0gKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50Py5pbmNsdWRlcygnRmlyZWZveCcpO1xufTtcbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIGN1cnJlbnQgYnJvd3NlciBpcyBHb29nbGUgQ2hyb21lLlxuICovXG5jb25zdCBpc0Nocm9tZSA9ICgpID0+IHtcbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvciA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudD8uaW5jbHVkZXMoJ0Nocm9tZScpO1xufTtcblxudmFyIGJyb3dzZXJzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICBpc0Nocm9tZTogaXNDaHJvbWUsXG4gICAgaXNGaXJlZm94OiBpc0ZpcmVmb3gsXG4gICAgaXNTYWZhcmk6IGlzU2FmYXJpXG59KTtcblxuY29uc3QgREVGQVVMVF9WSUVXUE9SVF9WSVNJQklMSVRZX1NUQVRFID0ge1xuICAgIHZpZGVvVHJhY2s6IFZpc2liaWxpdHlTdGF0ZS5VTktOT1dOLFxuICAgIHNjcmVlblNoYXJlVHJhY2s6IFZpc2liaWxpdHlTdGF0ZS5VTktOT1dOLFxufTtcbi8qKlxuICogQSBtYW5hZ2VyIGNsYXNzIHRoYXQgaGFuZGxlcyBkeW5hc2NhbGUgcmVsYXRlZCB0YXNrcyBsaWtlOlxuICpcbiAqIC0gYmluZGluZyB2aWRlbyBlbGVtZW50cyB0byBzZXNzaW9uIGlkc1xuICogLSBiaW5kaW5nIGF1ZGlvIGVsZW1lbnRzIHRvIHNlc3Npb24gaWRzXG4gKiAtIHRyYWNraW5nIGVsZW1lbnQgdmlzaWJpbGl0eVxuICogLSB1cGRhdGluZyBzdWJzY3JpcHRpb25zIGJhc2VkIG9uIHZpZXdwb3J0IHZpc2liaWxpdHlcbiAqIC0gdXBkYXRpbmcgc3Vic2NyaXB0aW9ucyBiYXNlZCBvbiB2aWRlbyBlbGVtZW50IGRpbWVuc2lvbnNcbiAqIC0gdXBkYXRpbmcgc3Vic2NyaXB0aW9ucyBiYXNlZCBvbiBwdWJsaXNoZWQgdHJhY2tzXG4gKi9cbmNsYXNzIER5bmFzY2FsZU1hbmFnZXIge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgRHluYXNjYWxlTWFuYWdlciBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjYWxsIHRoZSBjYWxsIHRvIG1hbmFnZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjYWxsKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdmlld3BvcnQgdHJhY2tlciBpbnN0YW5jZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmlld3BvcnRUcmFja2VyID0gbmV3IFZpZXdwb3J0VHJhY2tlcigpO1xuICAgICAgICB0aGlzLmxvZ2dlciA9IGdldExvZ2dlcihbJ0R5bmFzY2FsZU1hbmFnZXInXSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaWxsIGJlZ2luIHRyYWNraW5nIHRoZSBnaXZlbiBlbGVtZW50IGZvciB2aXNpYmlsaXR5IGNoYW5nZXMgd2l0aGluIHRoZVxuICAgICAgICAgKiBjb25maWd1cmVkIHZpZXdwb3J0IGVsZW1lbnQgKGBjYWxsLnNldFZpZXdwb3J0YCkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBlbGVtZW50IHRoZSBlbGVtZW50IHRvIHRyYWNrLlxuICAgICAgICAgKiBAcGFyYW0gc2Vzc2lvbklkIHRoZSBzZXNzaW9uIGlkLlxuICAgICAgICAgKiBAcGFyYW0gdHJhY2tUeXBlIHRoZSBraW5kIG9mIHZpZGVvLlxuICAgICAgICAgKiBAcmV0dXJucyBVbnRyYWNrLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50cmFja0VsZW1lbnRWaXNpYmlsaXR5ID0gKGVsZW1lbnQsIHNlc3Npb25JZCwgdHJhY2tUeXBlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjbGVhbnVwID0gdGhpcy52aWV3cG9ydFRyYWNrZXIub2JzZXJ2ZShlbGVtZW50LCAoZW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGwuc3RhdGUudXBkYXRlUGFydGljaXBhbnQoc2Vzc2lvbklkLCAocGFydGljaXBhbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldmlvdXNWaXNpYmlsaXR5U3RhdGUgPSBwYXJ0aWNpcGFudC52aWV3cG9ydFZpc2liaWxpdHlTdGF0ZSA/P1xuICAgICAgICAgICAgICAgICAgICAgICAgREVGQVVMVF9WSUVXUE9SVF9WSVNJQklMSVRZX1NUQVRFO1xuICAgICAgICAgICAgICAgICAgICAvLyBvYnNlcnZlciB0cmlnZ2VycyB3aGVuIHRoZSBlbGVtZW50IGlzIFwibW92ZWRcIiB0byBiZSBhIGZ1bGxzY3JlZW4gZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAvLyBrZWVwIGl0IFZJU0lCTEUgaWYgdGhhdCBoYXBwZW5zIHRvIHByZXZlbnQgZnVsbHNjcmVlbiB3aXRoIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVmlzaWJsZSA9IGVudHJ5LmlzSW50ZXJzZWN0aW5nIHx8IGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50ID09PSBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICA/IFZpc2liaWxpdHlTdGF0ZS5WSVNJQkxFXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFZpc2liaWxpdHlTdGF0ZS5JTlZJU0lCTEU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5wYXJ0aWNpcGFudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0VmlzaWJpbGl0eVN0YXRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4ucHJldmlvdXNWaXNpYmlsaXR5U3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RyYWNrVHlwZV06IGlzVmlzaWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgIC8vIHJlc2V0IHZpc2liaWxpdHkgc3RhdGUgdG8gVU5LTk9XTiB1cG9uIGNsZWFudXBcbiAgICAgICAgICAgICAgICAvLyBzbyB0aGF0IHRoZSBsYXlvdXRzIHRoYXQgYXJlIG5vdCBhY3RpdmVseSBvYnNlcnZlZFxuICAgICAgICAgICAgICAgIC8vIGNhbiBzdGlsbCBmdW5jdGlvbiBub3JtYWxseSAocnVudGltZSBsYXlvdXQgc3dpdGNoaW5nKVxuICAgICAgICAgICAgICAgIHRoaXMuY2FsbC5zdGF0ZS51cGRhdGVQYXJ0aWNpcGFudChzZXNzaW9uSWQsIChwYXJ0aWNpcGFudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2aW91c1Zpc2liaWxpdHlTdGF0ZSA9IHBhcnRpY2lwYW50LnZpZXdwb3J0VmlzaWJpbGl0eVN0YXRlID8/XG4gICAgICAgICAgICAgICAgICAgICAgICBERUZBVUxUX1ZJRVdQT1JUX1ZJU0lCSUxJVFlfU1RBVEU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5wYXJ0aWNpcGFudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0VmlzaWJpbGl0eVN0YXRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4ucHJldmlvdXNWaXNpYmlsaXR5U3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RyYWNrVHlwZV06IFZpc2liaWxpdHlTdGF0ZS5VTktOT1dOLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXRzIHRoZSB2aWV3cG9ydCBlbGVtZW50IHRvIHRyYWNrIGJvdW5kIHZpZGVvIGVsZW1lbnRzIGZvciB2aXNpYmlsaXR5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gZWxlbWVudCB0aGUgdmlld3BvcnQgZWxlbWVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2V0Vmlld3BvcnQgPSAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlld3BvcnRUcmFja2VyLnNldFZpZXdwb3J0KGVsZW1lbnQpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQmluZHMgYSBET00gPHZpZGVvPiBlbGVtZW50IHRvIHRoZSBnaXZlbiBzZXNzaW9uIGlkLlxuICAgICAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIG1ha2Ugc3VyZSB0aGF0IHRoZSB2aWRlbyBlbGVtZW50IHdpbGwgcGxheVxuICAgICAgICAgKiB0aGUgY29ycmVjdCB2aWRlbyBzdHJlYW0gZm9yIHRoZSBnaXZlbiBzZXNzaW9uIGlkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBVbmRlciB0aGUgaG9vZCwgaXQgd291bGQgYWxzbyBrZWVwIHRyYWNrIG9mIHRoZSB2aWRlbyBlbGVtZW50IGRpbWVuc2lvbnNcbiAgICAgICAgICogYW5kIHVwZGF0ZSB0aGUgc3Vic2NyaXB0aW9uIGFjY29yZGluZ2x5IGluIG9yZGVyIHRvIG9wdGltaXplIHRoZSBiYW5kd2lkdGguXG4gICAgICAgICAqXG4gICAgICAgICAqIElmIGEgXCJ2aWV3cG9ydFwiIGlzIGNvbmZpZ3VyZWQsIHRoZSB2aWRlbyBlbGVtZW50IHdpbGwgYmUgYXV0b21hdGljYWxseVxuICAgICAgICAgKiB0cmFja2VkIGZvciB2aXNpYmlsaXR5IGFuZCB0aGUgc3Vic2NyaXB0aW9uIHdpbGwgYmUgdXBkYXRlZCBhY2NvcmRpbmdseS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHZpZGVvRWxlbWVudCB0aGUgdmlkZW8gZWxlbWVudCB0byBiaW5kIHRvLlxuICAgICAgICAgKiBAcGFyYW0gc2Vzc2lvbklkIHRoZSBzZXNzaW9uIGlkLlxuICAgICAgICAgKiBAcGFyYW0gdHJhY2tUeXBlIHRoZSBraW5kIG9mIHZpZGVvLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5iaW5kVmlkZW9FbGVtZW50ID0gKHZpZGVvRWxlbWVudCwgc2Vzc2lvbklkLCB0cmFja1R5cGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJvdW5kUGFydGljaXBhbnQgPSB0aGlzLmNhbGwuc3RhdGUuZmluZFBhcnRpY2lwYW50QnlTZXNzaW9uSWQoc2Vzc2lvbklkKTtcbiAgICAgICAgICAgIGlmICghYm91bmRQYXJ0aWNpcGFudClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0VHJhY2tXaXRoRGltZW5zaW9ucyA9IChkZWJvdW5jZVR5cGUsIGRpbWVuc2lvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkaW1lbnNpb24gJiYgKGRpbWVuc2lvbi53aWR0aCA9PT0gMCB8fCBkaW1lbnNpb24uaGVpZ2h0ID09PSAwKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgMHgwIGRpbWVuc2lvbnMuIHRoaXMgY2FuIGhhcHBlbiB3aGVuIHRoZSB2aWRlbyBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIC8vIGlzIG5vdCB2aXNpYmxlIChlLmcuLCBoYXMgZGlzcGxheTogbm9uZSkuXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIHRyZWF0IHRoaXMgYXMgXCJ1bnN1YnNjcmlwdGlvblwiIGFzIHdlIGRvbid0IHdhbnQgdG8ga2VlcFxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zdW1pbmcgYmFuZHdpZHRoIGZvciBhIHZpZGVvIHRoYXQgaXMgbm90IHZpc2libGUgb24gdGhlIHNjcmVlbi5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ2RlYnVnJywgYElnbm9yaW5nIDB4MCBkaW1lbnNpb25gLCBib3VuZFBhcnRpY2lwYW50KTtcbiAgICAgICAgICAgICAgICAgICAgZGltZW5zaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmNhbGwudXBkYXRlU3Vic2NyaXB0aW9uc1BhcnRpYWwodHJhY2tUeXBlLCB7IFtzZXNzaW9uSWRdOiB7IGRpbWVuc2lvbiB9IH0sIGRlYm91bmNlVHlwZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcGFydGljaXBhbnQkID0gdGhpcy5jYWxsLnN0YXRlLnBhcnRpY2lwYW50cyQucGlwZShtYXAkMSgocGFydGljaXBhbnRzKSA9PiBwYXJ0aWNpcGFudHMuZmluZCgocGFydGljaXBhbnQpID0+IHBhcnRpY2lwYW50LnNlc3Npb25JZCA9PT0gc2Vzc2lvbklkKSksIHRha2VXaGlsZSgocGFydGljaXBhbnQpID0+ICEhcGFydGljaXBhbnQpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLCBzaGFyZVJlcGxheSh7IGJ1ZmZlclNpemU6IDEsIHJlZkNvdW50OiB0cnVlIH0pKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2luY2UgdGhlIHZpZGVvIGVsZW1lbnRzIGFyZSBub3cgYmVpbmcgcmVtb3ZlZCBmcm9tIHRoZSBET00gKFJlYWN0IFNESykgdXBvblxuICAgICAgICAgICAgICogdmlzaWJpbGl0eSBjaGFuZ2UsIHRoaXMgc3Vic2NyaXB0aW9uIGlzIG5vdCBpbiB1c2UgYW4gc3RheXMgaGVyZSBvbmx5IGZvciB0aGVcbiAgICAgICAgICAgICAqIHBsYWluIEpTIGludGVncmF0aW9ucyB3aGVyZSBpbnRlZ3JhdG9ycyBtaWdodCBjaG9vc2Ugbm90IHRvIHJlbW92ZSB0aGUgdmlkZW9cbiAgICAgICAgICAgICAqIGVsZW1lbnRzIGZyb20gdGhlIERPTS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLy8ga2VlcCBjb3B5IGZvciByZXNpemUgb2JzZXJ2ZXIgaGFuZGxlclxuICAgICAgICAgICAgbGV0IHZpZXdwb3J0VmlzaWJpbGl0eVN0YXRlO1xuICAgICAgICAgICAgY29uc3Qgdmlld3BvcnRWaXNpYmlsaXR5U3RhdGVTdWJzY3JpcHRpb24gPSBib3VuZFBhcnRpY2lwYW50LmlzTG9jYWxQYXJ0aWNpcGFudFxuICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgIDogcGFydGljaXBhbnQkXG4gICAgICAgICAgICAgICAgICAgIC5waXBlKG1hcCQxKChwKSA9PiBwLnZpZXdwb3J0VmlzaWJpbGl0eVN0YXRlPy5bdHJhY2tUeXBlXSksIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpXG4gICAgICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoKG5leHRWaWV3cG9ydFZpc2liaWxpdHlTdGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBza2lwIGluaXRpYWwgdHJpZ2dlclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZpZXdwb3J0VmlzaWJpbGl0eVN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydFZpc2liaWxpdHlTdGF0ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFZpZXdwb3J0VmlzaWJpbGl0eVN0YXRlID8/IFZpc2liaWxpdHlTdGF0ZS5VTktOT1dOO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0VmlzaWJpbGl0eVN0YXRlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRWaWV3cG9ydFZpc2liaWxpdHlTdGF0ZSA/PyBWaXNpYmlsaXR5U3RhdGUuVU5LTk9XTjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRWaWV3cG9ydFZpc2liaWxpdHlTdGF0ZSA9PT0gVmlzaWJpbGl0eVN0YXRlLklOVklTSUJMRSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3RUcmFja1dpdGhEaW1lbnNpb25zKERlYm91bmNlVHlwZS5NRURJVU0sIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFRyYWNrV2l0aERpbWVuc2lvbnMoRGVib3VuY2VUeXBlLk1FRElVTSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHZpZGVvRWxlbWVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogdmlkZW9FbGVtZW50LmNsaWVudEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgbGFzdERpbWVuc2lvbnM7XG4gICAgICAgICAgICBjb25zdCByZXNpemVPYnNlcnZlciA9IGJvdW5kUGFydGljaXBhbnQuaXNMb2NhbFBhcnRpY2lwYW50XG4gICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgOiBuZXcgUmVzaXplT2JzZXJ2ZXIoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50RGltZW5zaW9ucyA9IGAke3ZpZGVvRWxlbWVudC5jbGllbnRXaWR0aH0sJHt2aWRlb0VsZW1lbnQuY2xpZW50SGVpZ2h0fWA7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNraXAgaW5pdGlhbCB0cmlnZ2VyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbGFzdERpbWVuc2lvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3REaW1lbnNpb25zID0gY3VycmVudERpbWVuc2lvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3REaW1lbnNpb25zID09PSBjdXJyZW50RGltZW5zaW9ucyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnRWaXNpYmlsaXR5U3RhdGUgPT09IFZpc2liaWxpdHlTdGF0ZS5JTlZJU0lCTEUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VHJhY2tXaXRoRGltZW5zaW9ucyhEZWJvdW5jZVR5cGUuU0xPVywge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHZpZGVvRWxlbWVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogdmlkZW9FbGVtZW50LmNsaWVudEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGxhc3REaW1lbnNpb25zID0gY3VycmVudERpbWVuc2lvbnM7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXNpemVPYnNlcnZlcj8ub2JzZXJ2ZSh2aWRlb0VsZW1lbnQpO1xuICAgICAgICAgICAgLy8gZWxlbWVudCByZW5kZXJzIGFuZCBnZXRzIGJvdW5kIC0gdHJhY2sgc3Vic2NyaXB0aW9uIGdldHNcbiAgICAgICAgICAgIC8vIHRyaWdnZXJlZCBmaXJzdCBvdGhlciBvbmVzIGdldCBza2lwcGVkIG9uIGluaXRpYWwgc3Vic2NyaXB0aW9uc1xuICAgICAgICAgICAgY29uc3QgcHVibGlzaGVkVHJhY2tzU3Vic2NyaXB0aW9uID0gYm91bmRQYXJ0aWNpcGFudC5pc0xvY2FsUGFydGljaXBhbnRcbiAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICA6IHBhcnRpY2lwYW50JFxuICAgICAgICAgICAgICAgICAgICAucGlwZShkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCgncHVibGlzaGVkVHJhY2tzJyksIG1hcCQxKChwKSA9PiBwLnB1Ymxpc2hlZFRyYWNrcy5pbmNsdWRlcyh0cmFja1R5cGUgPT09ICd2aWRlb1RyYWNrJ1xuICAgICAgICAgICAgICAgICAgICA/IFRyYWNrVHlwZS5WSURFT1xuICAgICAgICAgICAgICAgICAgICA6IFRyYWNrVHlwZS5TQ1JFRU5fU0hBUkUpKSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSlcbiAgICAgICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoaXNQdWJsaXNoaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1B1Ymxpc2hpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBwYXJ0aWNpcGFudCBqdXN0IHN0YXJ0ZWQgdG8gcHVibGlzaCBhIHRyYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VHJhY2tXaXRoRGltZW5zaW9ucyhEZWJvdW5jZVR5cGUuRkFTVCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB2aWRlb0VsZW1lbnQuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiB2aWRlb0VsZW1lbnQuY2xpZW50SGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgcGFydGljaXBhbnQganVzdCBzdG9wcGVkIHB1Ymxpc2hpbmcgYSB0cmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFRyYWNrV2l0aERpbWVuc2lvbnMoRGVib3VuY2VUeXBlLkZBU1QsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5hdXRvcGxheSA9IHRydWU7XG4gICAgICAgICAgICB2aWRlb0VsZW1lbnQucGxheXNJbmxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgLy8gZXhwbGljaXRseSBtYXJraW5nIHRoZSBlbGVtZW50IGFzIG11dGVkIHdpbGwgYWxsb3cgYXV0b3BsYXkgdG8gd29ya1xuICAgICAgICAgICAgLy8gd2l0aG91dCBwcmlvciB1c2VyIGludGVyYWN0aW9uOlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvTWVkaWEvQXV0b3BsYXlfZ3VpZGVcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5tdXRlZCA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCBzdHJlYW1TdWJzY3JpcHRpb24gPSBwYXJ0aWNpcGFudCRcbiAgICAgICAgICAgICAgICAucGlwZShkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCh0cmFja1R5cGUgPT09ICd2aWRlb1RyYWNrJyA/ICd2aWRlb1N0cmVhbScgOiAnc2NyZWVuU2hhcmVTdHJlYW0nKSlcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKChwKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gdHJhY2tUeXBlID09PSAndmlkZW9UcmFjaycgPyBwLnZpZGVvU3RyZWFtIDogcC5zY3JlZW5TaGFyZVN0cmVhbTtcbiAgICAgICAgICAgICAgICBpZiAodmlkZW9FbGVtZW50LnNyY09iamVjdCA9PT0gc291cmNlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgdmlkZW9FbGVtZW50LnNyY09iamVjdCA9IHNvdXJjZSA/PyBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChpc1NhZmFyaSgpIHx8IGlzRmlyZWZveCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9FbGVtZW50LnNyY09iamVjdCA9IHNvdXJjZSA/PyBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9FbGVtZW50LnBsYXkoKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCd3YXJuJywgYEZhaWxlZCB0byBwbGF5IHN0cmVhbWAsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBhZGQgZXh0cmEgZGVsYXkgdW50aWwgd2UgYXR0ZW1wdCB0byBmb3JjZS1wbGF5XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgcGFydGljaXBhbnQncyBtZWRpYSBzdHJlYW0gaW4gRmlyZWZveCBhbmQgU2FmYXJpLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXMgdGhleSBzZWVtIHRvIGhhdmUgc29tZSB0aW1pbmcgaXNzdWVzXG4gICAgICAgICAgICAgICAgICAgIH0sIDI1KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdFRyYWNrV2l0aERpbWVuc2lvbnMoRGVib3VuY2VUeXBlLkZBU1QsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgdmlld3BvcnRWaXNpYmlsaXR5U3RhdGVTdWJzY3JpcHRpb24/LnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgcHVibGlzaGVkVHJhY2tzU3Vic2NyaXB0aW9uPy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIHN0cmVhbVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIHJlc2l6ZU9ic2VydmVyPy5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQmluZHMgYSBET00gPGF1ZGlvPiBlbGVtZW50IHRvIHRoZSBnaXZlbiBzZXNzaW9uIGlkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIG1ha2Ugc3VyZSB0aGF0IHRoZSBhdWRpbyBlbGVtZW50IHdpbGxcbiAgICAgICAgICogcGxheSB0aGUgY29ycmVjdCBhdWRpbyBzdHJlYW0gZm9yIHRoZSBnaXZlbiBzZXNzaW9uIGlkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gYXVkaW9FbGVtZW50IHRoZSBhdWRpbyBlbGVtZW50IHRvIGJpbmQgdG8uXG4gICAgICAgICAqIEBwYXJhbSBzZXNzaW9uSWQgdGhlIHNlc3Npb24gaWQuXG4gICAgICAgICAqIEBwYXJhbSB0cmFja1R5cGUgdGhlIGtpbmQgb2YgYXVkaW8uXG4gICAgICAgICAqIEByZXR1cm5zIGEgY2xlYW51cCBmdW5jdGlvbiB0aGF0IHdpbGwgdW5iaW5kIHRoZSBhdWRpbyBlbGVtZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5iaW5kQXVkaW9FbGVtZW50ID0gKGF1ZGlvRWxlbWVudCwgc2Vzc2lvbklkLCB0cmFja1R5cGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnRpY2lwYW50ID0gdGhpcy5jYWxsLnN0YXRlLmZpbmRQYXJ0aWNpcGFudEJ5U2Vzc2lvbklkKHNlc3Npb25JZCk7XG4gICAgICAgICAgICBpZiAoIXBhcnRpY2lwYW50IHx8IHBhcnRpY2lwYW50LmlzTG9jYWxQYXJ0aWNpcGFudClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBwYXJ0aWNpcGFudCQgPSB0aGlzLmNhbGwuc3RhdGUucGFydGljaXBhbnRzJC5waXBlKG1hcCQxKChwYXJ0aWNpcGFudHMpID0+IHBhcnRpY2lwYW50cy5maW5kKChwKSA9PiBwLnNlc3Npb25JZCA9PT0gc2Vzc2lvbklkKSksIHRha2VXaGlsZSgocCkgPT4gISFwKSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSwgc2hhcmVSZXBsYXkoeyBidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZSB9KSk7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVNZWRpYVN0cmVhbVN1YnNjcmlwdGlvbiA9IHBhcnRpY2lwYW50JFxuICAgICAgICAgICAgICAgIC5waXBlKGRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkKHRyYWNrVHlwZSA9PT0gJ3NjcmVlblNoYXJlQXVkaW9UcmFjaydcbiAgICAgICAgICAgICAgICA/ICdzY3JlZW5TaGFyZUF1ZGlvU3RyZWFtJ1xuICAgICAgICAgICAgICAgIDogJ2F1ZGlvU3RyZWFtJykpXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgocCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IHRyYWNrVHlwZSA9PT0gJ3NjcmVlblNoYXJlQXVkaW9UcmFjaydcbiAgICAgICAgICAgICAgICAgICAgPyBwLnNjcmVlblNoYXJlQXVkaW9TdHJlYW1cbiAgICAgICAgICAgICAgICAgICAgOiBwLmF1ZGlvU3RyZWFtO1xuICAgICAgICAgICAgICAgIGlmIChhdWRpb0VsZW1lbnQuc3JjT2JqZWN0ID09PSBzb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXVkaW9FbGVtZW50LnNyY09iamVjdCA9IHNvdXJjZSA/PyBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXVkaW9FbGVtZW50LnNyY09iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW9FbGVtZW50LnBsYXkoKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCd3YXJuJywgYEZhaWxlZCB0byBwbGF5IHN0cmVhbWAsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhdWRpbyBvdXRwdXQgZGV2aWNlIHNoYWxsIGJlIHNldCBhZnRlciB0aGUgYXVkaW8gZWxlbWVudCBpcyBwbGF5ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSwgdGhlIGJyb3dzZXIgd2lsbCBub3QgcGljayBpdCB1cCwgYW5kIHdpbGwgYWx3YXlzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwbGF5IGF1ZGlvIHRocm91Z2ggdGhlIHN5c3RlbSdzIGRlZmF1bHQgZGV2aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHNlbGVjdGVkRGV2aWNlIH0gPSB0aGlzLmNhbGwuc3BlYWtlci5zdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZERldmljZSAmJiAnc2V0U2lua0lkJyBpbiBhdWRpb0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHNldFNpbmtJZCBpcyBub3QgeWV0IGluIHRoZSBsaWJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdWRpb0VsZW1lbnQuc2V0U2lua0lkKHNlbGVjdGVkRGV2aWNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBzaW5rSWRTdWJzY3JpcHRpb24gPSAhKCdzZXRTaW5rSWQnIGluIGF1ZGlvRWxlbWVudClcbiAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICA6IHRoaXMuY2FsbC5zcGVha2VyLnN0YXRlLnNlbGVjdGVkRGV2aWNlJC5zdWJzY3JpYmUoKGRldmljZUlkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXZpY2VJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBzZXRTaW5rSWQgaXMgbm90IHlldCBpbiB0aGUgbGliXG4gICAgICAgICAgICAgICAgICAgICAgICBhdWRpb0VsZW1lbnQuc2V0U2lua0lkKGRldmljZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3Qgdm9sdW1lU3Vic2NyaXB0aW9uID0gY29tYmluZUxhdGVzdChbXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxsLnNwZWFrZXIuc3RhdGUudm9sdW1lJCxcbiAgICAgICAgICAgICAgICBwYXJ0aWNpcGFudCQucGlwZShkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCgnYXVkaW9Wb2x1bWUnKSksXG4gICAgICAgICAgICBdKS5zdWJzY3JpYmUoKFt2b2x1bWUsIHBdKSA9PiB7XG4gICAgICAgICAgICAgICAgYXVkaW9FbGVtZW50LnZvbHVtZSA9IHAuYXVkaW9Wb2x1bWUgPz8gdm9sdW1lO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhdWRpb0VsZW1lbnQuYXV0b3BsYXkgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBzaW5rSWRTdWJzY3JpcHRpb24/LnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgdm9sdW1lU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgdXBkYXRlTWVkaWFTdHJlYW1TdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2FsbCA9IGNhbGw7XG4gICAgfVxufVxuXG4vKipcbiAqIFN0b3JlcyB0aGUgcGVybWlzc2lvbnMgZm9yIHRoZSBjdXJyZW50IHVzZXIgYW5kIGV4cG9zZXNcbiAqIGEgZmV3IGhlbHBlciBtZXRob2RzIHdoaWNoIG1ha2UgaXQgZWFzaWVyIHRvIHdvcmsgd2l0aCBwZXJtaXNzaW9ucy5cbiAqXG4gKiBUaGlzIGlzIGFuIGludGVybmFsIGNsYXNzIG1lYW50IHRvIGJlIHVzZWQgaW4gY29tYmluYXRpb24gd2l0aFxuICogYSB7QGxpbmsgQ2FsbH0gaW5zdGFuY2UuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIFBlcm1pc3Npb25zQ29udGV4dCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucGVybWlzc2lvbnMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIHBlcm1pc3Npb25zIGZvciB0aGUgY3VycmVudCB1c2VyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gcGVybWlzc2lvbnMgdGhlIHBlcm1pc3Npb25zIHRvIHNldC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2V0UGVybWlzc2lvbnMgPSAocGVybWlzc2lvbnMpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGVybWlzc2lvbnMgPSBwZXJtaXNzaW9ucyB8fCBbXTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIHNldHRpbmdzIGZvciB0aGUgYm91bmQgY2FsbC5cbiAgICAgICAgICogQHBhcmFtIHNldHRpbmdzXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNldENhbGxTZXR0aW5ncyA9IChzZXR0aW5ncykgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2tzIGlmIHRoZSBjdXJyZW50IHVzZXIgaGFzIGEgc3BlY2lmaWMgcGVybWlzc2lvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHBlcm1pc3Npb24gdGhlIHBlcm1pc3Npb24gdG8gY2hlY2sgZm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5oYXNQZXJtaXNzaW9uID0gKHBlcm1pc3Npb24pID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBlcm1pc3Npb25zLmluY2x1ZGVzKHBlcm1pc3Npb24pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2tzIGlmIHRoZSBjdXJyZW50IHVzZXIgY2FuIHJlcXVlc3QgYSBzcGVjaWZpYyBwZXJtaXNzaW9uXG4gICAgICAgICAqIHdpdGhpbiB0aGUgY2FsbC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHBlcm1pc3Npb24gdGhlIHBlcm1pc3Npb24gdG8gY2hlY2sgZm9yLlxuICAgICAgICAgKiBAcGFyYW0gc2V0dGluZ3MgdGhlIGNhbGwgc2V0dGluZ3MgdG8gY2hlY2sgYWdhaW5zdCAob3B0aW9uYWwpLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jYW5SZXF1ZXN0ID0gKHBlcm1pc3Npb24sIHNldHRpbmdzID0gdGhpcy5zZXR0aW5ncykgPT4ge1xuICAgICAgICAgICAgaWYgKCFzZXR0aW5ncylcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCB7IGF1ZGlvLCB2aWRlbywgc2NyZWVuc2hhcmluZyB9ID0gc2V0dGluZ3M7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcm1pc3Npb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlIE93bkNhcGFiaWxpdHkuU0VORF9BVURJTzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF1ZGlvLmFjY2Vzc19yZXF1ZXN0X2VuYWJsZWQ7XG4gICAgICAgICAgICAgICAgY2FzZSBPd25DYXBhYmlsaXR5LlNFTkRfVklERU86XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2aWRlby5hY2Nlc3NfcmVxdWVzdF9lbmFibGVkO1xuICAgICAgICAgICAgICAgIGNhc2UgT3duQ2FwYWJpbGl0eS5TQ1JFRU5TSEFSRTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjcmVlbnNoYXJpbmcuYWNjZXNzX3JlcXVlc3RfZW5hYmxlZDtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBjYWxsIHR5cGUuXG4gKi9cbmNsYXNzIENhbGxUeXBlIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IENhbGxUeXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5hbWUgdGhlIG5hbWUgb2YgdGhlIGNhbGwgdHlwZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB0aGUgb3B0aW9ucyBmb3IgdGhlIGNhbGwgdHlwZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBvcHRpb25zID0ge1xuICAgICAgICBzb3J0UGFydGljaXBhbnRzQnk6IGRlZmF1bHRTb3J0UHJlc2V0LFxuICAgIH0pIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG59XG4vKipcbiAqIEEgcmVnaXN0cnkgb2Yge0BsaW5rIENhbGxUeXBlfXMuXG4gKiBZb3UgY2FuIHJlZ2lzdGVyIGFuZCB1bnJlZ2lzdGVyIGNhbGwgdHlwZXMuXG4gKi9cbmNsYXNzIENhbGxUeXBlc1JlZ2lzdHJ5IHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IENhbGxUeXBlc1JlZ2lzdHJ5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNhbGxUeXBlcyB0aGUgaW5pdGlhbCBjYWxsIHR5cGVzIHRvIHJlZ2lzdGVyLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNhbGxUeXBlcykge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVnaXN0ZXJzIGEgbmV3IGNhbGwgdHlwZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGNhbGxUeXBlIHRoZSBjYWxsIHR5cGUgdG8gcmVnaXN0ZXIuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlZ2lzdGVyID0gKGNhbGxUeXBlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNhbGxUeXBlc1tjYWxsVHlwZS5uYW1lXSA9IGNhbGxUeXBlO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogVW5yZWdpc3RlcnMgYSBjYWxsIHR5cGUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBuYW1lIHRoZSBuYW1lIG9mIHRoZSBjYWxsIHR5cGUgdG8gdW5yZWdpc3Rlci5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudW5yZWdpc3RlciA9IChuYW1lKSA9PiB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5jYWxsVHlwZXNbbmFtZV07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIGEgY2FsbCB0eXBlIGJ5IG5hbWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBuYW1lIHRoZSBuYW1lIG9mIHRoZSBjYWxsIHR5cGUgdG8gZ2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nZXQgPSAobmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNhbGxUeXBlc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0ZXIobmV3IENhbGxUeXBlKG5hbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbGxUeXBlc1tuYW1lXTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jYWxsVHlwZXMgPSBjYWxsVHlwZXMucmVkdWNlKChhY2MsIGNhbGxUeXBlKSA9PiB7XG4gICAgICAgICAgICBhY2NbY2FsbFR5cGUubmFtZV0gPSBjYWxsVHlwZTtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9XG59XG4vKipcbiAqIFRoZSBkZWZhdWx0IGNhbGwgdHlwZXMgcmVnaXN0cnkuXG4gKiBZb3UgY2FuIHVzZSB0aGlzIGluc3RhbmNlIHRvIGR5bmFtaWNhbGx5IHJlZ2lzdGVyIGFuZCB1bnJlZ2lzdGVyIGNhbGwgdHlwZXMuXG4gKi9cbmNvbnN0IENhbGxUeXBlcyA9IG5ldyBDYWxsVHlwZXNSZWdpc3RyeShbXG4gICAgbmV3IENhbGxUeXBlKCdkZWZhdWx0Jywge1xuICAgICAgICBzb3J0UGFydGljaXBhbnRzQnk6IGRlZmF1bHRTb3J0UHJlc2V0LFxuICAgIH0pLFxuICAgIG5ldyBDYWxsVHlwZSgnZGV2ZWxvcG1lbnQnLCB7XG4gICAgICAgIHNvcnRQYXJ0aWNpcGFudHNCeTogZGVmYXVsdFNvcnRQcmVzZXQsXG4gICAgfSksXG4gICAgbmV3IENhbGxUeXBlKCdsaXZlc3RyZWFtJywge1xuICAgICAgICBzb3J0UGFydGljaXBhbnRzQnk6IGxpdmVzdHJlYW1PckF1ZGlvUm9vbVNvcnRQcmVzZXQsXG4gICAgfSksXG4gICAgbmV3IENhbGxUeXBlKCdhdWRpb19yb29tJywge1xuICAgICAgICBzb3J0UGFydGljaXBhbnRzQnk6IGxpdmVzdHJlYW1PckF1ZGlvUm9vbVNvcnRQcmVzZXQsXG4gICAgfSksXG5dKTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgbGlzdCBvZiBhdmFpbGFibGUgZGV2aWNlc1xuICogdGhhdCBtZWV0IHRoZSBnaXZlbiBjb25zdHJhaW50cy5cbiAqXG4gKiBAcGFyYW0gY29uc3RyYWludHMgdGhlIGNvbnN0cmFpbnRzIHRvIHVzZSB3aGVuIHJlcXVlc3RpbmcgdGhlIGRldmljZXMuXG4gKiBAcGFyYW0ga2luZCB0aGUga2luZCBvZiBkZXZpY2VzIHRvIGVudW1lcmF0ZS5cbiAqL1xuY29uc3QgZ2V0RGV2aWNlcyA9IChjb25zdHJhaW50cywga2luZCkgPT4ge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZSgoc3Vic2NyaWJlcikgPT4ge1xuICAgICAgICBjb25zdCBlbnVtZXJhdGUgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgZGV2aWNlcyA9IGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpO1xuICAgICAgICAgICAgLy8gc29tZSBicm93c2VycyByZXBvcnQgZW1wdHkgZGV2aWNlIGxhYmVscyAoRmlyZWZveCkuXG4gICAgICAgICAgICAvLyBpbiB0aGF0IGNhc2UsIHdlIG5lZWQgdG8gcmVxdWVzdCBwZXJtaXNzaW9ucyAodmlhIGdldFVzZXJNZWRpYSlcbiAgICAgICAgICAgIC8vIHRvIGJlIGFibGUgdG8gZ2V0IHRoZSBkZXZpY2UgbGFiZWxzXG4gICAgICAgICAgICBjb25zdCBuZWVkc0dldFVzZXJNZWRpYSA9IGRldmljZXMuc29tZSgoZGV2aWNlKSA9PiBkZXZpY2Uua2luZCA9PT0ga2luZCAmJiBkZXZpY2UubGFiZWwgPT09ICcnKTtcbiAgICAgICAgICAgIGlmIChuZWVkc0dldFVzZXJNZWRpYSkge1xuICAgICAgICAgICAgICAgIGxldCBtZWRpYVN0cmVhbTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBtZWRpYVN0cmVhbSA9IGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgZGV2aWNlcyA9IGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lZGlhU3RyZWFtKVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcG9zZU9mTWVkaWFTdHJlYW0obWVkaWFTdHJlYW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZXZpY2VzO1xuICAgICAgICB9O1xuICAgICAgICBlbnVtZXJhdGUoKVxuICAgICAgICAgICAgLnRoZW4oKGRldmljZXMpID0+IHtcbiAgICAgICAgICAgIC8vIG5vdGlmeSBzdWJzY3JpYmVycyBhbmQgY29tcGxldGVcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChkZXZpY2VzKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvZ2dlciA9IGdldExvZ2dlcihbJ2RldmljZXMnXSk7XG4gICAgICAgICAgICBsb2dnZXIoJ2Vycm9yJywgJ0ZhaWxlZCB0byBlbnVtZXJhdGUgZGV2aWNlcycsIGVycm9yKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG4vKipcbiAqIFtUZWxscyBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBhdWRpbyBvdXRwdXQgY2hhbmdlIG9uICdhdWRpbycgZWxlbWVudHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MTWVkaWFFbGVtZW50L3NldFNpbmtJZCkuXG4gKlxuICogICovXG5jb25zdCBjaGVja0lmQXVkaW9PdXRwdXRDaGFuZ2VTdXBwb3J0ZWQgPSAoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcbiAgICByZXR1cm4gJ3NldFNpbmtJZCcgaW4gZWxlbWVudDtcbn07XG4vKipcbiAqIFRoZSBkZWZhdWx0IGNvbnN0cmFpbnRzIHVzZWQgdG8gcmVxdWVzdCBhdWRpbyBkZXZpY2VzLlxuICovXG5jb25zdCBhdWRpb0RldmljZUNvbnN0cmFpbnRzID0ge1xuICAgIGF1ZGlvOiB7XG4gICAgICAgIGF1dG9HYWluQ29udHJvbDogdHJ1ZSxcbiAgICAgICAgbm9pc2VTdXBwcmVzc2lvbjogdHJ1ZSxcbiAgICAgICAgZWNob0NhbmNlbGxhdGlvbjogdHJ1ZSxcbiAgICB9LFxufTtcbi8qKlxuICogVGhlIGRlZmF1bHQgY29uc3RyYWludHMgdXNlZCB0byByZXF1ZXN0IHZpZGVvIGRldmljZXMuXG4gKi9cbmNvbnN0IHZpZGVvRGV2aWNlQ29uc3RyYWludHMgPSB7XG4gICAgdmlkZW86IHtcbiAgICAgICAgd2lkdGg6IDEyODAsXG4gICAgICAgIGhlaWdodDogNzIwLFxuICAgIH0sXG59O1xuLyoqXG4gKiBDcmVhdGVzIGEgbWVtb2l6ZWQgb2JzZXJ2YWJsZSBpbnN0YW5jZVxuICogdGhhdCB3aWxsIGJlIGNyZWF0ZWQgb25seSBvbmNlIGFuZCBzaGFyZWQgYmV0d2VlbiBhbGwgY2FsbGVycy5cbiAqXG4gKiBAcGFyYW0gY3JlYXRlIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIGFuIE9ic2VydmFibGUuXG4gKi9cbmNvbnN0IG1lbW9pemVkT2JzZXJ2YWJsZSA9IChjcmVhdGUpID0+IHtcbiAgICBsZXQgbWVtb2l6ZWQ7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWYgKCFtZW1vaXplZClcbiAgICAgICAgICAgIG1lbW9pemVkID0gY3JlYXRlKCk7XG4gICAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICB9O1xufTtcbmNvbnN0IGdldERldmljZUNoYW5nZU9ic2VydmVyID0gbWVtb2l6ZWRPYnNlcnZhYmxlKCgpID0+IHtcbiAgICAvLyBBdWRpbyBhbmQgdmlkZW8gZGV2aWNlcyBhcmUgcmVxdWVzdGVkIGluIHR3byBzZXBhcmF0ZSByZXF1ZXN0cy5cbiAgICAvLyBUaGF0IHdheSwgdXNlcnMgd2lsbCBiZSBwcmVzZW50ZWQgd2l0aCB0d28gc2VwYXJhdGUgcHJvbXB0c1xuICAgIC8vIC0+IHRoZXkgY2FuIGdpdmUgYWNjZXNzIHRvIGp1c3QgY2FtZXJhLCBvciBqdXN0IG1pY3JvcGhvbmVcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoKHN1YnNjcmliZXIpID0+IHtcbiAgICAgICAgLy8gJ2FkZEV2ZW50TGlzdGVuZXInIGlzIG5vdCBhdmFpbGFibGUgaW4gUmVhY3QgTmF0aXZlXG4gICAgICAgIGlmICghbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5hZGRFdmVudExpc3RlbmVyKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBub3RpZnkgPSAoKSA9PiBzdWJzY3JpYmVyLm5leHQoKTtcbiAgICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2VjaGFuZ2UnLCBub3RpZnkpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5yZW1vdmVFdmVudExpc3RlbmVyKCdkZXZpY2VjaGFuZ2UnLCBub3RpZnkpO1xuICAgICAgICB9O1xuICAgIH0pLnBpcGUoZGVib3VuY2VUaW1lKDUwMCksIGNvbmNhdE1hcCgoKSA9PiBmcm9tKG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpKSksIHNoYXJlUmVwbGF5KDEpKTtcbn0pO1xuY29uc3QgZ2V0QXVkaW9EZXZpY2VzT2JzZXJ2ZXIgPSBtZW1vaXplZE9ic2VydmFibGUoKCkgPT4ge1xuICAgIHJldHVybiBtZXJnZShnZXREZXZpY2VzKGF1ZGlvRGV2aWNlQ29uc3RyYWludHMsICdhdWRpb2lucHV0JyksIGdldERldmljZUNoYW5nZU9ic2VydmVyKCkpLnBpcGUoc2hhcmVSZXBsYXkoMSkpO1xufSk7XG5jb25zdCBnZXRBdWRpb091dHB1dERldmljZXNPYnNlcnZlciA9IG1lbW9pemVkT2JzZXJ2YWJsZSgoKSA9PiB7XG4gICAgcmV0dXJuIG1lcmdlKGdldERldmljZXMoYXVkaW9EZXZpY2VDb25zdHJhaW50cywgJ2F1ZGlvb3V0cHV0JyksIGdldERldmljZUNoYW5nZU9ic2VydmVyKCkpLnBpcGUoc2hhcmVSZXBsYXkoMSkpO1xufSk7XG5jb25zdCBnZXRWaWRlb0RldmljZXNPYnNlcnZlciA9IG1lbW9pemVkT2JzZXJ2YWJsZSgoKSA9PiB7XG4gICAgcmV0dXJuIG1lcmdlKGdldERldmljZXModmlkZW9EZXZpY2VDb25zdHJhaW50cywgJ3ZpZGVvaW5wdXQnKSwgZ2V0RGV2aWNlQ2hhbmdlT2JzZXJ2ZXIoKSkucGlwZShzaGFyZVJlcGxheSgxKSk7XG59KTtcbi8qKlxuICogUHJvbXB0cyB0aGUgdXNlciBmb3IgYSBwZXJtaXNzaW9uIHRvIHVzZSBhdWRpbyBkZXZpY2VzIChpZiBub3QgYWxyZWFkeSBncmFudGVkKSBhbmQgbGlzdHMgdGhlIGF2YWlsYWJsZSAnYXVkaW9pbnB1dCcgZGV2aWNlcywgaWYgZGV2aWNlcyBhcmUgYWRkZWQvcmVtb3ZlZCB0aGUgbGlzdCBpcyB1cGRhdGVkLlxuICovXG5jb25zdCBnZXRBdWRpb0RldmljZXMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGdldEF1ZGlvRGV2aWNlc09ic2VydmVyKCkucGlwZShtYXAkMSgodmFsdWVzKSA9PiB2YWx1ZXMuZmlsdGVyKChkKSA9PiBkLmtpbmQgPT09ICdhdWRpb2lucHV0JykpKTtcbn07XG4vKipcbiAqIFByb21wdHMgdGhlIHVzZXIgZm9yIGEgcGVybWlzc2lvbiB0byB1c2UgdmlkZW8gZGV2aWNlcyAoaWYgbm90IGFscmVhZHkgZ3JhbnRlZCkgYW5kIGxpc3RzIHRoZSBhdmFpbGFibGUgJ3ZpZGVvaW5wdXQnIGRldmljZXMsIGlmIGRldmljZXMgYXJlIGFkZGVkL3JlbW92ZWQgdGhlIGxpc3QgaXMgdXBkYXRlZC5cbiAqL1xuY29uc3QgZ2V0VmlkZW9EZXZpY2VzID0gKCkgPT4ge1xuICAgIHJldHVybiBnZXRWaWRlb0RldmljZXNPYnNlcnZlcigpLnBpcGUobWFwJDEoKHZhbHVlcykgPT4gdmFsdWVzLmZpbHRlcigoZCkgPT4gZC5raW5kID09PSAndmlkZW9pbnB1dCcpKSk7XG59O1xuLyoqXG4gKiBQcm9tcHRzIHRoZSB1c2VyIGZvciBhIHBlcm1pc3Npb24gdG8gdXNlIGF1ZGlvIGRldmljZXMgKGlmIG5vdCBhbHJlYWR5IGdyYW50ZWQpIGFuZCBsaXN0cyB0aGUgYXZhaWxhYmxlICdhdWRpb291dHB1dCcgZGV2aWNlcywgaWYgZGV2aWNlcyBhcmUgYWRkZWQvcmVtb3ZlZCB0aGUgbGlzdCBpcyB1cGRhdGVkLiBTZWxlY3RpbmcgJ2F1ZGlvb3V0cHV0JyBkZXZpY2Ugb25seSBtYWtlcyBzZW5zZSBpZiBbdGhlIGJyb3dzZXIgaGFzIHN1cHBvcnQgZm9yIGNoYW5naW5nIGF1ZGlvIG91dHB1dCBvbiAnYXVkaW8nIGVsZW1lbnRzXSgjY2hlY2tpZmF1ZGlvb3V0cHV0Y2hhbmdlc3VwcG9ydGVkKVxuICovXG5jb25zdCBnZXRBdWRpb091dHB1dERldmljZXMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGdldEF1ZGlvT3V0cHV0RGV2aWNlc09ic2VydmVyKCkucGlwZShtYXAkMSgodmFsdWVzKSA9PiB2YWx1ZXMuZmlsdGVyKChkKSA9PiBkLmtpbmQgPT09ICdhdWRpb291dHB1dCcpKSk7XG59O1xuY29uc3QgZ2V0U3RyZWFtID0gYXN5bmMgKGNvbnN0cmFpbnRzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgZ2V0TG9nZ2VyKFsnZGV2aWNlcyddKSgnZXJyb3InLCBgRmFpbGVkIGdldCB1c2VyIG1lZGlhYCwge1xuICAgICAgICAgICAgZXJyb3I6IGUsXG4gICAgICAgICAgICBjb25zdHJhaW50czogY29uc3RyYWludHMsXG4gICAgICAgIH0pO1xuICAgICAgICB0aHJvdyBlO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgYW4gYXVkaW8gbWVkaWEgc3RyZWFtIHRoYXQgZnVsZmlsbHMgdGhlIGdpdmVuIGNvbnN0cmFpbnRzLlxuICogSWYgbm8gY29uc3RyYWludHMgYXJlIHByb3ZpZGVkLCBpdCB1c2VzIHRoZSBicm93c2VyJ3MgZGVmYXVsdCBvbmVzLlxuICpcbiAqIEBhbmd1bGFyIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBbYERldmljZU1hbmFnZXJTZXJ2aWNlYF0oLi9EZXZpY2VNYW5hZ2VyU2VydmljZS5tZCkgZm9yIGEgaGlnaGVyIGxldmVsIEFQSSwgdXNlIHRoaXMgbG93LWxldmVsIG1ldGhvZCBvbmx5IGlmIHRoZSBgRGV2aWNlTWFuYWdlclNlcnZpY2VgIGRvZXNuJ3Qgc3VpdCB5b3VyIHJlcXVpcmVtZW50cy5cbiAqIEBwYXJhbSB0cmFja0NvbnN0cmFpbnRzIHRoZSBjb25zdHJhaW50cyB0byB1c2Ugd2hlbiByZXF1ZXN0aW5nIHRoZSBzdHJlYW0uXG4gKiBAcmV0dXJucyB0aGUgbmV3IGBNZWRpYVN0cmVhbWAgZnVsZmlsbGluZyB0aGUgZ2l2ZW4gY29uc3RyYWludHMuXG4gKi9cbmNvbnN0IGdldEF1ZGlvU3RyZWFtID0gYXN5bmMgKHRyYWNrQ29uc3RyYWludHMpID0+IHtcbiAgICBjb25zdCBjb25zdHJhaW50cyA9IHtcbiAgICAgICAgYXVkaW86IHtcbiAgICAgICAgICAgIC4uLmF1ZGlvRGV2aWNlQ29uc3RyYWludHMuYXVkaW8sXG4gICAgICAgICAgICAuLi50cmFja0NvbnN0cmFpbnRzLFxuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIGdldFN0cmVhbShjb25zdHJhaW50cyk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIGEgdmlkZW8gbWVkaWEgc3RyZWFtIHRoYXQgZnVsZmlsbHMgdGhlIGdpdmVuIGNvbnN0cmFpbnRzLlxuICogSWYgbm8gY29uc3RyYWludHMgYXJlIHByb3ZpZGVkLCBpdCB1c2VzIHRoZSBicm93c2VyJ3MgZGVmYXVsdCBvbmVzLlxuICpcbiAqIEBhbmd1bGFyIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBbYERldmljZU1hbmFnZXJTZXJ2aWNlYF0oLi9EZXZpY2VNYW5hZ2VyU2VydmljZS5tZCkgZm9yIGEgaGlnaGVyIGxldmVsIEFQSSwgdXNlIHRoaXMgbG93LWxldmVsIG1ldGhvZCBvbmx5IGlmIHRoZSBgRGV2aWNlTWFuYWdlclNlcnZpY2VgIGRvZXNuJ3Qgc3VpdCB5b3VyIHJlcXVpcmVtZW50cy5cbiAqIEBwYXJhbSB0cmFja0NvbnN0cmFpbnRzIHRoZSBjb25zdHJhaW50cyB0byB1c2Ugd2hlbiByZXF1ZXN0aW5nIHRoZSBzdHJlYW0uXG4gKiBAcmV0dXJucyBhIG5ldyBgTWVkaWFTdHJlYW1gIGZ1bGZpbGxpbmcgdGhlIGdpdmVuIGNvbnN0cmFpbnRzLlxuICovXG5jb25zdCBnZXRWaWRlb1N0cmVhbSA9IGFzeW5jICh0cmFja0NvbnN0cmFpbnRzKSA9PiB7XG4gICAgY29uc3QgY29uc3RyYWludHMgPSB7XG4gICAgICAgIHZpZGVvOiB7XG4gICAgICAgICAgICAuLi52aWRlb0RldmljZUNvbnN0cmFpbnRzLnZpZGVvLFxuICAgICAgICAgICAgLi4udHJhY2tDb25zdHJhaW50cyxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBnZXRTdHJlYW0oY29uc3RyYWludHMpO1xufTtcbi8qKlxuICogUHJvbXB0cyB0aGUgdXNlciBmb3IgYSBwZXJtaXNzaW9uIHRvIHNoYXJlIGEgc2NyZWVuLlxuICogSWYgdGhlIHVzZXIgZ3JhbnRzIHRoZSBwZXJtaXNzaW9uLCBhIHNjcmVlbiBzaGFyaW5nIHN0cmVhbSBpcyByZXR1cm5lZC4gVGhyb3dzIG90aGVyd2lzZS5cbiAqXG4gKiBUaGUgY2FsbGVycyBvZiB0aGlzIEFQSSBhcmUgcmVzcG9uc2libGUgdG8gaGFuZGxlIHRoZSBwb3NzaWJsZSBlcnJvcnMuXG4gKlxuICogQGFuZ3VsYXIgSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIFtgRGV2aWNlTWFuYWdlclNlcnZpY2VgXSguL0RldmljZU1hbmFnZXJTZXJ2aWNlLm1kKSBmb3IgYSBoaWdoZXIgbGV2ZWwgQVBJLCB1c2UgdGhpcyBsb3ctbGV2ZWwgbWV0aG9kIG9ubHkgaWYgdGhlIGBEZXZpY2VNYW5hZ2VyU2VydmljZWAgZG9lc24ndCBzdWl0IHlvdXIgcmVxdWlyZW1lbnRzLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIGFueSBhZGRpdGlvbmFsIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgW2BnZXREaXNwbGF5TWVkaWFgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTWVkaWFEZXZpY2VzL2dldERpc3BsYXlNZWRpYSkgQVBJLlxuICovXG5jb25zdCBnZXRTY3JlZW5TaGFyZVN0cmVhbSA9IGFzeW5jIChvcHRpb25zKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0RGlzcGxheU1lZGlhKHtcbiAgICAgICAgICAgIHZpZGVvOiB0cnVlLFxuICAgICAgICAgICAgYXVkaW86IHtcbiAgICAgICAgICAgICAgICBjaGFubmVsQ291bnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgaWRlYWw6IDIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlY2hvQ2FuY2VsbGF0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhdXRvR2FpbkNvbnRyb2w6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG5vaXNlU3VwcHJlc3Npb246IGZhbHNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBub3QgcHJlc2VudCBpbiB0eXBlcyB5ZXRcbiAgICAgICAgICAgIHN5c3RlbUF1ZGlvOiAnaW5jbHVkZScsXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgZ2V0TG9nZ2VyKFsnZGV2aWNlcyddKSgnZXJyb3InLCAnRmFpbGVkIHRvIGdldCBzY3JlZW4gc2hhcmUgc3RyZWFtJywgZSk7XG4gICAgICAgIHRocm93IGU7XG4gICAgfVxufTtcbmNvbnN0IGRldmljZUlkcyQgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICE9PSAndW5kZWZpbmVkJ1xuICAgID8gbWVtb2l6ZWRPYnNlcnZhYmxlKCgpID0+IG1lcmdlKGZyb20obmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCkpLCBnZXREZXZpY2VDaGFuZ2VPYnNlcnZlcigpKS5waXBlKHNoYXJlUmVwbGF5KDEpKSkoKVxuICAgIDogdW5kZWZpbmVkO1xuLyoqXG4gKiBEZWFjdGl2YXRlcyBNZWRpYVN0cmVhbSAoc3RvcHMgYW5kIHJlbW92ZXMgdHJhY2tzKSB0byBiZSBsYXRlciBnYXJiYWdlIGNvbGxlY3RlZFxuICpcbiAqIEBwYXJhbSBzdHJlYW0gTWVkaWFTdHJlYW1cbiAqIEByZXR1cm5zIHZvaWRcbiAqL1xuY29uc3QgZGlzcG9zZU9mTWVkaWFTdHJlYW0gPSAoc3RyZWFtKSA9PiB7XG4gICAgaWYgKCFzdHJlYW0uYWN0aXZlKVxuICAgICAgICByZXR1cm47XG4gICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goKHRyYWNrKSA9PiB7XG4gICAgICAgIHRyYWNrLnN0b3AoKTtcbiAgICAgICAgc3RyZWFtLnJlbW92ZVRyYWNrKHRyYWNrKTtcbiAgICB9KTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHJlbGVhc2UoKSBpcyBwcmVzZW50IGluIHJlYWN0LW5hdGl2ZS13ZWJydGMgYW5kIG11c3QgYmUgY2FsbGVkIHRvIGRpc3Bvc2UgdGhlIHN0cmVhbVxuICAgIGlmICh0eXBlb2Ygc3RyZWFtLnJlbGVhc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICBzdHJlYW0ucmVsZWFzZSgpO1xuICAgIH1cbn07XG5cbmNsYXNzIElucHV0TWVkaWFEZXZpY2VNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcihjYWxsLCBzdGF0ZSwgdHJhY2tUeXBlKSB7XG4gICAgICAgIHRoaXMuY2FsbCA9IGNhbGw7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgdGhpcy50cmFja1R5cGUgPSB0cmFja1R5cGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBpZiB0cnVlLCBzdG9wcyB0aGUgbWVkaWEgc3RyZWFtIHdoZW4gY2FsbCBpcyBsZWZ0XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0b3BPbkxlYXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG4gICAgICAgIHRoaXMuaXNUcmFja1N0b3BwZWREdWVUb1RyYWNrRW5kID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVtb3ZlU3Vic2NyaXB0aW9ucyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKChzKSA9PiBzLnVuc3Vic2NyaWJlKCkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxvZ2dlciA9IGdldExvZ2dlcihbYCR7VHJhY2tUeXBlW3RyYWNrVHlwZV0udG9Mb3dlckNhc2UoKX0gbWFuYWdlcmBdKTtcbiAgICAgICAgaWYgKGRldmljZUlkcyQgJiZcbiAgICAgICAgICAgICFpc1JlYWN0TmF0aXZlKCkgJiZcbiAgICAgICAgICAgICh0aGlzLnRyYWNrVHlwZSA9PT0gVHJhY2tUeXBlLkFVRElPIHx8IHRoaXMudHJhY2tUeXBlID09PSBUcmFja1R5cGUuVklERU8pKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZURpc2Nvbm5lY3RlZE9yUmVwbGFjZWREZXZpY2VzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogTGlzdHMgdGhlIGF2YWlsYWJsZSBhdWRpby92aWRlbyBkZXZpY2VzXG4gICAgICpcbiAgICAgKiBOb3RlOiBJdCBwcm9tcHRzIHRoZSB1c2VyIGZvciBhIHBlcm1pc3Npb24gdG8gdXNlIGRldmljZXMgKGlmIG5vdCBhbHJlYWR5IGdyYW50ZWQpXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgd2lsbCBiZSB1cGRhdGVkIGlmIGEgZGV2aWNlIGlzIGNvbm5lY3RlZCBvciBkaXNjb25uZWN0ZWRcbiAgICAgKi9cbiAgICBsaXN0RGV2aWNlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGV2aWNlcygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydHMgc3RyZWFtLlxuICAgICAqL1xuICAgIGFzeW5jIGVuYWJsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuc3RhdHVzID09PSAnZW5hYmxlZCcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuZW5hYmxlUHJvbWlzZSA9IHRoaXMudW5tdXRlU3RyZWFtKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmVuYWJsZVByb21pc2U7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnNldFN0YXR1cygnZW5hYmxlZCcpO1xuICAgICAgICAgICAgdGhpcy5lbmFibGVQcm9taXNlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5lbmFibGVQcm9taXNlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcHMgb3IgcGF1c2VzIHRoZSBzdHJlYW0gYmFzZWQgb24gc3RhdGUuZGlzYWJsZU1vZGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmb3JjZVN0b3A9ZmFsc2VdIHdoZW4gdHJ1ZSwgc3RvcHMgdGhlIHRyYWNrcyByZWdhcmRsZXNzIG9mIHRoZSBzdGF0ZS5kaXNhYmxlTW9kZVxuICAgICAqL1xuICAgIGFzeW5jIGRpc2FibGUoZm9yY2VTdG9wID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5wcmV2U3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7XG4gICAgICAgIGlmICghZm9yY2VTdG9wICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBzdG9wVHJhY2tzID0gZm9yY2VTdG9wIHx8IHRoaXMuc3RhdGUuZGlzYWJsZU1vZGUgPT09ICdzdG9wLXRyYWNrcyc7XG4gICAgICAgIHRoaXMuZGlzYWJsZVByb21pc2UgPSB0aGlzLm11dGVTdHJlYW0oc3RvcFRyYWNrcyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmRpc2FibGVQcm9taXNlO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZXRTdGF0dXMoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVQcm9taXNlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlUHJvbWlzZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHN0YXR1cyB3YXMgcHJldmlvdXNseSBlbmFibGVkLCBpdCB3aWxsIHJlLWVuYWJsZSB0aGUgZGV2aWNlLlxuICAgICAqL1xuICAgIGFzeW5jIHJlc3VtZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUucHJldlN0YXR1cyA9PT0gJ2VuYWJsZWQnICYmXG4gICAgICAgICAgICB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gJ2Rpc2FibGVkJykge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5lbmFibGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgY3VycmVudCBkZXZpY2Ugc3RhdHVzIGlzIGRpc2FibGVkLCBpdCB3aWxsIGVuYWJsZSB0aGUgZGV2aWNlLFxuICAgICAqIGVsc2UgaXQgd2lsbCBkaXNhYmxlIGl0LlxuICAgICAqL1xuICAgIGFzeW5jIHRvZ2dsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuc3RhdHVzID09PSAnZW5hYmxlZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRpc2FibGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVuYWJsZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdpbGwgc2V0IHRoZSBkZWZhdWx0IGNvbnN0cmFpbnRzIGZvciB0aGUgZGV2aWNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnN0cmFpbnRzIHRoZSBjb25zdHJhaW50cyB0byBzZXQuXG4gICAgICovXG4gICAgc2V0RGVmYXVsdENvbnN0cmFpbnRzKGNvbnN0cmFpbnRzKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuc2V0RGVmYXVsdENvbnN0cmFpbnRzKGNvbnN0cmFpbnRzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VsZWN0cyBhIGRldmljZS5cbiAgICAgKlxuICAgICAqIE5vdGU6IFRoaXMgbWV0aG9kIGlzIG5vdCBzdXBwb3J0ZWQgaW4gUmVhY3QgTmF0aXZlXG4gICAgICogQHBhcmFtIGRldmljZUlkIHRoZSBkZXZpY2UgaWQgdG8gc2VsZWN0LlxuICAgICAqL1xuICAgIGFzeW5jIHNlbGVjdChkZXZpY2VJZCkge1xuICAgICAgICBpZiAoaXNSZWFjdE5hdGl2ZSgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgbWV0aG9kIGlzIG5vdCBzdXBwb3J0ZWQgaW4gUmVhY3QgTmF0aXZlLiBQbGVhc2UgdmlzaXQgaHR0cHM6Ly9nZXRzdHJlYW0uaW8vdmlkZW8vZG9jcy9yZWFjdG5hdGl2ZS9jb3JlL2NhbWVyYS1hbmQtbWljcm9waG9uZS8jc3BlYWtlci1tYW5hZ2VtZW50IGZvciByZWZlcmVuY2UuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRldmljZUlkID09PSB0aGlzLnN0YXRlLnNlbGVjdGVkRGV2aWNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZS5zZXREZXZpY2UoZGV2aWNlSWQpO1xuICAgICAgICBhd2FpdCB0aGlzLmFwcGx5U2V0dGluZ3NUb1N0cmVhbSgpO1xuICAgIH1cbiAgICBhc3luYyBhcHBseVNldHRpbmdzVG9TdHJlYW0oKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnN0YXR1cyA9PT0gJ2VuYWJsZWQnKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm11dGVTdHJlYW0oKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudW5tdXRlU3RyZWFtKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0VHJhY2tzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5tZWRpYVN0cmVhbT8uZ2V0VHJhY2tzKCkgPz8gW107XG4gICAgfVxuICAgIGFzeW5jIG11dGVTdHJlYW0oc3RvcFRyYWNrcyA9IHRydWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLm1lZGlhU3RyZWFtKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmxvZ2dlcignZGVidWcnLCBgJHtzdG9wVHJhY2tzID8gJ1N0b3BwaW5nJyA6ICdEaXNhYmxpbmcnfSBzdHJlYW1gKTtcbiAgICAgICAgaWYgKHRoaXMuY2FsbC5zdGF0ZS5jYWxsaW5nU3RhdGUgPT09IENhbGxpbmdTdGF0ZS5KT0lORUQpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc3RvcFB1Ymxpc2hTdHJlYW0oc3RvcFRyYWNrcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tdXRlTG9jYWxTdHJlYW0oc3RvcFRyYWNrcyk7XG4gICAgICAgIGNvbnN0IGFsbEVuZGVkID0gdGhpcy5nZXRUcmFja3MoKS5ldmVyeSgodCkgPT4gdC5yZWFkeVN0YXRlID09PSAnZW5kZWQnKTtcbiAgICAgICAgaWYgKGFsbEVuZGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5tZWRpYVN0cmVhbSAmJlxuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgcmVsZWFzZSgpIGlzIHByZXNlbnQgaW4gcmVhY3QtbmF0aXZlLXdlYnJ0Y1xuICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzLnN0YXRlLm1lZGlhU3RyZWFtLnJlbGVhc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGNhbGxlZCB0byBkaXNwb3NlIHRoZSBzdHJlYW0gaW4gUk5cbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLm1lZGlhU3RyZWFtLnJlbGVhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RhdGUuc2V0TWVkaWFTdHJlYW0odW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtdXRlVHJhY2tzKCkge1xuICAgICAgICB0aGlzLmdldFRyYWNrcygpLmZvckVhY2goKHRyYWNrKSA9PiB7XG4gICAgICAgICAgICBpZiAodHJhY2suZW5hYmxlZClcbiAgICAgICAgICAgICAgICB0cmFjay5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1bm11dGVUcmFja3MoKSB7XG4gICAgICAgIHRoaXMuZ2V0VHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcbiAgICAgICAgICAgIGlmICghdHJhY2suZW5hYmxlZClcbiAgICAgICAgICAgICAgICB0cmFjay5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0b3BUcmFja3MoKSB7XG4gICAgICAgIHRoaXMuZ2V0VHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcbiAgICAgICAgICAgIGlmICh0cmFjay5yZWFkeVN0YXRlID09PSAnbGl2ZScpXG4gICAgICAgICAgICAgICAgdHJhY2suc3RvcCgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbXV0ZUxvY2FsU3RyZWFtKHN0b3BUcmFja3MpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLm1lZGlhU3RyZWFtKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0b3BUcmFja3MpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcFRyYWNrcygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tdXRlVHJhY2tzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgdW5tdXRlU3RyZWFtKCkge1xuICAgICAgICB0aGlzLmxvZ2dlcignZGVidWcnLCAnU3RhcnRpbmcgc3RyZWFtJyk7XG4gICAgICAgIGxldCBzdHJlYW07XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLm1lZGlhU3RyZWFtICYmXG4gICAgICAgICAgICB0aGlzLmdldFRyYWNrcygpLmV2ZXJ5KCh0KSA9PiB0LnJlYWR5U3RhdGUgPT09ICdsaXZlJykpIHtcbiAgICAgICAgICAgIHN0cmVhbSA9IHRoaXMuc3RhdGUubWVkaWFTdHJlYW07XG4gICAgICAgICAgICB0aGlzLnVubXV0ZVRyYWNrcygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdENvbnN0cmFpbnRzID0gdGhpcy5zdGF0ZS5kZWZhdWx0Q29uc3RyYWludHM7XG4gICAgICAgICAgICBjb25zdCBjb25zdHJhaW50cyA9IHtcbiAgICAgICAgICAgICAgICAuLi5kZWZhdWx0Q29uc3RyYWludHMsXG4gICAgICAgICAgICAgICAgZGV2aWNlSWQ6IHRoaXMuc3RhdGUuc2VsZWN0ZWREZXZpY2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3RyZWFtID0gYXdhaXQgdGhpcy5nZXRTdHJlYW0oY29uc3RyYWludHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNhbGwuc3RhdGUuY2FsbGluZ1N0YXRlID09PSBDYWxsaW5nU3RhdGUuSk9JTkVEKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnB1Ymxpc2hTdHJlYW0oc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5tZWRpYVN0cmVhbSAhPT0gc3RyZWFtKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnNldE1lZGlhU3RyZWFtKHN0cmVhbSk7XG4gICAgICAgICAgICB0aGlzLmdldFRyYWNrcygpLmZvckVhY2goKHRyYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJhY2suYWRkRXZlbnRMaXN0ZW5lcignZW5kZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZVByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZW5hYmxlUHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kaXNhYmxlUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5kaXNhYmxlUHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5zdGF0dXMgPT09ICdlbmFibGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1RyYWNrU3RvcHBlZER1ZVRvVHJhY2tFbmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1RyYWNrU3RvcHBlZER1ZVRvVHJhY2tFbmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDIwMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5kaXNhYmxlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBtZWRpYURldmljZUtpbmQoKSB7XG4gICAgICAgIGlmICh0aGlzLnRyYWNrVHlwZSA9PT0gVHJhY2tUeXBlLkFVRElPKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2F1ZGlvaW5wdXQnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnRyYWNrVHlwZSA9PT0gVHJhY2tUeXBlLlZJREVPKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3ZpZGVvaW5wdXQnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgaGFuZGxlRGlzY29ubmVjdGVkT3JSZXBsYWNlZERldmljZXMoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKGNvbWJpbmVMYXRlc3QoW1xuICAgICAgICAgICAgZGV2aWNlSWRzJC5waXBlKHBhaXJ3aXNlKCkpLFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZWxlY3RlZERldmljZSQsXG4gICAgICAgIF0pLnN1YnNjcmliZShhc3luYyAoW1twcmV2RGV2aWNlcywgY3VycmVudERldmljZXNdLCBkZXZpY2VJZF0pID0+IHtcbiAgICAgICAgICAgIGlmICghZGV2aWNlSWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5lbmFibGVQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbmFibGVQcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZGlzYWJsZVByb21pc2UpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmRpc2FibGVQcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGlzRGV2aWNlRGlzY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgaXNEZXZpY2VSZXBsYWNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudERldmljZSA9IHRoaXMuZmluZERldmljZUluTGlzdChjdXJyZW50RGV2aWNlcywgZGV2aWNlSWQpO1xuICAgICAgICAgICAgY29uc3QgcHJldkRldmljZSA9IHRoaXMuZmluZERldmljZUluTGlzdChwcmV2RGV2aWNlcywgZGV2aWNlSWQpO1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50RGV2aWNlICYmIHByZXZEZXZpY2UpIHtcbiAgICAgICAgICAgICAgICBpc0RldmljZURpc2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjdXJyZW50RGV2aWNlICYmXG4gICAgICAgICAgICAgICAgcHJldkRldmljZSAmJlxuICAgICAgICAgICAgICAgIGN1cnJlbnREZXZpY2UuZGV2aWNlSWQgPT09IHByZXZEZXZpY2UuZGV2aWNlSWQgJiZcbiAgICAgICAgICAgICAgICBjdXJyZW50RGV2aWNlLmdyb3VwSWQgIT09IHByZXZEZXZpY2UuZ3JvdXBJZCkge1xuICAgICAgICAgICAgICAgIGlzRGV2aWNlUmVwbGFjZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRGV2aWNlRGlzY29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5kaXNhYmxlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3QodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0RldmljZVJlcGxhY2VkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNUcmFja1N0b3BwZWREdWVUb1RyYWNrRW5kICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc3RhdHVzID09PSAnZGlzYWJsZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZW5hYmxlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNUcmFja1N0b3BwZWREdWVUb1RyYWNrRW5kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFwcGx5U2V0dGluZ3NUb1N0cmVhbSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBmaW5kRGV2aWNlSW5MaXN0KGRldmljZXMsIGRldmljZUlkKSB7XG4gICAgICAgIHJldHVybiBkZXZpY2VzLmZpbmQoKGQpID0+IGQuZGV2aWNlSWQgPT09IGRldmljZUlkICYmIGQua2luZCA9PT0gdGhpcy5tZWRpYURldmljZUtpbmQpO1xuICAgIH1cbn1cblxuY2xhc3MgSW5wdXRNZWRpYURldmljZU1hbmFnZXJTdGF0ZSB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBuZXcgSW5wdXRNZWRpYURldmljZU1hbmFnZXJTdGF0ZSBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkaXNhYmxlTW9kZSB0aGUgZGlzYWJsZSBtb2RlIHRvIHVzZS5cbiAgICAgKiBAcGFyYW0gcGVybWlzc2lvbk5hbWUgdGhlIHBlcm1pc3Npb24gbmFtZSB0byB1c2UgZm9yIHF1ZXJ5aW5nLlxuICAgICAqIGB1bmRlZmluZWRgIG1lYW5zIG5vIHBlcm1pc3Npb24gaXMgcmVxdWlyZWQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGlzYWJsZU1vZGUgPSAnc3RvcC10cmFja3MnLCBwZXJtaXNzaW9uTmFtZSA9IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmRpc2FibGVNb2RlID0gZGlzYWJsZU1vZGU7XG4gICAgICAgIHRoaXMucGVybWlzc2lvbk5hbWUgPSBwZXJtaXNzaW9uTmFtZTtcbiAgICAgICAgdGhpcy5zdGF0dXNTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdCh1bmRlZmluZWQpO1xuICAgICAgICB0aGlzLm1lZGlhU3RyZWFtU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3QodW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZERldmljZVN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHVuZGVmaW5lZCk7XG4gICAgICAgIHRoaXMuZGVmYXVsdENvbnN0cmFpbnRzU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3QodW5kZWZpbmVkKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgY3VycmVudCBtZWRpYSBzdHJlYW0sIG9yIGB1bmRlZmluZWRgIGlmIHRoZSBkZXZpY2UgaXMgY3VycmVudGx5IGRpc2FibGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tZWRpYVN0cmVhbSQgPSB0aGlzLm1lZGlhU3RyZWFtU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGRldmljZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZWxlY3RlZERldmljZSQgPSB0aGlzLnNlbGVjdGVkRGV2aWNlU3ViamVjdFxuICAgICAgICAgICAgLmFzT2JzZXJ2YWJsZSgpXG4gICAgICAgICAgICAucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgZGV2aWNlIHN0YXR1c1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGF0dXMkID0gdGhpcy5zdGF0dXNTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZGVmYXVsdCBjb25zdHJhaW50cyBmb3IgdGhlIGRldmljZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGVmYXVsdENvbnN0cmFpbnRzJCA9IHRoaXMuZGVmYXVsdENvbnN0cmFpbnRzU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIG9ic2VydmFibGUgdGhhdCB3aWxsIGVtaXQgYHRydWVgIGlmIGJyb3dzZXIvc3lzdGVtIHBlcm1pc3Npb25cbiAgICAgICAgICogaXMgZ3JhbnRlZCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmhhc0Jyb3dzZXJQZXJtaXNzaW9uJCA9IG5ldyBPYnNlcnZhYmxlKChzdWJzY3JpYmVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub3RpZnlHcmFudGVkID0gKCkgPT4gc3Vic2NyaWJlci5uZXh0KHRydWUpO1xuICAgICAgICAgICAgY29uc3QgcGVybWlzc2lvbnNBUElBdmFpbGFibGUgPSAhIW5hdmlnYXRvcj8ucGVybWlzc2lvbnM/LnF1ZXJ5O1xuICAgICAgICAgICAgaWYgKGlzUmVhY3ROYXRpdmUoKSB8fCAhdGhpcy5wZXJtaXNzaW9uTmFtZSB8fCAhcGVybWlzc2lvbnNBUElBdmFpbGFibGUpIHtcbiAgICAgICAgICAgICAgICBnZXRMb2dnZXIoWydkZXZpY2VzJ10pKCd3YXJuJywgYFBlcm1pc3Npb25zIGNhbid0IGJlIHF1ZXJpZWQuIEFzc3VtaW5nIGdyYW50ZWQuYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vdGlmeUdyYW50ZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBwZXJtaXNzaW9uU3RhdGU7XG4gICAgICAgICAgICBjb25zdCBub3RpZnkgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KFxuICAgICAgICAgICAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHRoZSAnY2hhbmdlJyBldmVudCBkb2Vzbid0IHJlbGlhYmx5IGVtaXQgYW5kIGhlbmNlLFxuICAgICAgICAgICAgICAgIC8vIHBlcm1pc3Npb25TdGF0ZSBzdGF5cyBpbiAncHJvbXB0JyBzdGF0ZSBmb3JldmVyLlxuICAgICAgICAgICAgICAgIC8vIFR5cGljYWxseSwgdGhpcyBoYXBwZW5zIHdoZW4gYSB1c2VyIGdyYW50cyBvbmUtdGltZSBwZXJtaXNzaW9uLlxuICAgICAgICAgICAgICAgIC8vIEluc3RlYWQgb2YgY2hlY2tpbmcgaWYgYSBwZXJtaXNzaW9uIGlzIGdyYW50ZWQsIHdlIGNoZWNrIGlmIGl0IGlzbid0IGRlbmllZFxuICAgICAgICAgICAgICAgIHBlcm1pc3Npb25TdGF0ZS5zdGF0ZSAhPT0gJ2RlbmllZCcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG5hdmlnYXRvci5wZXJtaXNzaW9uc1xuICAgICAgICAgICAgICAgIC5xdWVyeSh7IG5hbWU6IHRoaXMucGVybWlzc2lvbk5hbWUgfSlcbiAgICAgICAgICAgICAgICAudGhlbigocGVybWlzc2lvblN0YXR1cykgPT4ge1xuICAgICAgICAgICAgICAgIHBlcm1pc3Npb25TdGF0ZSA9IHBlcm1pc3Npb25TdGF0dXM7XG4gICAgICAgICAgICAgICAgcGVybWlzc2lvblN0YXRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG5vdGlmeSk7XG4gICAgICAgICAgICAgICAgbm90aWZ5KCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gcGVybWlzc2lvbiBkb2Vzbid0IGV4aXN0IG9yIGNhbid0IGJlIHF1ZXJpZWQgLT4gYXNzdW1lIGl0J3MgZ3JhbnRlZFxuICAgICAgICAgICAgICAgIC8vIGFuIGV4YW1wbGUgd291bGQgYmUgRmlyZWZveCxcbiAgICAgICAgICAgICAgICAvLyB3aGVyZSBuZWl0aGVyIGNhbWVyYSBtaWNyb3Bob25lIHBlcm1pc3Npb24gY2FuIGJlIHF1ZXJpZWRcbiAgICAgICAgICAgICAgICBub3RpZnlHcmFudGVkKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcGVybWlzc2lvblN0YXRlPy5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBub3RpZnkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkucGlwZShzaGFyZVJlcGxheSgxKSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBjdXJyZW50IHZhbHVlIG9mIGFuIG9ic2VydmFibGUsIG9yIHVuZGVmaW5lZCBpZiB0aGUgb2JzZXJ2YWJsZSBoYXNcbiAgICAgICAgICogbm90IGVtaXR0ZWQgYSB2YWx1ZSB5ZXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBvYnNlcnZhYmxlJCB0aGUgb2JzZXJ2YWJsZSB0byBnZXQgdGhlIHZhbHVlIGZyb20uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdldEN1cnJlbnRWYWx1ZSA9IGdldEN1cnJlbnRWYWx1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZGF0ZXMgdGhlIHZhbHVlIG9mIHRoZSBwcm92aWRlZCBTdWJqZWN0LlxuICAgICAgICAgKiBBbiBgdXBkYXRlYCBjYW4gZWl0aGVyIGJlIGEgbmV3IHZhbHVlIG9yIGEgZnVuY3Rpb24gd2hpY2ggdGFrZXNcbiAgICAgICAgICogdGhlIGN1cnJlbnQgdmFsdWUgYW5kIHJldHVybnMgYSBuZXcgdmFsdWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gc3ViamVjdCB0aGUgc3ViamVjdCB0byB1cGRhdGUuXG4gICAgICAgICAqIEBwYXJhbSB1cGRhdGUgdGhlIHVwZGF0ZSB0byBhcHBseSB0byB0aGUgc3ViamVjdC5cbiAgICAgICAgICogQHJldHVybiB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2V0Q3VycmVudFZhbHVlID0gc2V0Q3VycmVudFZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZGV2aWNlIHN0YXR1c1xuICAgICAqL1xuICAgIGdldCBzdGF0dXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLnN0YXR1cyQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudGx5IHNlbGVjdGVkIGRldmljZVxuICAgICAqL1xuICAgIGdldCBzZWxlY3RlZERldmljZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFZhbHVlKHRoaXMuc2VsZWN0ZWREZXZpY2UkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgbWVkaWEgc3RyZWFtLCBvciBgdW5kZWZpbmVkYCBpZiB0aGUgZGV2aWNlIGlzIGN1cnJlbnRseSBkaXNhYmxlZC5cbiAgICAgKi9cbiAgICBnZXQgbWVkaWFTdHJlYW0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLm1lZGlhU3RyZWFtJCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSBzdGF0dXNcbiAgICAgKi9cbiAgICBzZXRTdGF0dXMoc3RhdHVzKSB7XG4gICAgICAgIHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMuc3RhdHVzU3ViamVjdCwgc3RhdHVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICogQHBhcmFtIHN0cmVhbSB0aGUgc3RyZWFtIHRvIHNldC5cbiAgICAgKi9cbiAgICBzZXRNZWRpYVN0cmVhbShzdHJlYW0pIHtcbiAgICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5tZWRpYVN0cmVhbVN1YmplY3QsIHN0cmVhbSk7XG4gICAgICAgIGlmIChzdHJlYW0pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RGV2aWNlKHRoaXMuZ2V0RGV2aWNlSWRGcm9tU3RyZWFtKHN0cmVhbSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSBkZXZpY2VJZCB0aGUgZGV2aWNlIGlkIHRvIHNldC5cbiAgICAgKi9cbiAgICBzZXREZXZpY2UoZGV2aWNlSWQpIHtcbiAgICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5zZWxlY3RlZERldmljZVN1YmplY3QsIGRldmljZUlkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGVmYXVsdCBjb25zdHJhaW50cyBmb3IgdGhlIGRldmljZS5cbiAgICAgKi9cbiAgICBnZXQgZGVmYXVsdENvbnN0cmFpbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50VmFsdWUodGhpcy5kZWZhdWx0Q29uc3RyYWludHMkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZGVmYXVsdCBjb25zdHJhaW50cyBmb3IgdGhlIGRldmljZS5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSBjb25zdHJhaW50cyB0aGUgY29uc3RyYWludHMgdG8gc2V0LlxuICAgICAqL1xuICAgIHNldERlZmF1bHRDb25zdHJhaW50cyhjb25zdHJhaW50cykge1xuICAgICAgICB0aGlzLnNldEN1cnJlbnRWYWx1ZSh0aGlzLmRlZmF1bHRDb25zdHJhaW50c1N1YmplY3QsIGNvbnN0cmFpbnRzKTtcbiAgICB9XG59XG5cbmNsYXNzIENhbWVyYU1hbmFnZXJTdGF0ZSBleHRlbmRzIElucHV0TWVkaWFEZXZpY2VNYW5hZ2VyU3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RvcC10cmFja3MnLCBcbiAgICAgICAgLy8gYGNhbWVyYWAgaXMgbm90IGluIHRoZSBXM0Mgc3RhbmRhcmQgeWV0LFxuICAgICAgICAvLyBidXQgaXQncyBzdXBwb3J0ZWQgYnkgQ2hyb21lIGFuZCBTYWZhcmkuXG4gICAgICAgICdjYW1lcmEnKTtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb25TdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdCh1bmRlZmluZWQpO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiQgPSB0aGlzLmRpcmVjdGlvblN1YmplY3RcbiAgICAgICAgICAgIC5hc09ic2VydmFibGUoKVxuICAgICAgICAgICAgLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBwcmVmZXJyZWQgY2FtZXJhIGRpcmVjdGlvblxuICAgICAqIGZyb250IC0gbWVhbnMgdGhlIGNhbWVyYSBmYWNpbmcgdGhlIHVzZXJcbiAgICAgKiBiYWNrIC0gbWVhbnMgdGhlIGNhbWVyYSBmYWNpbmcgdGhlIGVudmlyb25tZW50XG4gICAgICovXG4gICAgZ2V0IGRpcmVjdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFZhbHVlKHRoaXMuZGlyZWN0aW9uJCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHNldERpcmVjdGlvbihkaXJlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5kaXJlY3Rpb25TdWJqZWN0LCBkaXJlY3Rpb24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBzZXRNZWRpYVN0cmVhbShzdHJlYW0pIHtcbiAgICAgICAgc3VwZXIuc2V0TWVkaWFTdHJlYW0oc3RyZWFtKTtcbiAgICAgICAgaWYgKHN0cmVhbSkge1xuICAgICAgICAgICAgLy8gUk4gZ2V0U2V0dGluZ3MoKSBkb2Vzbid0IHJldHVybiBmYWNpbmdNb2RlLCBzbyB3ZSBkb24ndCB2ZXJpZnkgY2FtZXJhIGRpcmVjdGlvblxuICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gaXNSZWFjdE5hdGl2ZSgpXG4gICAgICAgICAgICAgICAgPyB0aGlzLmRpcmVjdGlvblxuICAgICAgICAgICAgICAgIDogc3RyZWFtLmdldFZpZGVvVHJhY2tzKClbMF0/LmdldFNldHRpbmdzKCkuZmFjaW5nTW9kZSA9PT0gJ2Vudmlyb25tZW50J1xuICAgICAgICAgICAgICAgICAgICA/ICdiYWNrJ1xuICAgICAgICAgICAgICAgICAgICA6ICdmcm9udCc7XG4gICAgICAgICAgICB0aGlzLnNldERpcmVjdGlvbihkaXJlY3Rpb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldERldmljZUlkRnJvbVN0cmVhbShzdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuIHN0cmVhbS5nZXRWaWRlb1RyYWNrcygpWzBdPy5nZXRTZXR0aW5ncygpLmRldmljZUlkO1xuICAgIH1cbn1cblxuY2xhc3MgQ2FtZXJhTWFuYWdlciBleHRlbmRzIElucHV0TWVkaWFEZXZpY2VNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcihjYWxsKSB7XG4gICAgICAgIHN1cGVyKGNhbGwsIG5ldyBDYW1lcmFNYW5hZ2VyU3RhdGUoKSwgVHJhY2tUeXBlLlZJREVPKTtcbiAgICAgICAgdGhpcy50YXJnZXRSZXNvbHV0aW9uID0ge1xuICAgICAgICAgICAgd2lkdGg6IDEyODAsXG4gICAgICAgICAgICBoZWlnaHQ6IDcyMCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VsZWN0IHRoZSBjYW1lcmEgZGlyZWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRpcmVjdGlvbiB0aGUgZGlyZWN0aW9uIG9mIHRoZSBjYW1lcmEgdG8gc2VsZWN0LlxuICAgICAqL1xuICAgIGFzeW5jIHNlbGVjdERpcmVjdGlvbihkaXJlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5zZXREaXJlY3Rpb24oZGlyZWN0aW9uKTtcbiAgICAgICAgLy8gUHJvdmlkaW5nIGJvdGggZGV2aWNlIGlkIGFuZCBkaXJlY3Rpb24gZG9lc24ndCB3b3JrLCBzbyB3ZSBkZXNlbGVjdCB0aGUgZGV2aWNlXG4gICAgICAgIHRoaXMuc3RhdGUuc2V0RGV2aWNlKHVuZGVmaW5lZCk7XG4gICAgICAgIGF3YWl0IHRoaXMuYXBwbHlTZXR0aW5nc1RvU3RyZWFtKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZsaXBzIHRoZSBjYW1lcmEgZGlyZWN0aW9uOiBpZiBpdCdzIGZyb250IGl0IHdpbGwgY2hhbmdlIHRvIGJhY2ssIGlmIGl0J3MgYmFjaywgaXQgd2lsbCBjaGFuZ2UgdG8gZnJvbnQuXG4gICAgICpcbiAgICAgKiBOb3RlOiBpZiB0aGVyZSBpcyBubyBhdmFpbGFibGUgY2FtZXJhIHdpdGggdGhlIGRlc2lyZWQgZGlyZWN0aW9uLCB0aGlzIG1ldGhvZCB3aWxsIGRvIG5vdGhpbmcuXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBhc3luYyBmbGlwKCkge1xuICAgICAgICBjb25zdCBuZXdEaXJlY3Rpb24gPSB0aGlzLnN0YXRlLmRpcmVjdGlvbiA9PT0gJ2Zyb250JyA/ICdiYWNrJyA6ICdmcm9udCc7XG4gICAgICAgIGF3YWl0IHRoaXMuc2VsZWN0RGlyZWN0aW9uKG5ld0RpcmVjdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGFzeW5jIHNlbGVjdFRhcmdldFJlc29sdXRpb24ocmVzb2x1dGlvbikge1xuICAgICAgICB0aGlzLnRhcmdldFJlc29sdXRpb24uaGVpZ2h0ID0gcmVzb2x1dGlvbi5oZWlnaHQ7XG4gICAgICAgIHRoaXMudGFyZ2V0UmVzb2x1dGlvbi53aWR0aCA9IHJlc29sdXRpb24ud2lkdGg7XG4gICAgICAgIGlmICh0aGlzLmVuYWJsZVByb21pc2UpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbmFibGVQcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gY291bGRuJ3QgZW5hYmxlIGRldmljZSwgdGFyZ2V0IHJlc29sdXRpb24gd2lsbCBiZSBhcHBsaWVkIHRoZSBuZXh0IHRpbWUgdXNlciBhdHRlbXB0cyB0byBzdGFydCB0aGUgZGV2aWNlXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ3dhcm4nLCAnY291bGQgbm90IGFwcGx5IHRhcmdldCByZXNvbHV0aW9uJywgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnN0YXR1cyA9PT0gJ2VuYWJsZWQnKSB7XG4gICAgICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMuc3RhdGVcbiAgICAgICAgICAgICAgICAubWVkaWFTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKVswXVxuICAgICAgICAgICAgICAgID8uZ2V0U2V0dGluZ3MoKTtcbiAgICAgICAgICAgIGlmICh3aWR0aCAhPT0gdGhpcy50YXJnZXRSZXNvbHV0aW9uLndpZHRoIHx8XG4gICAgICAgICAgICAgICAgaGVpZ2h0ICE9PSB0aGlzLnRhcmdldFJlc29sdXRpb24uaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHBseVNldHRpbmdzVG9TdHJlYW0oKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlcignZGVidWcnLCBgJHt3aWR0aH14JHtoZWlnaHR9IHRhcmdldCByZXNvbHV0aW9uIGFwcGxpZWQgdG8gbWVkaWEgc3RyZWFtYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcHJlZmVycmVkIGNvZGVjIGZvciBlbmNvZGluZyB0aGUgdmlkZW8uXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWwgaW50ZXJuYWwgdXNlIG9ubHksIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJLlxuICAgICAqIEBwYXJhbSBjb2RlYyB0aGUgY29kZWMgdG8gdXNlIGZvciBlbmNvZGluZyB0aGUgdmlkZW8uXG4gICAgICovXG4gICAgc2V0UHJlZmVycmVkQ29kZWMoY29kZWMpIHtcbiAgICAgICAgdGhpcy5wcmVmZXJyZWRDb2RlYyA9IGNvZGVjO1xuICAgIH1cbiAgICBnZXREZXZpY2VzKCkge1xuICAgICAgICByZXR1cm4gZ2V0VmlkZW9EZXZpY2VzKCk7XG4gICAgfVxuICAgIGdldFN0cmVhbShjb25zdHJhaW50cykge1xuICAgICAgICBjb25zdHJhaW50cy53aWR0aCA9IHRoaXMudGFyZ2V0UmVzb2x1dGlvbi53aWR0aDtcbiAgICAgICAgY29uc3RyYWludHMuaGVpZ2h0ID0gdGhpcy50YXJnZXRSZXNvbHV0aW9uLmhlaWdodDtcbiAgICAgICAgLy8gV2UgY2FuJ3Qgc2V0IGJvdGggZGV2aWNlIGlkIGFuZCBmYWNpbmcgbW9kZVxuICAgICAgICAvLyBEZXZpY2UgaWQgaGFzIGhpZ2hlciBwcmlvcml0eVxuICAgICAgICBpZiAoIWNvbnN0cmFpbnRzLmRldmljZUlkICYmIHRoaXMuc3RhdGUuZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBjb25zdHJhaW50cy5mYWNpbmdNb2RlID1cbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmRpcmVjdGlvbiA9PT0gJ2Zyb250JyA/ICd1c2VyJyA6ICdlbnZpcm9ubWVudCc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdldFZpZGVvU3RyZWFtKGNvbnN0cmFpbnRzKTtcbiAgICB9XG4gICAgcHVibGlzaFN0cmVhbShzdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbC5wdWJsaXNoVmlkZW9TdHJlYW0oc3RyZWFtLCB7XG4gICAgICAgICAgICBwcmVmZXJyZWRDb2RlYzogdGhpcy5wcmVmZXJyZWRDb2RlYyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0b3BQdWJsaXNoU3RyZWFtKHN0b3BUcmFja3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbC5zdG9wUHVibGlzaChUcmFja1R5cGUuVklERU8sIHN0b3BUcmFja3MpO1xuICAgIH1cbn1cblxuY2xhc3MgTWljcm9waG9uZU1hbmFnZXJTdGF0ZSBleHRlbmRzIElucHV0TWVkaWFEZXZpY2VNYW5hZ2VyU3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignZGlzYWJsZS10cmFja3MnLCBcbiAgICAgICAgLy8gYG1pY3JvcGhvbmVgIGlzIG5vdCBpbiB0aGUgVzNDIHN0YW5kYXJkIHlldCxcbiAgICAgICAgLy8gYnV0IGl0J3Mgc3VwcG9ydGVkIGJ5IENocm9tZSBhbmQgU2FmYXJpLlxuICAgICAgICAnbWljcm9waG9uZScpO1xuICAgICAgICB0aGlzLnNwZWFraW5nV2hpbGVNdXRlZFN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKTtcbiAgICAgICAgdGhpcy5zcGVha2luZ1doaWxlTXV0ZWQkID0gdGhpcy5zcGVha2luZ1doaWxlTXV0ZWRTdWJqZWN0XG4gICAgICAgICAgICAuYXNPYnNlcnZhYmxlKClcbiAgICAgICAgICAgIC5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBgdHJ1ZWAgaWYgdGhlIHVzZXIncyBtaWNyb3Bob25lIGlzIG11dGVkIGJ1dCB0aGV5J2FyZSBzcGVha2luZy5cbiAgICAgKlxuICAgICAqIFRoaXMgZmVhdHVyZSBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBSZWFjdCBOYXRpdmUgU0RLLlxuICAgICAqL1xuICAgIGdldCBzcGVha2luZ1doaWxlTXV0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLnNwZWFraW5nV2hpbGVNdXRlZCQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBzZXRTcGVha2luZ1doaWxlTXV0ZWQoaXNTcGVha2luZykge1xuICAgICAgICB0aGlzLnNldEN1cnJlbnRWYWx1ZSh0aGlzLnNwZWFraW5nV2hpbGVNdXRlZFN1YmplY3QsIGlzU3BlYWtpbmcpO1xuICAgIH1cbiAgICBnZXREZXZpY2VJZEZyb21TdHJlYW0oc3RyZWFtKSB7XG4gICAgICAgIHJldHVybiBzdHJlYW0uZ2V0QXVkaW9UcmFja3MoKVswXT8uZ2V0U2V0dGluZ3MoKS5kZXZpY2VJZDtcbiAgICB9XG59XG5cbmNvbnN0IERFVEVDVElPTl9GUkVRVUVOQ1lfSU5fTVMgPSA1MDA7XG5jb25zdCBBVURJT19MRVZFTF9USFJFU0hPTEQkMSA9IDE1MDtcbmNvbnN0IEZGVF9TSVpFID0gMTI4O1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHNvdW5kIGRldGVjdG9yLlxuICpcbiAqIEBwYXJhbSBhdWRpb1N0cmVhbSB0aGUgYXVkaW8gc3RyZWFtIHRvIG9ic2VydmUuIERlcGVuZGluZyBvbiB0aGUgcHJvdmlkZWQgY29uZmlndXJhdGlvbiwgdGhpcyBzdHJlYW0gbWlnaHQgYmUgZGVzdHJveWVkIHdoZW4gdGhlIHNvdW5kIGRldGVjdG9yIGlzIHN0b3BwZWQuXG4gKiBAcGFyYW0gb25Tb3VuZERldGVjdGVkU3RhdGVDaGFuZ2VkIGEgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIHdoZW4gdGhlIHNvdW5kIHN0YXRlIGNoYW5nZXMuXG4gKiBAcGFyYW0gb3B0aW9ucyBjdXN0b20gb3B0aW9ucyBmb3IgdGhlIHNvdW5kIGRldGVjdG9yLlxuICogQHJldHVybnMgYSBjbGVhbi11cCBmdW5jdGlvbiB3aGljaCBvbmNlIGludm9rZWQgc3RvcHMgdGhlIHNvdW5kIGRldGVjdG9yLlxuICovXG5jb25zdCBjcmVhdGVTb3VuZERldGVjdG9yID0gKGF1ZGlvU3RyZWFtLCBvblNvdW5kRGV0ZWN0ZWRTdGF0ZUNoYW5nZWQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHsgZGV0ZWN0aW9uRnJlcXVlbmN5SW5NcyA9IERFVEVDVElPTl9GUkVRVUVOQ1lfSU5fTVMsIGF1ZGlvTGV2ZWxUaHJlc2hvbGQgPSBBVURJT19MRVZFTF9USFJFU0hPTEQkMSwgZmZ0U2l6ZSA9IEZGVF9TSVpFLCBkZXN0cm95U3RyZWFtT25TdG9wID0gdHJ1ZSwgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYXVkaW9Db250ZXh0ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xuICAgIGNvbnN0IGFuYWx5c2VyID0gYXVkaW9Db250ZXh0LmNyZWF0ZUFuYWx5c2VyKCk7XG4gICAgYW5hbHlzZXIuZmZ0U2l6ZSA9IGZmdFNpemU7XG4gICAgY29uc3QgbWljcm9waG9uZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVNZWRpYVN0cmVhbVNvdXJjZShhdWRpb1N0cmVhbSk7XG4gICAgbWljcm9waG9uZS5jb25uZWN0KGFuYWx5c2VyKTtcbiAgICBjb25zdCBpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoYW5hbHlzZXIuZnJlcXVlbmN5QmluQ291bnQpO1xuICAgICAgICBhbmFseXNlci5nZXRCeXRlRnJlcXVlbmN5RGF0YShkYXRhKTtcbiAgICAgICAgY29uc3QgaXNTb3VuZERldGVjdGVkID0gZGF0YS5zb21lKCh2YWx1ZSkgPT4gdmFsdWUgPj0gYXVkaW9MZXZlbFRocmVzaG9sZCk7XG4gICAgICAgIGNvbnN0IGF2ZXJhZ2VkRGF0YVZhbHVlID0gZGF0YS5yZWR1Y2UoKHB2LCBjdikgPT4gcHYgKyBjdiwgMCkgLyBkYXRhLmxlbmd0aDtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZSA9IGF2ZXJhZ2VkRGF0YVZhbHVlID4gYXVkaW9MZXZlbFRocmVzaG9sZFxuICAgICAgICAgICAgPyAxMDBcbiAgICAgICAgICAgIDogTWF0aC5yb3VuZCgoYXZlcmFnZWREYXRhVmFsdWUgLyBhdWRpb0xldmVsVGhyZXNob2xkKSAqIDEwMCk7XG4gICAgICAgIC8vIFdoZW4gdGhlIHRyYWNrIGlzIGRpc2FibGVkLCBpdCB0YWtlcyB0aW1lIGZvciB0aGUgYnVmZmVyIHRvIGVtcHR5XG4gICAgICAgIC8vIFRoaXMgY2hlY2sgd2lsbCBlbnN1cmUgdGhhdCB3ZSBkb24ndCBzZW5kIGFueXRoaW5nIGlmIHRoZSB0cmFjayBpcyBkaXNhYmxlZFxuICAgICAgICBpZiAoYXVkaW9TdHJlYW0uZ2V0QXVkaW9UcmFja3MoKVswXT8uZW5hYmxlZCkge1xuICAgICAgICAgICAgb25Tb3VuZERldGVjdGVkU3RhdGVDaGFuZ2VkKHsgaXNTb3VuZERldGVjdGVkLCBhdWRpb0xldmVsOiBwZXJjZW50YWdlIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb25Tb3VuZERldGVjdGVkU3RhdGVDaGFuZ2VkKHsgaXNTb3VuZERldGVjdGVkOiBmYWxzZSwgYXVkaW9MZXZlbDogMCB9KTtcbiAgICAgICAgfVxuICAgIH0sIGRldGVjdGlvbkZyZXF1ZW5jeUluTXMpO1xuICAgIHJldHVybiBhc3luYyBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgICAgICAvLyBjbGVhbi11cCB0aGUgQXVkaW9Db250ZXh0IGVsZW1lbnRzXG4gICAgICAgIG1pY3JvcGhvbmUuZGlzY29ubmVjdCgpO1xuICAgICAgICBhbmFseXNlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIGF3YWl0IGF1ZGlvQ29udGV4dC5jbG9zZSgpO1xuICAgICAgICAvLyBzdG9wIHRoZSBzdHJlYW1cbiAgICAgICAgaWYgKGRlc3Ryb3lTdHJlYW1PblN0b3ApIHtcbiAgICAgICAgICAgIGF1ZGlvU3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goKHRyYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJhY2suc3RvcCgpO1xuICAgICAgICAgICAgICAgIGF1ZGlvU3RyZWFtLnJlbW92ZVRyYWNrKHRyYWNrKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn07XG5cbi8qKlxuICogRmxhdHRlbiB0aGUgc3RhdHMgcmVwb3J0IGludG8gYW4gYXJyYXkgb2Ygc3RhdHMgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0gcmVwb3J0IHRoZSByZXBvcnQgdG8gZmxhdHRlbi5cbiAqL1xuY29uc3QgZmxhdHRlbiA9IChyZXBvcnQpID0+IHtcbiAgICBjb25zdCBzdGF0cyA9IFtdO1xuICAgIHJlcG9ydC5mb3JFYWNoKChzKSA9PiB7XG4gICAgICAgIHN0YXRzLnB1c2gocyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0YXRzO1xufTtcbmNvbnN0IEFVRElPX0xFVkVMX1RIUkVTSE9MRCA9IDAuMjtcbmNsYXNzIFJOU3BlZWNoRGV0ZWN0b3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnBjMSA9IG5ldyBSVENQZWVyQ29ubmVjdGlvbih7fSk7XG4gICAgICAgIHRoaXMucGMyID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKHt9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnRzIHRoZSBzcGVlY2ggZGV0ZWN0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIHN0YXJ0KCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgYXVkaW9TdHJlYW0gPSBhd2FpdCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh7XG4gICAgICAgICAgICAgICAgYXVkaW86IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucGMxLmFkZEV2ZW50TGlzdGVuZXIoJ2ljZWNhbmRpZGF0ZScsIGFzeW5jIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYzIuYWRkSWNlQ2FuZGlkYXRlKGUuY2FuZGlkYXRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5wYzIuYWRkRXZlbnRMaXN0ZW5lcignaWNlY2FuZGlkYXRlJywgYXN5bmMgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBjMS5hZGRJY2VDYW5kaWRhdGUoZS5jYW5kaWRhdGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhdWRpb1N0cmVhbVxuICAgICAgICAgICAgICAgIC5nZXRUcmFja3MoKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKCh0cmFjaykgPT4gdGhpcy5wYzEuYWRkVHJhY2sodHJhY2ssIGF1ZGlvU3RyZWFtKSk7XG4gICAgICAgICAgICBjb25zdCBvZmZlciA9IGF3YWl0IHRoaXMucGMxLmNyZWF0ZU9mZmVyKHt9KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGMyLnNldFJlbW90ZURlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGMxLnNldExvY2FsRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICAgICAgY29uc3QgYW5zd2VyID0gYXdhaXQgdGhpcy5wYzIuY3JlYXRlQW5zd2VyKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBjMS5zZXRSZW1vdGVEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYzIuc2V0TG9jYWxEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgICAgICAgICAgY29uc3QgYXVkaW9UcmFja3MgPSBhdWRpb1N0cmVhbS5nZXRBdWRpb1RyYWNrcygpO1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBtdXRlIHRoZSBhdWRpbyB0cmFjayBmb3IgdGhpcyB0ZW1wb3Jhcnkgc3RyZWFtLCBvciBlbHNlIHlvdSB3aWxsIGhlYXIgeW91cnNlbGYgdHdpY2Ugd2hpbGUgaW4gdGhlIGNhbGwuXG4gICAgICAgICAgICBhdWRpb1RyYWNrcy5mb3JFYWNoKCh0cmFjaykgPT4gKHRyYWNrLmVuYWJsZWQgPSBmYWxzZSkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY29ubmVjdGluZyBhbmQgbmVnb3RpYXRpbmcgYmV0d2VlbiBQZWVyQ29ubmVjdGlvbnM6JywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3BzIHRoZSBzcGVlY2ggZGV0ZWN0aW9uIGFuZCByZWxlYXNlcyBhbGwgYWxsb2NhdGVkIHJlc291cmNlcy5cbiAgICAgKi9cbiAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLnBjMS5jbG9zZSgpO1xuICAgICAgICB0aGlzLnBjMi5jbG9zZSgpO1xuICAgICAgICBpZiAodGhpcy5pbnRlcnZhbElkKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxJZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUHVibGljIG1ldGhvZCB0aGF0IGRldGVjdHMgdGhlIGF1ZGlvIGxldmVscyBhbmQgcmV0dXJucyB0aGUgc3RhdHVzLlxuICAgICAqL1xuICAgIG9uU3BlYWtpbmdEZXRlY3RlZFN0YXRlQ2hhbmdlKG9uU291bmREZXRlY3RlZFN0YXRlQ2hhbmdlZCkge1xuICAgICAgICB0aGlzLmludGVydmFsSWQgPSBzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdGF0cyA9IChhd2FpdCB0aGlzLnBjMS5nZXRTdGF0cygpKTtcbiAgICAgICAgICAgIGNvbnN0IHJlcG9ydCA9IGZsYXR0ZW4oc3RhdHMpO1xuICAgICAgICAgICAgLy8gQXVkaW8gbGV2ZWxzIGFyZSBwcmVzZW50IGluc2lkZSBzdGF0cyBvZiB0eXBlIGBtZWRpYS1zb3VyY2VgIGFuZCBvZiBraW5kIGBhdWRpb2BcbiAgICAgICAgICAgIGNvbnN0IGF1ZGlvTWVkaWFTb3VyY2VTdGF0cyA9IHJlcG9ydC5maW5kKChzdGF0KSA9PiBzdGF0LnR5cGUgPT09ICdtZWRpYS1zb3VyY2UnICYmXG4gICAgICAgICAgICAgICAgc3RhdC5raW5kID09PSAnYXVkaW8nKTtcbiAgICAgICAgICAgIGlmIChhdWRpb01lZGlhU291cmNlU3RhdHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGF1ZGlvTGV2ZWwgfSA9IGF1ZGlvTWVkaWFTb3VyY2VTdGF0cztcbiAgICAgICAgICAgICAgICBpZiAoYXVkaW9MZXZlbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXVkaW9MZXZlbCA+PSBBVURJT19MRVZFTF9USFJFU0hPTEQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU291bmREZXRlY3RlZFN0YXRlQ2hhbmdlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTb3VuZERldGVjdGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGlvTGV2ZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU291bmREZXRlY3RlZFN0YXRlQ2hhbmdlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTb3VuZERldGVjdGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdWRpb0xldmVsOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDEwMDApO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsSWQpO1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuY2xhc3MgTWljcm9waG9uZU1hbmFnZXIgZXh0ZW5kcyBJbnB1dE1lZGlhRGV2aWNlTWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IoY2FsbCkge1xuICAgICAgICBzdXBlcihjYWxsLCBuZXcgTWljcm9waG9uZU1hbmFnZXJTdGF0ZSgpLCBUcmFja1R5cGUuQVVESU8pO1xuICAgICAgICBjb21iaW5lTGF0ZXN0KFtcbiAgICAgICAgICAgIHRoaXMuY2FsbC5zdGF0ZS5jYWxsaW5nU3RhdGUkLFxuICAgICAgICAgICAgdGhpcy5jYWxsLnN0YXRlLm93bkNhcGFiaWxpdGllcyQsXG4gICAgICAgICAgICB0aGlzLnN0YXRlLnNlbGVjdGVkRGV2aWNlJCxcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuc3RhdHVzJCxcbiAgICAgICAgXSkuc3Vic2NyaWJlKGFzeW5jIChbY2FsbGluZ1N0YXRlLCBvd25DYXBhYmlsaXRpZXMsIGRldmljZUlkLCBzdGF0dXNdKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2FsbGluZ1N0YXRlICE9PSBDYWxsaW5nU3RhdGUuSk9JTkVEKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxpbmdTdGF0ZSA9PT0gQ2FsbGluZ1N0YXRlLkxFRlQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zdG9wU3BlYWtpbmdXaGlsZU11dGVkRGV0ZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvd25DYXBhYmlsaXRpZXMuaW5jbHVkZXMoT3duQ2FwYWJpbGl0eS5TRU5EX0FVRElPKSkge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09ICdkaXNhYmxlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zdGFydFNwZWFraW5nV2hpbGVNdXRlZERldGVjdGlvbihkZXZpY2VJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnN0b3BTcGVha2luZ1doaWxlTXV0ZWREZXRlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnN0b3BTcGVha2luZ1doaWxlTXV0ZWREZXRlY3Rpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldERldmljZXMoKSB7XG4gICAgICAgIHJldHVybiBnZXRBdWRpb0RldmljZXMoKTtcbiAgICB9XG4gICAgZ2V0U3RyZWFtKGNvbnN0cmFpbnRzKSB7XG4gICAgICAgIHJldHVybiBnZXRBdWRpb1N0cmVhbShjb25zdHJhaW50cyk7XG4gICAgfVxuICAgIHB1Ymxpc2hTdHJlYW0oc3RyZWFtKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGwucHVibGlzaEF1ZGlvU3RyZWFtKHN0cmVhbSk7XG4gICAgfVxuICAgIHN0b3BQdWJsaXNoU3RyZWFtKHN0b3BUcmFja3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbC5zdG9wUHVibGlzaChUcmFja1R5cGUuQVVESU8sIHN0b3BUcmFja3MpO1xuICAgIH1cbiAgICBhc3luYyBzdGFydFNwZWFraW5nV2hpbGVNdXRlZERldGVjdGlvbihkZXZpY2VJZCkge1xuICAgICAgICBhd2FpdCB0aGlzLnN0b3BTcGVha2luZ1doaWxlTXV0ZWREZXRlY3Rpb24oKTtcbiAgICAgICAgaWYgKGlzUmVhY3ROYXRpdmUoKSkge1xuICAgICAgICAgICAgdGhpcy5yblNwZWVjaERldGVjdG9yID0gbmV3IFJOU3BlZWNoRGV0ZWN0b3IoKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucm5TcGVlY2hEZXRlY3Rvci5zdGFydCgpO1xuICAgICAgICAgICAgY29uc3QgdW5zdWJzY3JpYmUgPSB0aGlzLnJuU3BlZWNoRGV0ZWN0b3I/Lm9uU3BlYWtpbmdEZXRlY3RlZFN0YXRlQ2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2V0U3BlYWtpbmdXaGlsZU11dGVkKGV2ZW50LmlzU291bmREZXRlY3RlZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuc291bmREZXRlY3RvckNsZWFudXAgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJuU3BlZWNoRGV0ZWN0b3I/LnN0b3AoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJuU3BlZWNoRGV0ZWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gTmVlZCB0byBzdGFydCBhIG5ldyBzdHJlYW0gdGhhdCdzIG5vdCBjb25uZWN0ZWQgdG8gcHVibGlzaGVyXG4gICAgICAgICAgICBjb25zdCBzdHJlYW0gPSBhd2FpdCB0aGlzLmdldFN0cmVhbSh7XG4gICAgICAgICAgICAgICAgZGV2aWNlSWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuc291bmREZXRlY3RvckNsZWFudXAgPSBjcmVhdGVTb3VuZERldGVjdG9yKHN0cmVhbSwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZXRTcGVha2luZ1doaWxlTXV0ZWQoZXZlbnQuaXNTb3VuZERldGVjdGVkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHN0b3BTcGVha2luZ1doaWxlTXV0ZWREZXRlY3Rpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5zb3VuZERldGVjdG9yQ2xlYW51cCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUuc2V0U3BlYWtpbmdXaGlsZU11dGVkKGZhbHNlKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc291bmREZXRlY3RvckNsZWFudXAoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuc291bmREZXRlY3RvckNsZWFudXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIFNjcmVlblNoYXJlU3RhdGUgZXh0ZW5kcyBJbnB1dE1lZGlhRGV2aWNlTWFuYWdlclN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5hdWRpb0VuYWJsZWRTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdCh0cnVlKTtcbiAgICAgICAgdGhpcy5zZXR0aW5nc1N1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHVuZGVmaW5lZCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIGN1cnJlbnQgc2NyZWVuIHNoYXJlIGF1ZGlvIHN0YXR1cy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYXVkaW9FbmFibGVkJCA9IHRoaXMuYXVkaW9FbmFibGVkU3ViamVjdFxuICAgICAgICAgICAgLmFzT2JzZXJ2YWJsZSgpXG4gICAgICAgICAgICAucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgY3VycmVudCBzY3JlZW4gc2hhcmUgc2V0dGluZ3MuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNldHRpbmdzJCA9IHRoaXMuc2V0dGluZ3NTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdldERldmljZUlkRnJvbVN0cmVhbSA9IChzdHJlYW0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IFt0cmFja10gPSBzdHJlYW0uZ2V0VHJhY2tzKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJhY2s/LmdldFNldHRpbmdzKCkuZGV2aWNlSWQ7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHNjcmVlbiBzaGFyZSBhdWRpbyBzdGF0dXMuXG4gICAgICovXG4gICAgZ2V0IGF1ZGlvRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFZhbHVlKHRoaXMuYXVkaW9FbmFibGVkJCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY3VycmVudCBzY3JlZW4gc2hhcmUgYXVkaW8gc3RhdHVzLlxuICAgICAqL1xuICAgIHNldEF1ZGlvRW5hYmxlZChpc0VuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5hdWRpb0VuYWJsZWRTdWJqZWN0LCBpc0VuYWJsZWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBzY3JlZW4gc2hhcmUgc2V0dGluZ3MuXG4gICAgICovXG4gICAgZ2V0IHNldHRpbmdzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50VmFsdWUodGhpcy5zZXR0aW5ncyQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGN1cnJlbnQgc2NyZWVuIHNoYXJlIHNldHRpbmdzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNldHRpbmdzIHRoZSBzY3JlZW4gc2hhcmUgc2V0dGluZ3MgdG8gc2V0LlxuICAgICAqL1xuICAgIHNldFNldHRpbmdzKHNldHRpbmdzKSB7XG4gICAgICAgIHRoaXMuc2V0Q3VycmVudFZhbHVlKHRoaXMuc2V0dGluZ3NTdWJqZWN0LCBzZXR0aW5ncyk7XG4gICAgfVxufVxuXG5jbGFzcyBTY3JlZW5TaGFyZU1hbmFnZXIgZXh0ZW5kcyBJbnB1dE1lZGlhRGV2aWNlTWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IoY2FsbCkge1xuICAgICAgICBzdXBlcihjYWxsLCBuZXcgU2NyZWVuU2hhcmVTdGF0ZSgpLCBUcmFja1R5cGUuU0NSRUVOX1NIQVJFKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2lsbCBlbmFibGUgc2NyZWVuIHNoYXJlIGF1ZGlvIG9wdGlvbnMgb24gc3VwcG9ydGVkIHBsYXRmb3Jtcy5cbiAgICAgKlxuICAgICAqIE5vdGU6IGZvciBvbmdvaW5nIHNjcmVlbiBzaGFyZSwgYXVkaW8gd29uJ3QgYmUgZW5hYmxlZCB1bnRpbCB5b3VcbiAgICAgKiByZS1wdWJsaXNoIHRoZSBzY3JlZW4gc2hhcmUgc3RyZWFtLlxuICAgICAqL1xuICAgIGVuYWJsZVNjcmVlblNoYXJlQXVkaW8oKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuc2V0QXVkaW9FbmFibGVkKHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaWxsIGRpc2FibGUgc2NyZWVuIHNoYXJlIGF1ZGlvIG9wdGlvbnMgb24gc3VwcG9ydGVkIHBsYXRmb3Jtcy5cbiAgICAgKi9cbiAgICBhc3luYyBkaXNhYmxlU2NyZWVuU2hhcmVBdWRpbygpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5zZXRBdWRpb0VuYWJsZWQoZmFsc2UpO1xuICAgICAgICBpZiAodGhpcy5jYWxsLnB1Ymxpc2hlcj8uaXNQdWJsaXNoaW5nKFRyYWNrVHlwZS5TQ1JFRU5fU0hBUkVfQVVESU8pKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNhbGwuc3RvcFB1Ymxpc2goVHJhY2tUeXBlLlNDUkVFTl9TSEFSRV9BVURJTywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBzY3JlZW4gc2hhcmUgc2V0dGluZ3MuXG4gICAgICovXG4gICAgZ2V0U2V0dGluZ3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLnNldHRpbmdzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjdXJyZW50IHNjcmVlbiBzaGFyZSBzZXR0aW5ncy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzZXR0aW5ncyB0aGUgc2V0dGluZ3MgdG8gc2V0LlxuICAgICAqL1xuICAgIHNldFNldHRpbmdzKHNldHRpbmdzKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuc2V0U2V0dGluZ3Moc2V0dGluZ3MpO1xuICAgIH1cbiAgICBnZXREZXZpY2VzKCkge1xuICAgICAgICByZXR1cm4gb2YoW10pOyAvLyB0aGVyZSBhcmUgbm8gZGV2aWNlcyB0byBiZSBsaXN0ZWQgZm9yIFNjcmVlbiBTaGFyZVxuICAgIH1cbiAgICBnZXRTdHJlYW0oY29uc3RyYWludHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmF1ZGlvRW5hYmxlZCkge1xuICAgICAgICAgICAgY29uc3RyYWludHMuYXVkaW8gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2V0U2NyZWVuU2hhcmVTdHJlYW0oY29uc3RyYWludHMpO1xuICAgIH1cbiAgICBwdWJsaXNoU3RyZWFtKHN0cmVhbSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxsLnB1Ymxpc2hTY3JlZW5TaGFyZVN0cmVhbShzdHJlYW0sIHtcbiAgICAgICAgICAgIHNjcmVlblNoYXJlU2V0dGluZ3M6IHRoaXMuc3RhdGUuc2V0dGluZ3MsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBzdG9wUHVibGlzaFN0cmVhbShzdG9wVHJhY2tzKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuY2FsbC5zdG9wUHVibGlzaChUcmFja1R5cGUuU0NSRUVOX1NIQVJFLCBzdG9wVHJhY2tzKTtcbiAgICAgICAgYXdhaXQgdGhpcy5jYWxsLnN0b3BQdWJsaXNoKFRyYWNrVHlwZS5TQ1JFRU5fU0hBUkVfQVVESU8sIHN0b3BUcmFja3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgdGhlIGRlZmF1bHQgYHNlbGVjdGAgbWV0aG9kIHRvIHRocm93IGFuIGVycm9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRldmljZUlkIGlnbm9yZWQuXG4gICAgICovXG4gICAgYXN5bmMgc2VsZWN0KGRldmljZUlkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBtZXRob2QgaXMgbm90IHN1cHBvcnRlZCBpbiBmb3IgU2NyZWVuIFNoYXJlJyk7XG4gICAgfVxufVxuXG5jbGFzcyBTcGVha2VyU3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkRGV2aWNlU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3QoJycpO1xuICAgICAgICB0aGlzLnZvbHVtZVN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KDEpO1xuICAgICAgICAvKipcbiAgICAgICAgICogW1RlbGxzIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIGF1ZGlvIG91dHB1dCBjaGFuZ2Ugb24gJ2F1ZGlvJyBlbGVtZW50c10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxNZWRpYUVsZW1lbnQvc2V0U2lua0lkKS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaXNEZXZpY2VTZWxlY3Rpb25TdXBwb3J0ZWQgPSBjaGVja0lmQXVkaW9PdXRwdXRDaGFuZ2VTdXBwb3J0ZWQoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgYW4gb2JzZXJ2YWJsZSwgb3IgdW5kZWZpbmVkIGlmIHRoZSBvYnNlcnZhYmxlIGhhc1xuICAgICAgICAgKiBub3QgZW1pdHRlZCBhIHZhbHVlIHlldC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIG9ic2VydmFibGUkIHRoZSBvYnNlcnZhYmxlIHRvIGdldCB0aGUgdmFsdWUgZnJvbS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2V0Q3VycmVudFZhbHVlID0gZ2V0Q3VycmVudFZhbHVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlcyB0aGUgdmFsdWUgb2YgdGhlIHByb3ZpZGVkIFN1YmplY3QuXG4gICAgICAgICAqIEFuIGB1cGRhdGVgIGNhbiBlaXRoZXIgYmUgYSBuZXcgdmFsdWUgb3IgYSBmdW5jdGlvbiB3aGljaCB0YWtlc1xuICAgICAgICAgKiB0aGUgY3VycmVudCB2YWx1ZSBhbmQgcmV0dXJucyBhIG5ldyB2YWx1ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBzdWJqZWN0IHRoZSBzdWJqZWN0IHRvIHVwZGF0ZS5cbiAgICAgICAgICogQHBhcmFtIHVwZGF0ZSB0aGUgdXBkYXRlIHRvIGFwcGx5IHRvIHRoZSBzdWJqZWN0LlxuICAgICAgICAgKiBAcmV0dXJuIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWUgPSBzZXRDdXJyZW50VmFsdWU7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWREZXZpY2UkID0gdGhpcy5zZWxlY3RlZERldmljZVN1YmplY3RcbiAgICAgICAgICAgIC5hc09ic2VydmFibGUoKVxuICAgICAgICAgICAgLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG4gICAgICAgIHRoaXMudm9sdW1lJCA9IHRoaXMudm9sdW1lU3ViamVjdFxuICAgICAgICAgICAgLmFzT2JzZXJ2YWJsZSgpXG4gICAgICAgICAgICAucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnRseSBzZWxlY3RlZCBkZXZpY2VcbiAgICAgKlxuICAgICAqIE5vdGU6IHRoaXMgZmVhdHVyZSBpcyBub3Qgc3VwcG9ydGVkIGluIFJlYWN0IE5hdGl2ZVxuICAgICAqL1xuICAgIGdldCBzZWxlY3RlZERldmljZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFZhbHVlKHRoaXMuc2VsZWN0ZWREZXZpY2UkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnRseSBzZWxlY3RlZCB2b2x1bWVcbiAgICAgKlxuICAgICAqIE5vdGU6IHRoaXMgZmVhdHVyZSBpcyBub3Qgc3VwcG9ydGVkIGluIFJlYWN0IE5hdGl2ZVxuICAgICAqL1xuICAgIGdldCB2b2x1bWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRWYWx1ZSh0aGlzLnZvbHVtZSQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gZGV2aWNlSWRcbiAgICAgKi9cbiAgICBzZXREZXZpY2UoZGV2aWNlSWQpIHtcbiAgICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy5zZWxlY3RlZERldmljZVN1YmplY3QsIGRldmljZUlkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICogQHBhcmFtIHZvbHVtZVxuICAgICAqL1xuICAgIHNldFZvbHVtZSh2b2x1bWUpIHtcbiAgICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWUodGhpcy52b2x1bWVTdWJqZWN0LCB2b2x1bWUpO1xuICAgIH1cbn1cblxuY2xhc3MgU3BlYWtlck1hbmFnZXIge1xuICAgIGNvbnN0cnVjdG9yKGNhbGwpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG5ldyBTcGVha2VyU3RhdGUoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG4gICAgICAgIHRoaXMucmVtb3ZlU3Vic2NyaXB0aW9ucyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKChzKSA9PiBzLnVuc3Vic2NyaWJlKCkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNhbGwgPSBjYWxsO1xuICAgICAgICBpZiAoZGV2aWNlSWRzJCAmJiAhaXNSZWFjdE5hdGl2ZSgpKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChjb21iaW5lTGF0ZXN0KFtkZXZpY2VJZHMkLCB0aGlzLnN0YXRlLnNlbGVjdGVkRGV2aWNlJF0pLnN1YnNjcmliZSgoW2RldmljZXMsIGRldmljZUlkXSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZGV2aWNlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBkZXZpY2UgPSBkZXZpY2VzLmZpbmQoKGQpID0+IGQuZGV2aWNlSWQgPT09IGRldmljZUlkICYmIGQua2luZCA9PT0gJ2F1ZGlvb3V0cHV0Jyk7XG4gICAgICAgICAgICAgICAgaWYgKCFkZXZpY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3QoJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaXN0cyB0aGUgYXZhaWxhYmxlIGF1ZGlvIG91dHB1dCBkZXZpY2VzXG4gICAgICpcbiAgICAgKiBOb3RlOiBJdCBwcm9tcHRzIHRoZSB1c2VyIGZvciBhIHBlcm1pc3Npb24gdG8gdXNlIGRldmljZXMgKGlmIG5vdCBhbHJlYWR5IGdyYW50ZWQpXG4gICAgICogTm90ZTogVGhpcyBtZXRob2QgaXMgbm90IHN1cHBvcnRlZCBpbiBSZWFjdCBOYXRpdmVcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCB3aWxsIGJlIHVwZGF0ZWQgaWYgYSBkZXZpY2UgaXMgY29ubmVjdGVkIG9yIGRpc2Nvbm5lY3RlZFxuICAgICAqL1xuICAgIGxpc3REZXZpY2VzKCkge1xuICAgICAgICBpZiAoaXNSZWFjdE5hdGl2ZSgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgZmVhdHVyZSBpcyBub3Qgc3VwcG9ydGVkIGluIFJlYWN0IE5hdGl2ZS4gUGxlYXNlIHZpc2l0IGh0dHBzOi8vZ2V0c3RyZWFtLmlvL3ZpZGVvL2RvY3MvcmVhY3RuYXRpdmUvY29yZS9jYW1lcmEtYW5kLW1pY3JvcGhvbmUvI3NwZWFrZXItbWFuYWdlbWVudCBmb3IgbW9yZSBkZXRhaWxzJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdldEF1ZGlvT3V0cHV0RGV2aWNlcygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWxlY3QgYSBkZXZpY2UuXG4gICAgICpcbiAgICAgKiBOb3RlOiBUaGlzIG1ldGhvZCBpcyBub3Qgc3VwcG9ydGVkIGluIFJlYWN0IE5hdGl2ZVxuICAgICAqXG4gICAgICogQHBhcmFtIGRldmljZUlkIGVtcHR5IHN0cmluZyBtZWFucyB0aGUgc3lzdGVtIGRlZmF1bHRcbiAgICAgKi9cbiAgICBzZWxlY3QoZGV2aWNlSWQpIHtcbiAgICAgICAgaWYgKGlzUmVhY3ROYXRpdmUoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGZlYXR1cmUgaXMgbm90IHN1cHBvcnRlZCBpbiBSZWFjdCBOYXRpdmUuIFBsZWFzZSB2aXNpdCBodHRwczovL2dldHN0cmVhbS5pby92aWRlby9kb2NzL3JlYWN0bmF0aXZlL2NvcmUvY2FtZXJhLWFuZC1taWNyb3Bob25lLyNzcGVha2VyLW1hbmFnZW1lbnQgZm9yIG1vcmUgZGV0YWlscycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUuc2V0RGV2aWNlKGRldmljZUlkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSB2b2x1bWUgb2YgdGhlIGF1ZGlvIGVsZW1lbnRzXG4gICAgICogQHBhcmFtIHZvbHVtZSBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEuXG4gICAgICpcbiAgICAgKiBOb3RlOiBUaGlzIG1ldGhvZCBpcyBub3Qgc3VwcG9ydGVkIGluIFJlYWN0IE5hdGl2ZVxuICAgICAqL1xuICAgIHNldFZvbHVtZSh2b2x1bWUpIHtcbiAgICAgICAgaWYgKGlzUmVhY3ROYXRpdmUoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGZlYXR1cmUgaXMgbm90IHN1cHBvcnRlZCBpbiBSZWFjdCBOYXRpdmUuIFBsZWFzZSB2aXNpdCBodHRwczovL2dldHN0cmVhbS5pby92aWRlby9kb2NzL3JlYWN0bmF0aXZlL2NvcmUvY2FtZXJhLWFuZC1taWNyb3Bob25lLyNzcGVha2VyLW1hbmFnZW1lbnQgZm9yIG1vcmUgZGV0YWlscycpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2b2x1bWUgJiYgKHZvbHVtZSA8IDAgfHwgdm9sdW1lID4gMSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVm9sdW1lIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZS5zZXRWb2x1bWUodm9sdW1lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSB2b2x1bWUgb2YgYSBwYXJ0aWNpcGFudC5cbiAgICAgKlxuICAgICAqIE5vdGU6IFRoaXMgbWV0aG9kIGlzIG5vdCBzdXBwb3J0ZWQgaW4gUmVhY3QgTmF0aXZlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNlc3Npb25JZCB0aGUgcGFydGljaXBhbnQncyBzZXNzaW9uIGlkLlxuICAgICAqIEBwYXJhbSB2b2x1bWUgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxLiBTZXQgaXQgdG8gYHVuZGVmaW5lZGAgdG8gdXNlIHRoZSBkZWZhdWx0IHZvbHVtZS5cbiAgICAgKi9cbiAgICBzZXRQYXJ0aWNpcGFudFZvbHVtZShzZXNzaW9uSWQsIHZvbHVtZSkge1xuICAgICAgICBpZiAoaXNSZWFjdE5hdGl2ZSgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgZmVhdHVyZSBpcyBub3Qgc3VwcG9ydGVkIGluIFJlYWN0IE5hdGl2ZS4gUGxlYXNlIHZpc2l0IGh0dHBzOi8vZ2V0c3RyZWFtLmlvL3ZpZGVvL2RvY3MvcmVhY3RuYXRpdmUvY29yZS9jYW1lcmEtYW5kLW1pY3JvcGhvbmUvI3NwZWFrZXItbWFuYWdlbWVudCBmb3IgbW9yZSBkZXRhaWxzJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZvbHVtZSAmJiAodm9sdW1lIDwgMCB8fCB2b2x1bWUgPiAxKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdWb2x1bWUgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEsIG9yIHVuZGVmaW5lZCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FsbC5zdGF0ZS51cGRhdGVQYXJ0aWNpcGFudChzZXNzaW9uSWQsIHsgYXVkaW9Wb2x1bWU6IHZvbHVtZSB9KTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGEgYENhbGxgLlxuICovXG5jbGFzcyBDYWxsIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IGBDYWxsYCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIE5PVEU6IERvbid0IGNhbGwgdGhlIGNvbnN0cnVjdG9yIGRpcmVjdGx5LCBpbnN0ZWFkXG4gICAgICogVXNlIHRoZSBbYFN0cmVhbVZpZGVvQ2xpZW50LmNhbGxgXSguL1N0cmVhbVZpZGVvQ2xpZW50Lm1kLyNjYWxsKVxuICAgICAqIG1ldGhvZCB0byBjb25zdHJ1Y3QgYSBgQ2FsbGAgaW5zdGFuY2UuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoeyB0eXBlLCBpZCwgc3RyZWFtQ2xpZW50LCBtZW1iZXJzLCBvd25DYXBhYmlsaXRpZXMsIHNvcnRQYXJ0aWNpcGFudHNCeSwgY2xpZW50U3RvcmUsIHJpbmdpbmcgPSBmYWxzZSwgd2F0Y2hpbmcgPSBmYWxzZSwgfSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHN0YXRlIG9mIHRoaXMgY2FsbC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhdGUgPSBuZXcgQ2FsbFN0YXRlKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgRHluYXNjYWxlTWFuYWdlciBpbnN0YW5jZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZHluYXNjYWxlTWFuYWdlciA9IG5ldyBEeW5hc2NhbGVNYW5hZ2VyKHRoaXMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHBlcm1pc3Npb25zIGNvbnRleHQgb2YgdGhpcyBjYWxsLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wZXJtaXNzaW9uc0NvbnRleHQgPSBuZXcgUGVybWlzc2lvbnNDb250ZXh0KCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZXZlbnQgZGlzcGF0Y2hlciBpbnN0YW5jZSBkZWRpY2F0ZWQgdG8gdGhpcyBDYWxsIGluc3RhbmNlLlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyID0gbmV3IERpc3BhdGNoZXIoKTtcbiAgICAgICAgdGhpcy50cmFja1N1YnNjcmlwdGlvbnNTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdCh7IHR5cGU6IERlYm91bmNlVHlwZS5NRURJVU0sIGRhdGE6IFtdIH0pO1xuICAgICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHRzID0gMDtcbiAgICAgICAgdGhpcy5tYXhSZWNvbm5lY3RBdHRlbXB0cyA9IDEwO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBsaXN0IGhvb2tzL2Z1bmN0aW9ucyB0byBpbnZva2Ugd2hlbiB0aGUgY2FsbCBpcyBsZWZ0LlxuICAgICAgICAgKiBBIHR5cGljYWwgdXNlIGNhc2UgaXMgdG8gY2xlYW4gdXAgc29tZSBnbG9iYWwgZXZlbnQgaGFuZGxlcnMuXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxlYXZlQ2FsbEhvb2tzID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLnN0cmVhbUNsaWVudEV2ZW50SGFuZGxlcnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBZb3UgY2FuIHN1YnNjcmliZSB0byBXZWJTb2NrZXQgZXZlbnRzIHByb3ZpZGVkIGJ5IHRoZSBBUEkuIFRvIHJlbW92ZSBhIHN1YnNjcmlwdGlvbiwgY2FsbCB0aGUgYG9mZmAgbWV0aG9kLlxuICAgICAgICAgKiBQbGVhc2Ugbm90ZSB0aGF0IHN1YnNjcmliaW5nIHRvIFdlYlNvY2tldCBldmVudHMgaXMgYW4gYWR2YW5jZWQgdXNlLWNhc2UuXG4gICAgICAgICAqIEZvciBtb3N0IHVzZS1jYXNlcywgaXQgc2hvdWxkIGJlIGVub3VnaCB0byB3YXRjaCBmb3Igc3RhdGUgY2hhbmdlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGV2ZW50TmFtZSB0aGUgZXZlbnQgbmFtZS5cbiAgICAgICAgICogQHBhcmFtIGZuIHRoZSBldmVudCBoYW5kbGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbiA9IChldmVudE5hbWUsIGZuKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNTZnVFdmVudChldmVudE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2hlci5vbihldmVudE5hbWUsIGZuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG9mZkhhbmRsZXIgPSB0aGlzLnN0cmVhbUNsaWVudC5vbihldmVudE5hbWUsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBlO1xuICAgICAgICAgICAgICAgIGlmIChldmVudC5jYWxsX2NpZCAmJiBldmVudC5jYWxsX2NpZCA9PT0gdGhpcy5jaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm4oZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8ga2VlcCB0aGUgJ29mZicgcmVmZXJlbmNlIHJldHVybmVkIGJ5IHRoZSBzdHJlYW0gY2xpZW50XG4gICAgICAgICAgICB0aGlzLnN0cmVhbUNsaWVudEV2ZW50SGFuZGxlcnMuc2V0KGZuLCBvZmZIYW5kbGVyKTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vZmYoZXZlbnROYW1lLCBmbik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIHN1YnNjcmlwdGlvbiBmb3IgV2ViU29ja2V0IGV2ZW50cyB0aGF0IHdlcmUgY3JlYXRlZCBieSB0aGUgYG9uYCBtZXRob2QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBldmVudE5hbWUgdGhlIGV2ZW50IG5hbWUuXG4gICAgICAgICAqIEBwYXJhbSBmbiB0aGUgZXZlbnQgaGFuZGxlci5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub2ZmID0gKGV2ZW50TmFtZSwgZm4pID0+IHtcbiAgICAgICAgICAgIGlmIChpc1NmdUV2ZW50KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kaXNwYXRjaGVyLm9mZihldmVudE5hbWUsIGZuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHVuc3Vic2NyaWJlIGZyb20gdGhlIHN0cmVhbSBjbGllbnQgZXZlbnQgYnkgdXNpbmcgdGhlICdvZmYnIHJlZmVyZW5jZVxuICAgICAgICAgICAgY29uc3QgcmVnaXN0ZXJlZE9mZkhhbmRsZXIgPSB0aGlzLnN0cmVhbUNsaWVudEV2ZW50SGFuZGxlcnMuZ2V0KGZuKTtcbiAgICAgICAgICAgIGlmIChyZWdpc3RlcmVkT2ZmSGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHJlZ2lzdGVyZWRPZmZIYW5kbGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMZWF2ZSB0aGUgY2FsbCBhbmQgc3RvcCB0aGUgbWVkaWEgc3RyZWFtcyB0aGF0IHdlcmUgcHVibGlzaGVkIGJ5IHRoZSBjYWxsLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sZWF2ZSA9IGFzeW5jICh7IHJlamVjdCA9IGZhbHNlLCByZWFzb24gPSAndXNlciBpcyBsZWF2aW5nIHRoZSBjYWxsJywgfSA9IHt9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjYWxsaW5nU3RhdGUgPSB0aGlzLnN0YXRlLmNhbGxpbmdTdGF0ZTtcbiAgICAgICAgICAgIGlmIChjYWxsaW5nU3RhdGUgPT09IENhbGxpbmdTdGF0ZS5MRUZUKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgbGVhdmUgY2FsbCB0aGF0IGhhcyBhbHJlYWR5IGJlZW4gbGVmdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYWxsaW5nU3RhdGUgPT09IENhbGxpbmdTdGF0ZS5KT0lOSU5HKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hc3NlcnRDYWxsSm9pbmVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5yaW5naW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gSSdtIHRoZSBvbmUgd2hvIHN0YXJ0ZWQgdGhlIGNhbGwsIHNvIEkgc2hvdWxkIGNhbmNlbCBpdC5cbiAgICAgICAgICAgICAgICBjb25zdCBoYXNPdGhlclBhcnRpY2lwYW50cyA9IHRoaXMuc3RhdGUucmVtb3RlUGFydGljaXBhbnRzLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNDcmVhdGVkQnlNZSAmJiAhaGFzT3RoZXJQYXJ0aWNpcGFudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2lnbmFscyBvdGhlciB1c2VycyB0aGF0IEkgaGF2ZSBjYW5jZWxsZWQgbXkgY2FsbCB0byB0aGVtXG4gICAgICAgICAgICAgICAgICAgIC8vIGJlZm9yZSB0aGV5IGFjY2VwdGVkIGl0LlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnJlamVjdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZWplY3QgJiYgY2FsbGluZ1N0YXRlID09PSBDYWxsaW5nU3RhdGUuUklOR0lORykge1xuICAgICAgICAgICAgICAgICAgICAvLyBTaWduYWxzIG90aGVyIHVzZXJzIHRoYXQgSSBoYXZlIHJlamVjdGVkIHRoZSBpbmNvbWluZyBjYWxsLlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnJlamVjdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RhdHNSZXBvcnRlcj8uc3RvcCgpO1xuICAgICAgICAgICAgdGhpcy5zdGF0c1JlcG9ydGVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5zZnVTdGF0c1JlcG9ydGVyPy5zdG9wKCk7XG4gICAgICAgICAgICB0aGlzLnNmdVN0YXRzUmVwb3J0ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZXI/LmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLnB1Ymxpc2hlcj8uY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMucHVibGlzaGVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5zZnVDbGllbnQ/LmNsb3NlKFN0cmVhbVNmdUNsaWVudC5OT1JNQUxfQ0xPU1VSRSwgcmVhc29uKTtcbiAgICAgICAgICAgIHRoaXMuc2Z1Q2xpZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaGVyLm9mZkFsbCgpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZXRDYWxsaW5nU3RhdGUoQ2FsbGluZ1N0YXRlLkxFRlQpO1xuICAgICAgICAgICAgLy8gQ2FsbCBhbGwgbGVhdmUgY2FsbCBob29rcywgZS5nLiB0byBjbGVhbiB1cCBnbG9iYWwgZXZlbnQgaGFuZGxlcnNcbiAgICAgICAgICAgIHRoaXMubGVhdmVDYWxsSG9va3MuZm9yRWFjaCgoaG9vaykgPT4gaG9vaygpKTtcbiAgICAgICAgICAgIHRoaXMuY2xpZW50U3RvcmUudW5yZWdpc3RlckNhbGwodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYS5yZW1vdmVTdWJzY3JpcHRpb25zKCk7XG4gICAgICAgICAgICB0aGlzLm1pY3JvcGhvbmUucmVtb3ZlU3Vic2NyaXB0aW9ucygpO1xuICAgICAgICAgICAgdGhpcy5zY3JlZW5TaGFyZS5yZW1vdmVTdWJzY3JpcHRpb25zKCk7XG4gICAgICAgICAgICB0aGlzLnNwZWFrZXIucmVtb3ZlU3Vic2NyaXB0aW9ucygpO1xuICAgICAgICAgICAgY29uc3Qgc3RvcE9uTGVhdmVQcm9taXNlcyA9IFtdO1xuICAgICAgICAgICAgaWYgKHRoaXMuY2FtZXJhLnN0b3BPbkxlYXZlKSB7XG4gICAgICAgICAgICAgICAgc3RvcE9uTGVhdmVQcm9taXNlcy5wdXNoKHRoaXMuY2FtZXJhLmRpc2FibGUodHJ1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubWljcm9waG9uZS5zdG9wT25MZWF2ZSkge1xuICAgICAgICAgICAgICAgIHN0b3BPbkxlYXZlUHJvbWlzZXMucHVzaCh0aGlzLm1pY3JvcGhvbmUuZGlzYWJsZSh0cnVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zY3JlZW5TaGFyZS5zdG9wT25MZWF2ZSkge1xuICAgICAgICAgICAgICAgIHN0b3BPbkxlYXZlUHJvbWlzZXMucHVzaCh0aGlzLnNjcmVlblNoYXJlLmRpc2FibGUodHJ1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoc3RvcE9uTGVhdmVQcm9taXNlcyk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMb2FkcyB0aGUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNhbGwuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBwYXJhbXMucmluZyBpZiBzZXQgdG8gdHJ1ZSwgYSBgY2FsbC5yaW5nYCBldmVudCB3aWxsIGJlIHNlbnQgdG8gdGhlIGNhbGwgbWVtYmVycy5cbiAgICAgICAgICogQHBhcmFtIHBhcmFtcy5ub3RpZnkgaWYgc2V0IHRvIHRydWUsIGEgYGNhbGwubm90aWZpY2F0aW9uYCBldmVudCB3aWxsIGJlIHNlbnQgdG8gdGhlIGNhbGwgbWVtYmVycy5cbiAgICAgICAgICogQHBhcmFtIHBhcmFtcy5tZW1iZXJzX2xpbWl0IHRoZSB0b3RhbCBudW1iZXIgb2YgbWVtYmVycyB0byByZXR1cm4gYXMgcGFydCBvZiB0aGUgcmVzcG9uc2UuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdldCA9IGFzeW5jIChwYXJhbXMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5zdHJlYW1DbGllbnQuZ2V0KHRoaXMuc3RyZWFtQ2xpZW50QmFzZVBhdGgsIHBhcmFtcyk7XG4gICAgICAgICAgICBpZiAocGFyYW1zPy5yaW5nICYmICF0aGlzLnJpbmdpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJpbmdpbmdTdWJqZWN0Lm5leHQodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnVwZGF0ZUZyb21DYWxsUmVzcG9uc2UocmVzcG9uc2UuY2FsbCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnNldE1lbWJlcnMocmVzcG9uc2UubWVtYmVycyk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnNldE93bkNhcGFiaWxpdGllcyhyZXNwb25zZS5vd25fY2FwYWJpbGl0aWVzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0cmVhbUNsaWVudC5faGFzQ29ubmVjdGlvbklEKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndhdGNoaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudFN0b3JlLnJlZ2lzdGVyQ2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYXBwbHlEZXZpY2VDb25maWcoKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIExvYWRzIHRoZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2FsbCBhbmQgY3JlYXRlcyBpdCBpZiBpdCBkb2Vzbid0IGV4aXN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gZGF0YSB0aGUgZGF0YSB0byBjcmVhdGUgdGhlIGNhbGwgd2l0aC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2V0T3JDcmVhdGUgPSBhc3luYyAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnN0cmVhbUNsaWVudC5wb3N0KHRoaXMuc3RyZWFtQ2xpZW50QmFzZVBhdGgsIGRhdGEpO1xuICAgICAgICAgICAgaWYgKGRhdGE/LnJpbmcgJiYgIXRoaXMucmluZ2luZykge1xuICAgICAgICAgICAgICAgIHRoaXMucmluZ2luZ1N1YmplY3QubmV4dCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RhdGUudXBkYXRlRnJvbUNhbGxSZXNwb25zZShyZXNwb25zZS5jYWxsKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuc2V0TWVtYmVycyhyZXNwb25zZS5tZW1iZXJzKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuc2V0T3duQ2FwYWJpbGl0aWVzKHJlc3BvbnNlLm93bl9jYXBhYmlsaXRpZXMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RyZWFtQ2xpZW50Ll9oYXNDb25uZWN0aW9uSUQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMud2F0Y2hpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50U3RvcmUucmVnaXN0ZXJDYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hcHBseURldmljZUNvbmZpZygpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIGNhbGxcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGRhdGEgdGhlIGRhdGEgdG8gY3JlYXRlIHRoZSBjYWxsIHdpdGguXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNyZWF0ZSA9IGFzeW5jIChkYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRPckNyZWF0ZShkYXRhKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgc2hvcnRjdXQgZm9yIHtAbGluayBDYWxsLmdldH0gd2l0aCBgcmluZ2AgcGFyYW1ldGVyIHNldCB0byBgdHJ1ZWAuXG4gICAgICAgICAqIFdpbGwgc2VuZCBhIGBjYWxsLnJpbmdgIGV2ZW50IHRvIHRoZSBjYWxsIG1lbWJlcnMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJpbmcgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXQoeyByaW5nOiB0cnVlIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBzaG9ydGN1dCBmb3Ige0BsaW5rIENhbGwuZ2V0fSB3aXRoIGBub3RpZnlgIHBhcmFtZXRlciBzZXQgdG8gYHRydWVgLlxuICAgICAgICAgKiBXaWxsIHNlbmQgYSBgY2FsbC5ub3RpZmljYXRpb25gIGV2ZW50IHRvIHRoZSBjYWxsIG1lbWJlcnMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5vdGlmeSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldCh7IG5vdGlmeTogdHJ1ZSB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1hcmtzIHRoZSBpbmNvbWluZyBjYWxsIGFzIGFjY2VwdGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgdXNlZCBvbmx5IGZvciBcInJpbmdpbmdcIiBjYWxsIGZsb3dzLlxuICAgICAgICAgKiB7QGxpbmsgQ2FsbC5qb2lufSBpbnZva2VzIHRoaXMgbWV0aG9kIGF1dG9tYXRpY2FsbHkgZm9yIHlvdSB3aGVuIGpvaW5pbmcgYSBjYWxsLlxuICAgICAgICAgKiBVbmxlc3MgeW91IGFyZSBpbXBsZW1lbnRpbmcgYSBjdXN0b20gXCJyaW5naW5nXCIgZmxvdywgeW91IHNob3VsZCBub3QgdXNlIHRoaXMgbWV0aG9kLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hY2NlcHQgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW1DbGllbnQucG9zdChgJHt0aGlzLnN0cmVhbUNsaWVudEJhc2VQYXRofS9hY2NlcHRgKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1hcmtzIHRoZSBpbmNvbWluZyBjYWxsIGFzIHJlamVjdGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgdXNlZCBvbmx5IGZvciBcInJpbmdpbmdcIiBjYWxsIGZsb3dzLlxuICAgICAgICAgKiB7QGxpbmsgQ2FsbC5sZWF2ZX0gaW52b2tlcyB0aGlzIG1ldGhvZCBhdXRvbWF0aWNhbGx5IGZvciB5b3Ugd2hlbiB5b3UgbGVhdmUgb3IgcmVqZWN0IHRoaXMgY2FsbC5cbiAgICAgICAgICogVW5sZXNzIHlvdSBhcmUgaW1wbGVtZW50aW5nIGEgY3VzdG9tIFwicmluZ2luZ1wiIGZsb3csIHlvdSBzaG91bGQgbm90IHVzZSB0aGlzIG1ldGhvZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVqZWN0ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtQ2xpZW50LnBvc3QoYCR7dGhpcy5zdHJlYW1DbGllbnRCYXNlUGF0aH0vcmVqZWN0YCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaWxsIHN0YXJ0IHRvIHdhdGNoIGZvciBjYWxsIHJlbGF0ZWQgV2ViU29ja2V0IGV2ZW50cyBhbmQgaW5pdGlhdGUgYSBjYWxsIHNlc3Npb24gd2l0aCB0aGUgc2VydmVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyBhIHByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgb25jZSB0aGUgY2FsbCBqb2luLWZsb3cgaGFzIGZpbmlzaGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5qb2luID0gYXN5bmMgKGRhdGEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxpbmdTdGF0ZSA9IHRoaXMuc3RhdGUuY2FsbGluZ1N0YXRlO1xuICAgICAgICAgICAgaWYgKFtDYWxsaW5nU3RhdGUuSk9JTkVELCBDYWxsaW5nU3RhdGUuSk9JTklOR10uaW5jbHVkZXMoY2FsbGluZ1N0YXRlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCd3YXJuJywgJ0pvaW4gbWV0aG9kIGNhbGxlZCB0d2ljZSwgeW91IHNob3VsZCBvbmx5IGNhbGwgdGhpcyBvbmNlJyk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbGxlZ2FsIFN0YXRlOiBBbHJlYWR5IGpvaW5lZC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYWxsaW5nU3RhdGUgPT09IENhbGxpbmdTdGF0ZS5MRUZUKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIFN0YXRlOiBDYW5ub3Qgam9pbiBhbHJlYWR5IGxlZnQgY2FsbC4gQ3JlYXRlIGEgbmV3IENhbGwgaW5zdGFuY2UgdG8gam9pbiBhIGNhbGwuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpc01pZ3JhdGluZyA9IGNhbGxpbmdTdGF0ZSA9PT0gQ2FsbGluZ1N0YXRlLk1JR1JBVElORztcbiAgICAgICAgICAgIGNvbnN0IGlzUmVjb25uZWN0aW5nID0gY2FsbGluZ1N0YXRlID09PSBDYWxsaW5nU3RhdGUuUkVDT05ORUNUSU5HO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZXRDYWxsaW5nU3RhdGUoQ2FsbGluZ1N0YXRlLkpPSU5JTkcpO1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ2RlYnVnJywgJ1N0YXJ0aW5nIGpvaW4gZmxvdycpO1xuICAgICAgICAgICAgaWYgKGRhdGE/LnJpbmcgJiYgIXRoaXMucmluZ2luZykge1xuICAgICAgICAgICAgICAgIHRoaXMucmluZ2luZ1N1YmplY3QubmV4dCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnJpbmdpbmcgJiYgIXRoaXMuaXNDcmVhdGVkQnlNZSkge1xuICAgICAgICAgICAgICAgIC8vIHNpZ25hbHMgb3RoZXIgdXNlcnMgdGhhdCBJIGhhdmUgYWNjZXB0ZWQgdGhlIGluY29taW5nIGNhbGwuXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hY2NlcHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBzZnVTZXJ2ZXI7XG4gICAgICAgICAgICBsZXQgc2Z1VG9rZW47XG4gICAgICAgICAgICBsZXQgY29ubmVjdGlvbkNvbmZpZztcbiAgICAgICAgICAgIGxldCBzdGF0c09wdGlvbnM7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNmdUNsaWVudD8uaXNGYXN0UmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVzZSBwcmV2aW91cyBTRlUgY29uZmlndXJhdGlvbiBhbmQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25Db25maWcgPSB0aGlzLnB1Ymxpc2hlcj8uY29ubmVjdGlvbkNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICAgICAgICAgIHNmdVNlcnZlciA9IHRoaXMuc2Z1Q2xpZW50LnNmdVNlcnZlcjtcbiAgICAgICAgICAgICAgICAgICAgc2Z1VG9rZW4gPSB0aGlzLnNmdUNsaWVudC50b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHNPcHRpb25zID0gdGhpcy5zZnVTdGF0c1JlcG9ydGVyPy5vcHRpb25zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZnVsbCBqb2luIGZsb3cgLSBsZXQgdGhlIENvb3JkaW5hdG9yIHBpY2sgYSBuZXcgU0ZVIGZvciB1c1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYWxsID0gYXdhaXQgam9pbih0aGlzLnN0cmVhbUNsaWVudCwgdGhpcy50eXBlLCB0aGlzLmlkLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS51cGRhdGVGcm9tQ2FsbFJlc3BvbnNlKGNhbGwubWV0YWRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNldE1lbWJlcnMoY2FsbC5tZW1iZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZXRPd25DYXBhYmlsaXRpZXMoY2FsbC5vd25DYXBhYmlsaXRpZXMpO1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uQ29uZmlnID0gY2FsbC5jb25uZWN0aW9uQ29uZmlnO1xuICAgICAgICAgICAgICAgICAgICBzZnVTZXJ2ZXIgPSBjYWxsLnNmdVNlcnZlcjtcbiAgICAgICAgICAgICAgICAgICAgc2Z1VG9rZW4gPSBjYWxsLnRva2VuO1xuICAgICAgICAgICAgICAgICAgICBzdGF0c09wdGlvbnMgPSBjYWxsLnN0YXRzT3B0aW9ucztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RyZWFtQ2xpZW50Ll9oYXNDb25uZWN0aW9uSUQoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndhdGNoaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGllbnRTdG9yZS5yZWdpc3RlckNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gcmVzdG9yZSB0aGUgcHJldmlvdXMgY2FsbCBzdGF0ZSBpZiB0aGUgam9pbi1mbG93IGZhaWxzXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZXRDYWxsaW5nU3RhdGUoY2FsbGluZ1N0YXRlKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzU2Z1Q2xpZW50ID0gdGhpcy5zZnVDbGllbnQ7XG4gICAgICAgICAgICBjb25zdCBzZnVDbGllbnQgPSAodGhpcy5zZnVDbGllbnQgPSBuZXcgU3RyZWFtU2Z1Q2xpZW50KHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaGVyOiB0aGlzLmRpc3BhdGNoZXIsXG4gICAgICAgICAgICAgICAgc2Z1U2VydmVyLFxuICAgICAgICAgICAgICAgIHRva2VuOiBzZnVUb2tlbixcbiAgICAgICAgICAgICAgICBzZXNzaW9uSWQ6IHByZXZpb3VzU2Z1Q2xpZW50Py5zZXNzaW9uSWQsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEEgY2xvc3VyZSB3aGljaCBoaWRlcyBhd2F5IHRoZSByZS1jb25uZWN0aW9uIGxvZ2ljLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCByZWNvbm5lY3QgPSBhc3luYyAoc3RyYXRlZ3ksIHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHRoaXMuc3RhdGUuY2FsbGluZ1N0YXRlO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U3RhdGUgPT09IENhbGxpbmdTdGF0ZS5NSUdSQVRJTkcgfHxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFN0YXRlID09PSBDYWxsaW5nU3RhdGUuUkVDT05ORUNUSU5HKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHByZXZlbnQgcGFyYWxsZWwgcmVjb25uZWN0aW9uIGF0dGVtcHRzXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cysrO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2V0Q2FsbGluZ1N0YXRlKHN0cmF0ZWd5ID09PSAnbWlncmF0ZSdcbiAgICAgICAgICAgICAgICAgICAgPyBDYWxsaW5nU3RhdGUuTUlHUkFUSU5HXG4gICAgICAgICAgICAgICAgICAgIDogQ2FsbGluZ1N0YXRlLlJFQ09OTkVDVElORyk7XG4gICAgICAgICAgICAgICAgaWYgKHN0cmF0ZWd5ID09PSAnbWlncmF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ2RlYnVnJywgYFtNaWdyYXRpb25dOiBtaWdyYXRpbmcgY2FsbCAke3RoaXMuY2lkfSBhd2F5IGZyb20gJHtzZnVTZXJ2ZXIuZWRnZV9uYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBzZnVDbGllbnQuaXNNaWdyYXRpbmdBd2F5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdkZWJ1ZycsIGBbUmVqb2luXTogJHtzdHJhdGVneX0gcmVqb2luIGNhbGwgJHt0aGlzLmNpZH0gKCR7dGhpcy5yZWNvbm5lY3RBdHRlbXB0c30pLi4uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHRha2UgYSBzbmFwc2hvdCBvZiB0aGUgY3VycmVudCBcImxvY2FsIHBhcnRpY2lwYW50XCIgc3RhdGVcbiAgICAgICAgICAgICAgICAvLyB3ZSdsbCBuZWVkIGl0IGZvciByZXN0b3JpbmcgdGhlIHByZXZpb3VzIHB1Ymxpc2hpbmcgc3RhdGUgbGF0ZXJcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFBhcnRpY2lwYW50ID0gdGhpcy5zdGF0ZS5sb2NhbFBhcnRpY2lwYW50O1xuICAgICAgICAgICAgICAgIGlmIChzdHJhdGVneSA9PT0gJ2Zhc3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNmdUNsaWVudC5jbG9zZShTdHJlYW1TZnVDbGllbnQuRVJST1JfQ09OTkVDVElPTl9CUk9LRU4sIGBhdHRlbXB0aW5nIGZhc3QgcmVjb25uZWN0OiAke3JlYXNvbn1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RyYXRlZ3kgPT09ICdmdWxsJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBpbiBtaWdyYXRpb24gb3IgcmVjb3Zlcnkgc2NlbmFyaW9zLCB3ZSBkb24ndCB3YW50IHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIHdhaXQgYmVmb3JlIGF0dGVtcHRpbmcgdG8gcmVjb25uZWN0IHRvIGFuIFNGVSBzZXJ2ZXJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2xlZXAocmV0cnlJbnRlcnZhbCh0aGlzLnJlY29ubmVjdEF0dGVtcHRzKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGluIGZ1bGwtcmVjb25uZWN0LCB3ZSBuZWVkIHRvIGRpc3Bvc2UgYWxsIFBlZXIgQ29ubmVjdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVyPy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHVibGlzaGVyPy5jbG9zZSh7IHN0b3BUcmFja3M6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnB1Ymxpc2hlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0c1JlcG9ydGVyPy5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdHNSZXBvcnRlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZnVTdGF0c1JlcG9ydGVyPy5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2Z1U3RhdHNSZXBvcnRlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2xlYW4gdXAgY3VycmVudCBjb25uZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIHNmdUNsaWVudC5jbG9zZShTdHJlYW1TZnVDbGllbnQuTk9STUFMX0NMT1NVUkUsIGBhdHRlbXB0aW5nIGZ1bGwgcmVjb25uZWN0OiAke3JlYXNvbn1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5qb2luKHtcbiAgICAgICAgICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgLi4uKHN0cmF0ZWd5ID09PSAnbWlncmF0ZScgJiYgeyBtaWdyYXRpbmdfZnJvbTogc2Z1U2VydmVyLmVkZ2VfbmFtZSB9KSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBjbGVhbiB1cCBwcmV2aW91cyBjb25uZWN0aW9uXG4gICAgICAgICAgICAgICAgaWYgKHN0cmF0ZWd5ID09PSAnbWlncmF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Z1Q2xpZW50LmNsb3NlKFN0cmVhbVNmdUNsaWVudC5OT1JNQUxfQ0xPU1VSRSwgJ2F0dGVtcHRpbmcgbWlncmF0aW9uJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdpbmZvJywgYFtSZWpvaW5dOiBBdHRlbXB0ICR7dGhpcy5yZWNvbm5lY3RBdHRlbXB0c30gc3VjY2Vzc2Z1bCFgKTtcbiAgICAgICAgICAgICAgICAvLyB3ZSBzaG91bGRuJ3QgYmUgcmVwdWJsaXNoaW5nIHRoZSBzdHJlYW1zIGlmIHdlJ3JlIG1pZ3JhdGluZ1xuICAgICAgICAgICAgICAgIC8vIGFzIHRoZSB1bmRlcmx5aW5nIHBlZXIgY29ubmVjdGlvbiB3aWxsIHRha2UgY2FyZSBvZiBpdCBhcyBwYXJ0XG4gICAgICAgICAgICAgICAgLy8gb2YgdGhlIGljZS1yZXN0YXJ0IHByb2Nlc3NcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxQYXJ0aWNpcGFudCAmJiBzdHJhdGVneSA9PT0gJ2Z1bGwnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgYXVkaW9TdHJlYW0sIHZpZGVvU3RyZWFtLCBzY3JlZW5TaGFyZVN0cmVhbSwgc2NyZWVuU2hhcmVBdWRpb1N0cmVhbSwgfSA9IGxvY2FsUGFydGljaXBhbnQ7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzY3JlZW5TaGFyZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjcmVlblNoYXJlU3RyZWFtIHx8IHNjcmVlblNoYXJlQXVkaW9TdHJlYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlblNoYXJlID0gbmV3IE1lZGlhU3RyZWFtKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW5TaGFyZVN0cmVhbT8uZ2V0VmlkZW9UcmFja3MoKS5mb3JFYWNoKCh0cmFjaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlblNoYXJlPy5hZGRUcmFjayh0cmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlblNoYXJlQXVkaW9TdHJlYW0/LmdldEF1ZGlvVHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW5TaGFyZT8uYWRkVHJhY2sodHJhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gcmVzdG9yZSBwcmV2aW91cyBwdWJsaXNoaW5nIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdWRpb1N0cmVhbSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucHVibGlzaEF1ZGlvU3RyZWFtKGF1ZGlvU3RyZWFtKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZpZGVvU3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnB1Ymxpc2hWaWRlb1N0cmVhbSh2aWRlb1N0cmVhbSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWZlcnJlZENvZGVjOiB0aGlzLmNhbWVyYS5wcmVmZXJyZWRDb2RlYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzY3JlZW5TaGFyZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucHVibGlzaFNjcmVlblNoYXJlU3RyZWFtKHNjcmVlblNoYXJlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ2luZm8nLCBgW1Jlam9pbl06IFN0YXRlIHJlc3RvcmVkLiBBdHRlbXB0OiAke3RoaXMucmVjb25uZWN0QXR0ZW1wdHN9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIHJlY29ubmVjdCBpZiB0aGUgY29ubmVjdGlvbiB3YXMgY2xvc2VkIHVuZXhwZWN0ZWRseS4gZXhhbXBsZTpcbiAgICAgICAgICAgIC8vIC0gU0ZVIGNyYXNoIG9yIHJlc3RhcnRcbiAgICAgICAgICAgIC8vIC0gbmV0d29yayBjaGFuZ2VcbiAgICAgICAgICAgIHNmdUNsaWVudC5zaWduYWxSZWFkeS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyByZWdpc3RlciBhIGhhbmRsZXIgZm9yIHRoZSBcImdvQXdheVwiIGV2ZW50XG4gICAgICAgICAgICAgICAgY29uc3QgdW5yZWdpc3RlckdvQXdheSA9IHRoaXMuZGlzcGF0Y2hlci5vbignZ29Bd2F5JywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcmVhc29uIH0gPSBldmVudDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ2luZm8nLCBgW01pZ3JhdGlvbl06IEdvaW5nIGF3YXkgZnJvbSBTRlUuLi4gUmVhc29uOiAke0dvQXdheVJlYXNvbltyZWFzb25dfWApO1xuICAgICAgICAgICAgICAgICAgICByZWNvbm5lY3QoJ21pZ3JhdGUnLCBHb0F3YXlSZWFzb25bcmVhc29uXSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ3dhcm4nLCBgW01pZ3JhdGlvbl06IEZhaWxlZCB0byBtaWdyYXRlIHRvIGFub3RoZXIgU0ZVLmAsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNmdUNsaWVudC5zaWduYWxXcy5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVucmVnaXN0ZXIgdGhlIFwiZ29Bd2F5XCIgaGFuZGxlciwgYXMgd2Ugd29uJ3QgbmVlZCBpdCBhbnltb3JlIGZvciB0aGlzIGNvbm5lY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSB1cGNvbWluZyByZS1qb2luIHdpbGwgcmVnaXN0ZXIgYSBuZXcgaGFuZGxlciBhbnl3YXlcbiAgICAgICAgICAgICAgICAgICAgdW5yZWdpc3RlckdvQXdheSgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBkbyBub3RoaW5nIGlmIHRoZSBjb25uZWN0aW9uIHdhcyBjbG9zZWQgb24gcHVycG9zZVxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5jb2RlID09PSBTdHJlYW1TZnVDbGllbnQuTk9STUFMX0NMT1NVUkUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIC8vIGRvIG5vdGhpbmcgaWYgdGhlIGNvbm5lY3Rpb24gd2FzIGNsb3NlZCBiZWNhdXNlIG9mIGEgcG9saWN5IHZpb2xhdGlvblxuICAgICAgICAgICAgICAgICAgICAvLyBlLmcuLCB0aGUgdXNlciBoYXMgYmVlbiBibG9ja2VkIGJ5IGFuIGFkbWluIG9yIG1vZGVyYXRvclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5jb2RlID09PSBLbm93bkNvZGVzLldTX1BPTElDWV9WSU9MQVRJT04pXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIFNGVSBpcyBiZWluZyBzaHV0IGRvd24sIGl0IHNlbmRzIGEgZ29Bd2F5IG1lc3NhZ2UuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdoaWxlIHdlIG1pZ3JhdGUgdG8gYW5vdGhlciBTRlUsIHdlIG1pZ2h0IGhhdmUgdGhlIFdTIGNvbm5lY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gdGhlIG9sZCBTRlUgY2xvc2VkIGFicnVwdGx5LiBJbiB0aGlzIGNhc2UsIHdlIGRvbid0IHdhbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gcmVjb25uZWN0IHRvIHRoZSBvbGQgU0ZVLCBidXQgcmF0aGVyIHRvIHRoZSBuZXcgb25lLlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc01pZ3JhdGluZ0F3YXkgPSBlLmNvZGUgPT09IEtub3duQ29kZXMuV1NfQ0xPU0VEX0FCUlVQVExZICYmIHNmdUNsaWVudC5pc01pZ3JhdGluZ0F3YXk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzRmFzdFJlY29ubmVjdGluZyA9IGUuY29kZSA9PT0gS25vd25Db2Rlcy5XU19DTE9TRURfQUJSVVBUTFkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHNmdUNsaWVudC5pc0Zhc3RSZWNvbm5lY3Rpbmc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01pZ3JhdGluZ0F3YXkgfHwgaXNGYXN0UmVjb25uZWN0aW5nKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAvLyBkbyBub3RoaW5nIGlmIHRoZSBjb25uZWN0aW9uIHdhcyBjbG9zZWQgYmVjYXVzZSBvZiBhIGZhc3QgcmVjb25uZWN0XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmNvZGUgPT09IFN0cmVhbVNmdUNsaWVudC5FUlJPUl9DT05ORUNUSU9OX0JST0tFTilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVjb25uZWN0QXR0ZW1wdHMgPCB0aGlzLm1heFJlY29ubmVjdEF0dGVtcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZnVDbGllbnQuaXNGYXN0UmVjb25uZWN0aW5nID0gdGhpcy5yZWNvbm5lY3RBdHRlbXB0cyA9PT0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmF0ZWd5ID0gc2Z1Q2xpZW50LmlzRmFzdFJlY29ubmVjdGluZyA/ICdmYXN0JyA6ICdmdWxsJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29ubmVjdChzdHJhdGVneSwgYFNGVSBjbG9zZWQgdGhlIFdTIHdpdGggY29kZTogJHtlLmNvZGV9YCkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdlcnJvcicsIGBbUmVqb2luXTogJHtzdHJhdGVneX0gcmVqb2luIGZhaWxlZCBmb3IgJHt0aGlzLnJlY29ubmVjdEF0dGVtcHRzfSB0aW1lcy4gR2l2aW5nIHVwLmAsIGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZXRDYWxsaW5nU3RhdGUoQ2FsbGluZ1N0YXRlLlJFQ09OTkVDVElOR19GQUlMRUQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlcignZXJyb3InLCAnW1Jlam9pbl06IFJlY29ubmVjdCBhdHRlbXB0cyBleGNlZWRlZC4gR2l2aW5nIHVwLi4uJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNldENhbGxpbmdTdGF0ZShDYWxsaW5nU3RhdGUuUkVDT05ORUNUSU5HX0ZBSUxFRCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gaGFuZGxlcnMgZm9yIGNvbm5lY3Rpb24gb25saW5lL29mZmxpbmUgZXZlbnRzXG4gICAgICAgICAgICBjb25zdCB1bnN1YnNjcmliZU9ubGluZUV2ZW50ID0gdGhpcy5zdHJlYW1DbGllbnQub24oJ2Nvbm5lY3Rpb24uY2hhbmdlZCcsIGFzeW5jIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGUudHlwZSAhPT0gJ2Nvbm5lY3Rpb24uY2hhbmdlZCcpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoIWUub25saW5lKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmVPbmxpbmVFdmVudCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDYWxsaW5nU3RhdGUgPSB0aGlzLnN0YXRlLmNhbGxpbmdTdGF0ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBzaG91bGRSZWNvbm5lY3QgPSBjdXJyZW50Q2FsbGluZ1N0YXRlID09PSBDYWxsaW5nU3RhdGUuT0ZGTElORSB8fFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q2FsbGluZ1N0YXRlID09PSBDYWxsaW5nU3RhdGUuUkVDT05ORUNUSU5HX0ZBSUxFRDtcbiAgICAgICAgICAgICAgICBpZiAoIXNob3VsZFJlY29ubmVjdClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdpbmZvJywgJ1tSZWpvaW5dOiBHb2luZyBvbmxpbmUuLi4nKTtcbiAgICAgICAgICAgICAgICBsZXQgaXNGaXJzdFJlY29ubmVjdEF0dGVtcHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNmdUNsaWVudC5pc0Zhc3RSZWNvbm5lY3RpbmcgPSBpc0ZpcnN0UmVjb25uZWN0QXR0ZW1wdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHJlY29ubmVjdChpc0ZpcnN0UmVjb25uZWN0QXR0ZW1wdCA/ICdmYXN0JyA6ICdmdWxsJywgJ05ldHdvcms6IG9ubGluZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBicmVhayB0aGUgbG9vcCBpZiByZWpvaW4gaXMgc3VjY2Vzc2Z1bFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdlcnJvcicsIGBbUmVqb2luXVtOZXR3b3JrXTogUmVqb2luIGZhaWxlZCBmb3IgYXR0ZW1wdCAke3RoaXMucmVjb25uZWN0QXR0ZW1wdHN9YCwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyB3YWl0IGZvciBhIGJpdCBiZWZvcmUgdHJ5aW5nIHRvIHJlY29ubmVjdCBhZ2FpblxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzbGVlcChyZXRyeUludGVydmFsKHRoaXMucmVjb25uZWN0QXR0ZW1wdHMpKTtcbiAgICAgICAgICAgICAgICAgICAgaXNGaXJzdFJlY29ubmVjdEF0dGVtcHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IHdoaWxlICh0aGlzLnJlY29ubmVjdEF0dGVtcHRzIDwgdGhpcy5tYXhSZWNvbm5lY3RBdHRlbXB0cyk7XG4gICAgICAgICAgICAgICAgLy8gaWYgd2UncmUgaGVyZSwgaXQgbWVhbnMgdGhhdCB3ZSd2ZSBleGhhdXN0ZWQgYWxsIHRoZSByZWNvbm5lY3QgYXR0ZW1wdHNcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlcignZXJyb3InLCBgW1Jlam9pbl1bTmV0d29ya106IFJlam9pbiBmYWlsZWQuIEdpdmluZyB1cC5gKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNldENhbGxpbmdTdGF0ZShDYWxsaW5nU3RhdGUuUkVDT05ORUNUSU5HX0ZBSUxFRCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHVuc3Vic2NyaWJlT2ZmbGluZUV2ZW50ID0gdGhpcy5zdHJlYW1DbGllbnQub24oJ2Nvbm5lY3Rpb24uY2hhbmdlZCcsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGUudHlwZSAhPT0gJ2Nvbm5lY3Rpb24uY2hhbmdlZCcpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoZS5vbmxpbmUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB1bnN1YnNjcmliZU9mZmxpbmVFdmVudCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2V0Q2FsbGluZ1N0YXRlKENhbGxpbmdTdGF0ZS5PRkZMSU5FKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5sZWF2ZUNhbGxIb29rcy5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlT25saW5lRXZlbnQoKTtcbiAgICAgICAgICAgICAgICB1bnN1YnNjcmliZU9mZmxpbmVFdmVudCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlciA9IG5ldyBTdWJzY3JpYmVyKHtcbiAgICAgICAgICAgICAgICAgICAgc2Z1Q2xpZW50LFxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaGVyOiB0aGlzLmRpc3BhdGNoZXIsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlOiB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uQ29uZmlnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLnB1Ymxpc2hlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF1ZGlvU2V0dGluZ3MgPSB0aGlzLnN0YXRlLnNldHRpbmdzPy5hdWRpbztcbiAgICAgICAgICAgICAgICBjb25zdCBpc0R0eEVuYWJsZWQgPSAhIWF1ZGlvU2V0dGluZ3M/Lm9wdXNfZHR4X2VuYWJsZWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNSZWRFbmFibGVkID0gISFhdWRpb1NldHRpbmdzPy5yZWR1bmRhbnRfY29kaW5nX2VuYWJsZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5wdWJsaXNoZXIgPSBuZXcgUHVibGlzaGVyKHtcbiAgICAgICAgICAgICAgICAgICAgc2Z1Q2xpZW50LFxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaGVyOiB0aGlzLmRpc3BhdGNoZXIsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlOiB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uQ29uZmlnLFxuICAgICAgICAgICAgICAgICAgICBpc0R0eEVuYWJsZWQsXG4gICAgICAgICAgICAgICAgICAgIGlzUmVkRW5hYmxlZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5zdGF0c1JlcG9ydGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0c1JlcG9ydGVyID0gY3JlYXRlU3RhdHNSZXBvcnRlcih7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXI6IHRoaXMuc3Vic2NyaWJlcixcbiAgICAgICAgICAgICAgICAgICAgcHVibGlzaGVyOiB0aGlzLnB1Ymxpc2hlcixcbiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IHRoaXMuc3RhdGUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjbGllbnREZXRhaWxzID0gZ2V0Q2xpZW50RGV0YWlscygpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnNmdVN0YXRzUmVwb3J0ZXIgJiYgc3RhdHNPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZnVTdGF0c1JlcG9ydGVyID0gbmV3IFNmdVN0YXRzUmVwb3J0ZXIoc2Z1Q2xpZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWVudERldGFpbHMsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHN0YXRzT3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlcjogdGhpcy5zdWJzY3JpYmVyLFxuICAgICAgICAgICAgICAgICAgICBwdWJsaXNoZXI6IHRoaXMucHVibGlzaGVyLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuc2Z1U3RhdHNSZXBvcnRlci5zdGFydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyAxLiB3YWl0IGZvciB0aGUgc2lnbmFsIHNlcnZlciB0byBiZSByZWFkeSBiZWZvcmUgc2VuZGluZyBcImpvaW5SZXF1ZXN0XCJcbiAgICAgICAgICAgICAgICBzZnVDbGllbnQuc2lnbmFsUmVhZHlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHRoaXMubG9nZ2VyKCdlcnJvcicsICdTaWduYWwgcmVhZHkgZmFpbGVkJywgZXJyKSlcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJlcGFyZSBhIGdlbmVyaWMgU0RQIGFuZCBzZW5kIGl0IHRvIHRoZSBTRlUuXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgYSB0aHJvdy1hd2F5IFNEUCB0aGF0IHRoZSBTRlUgd2lsbCB1c2UgdG8gZGV0ZXJtaW5lXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBjYXBhYmlsaXRpZXMgb2YgdGhlIGNsaWVudCAoY29kZWMgc3VwcG9ydCwgZXRjLilcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gZ2V0R2VuZXJpY1NkcCgncmVjdm9ubHknKSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHNkcCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gZ2V0Q3VycmVudFZhbHVlKHRoaXMudHJhY2tTdWJzY3JpcHRpb25zU3ViamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1pZ3JhdGlvbiA9IGlzTWlncmF0aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tU2Z1SWQ6IGRhdGE/Lm1pZ3JhdGluZ19mcm9tIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnM6IHN1YnNjcmlwdGlvbnMuZGF0YSB8fCBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbm5vdW5jZWRUcmFja3M6IHRoaXMucHVibGlzaGVyPy5nZXRDdXJyZW50VHJhY2tJbmZvcygpIHx8IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZnVDbGllbnQuam9pbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyU2RwOiBzZHAgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGllbnREZXRhaWxzLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWlncmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFzdFJlY29ubmVjdDogcHJldmlvdXNTZnVDbGllbnQ/LmlzRmFzdFJlY29ubmVjdGluZyA/PyBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gMi4gaW4gcGFyYWxsZWwsIHdhaXQgZm9yIHRoZSBTRlUgdG8gc2VuZCB1cyB0aGUgXCJqb2luUmVzcG9uc2VcIlxuICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCB0aHJvdyBhbiBlcnJvciBpZiB0aGUgU0ZVIHJlamVjdHMgdGhlIGpvaW4gcmVxdWVzdCBvclxuICAgICAgICAgICAgICAgIC8vIGZhaWxzIHRvIHJlc3BvbmQgaW4gdGltZVxuICAgICAgICAgICAgICAgIGNvbnN0IHsgY2FsbFN0YXRlLCByZWNvbm5lY3RlZCB9ID0gYXdhaXQgdGhpcy53YWl0Rm9ySm9pblJlc3BvbnNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdkZWJ1ZycsICdbUmVqb2luXSBmYXN0IHJlY29ubmVjdGVkOicsIHJlY29ubmVjdGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzTWlncmF0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc3Vic2NyaWJlci5taWdyYXRlVG8oc2Z1Q2xpZW50LCBjb25uZWN0aW9uQ29uZmlnKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wdWJsaXNoZXIubWlncmF0ZVRvKHNmdUNsaWVudCwgY29ubmVjdGlvbkNvbmZpZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWNvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBTRlUgY2xpZW50IGluc3RhbmNlIG9uIHRoZSBzdWJzY3JpYmVyIGFuZCBwdWJsaXNoZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlci5zZXRTZnVDbGllbnQoc2Z1Q2xpZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVibGlzaGVyLnNldFNmdUNsaWVudChzZnVDbGllbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHBlcmZvcm0gYSBmdWxsIElDRSByZXN0YXJ0IG9uIHRoZSBwdWJsaXNoZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucHVibGlzaGVyLnJlc3RhcnRJY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwcmV2aW91c1NmdUNsaWVudD8uaXNGYXN0UmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZWNvbm5lY3Rpb24gd2Fzbid0IHBvc3NpYmxlLCBzbyB3ZSBuZWVkIHRvIGRvIGEgZnVsbCByZWpvaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCByZWNvbm5lY3QoJ2Z1bGwnLCAncmUtYXR0ZW1wdGluZycpLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlcignZXJyb3InLCBgW1Jlam9pbl06IFJlam9pbiBmYWlsZWQgZm9yY2VkIGZ1bGwgcmVqb2luLmAsIGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50UGFydGljaXBhbnRzID0gY2FsbFN0YXRlPy5wYXJ0aWNpcGFudHMgfHwgW107XG4gICAgICAgICAgICAgICAgY29uc3QgcGFydGljaXBhbnRDb3VudCA9IGNhbGxTdGF0ZT8ucGFydGljaXBhbnRDb3VudDtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydGVkQXQgPSBjYWxsU3RhdGU/LnN0YXJ0ZWRBdFxuICAgICAgICAgICAgICAgICAgICA/IFRpbWVzdGFtcC50b0RhdGUoY2FsbFN0YXRlLnN0YXJ0ZWRBdClcbiAgICAgICAgICAgICAgICAgICAgOiBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBpbnMgPSBjYWxsU3RhdGU/LnBpbnMgPz8gW107XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZXRQYXJ0aWNpcGFudHMoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0aWNpcGFudExvb2t1cCA9IHRoaXMuc3RhdGUuZ2V0UGFydGljaXBhbnRMb29rdXBCeVNlc3Npb25JZCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudFBhcnRpY2lwYW50cy5tYXAoKHApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gcHJlc2VydmUgdGhlIGxvY2FsIHN0YXRlIG9mIHRoZSBwYXJ0aWNpcGFudFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gKGUuZy4gdmlkZW9EaW1lbnNpb24sIHZpc2liaWxpdHlTdGF0ZSwgcGlubmVkQXQsIGV0Yy4pXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhcyBpdCBkb2Vzbid0IGV4aXN0IG9uIHRoZSBzZXJ2ZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZ1BhcnRpY2lwYW50ID0gcGFydGljaXBhbnRMb29rdXBbcC5zZXNzaW9uSWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocCwgZXhpc3RpbmdQYXJ0aWNpcGFudCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTG9jYWxQYXJ0aWNpcGFudDogcC5zZXNzaW9uSWQgPT09IHNmdUNsaWVudC5zZXNzaW9uSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnRWaXNpYmlsaXR5U3RhdGU6IGV4aXN0aW5nUGFydGljaXBhbnQ/LnZpZXdwb3J0VmlzaWJpbGl0eVN0YXRlID8/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9UcmFjazogVmlzaWJpbGl0eVN0YXRlLlVOS05PV04sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlblNoYXJlVHJhY2s6IFZpc2liaWxpdHlTdGF0ZS5VTktOT1dOLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZXRQYXJ0aWNpcGFudENvdW50KHBhcnRpY2lwYW50Q291bnQ/LnRvdGFsIHx8IDApO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2V0QW5vbnltb3VzUGFydGljaXBhbnRDb3VudChwYXJ0aWNpcGFudENvdW50Py5hbm9ueW1vdXMgfHwgMCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZXRTdGFydGVkQXQoc3RhcnRlZEF0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNldFNlcnZlclNpZGVQaW5zKHBpbnMpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVjb25uZWN0QXR0ZW1wdHMgPSAwOyAvLyByZXNldCB0aGUgcmVjb25uZWN0IGF0dGVtcHRzIGNvdW50ZXJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNldENhbGxpbmdTdGF0ZShDYWxsaW5nU3RhdGUuSk9JTkVEKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmluaXRDYW1lcmEoeyBzZXRTdGF0dXM6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuaW5pdE1pYyh7IHNldFN0YXR1czogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCd3YXJuJywgJ0NhbWVyYSBhbmQvb3IgbWljIGluaXQgZmFpbGVkIGR1cmluZyBqb2luIGNhbGwnLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIDMuIG9uY2Ugd2UgaGF2ZSB0aGUgXCJqb2luUmVzcG9uc2VcIiwgYW5kIHBvc3NpYmx5IHJlY29uY2lsZWQgdGhlIGxvY2FsIHN0YXRlXG4gICAgICAgICAgICAgICAgLy8gd2Ugc2NoZWR1bGUgYSBmYXN0IHN1YnNjcmlwdGlvbiB1cGRhdGUgZm9yIGFsbCByZW1vdGUgcGFydGljaXBhbnRzXG4gICAgICAgICAgICAgICAgLy8gdGhhdCB3ZXJlIHZpc2libGUgYmVmb3JlIHdlIHJlY29ubmVjdGVkIG9yIG1pZ3JhdGVkIHRvIGEgbmV3IFNGVS5cbiAgICAgICAgICAgICAgICBjb25zdCB7IHJlbW90ZVBhcnRpY2lwYW50cyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgICAgICBpZiAocmVtb3RlUGFydGljaXBhbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdWJzY3JpcHRpb25zKHJlbW90ZVBhcnRpY2lwYW50cywgRGVib3VuY2VUeXBlLkZBU1QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlcignaW5mbycsIGBKb2luZWQgY2FsbCAke3RoaXMuY2lkfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIC8vIGpvaW4gZmFpbGVkLCB0cnkgdG8gcmVqb2luXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVjb25uZWN0QXR0ZW1wdHMgPCB0aGlzLm1heFJlY29ubmVjdEF0dGVtcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdlcnJvcicsIGBbUmVqb2luXTogUmVqb2luICR7dGhpcy5yZWNvbm5lY3RBdHRlbXB0c30gZmFpbGVkLmAsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHJlY29ubmVjdCgnZnVsbCcsICdwcmV2aW91cyBhdHRlbXB0IGZhaWxlZCcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlcignaW5mbycsIGBbUmVqb2luXTogUmVqb2luICR7dGhpcy5yZWNvbm5lY3RBdHRlbXB0c30gc3VjY2Vzc2Z1bCFgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdlcnJvcicsIGBbUmVqb2luXTogUmVqb2luIGZhaWxlZCBmb3IgJHt0aGlzLnJlY29ubmVjdEF0dGVtcHRzfSB0aW1lcy4gR2l2aW5nIHVwLmApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNldENhbGxpbmdTdGF0ZShDYWxsaW5nU3RhdGUuUkVDT05ORUNUSU5HX0ZBSUxFRCk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSm9pbiBmYWlsZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMud2FpdEZvckpvaW5SZXNwb25zZSA9ICh0aW1lb3V0ID0gNTAwMCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB1bnN1YnNjcmliZSA9IHRoaXMub24oJ2pvaW5SZXNwb25zZScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShldmVudCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1dhaXRpbmcgZm9yIFwiam9pblJlc3BvbnNlXCIgaGFzIHRpbWVkIG91dCcpKTtcbiAgICAgICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU3RhcnRzIHB1Ymxpc2hpbmcgdGhlIGdpdmVuIHZpZGVvIHN0cmVhbSB0byB0aGUgY2FsbC5cbiAgICAgICAgICogVGhlIHN0cmVhbSB3aWxsIGJlIHN0b3BwZWQgaWYgdGhlIHVzZXIgY2hhbmdlcyBhbiBpbnB1dCBkZXZpY2UsIG9yIGlmIHRoZSB1c2VyIGxlYXZlcyB0aGUgY2FsbC5cbiAgICAgICAgICpcbiAgICAgICAgICogQ29uc2VjdXRpdmUgY2FsbHMgdG8gdGhpcyBtZXRob2Qgd2lsbCByZXBsYWNlIHRoZSBwcmV2aW91c2x5IHB1Ymxpc2hlZCBzdHJlYW0uXG4gICAgICAgICAqIFRoZSBwcmV2aW91cyB2aWRlbyBzdHJlYW0gd2lsbCBiZSBzdG9wcGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdmlkZW9TdHJlYW0gdGhlIHZpZGVvIHN0cmVhbSB0byBwdWJsaXNoLlxuICAgICAgICAgKiBAcGFyYW0gb3B0cyB0aGUgb3B0aW9ucyB0byB1c2Ugd2hlbiBwdWJsaXNoaW5nIHRoZSBzdHJlYW0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnB1Ymxpc2hWaWRlb1N0cmVhbSA9IGFzeW5jICh2aWRlb1N0cmVhbSwgb3B0cyA9IHt9KSA9PiB7XG4gICAgICAgICAgICAvLyB3ZSBzaG91bGQgd2FpdCB1bnRpbCB3ZSBnZXQgYSBKb2luUmVzcG9uc2UgZnJvbSB0aGUgU0ZVLFxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHdlIHJpc2sgYnJlYWtpbmcgdGhlIElDRVRyaWNrbGUgZmxvdy5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXNzZXJ0Q2FsbEpvaW5lZCgpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnB1Ymxpc2hlcikge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdlcnJvcicsICdUcnlpbmcgdG8gcHVibGlzaCB2aWRlbyBiZWZvcmUgam9pbiBpcyBjb21wbGV0ZWQnKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbGwgbm90IGpvaW5lZCB5ZXQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBbdmlkZW9UcmFja10gPSB2aWRlb1N0cmVhbS5nZXRWaWRlb1RyYWNrcygpO1xuICAgICAgICAgICAgaWYgKCF2aWRlb1RyYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ2Vycm9yJywgYFRoZXJlIGlzIG5vIHZpZGVvIHRyYWNrIHRvIHB1Ymxpc2ggaW4gdGhlIHN0cmVhbS5gKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnB1Ymxpc2hlci5wdWJsaXNoU3RyZWFtKHZpZGVvU3RyZWFtLCB2aWRlb1RyYWNrLCBUcmFja1R5cGUuVklERU8sIG9wdHMpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU3RhcnRzIHB1Ymxpc2hpbmcgdGhlIGdpdmVuIGF1ZGlvIHN0cmVhbSB0byB0aGUgY2FsbC5cbiAgICAgICAgICogVGhlIHN0cmVhbSB3aWxsIGJlIHN0b3BwZWQgaWYgdGhlIHVzZXIgY2hhbmdlcyBhbiBpbnB1dCBkZXZpY2UsIG9yIGlmIHRoZSB1c2VyIGxlYXZlcyB0aGUgY2FsbC5cbiAgICAgICAgICpcbiAgICAgICAgICogQ29uc2VjdXRpdmUgY2FsbHMgdG8gdGhpcyBtZXRob2Qgd2lsbCByZXBsYWNlIHRoZSBhdWRpbyBzdHJlYW0gdGhhdCBpcyBjdXJyZW50bHkgYmVpbmcgcHVibGlzaGVkLlxuICAgICAgICAgKiBUaGUgcHJldmlvdXMgYXVkaW8gc3RyZWFtIHdpbGwgYmUgc3RvcHBlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGF1ZGlvU3RyZWFtIHRoZSBhdWRpbyBzdHJlYW0gdG8gcHVibGlzaC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucHVibGlzaEF1ZGlvU3RyZWFtID0gYXN5bmMgKGF1ZGlvU3RyZWFtKSA9PiB7XG4gICAgICAgICAgICAvLyB3ZSBzaG91bGQgd2FpdCB1bnRpbCB3ZSBnZXQgYSBKb2luUmVzcG9uc2UgZnJvbSB0aGUgU0ZVLFxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHdlIHJpc2sgYnJlYWtpbmcgdGhlIElDRVRyaWNrbGUgZmxvdy5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXNzZXJ0Q2FsbEpvaW5lZCgpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnB1Ymxpc2hlcikge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdlcnJvcicsICdUcnlpbmcgdG8gcHVibGlzaCBhdWRpbyBiZWZvcmUgam9pbiBpcyBjb21wbGV0ZWQnKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbGwgbm90IGpvaW5lZCB5ZXQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBbYXVkaW9UcmFja10gPSBhdWRpb1N0cmVhbS5nZXRBdWRpb1RyYWNrcygpO1xuICAgICAgICAgICAgaWYgKCFhdWRpb1RyYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ2Vycm9yJywgYFRoZXJlIGlzIG5vIGF1ZGlvIHRyYWNrIGluIHRoZSBzdHJlYW0gdG8gcHVibGlzaGApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucHVibGlzaGVyLnB1Ymxpc2hTdHJlYW0oYXVkaW9TdHJlYW0sIGF1ZGlvVHJhY2ssIFRyYWNrVHlwZS5BVURJTyk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdGFydHMgcHVibGlzaGluZyB0aGUgZ2l2ZW4gc2NyZWVuLXNoYXJlIHN0cmVhbSB0byB0aGUgY2FsbC5cbiAgICAgICAgICpcbiAgICAgICAgICogQ29uc2VjdXRpdmUgY2FsbHMgdG8gdGhpcyBtZXRob2Qgd2lsbCByZXBsYWNlIHRoZSBwcmV2aW91cyBzY3JlZW4tc2hhcmUgc3RyZWFtLlxuICAgICAgICAgKiBUaGUgcHJldmlvdXMgc2NyZWVuLXNoYXJlIHN0cmVhbSB3aWxsIGJlIHN0b3BwZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBzY3JlZW5TaGFyZVN0cmVhbSB0aGUgc2NyZWVuLXNoYXJlIHN0cmVhbSB0byBwdWJsaXNoLlxuICAgICAgICAgKiBAcGFyYW0gb3B0cyB0aGUgb3B0aW9ucyB0byB1c2Ugd2hlbiBwdWJsaXNoaW5nIHRoZSBzdHJlYW0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnB1Ymxpc2hTY3JlZW5TaGFyZVN0cmVhbSA9IGFzeW5jIChzY3JlZW5TaGFyZVN0cmVhbSwgb3B0cyA9IHt9KSA9PiB7XG4gICAgICAgICAgICAvLyB3ZSBzaG91bGQgd2FpdCB1bnRpbCB3ZSBnZXQgYSBKb2luUmVzcG9uc2UgZnJvbSB0aGUgU0ZVLFxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHdlIHJpc2sgYnJlYWtpbmcgdGhlIElDRVRyaWNrbGUgZmxvdy5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXNzZXJ0Q2FsbEpvaW5lZCgpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnB1Ymxpc2hlcikge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdlcnJvcicsICdUcnlpbmcgdG8gcHVibGlzaCBzY3JlZW4gc2hhcmUgYmVmb3JlIGpvaW4gaXMgY29tcGxldGVkJyk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYWxsIG5vdCBqb2luZWQgeWV0LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgW3NjcmVlblNoYXJlVHJhY2tdID0gc2NyZWVuU2hhcmVTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKTtcbiAgICAgICAgICAgIGlmICghc2NyZWVuU2hhcmVUcmFjaykge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdlcnJvcicsIGBUaGVyZSBpcyBubyB2aWRlbyB0cmFjayBpbiB0aGUgc2NyZWVuIHNoYXJlIHN0cmVhbSB0byBwdWJsaXNoYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wdWJsaXNoZXIucHVibGlzaFN0cmVhbShzY3JlZW5TaGFyZVN0cmVhbSwgc2NyZWVuU2hhcmVUcmFjaywgVHJhY2tUeXBlLlNDUkVFTl9TSEFSRSwgb3B0cyk7XG4gICAgICAgICAgICBjb25zdCBbc2NyZWVuU2hhcmVBdWRpb1RyYWNrXSA9IHNjcmVlblNoYXJlU3RyZWFtLmdldEF1ZGlvVHJhY2tzKCk7XG4gICAgICAgICAgICBpZiAoc2NyZWVuU2hhcmVBdWRpb1RyYWNrKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wdWJsaXNoZXIucHVibGlzaFN0cmVhbShzY3JlZW5TaGFyZVN0cmVhbSwgc2NyZWVuU2hhcmVBdWRpb1RyYWNrLCBUcmFja1R5cGUuU0NSRUVOX1NIQVJFX0FVRElPLCBvcHRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3BzIHB1Ymxpc2hpbmcgdGhlIGdpdmVuIHRyYWNrIHR5cGUgdG8gdGhlIGNhbGwsIGlmIGl0IGlzIGN1cnJlbnRseSBiZWluZyBwdWJsaXNoZWQuXG4gICAgICAgICAqIFVuZGVybHlpbmcgdHJhY2sgd2lsbCBiZSBzdG9wcGVkIGFuZCByZW1vdmVkIGZyb20gdGhlIHB1Ymxpc2hlci5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHRyYWNrVHlwZSB0aGUgdHJhY2sgdHlwZSB0byBzdG9wIHB1Ymxpc2hpbmcuXG4gICAgICAgICAqIEBwYXJhbSBzdG9wVHJhY2sgaWYgYHRydWVgIHRoZSB0cmFjayB3aWxsIGJlIHN0b3BwZWQsIGVsc2UgaXQgd2lsbCBiZSBqdXN0IGRpc2FibGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0b3BQdWJsaXNoID0gYXN5bmMgKHRyYWNrVHlwZSwgc3RvcFRyYWNrID0gdHJ1ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ2luZm8nLCBgc3RvcFB1Ymxpc2ggJHtUcmFja1R5cGVbdHJhY2tUeXBlXX0sIHN0b3AgdHJhY2tzOiAke3N0b3BUcmFja31gKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucHVibGlzaGVyPy51bnB1Ymxpc2hTdHJlYW0odHJhY2tUeXBlLCBzdG9wVHJhY2spO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlIHRyYWNrIHN1YnNjcmlwdGlvbiBjb25maWd1cmF0aW9uIGZvciBvbmUgb3IgbW9yZSBwYXJ0aWNpcGFudHMuXG4gICAgICAgICAqIFlvdSBoYXZlIHRvIGNyZWF0ZSBhIHN1YnNjcmlwdGlvbiBmb3IgZWFjaCBwYXJ0aWNpcGFudCBmb3IgYWxsIHRoZSBkaWZmZXJlbnQga2luZHMgb2YgdHJhY2tzIHlvdSB3YW50IHRvIHJlY2VpdmUuXG4gICAgICAgICAqIFlvdSBjYW4gb25seSBzdWJzY3JpYmUgZm9yIHRyYWNrcyBhZnRlciB0aGUgcGFydGljaXBhbnQgc3RhcnRlZCBwdWJsaXNoaW5nIHRoZSBnaXZlbiBraW5kIG9mIHRyYWNrLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdHJhY2tUeXBlIHRoZSBraW5kIG9mIHN1YnNjcmlwdGlvbiB0byB1cGRhdGUuXG4gICAgICAgICAqIEBwYXJhbSBjaGFuZ2VzIHRoZSBsaXN0IG9mIHN1YnNjcmlwdGlvbiBjaGFuZ2VzIHRvIGRvLlxuICAgICAgICAgKiBAcGFyYW0gdHlwZSB0aGUgZGVib3VuY2UgdHlwZSB0byB1c2UgZm9yIHRoZSB1cGRhdGUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVwZGF0ZVN1YnNjcmlwdGlvbnNQYXJ0aWFsID0gKHRyYWNrVHlwZSwgY2hhbmdlcywgdHlwZSA9IERlYm91bmNlVHlwZS5TTE9XKSA9PiB7XG4gICAgICAgICAgICBpZiAodHJhY2tUeXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ3dhcm4nLCBgdXBkYXRlU3Vic2NyaXB0aW9uc1BhcnRpYWw6ICR7dHJhY2tUeXBlfSBpcyBkZXByZWNhdGVkLiBQbGVhc2Ugc3dpdGNoIHRvICd2aWRlb1RyYWNrJ2ApO1xuICAgICAgICAgICAgICAgIHRyYWNrVHlwZSA9ICd2aWRlb1RyYWNrJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRyYWNrVHlwZSA9PT0gJ3NjcmVlbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlcignd2FybicsIGB1cGRhdGVTdWJzY3JpcHRpb25zUGFydGlhbDogJHt0cmFja1R5cGV9IGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSBzd2l0Y2ggdG8gJ3NjcmVlblNoYXJlVHJhY2snYCk7XG4gICAgICAgICAgICAgICAgdHJhY2tUeXBlID0gJ3NjcmVlblNoYXJlVHJhY2snO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFydGljaXBhbnRzID0gdGhpcy5zdGF0ZS51cGRhdGVQYXJ0aWNpcGFudHMoT2JqZWN0LmVudHJpZXMoY2hhbmdlcykucmVkdWNlKChhY2MsIFtzZXNzaW9uSWQsIGNoYW5nZV0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlLmRpbWVuc2lvbj8uaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZS5kaW1lbnNpb24uaGVpZ2h0ID0gTWF0aC5jZWlsKGNoYW5nZS5kaW1lbnNpb24uaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZS5kaW1lbnNpb24/LndpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZS5kaW1lbnNpb24ud2lkdGggPSBNYXRoLmNlaWwoY2hhbmdlLmRpbWVuc2lvbi53aWR0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHByb3AgPSB0cmFja1R5cGUgPT09ICd2aWRlb1RyYWNrJ1xuICAgICAgICAgICAgICAgICAgICA/ICd2aWRlb0RpbWVuc2lvbidcbiAgICAgICAgICAgICAgICAgICAgOiB0cmFja1R5cGUgPT09ICdzY3JlZW5TaGFyZVRyYWNrJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAnc2NyZWVuU2hhcmVEaW1lbnNpb24nXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAocHJvcCkge1xuICAgICAgICAgICAgICAgICAgICBhY2Nbc2Vzc2lvbklkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFtwcm9wXTogY2hhbmdlLmRpbWVuc2lvbixcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIH0sIHt9KSk7XG4gICAgICAgICAgICBpZiAocGFydGljaXBhbnRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdWJzY3JpcHRpb25zKHBhcnRpY2lwYW50cywgdHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlU3Vic2NyaXB0aW9ucyA9IChwYXJ0aWNpcGFudHMsIHR5cGUgPSBEZWJvdW5jZVR5cGUuU0xPVykgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBwIG9mIHBhcnRpY2lwYW50cykge1xuICAgICAgICAgICAgICAgIC8vIHdlIGRvbid0IHdhbnQgdG8gc3Vic2NyaWJlIHRvIG91ciBvd24gdHJhY2tzXG4gICAgICAgICAgICAgICAgaWYgKHAuaXNMb2NhbFBhcnRpY2lwYW50KVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAvLyBOT1RFOiBhdWRpbyB0cmFja3MgZG9uJ3QgaGF2ZSB0byBiZSByZXF1ZXN0ZWQgZXhwbGljaXRseVxuICAgICAgICAgICAgICAgIC8vIGFzIHRoZSBTRlUgd2lsbCBpbXBsaWNpdGx5IHN1YnNjcmliZSB1cyB0byBhbGwgb2YgdGhlbSxcbiAgICAgICAgICAgICAgICAvLyBvbmNlIHRoZXkgYmVjb21lIGF2YWlsYWJsZS5cbiAgICAgICAgICAgICAgICBpZiAocC52aWRlb0RpbWVuc2lvbiAmJiBwLnB1Ymxpc2hlZFRyYWNrcy5pbmNsdWRlcyhUcmFja1R5cGUuVklERU8pKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IHAudXNlcklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbklkOiBwLnNlc3Npb25JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrVHlwZTogVHJhY2tUeXBlLlZJREVPLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGltZW5zaW9uOiBwLnZpZGVvRGltZW5zaW9uLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHAuc2NyZWVuU2hhcmVEaW1lbnNpb24gJiZcbiAgICAgICAgICAgICAgICAgICAgcC5wdWJsaXNoZWRUcmFja3MuaW5jbHVkZXMoVHJhY2tUeXBlLlNDUkVFTl9TSEFSRSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJJZDogcC51c2VySWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uSWQ6IHAuc2Vzc2lvbklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tUeXBlOiBUcmFja1R5cGUuU0NSRUVOX1NIQVJFLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGltZW5zaW9uOiBwLnNjcmVlblNoYXJlRGltZW5zaW9uLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHAucHVibGlzaGVkVHJhY2tzLmluY2x1ZGVzKFRyYWNrVHlwZS5TQ1JFRU5fU0hBUkVfQVVESU8pKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IHAudXNlcklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbklkOiBwLnNlc3Npb25JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrVHlwZTogVHJhY2tUeXBlLlNDUkVFTl9TSEFSRV9BVURJTyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc2NoZWR1bGUgdXBkYXRlXG4gICAgICAgICAgICB0aGlzLnRyYWNrU3Vic2NyaXB0aW9uc1N1YmplY3QubmV4dCh7IHR5cGUsIGRhdGE6IHN1YnNjcmlwdGlvbnMgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaWxsIGVuaGFuY2UgdGhlIHJlcG9ydGVkIHN0YXRzIHdpdGggYWRkaXRpb25hbCBwYXJ0aWNpcGFudC1zcGVjaWZpYyBpbmZvcm1hdGlvbiAoYGNhbGxTdGF0c1JlcG9ydCRgIHN0YXRlIFtzdG9yZSB2YXJpYWJsZV0oLi9TdHJlYW1WaWRlb0NsaWVudC5tZC8jcmVhZG9ubHlzdGF0ZXN0b3JlKSkuXG4gICAgICAgICAqIFRoaXMgaXMgdXN1YWxseSBoZWxwZnVsIHdoZW4gZGV0YWlsZWQgc3RhdHMgZm9yIGEgc3BlY2lmaWMgcGFydGljaXBhbnQgYXJlIG5lZWRlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHNlc3Npb25JZCB0aGUgc2Vzc2lvbklkIHRvIHN0YXJ0IHJlcG9ydGluZyBmb3IuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YXJ0UmVwb3J0aW5nU3RhdHNGb3IgPSAoc2Vzc2lvbklkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0c1JlcG9ydGVyPy5zdGFydFJlcG9ydGluZ1N0YXRzRm9yKHNlc3Npb25JZCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPcHBvc2l0ZSBvZiBgc3RhcnRSZXBvcnRpbmdTdGF0c0ZvcmAuXG4gICAgICAgICAqIFdpbGwgdHVybiBvZmYgc3RhdHMgcmVwb3J0aW5nIGZvciBhIHNwZWNpZmljIHBhcnRpY2lwYW50LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gc2Vzc2lvbklkIHRoZSBzZXNzaW9uSWQgdG8gc3RvcCByZXBvcnRpbmcgZm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdG9wUmVwb3J0aW5nU3RhdHNGb3IgPSAoc2Vzc2lvbklkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0c1JlcG9ydGVyPy5zdG9wUmVwb3J0aW5nU3RhdHNGb3Ioc2Vzc2lvbklkKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc2V0cyB0aGUgbGFzdCBzZW50IHJlYWN0aW9uIGZvciB0aGUgdXNlciBob2xkaW5nIHRoZSBnaXZlbiBgc2Vzc2lvbklkYC4gVGhpcyBpcyBhIGxvY2FsIGFjdGlvbiwgaXQgd29uJ3QgcmVzZXQgdGhlIHJlYWN0aW9uIG9uIHRoZSBiYWNrZW5kLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gc2Vzc2lvbklkIHRoZSBzZXNzaW9uIGlkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZXNldFJlYWN0aW9uID0gKHNlc3Npb25JZCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS51cGRhdGVQYXJ0aWNpcGFudChzZXNzaW9uSWQsIHtcbiAgICAgICAgICAgICAgICByZWFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXRzIHRoZSBsaXN0IG9mIGNyaXRlcmlhIHRvIHNvcnQgdGhlIHBhcnRpY2lwYW50cyBieS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGNyaXRlcmlhIHRoZSBsaXN0IG9mIGNyaXRlcmlhIHRvIHNvcnQgdGhlIHBhcnRpY2lwYW50cyBieS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2V0U29ydFBhcnRpY2lwYW50c0J5ID0gKGNyaXRlcmlhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5zZXRTb3J0UGFydGljaXBhbnRzQnkoY3JpdGVyaWEpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlcyB0aGUgbGlzdCBvZiB2aWRlbyBsYXllcnMgdG8gcHVibGlzaC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqIEBwYXJhbSBlbmFibGVkTGF5ZXJzIHRoZSBsaXN0IG9mIGxheWVycyB0byBlbmFibGUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVwZGF0ZVB1Ymxpc2hRdWFsaXR5ID0gYXN5bmMgKGVuYWJsZWRMYXllcnMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnB1Ymxpc2hlcj8udXBkYXRlVmlkZW9QdWJsaXNoUXVhbGl0eShlbmFibGVkTGF5ZXJzKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hc3NlcnRDYWxsSm9pbmVkID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5jYWxsaW5nU3RhdGUkXG4gICAgICAgICAgICAgICAgICAgIC5waXBlKHRha2VXaGlsZSgoc3RhdGUpID0+IHN0YXRlICE9PSBDYWxsaW5nU3RhdGUuSk9JTkVELCB0cnVlKSwgZmlsdGVyKChzKSA9PiBzID09PSBDYWxsaW5nU3RhdGUuSk9JTkVEKSlcbiAgICAgICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiByZXNvbHZlKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZW5kcyBhIHJlYWN0aW9uIHRvIHRoZSBvdGhlciBjYWxsIHBhcnRpY2lwYW50cy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHJlYWN0aW9uIHRoZSByZWFjdGlvbiB0byBzZW5kLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZW5kUmVhY3Rpb24gPSBhc3luYyAocmVhY3Rpb24pID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5wb3N0KGAke3RoaXMuc3RyZWFtQ2xpZW50QmFzZVBhdGh9L3JlYWN0aW9uYCwgcmVhY3Rpb24pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQmxvY2tzIHRoZSB1c2VyIHdpdGggdGhlIGdpdmVuIGB1c2VySWRgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdXNlcklkIHRoZSBpZCBvZiB0aGUgdXNlciB0byBibG9jay5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYmxvY2tVc2VyID0gYXN5bmMgKHVzZXJJZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtQ2xpZW50LnBvc3QoYCR7dGhpcy5zdHJlYW1DbGllbnRCYXNlUGF0aH0vYmxvY2tgLCB7XG4gICAgICAgICAgICAgICAgdXNlcl9pZDogdXNlcklkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVbmJsb2NrcyB0aGUgdXNlciB3aXRoIHRoZSBnaXZlbiBgdXNlcklkYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHVzZXJJZCB0aGUgaWQgb2YgdGhlIHVzZXIgdG8gdW5ibG9jay5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudW5ibG9ja1VzZXIgPSBhc3luYyAodXNlcklkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW1DbGllbnQucG9zdChgJHt0aGlzLnN0cmVhbUNsaWVudEJhc2VQYXRofS91bmJsb2NrYCwge1xuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHVzZXJJZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogTXV0ZXMgdGhlIGN1cnJlbnQgdXNlci5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHR5cGUgdGhlIHR5cGUgb2YgdGhlIG11dGUgb3BlcmF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tdXRlU2VsZiA9ICh0eXBlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBteVVzZXJJZCA9IHRoaXMuY3VycmVudFVzZXJJZDtcbiAgICAgICAgICAgIGlmIChteVVzZXJJZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm11dGVVc2VyKG15VXNlcklkLCB0eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE11dGVzIGFsbCB0aGUgb3RoZXIgcGFydGljaXBhbnRzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdHlwZSB0aGUgdHlwZSBvZiB0aGUgbXV0ZSBvcGVyYXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm11dGVPdGhlcnMgPSAodHlwZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdHJhY2tUeXBlID0gbXV0ZVR5cGVUb1RyYWNrVHlwZSh0eXBlKTtcbiAgICAgICAgICAgIGlmICghdHJhY2tUeXBlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IHVzZXJJZHNUb011dGUgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFydGljaXBhbnQgb2YgdGhpcy5zdGF0ZS5yZW1vdGVQYXJ0aWNpcGFudHMpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFydGljaXBhbnQucHVibGlzaGVkVHJhY2tzLmluY2x1ZGVzKHRyYWNrVHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcklkc1RvTXV0ZS5wdXNoKHBhcnRpY2lwYW50LnVzZXJJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubXV0ZVVzZXIodXNlcklkc1RvTXV0ZSwgdHlwZSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNdXRlcyB0aGUgdXNlciB3aXRoIHRoZSBnaXZlbiBgdXNlcklkYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHVzZXJJZCB0aGUgaWQgb2YgdGhlIHVzZXIgdG8gbXV0ZS5cbiAgICAgICAgICogQHBhcmFtIHR5cGUgdGhlIHR5cGUgb2YgdGhlIG11dGUgb3BlcmF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tdXRlVXNlciA9ICh1c2VySWQsIHR5cGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5wb3N0KGAke3RoaXMuc3RyZWFtQ2xpZW50QmFzZVBhdGh9L211dGVfdXNlcnNgLCB7XG4gICAgICAgICAgICAgICAgdXNlcl9pZHM6IEFycmF5LmlzQXJyYXkodXNlcklkKSA/IHVzZXJJZCA6IFt1c2VySWRdLFxuICAgICAgICAgICAgICAgIFt0eXBlXTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogV2lsbCBtdXRlIGFsbCB1c2VycyBpbiB0aGUgY2FsbC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHR5cGUgdGhlIHR5cGUgb2YgdGhlIG11dGUgb3BlcmF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tdXRlQWxsVXNlcnMgPSAodHlwZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtQ2xpZW50LnBvc3QoYCR7dGhpcy5zdHJlYW1DbGllbnRCYXNlUGF0aH0vbXV0ZV91c2Vyc2AsIHtcbiAgICAgICAgICAgICAgICBtdXRlX2FsbF91c2VyczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBbdHlwZV06IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0YXJ0cyByZWNvcmRpbmcgdGhlIGNhbGxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhcnRSZWNvcmRpbmcgPSBhc3luYyAocmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtQ2xpZW50LnBvc3QoYCR7dGhpcy5zdHJlYW1DbGllbnRCYXNlUGF0aH0vc3RhcnRfcmVjb3JkaW5nYCwgcmVxdWVzdCA/IHJlcXVlc3QgOiB7fSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9wcyByZWNvcmRpbmcgdGhlIGNhbGxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RvcFJlY29yZGluZyA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5wb3N0KGAke3RoaXMuc3RyZWFtQ2xpZW50QmFzZVBhdGh9L3N0b3BfcmVjb3JkaW5nYCwge30pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VuZHMgYSBgY2FsbC5wZXJtaXNzaW9uX3JlcXVlc3RgIGV2ZW50IHRvIGFsbCB1c2VycyBjb25uZWN0ZWQgdG8gdGhlIGNhbGwuIFRoZSBjYWxsIHNldHRpbmdzIG9iamVjdCBjb250YWlucyBpbmZvbXJhdGlvbiBhYm91dCB3aGljaCBwZXJtaXNzaW9ucyBjYW4gYmUgcmVxdWVzdGVkIGR1cmluZyBhIGNhbGwgKGZvciBleGFtcGxlIGEgdXNlciBtaWdodCBiZSBhbGxvd2VkIHRvIHJlcXVlc3QgcGVybWlzc2lvbiB0byBwdWJsaXNoIGF1ZGlvLCBidXQgbm90IHZpZGVvKS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVxdWVzdFBlcm1pc3Npb25zID0gYXN5bmMgKGRhdGEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgcGVybWlzc2lvbnMgfSA9IGRhdGE7XG4gICAgICAgICAgICBjb25zdCBjYW5SZXF1ZXN0UGVybWlzc2lvbnMgPSBwZXJtaXNzaW9ucy5ldmVyeSgocGVybWlzc2lvbikgPT4gdGhpcy5wZXJtaXNzaW9uc0NvbnRleHQuY2FuUmVxdWVzdChwZXJtaXNzaW9uKSk7XG4gICAgICAgICAgICBpZiAoIWNhblJlcXVlc3RQZXJtaXNzaW9ucykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IGFyZSBub3QgYWxsb3dlZCB0byByZXF1ZXN0IHBlcm1pc3Npb25zOiAke3Blcm1pc3Npb25zLmpvaW4oJywgJyl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW1DbGllbnQucG9zdChgJHt0aGlzLnN0cmVhbUNsaWVudEJhc2VQYXRofS9yZXF1ZXN0X3Blcm1pc3Npb25gLCBkYXRhKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsbG93cyB5b3UgdG8gZ3JhbnQgY2VydGFpbiBwZXJtaXNzaW9ucyB0byBhIHVzZXIgaW4gYSBjYWxsLlxuICAgICAgICAgKiBUaGUgcGVybWlzc2lvbnMgYXJlIHNwZWNpZmljIHRvIHRoZSBjYWxsIGV4cGVyaWVuY2UgYW5kIGRvIG5vdCBzdXJ2aXZlIHRoZSBjYWxsIGl0c2VsZi5cbiAgICAgICAgICpcbiAgICAgICAgICogU3VwcG9ydGVkIHBlcm1pc3Npb25zIHRoYXQgY2FuIGJlIGdyYW50ZWQgYXJlOlxuICAgICAgICAgKiAtIGBzZW5kLWF1ZGlvYFxuICAgICAgICAgKiAtIGBzZW5kLXZpZGVvYFxuICAgICAgICAgKiAtIGBzY3JlZW5zaGFyZWBcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHVzZXJJZCB0aGUgaWQgb2YgdGhlIHVzZXIgdG8gZ3JhbnQgcGVybWlzc2lvbnMgdG8uXG4gICAgICAgICAqIEBwYXJhbSBwZXJtaXNzaW9ucyB0aGUgcGVybWlzc2lvbnMgdG8gZ3JhbnQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdyYW50UGVybWlzc2lvbnMgPSBhc3luYyAodXNlcklkLCBwZXJtaXNzaW9ucykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlVXNlclBlcm1pc3Npb25zKHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiB1c2VySWQsXG4gICAgICAgICAgICAgICAgZ3JhbnRfcGVybWlzc2lvbnM6IHBlcm1pc3Npb25zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbGxvd3MgeW91IHRvIHJldm9rZSBjZXJ0YWluIHBlcm1pc3Npb25zIGZyb20gYSB1c2VyIGluIGEgY2FsbC5cbiAgICAgICAgICogVGhlIHBlcm1pc3Npb25zIGFyZSBzcGVjaWZpYyB0byB0aGUgY2FsbCBleHBlcmllbmNlIGFuZCBkbyBub3Qgc3Vydml2ZSB0aGUgY2FsbCBpdHNlbGYuXG4gICAgICAgICAqXG4gICAgICAgICAqIFN1cHBvcnRlZCBwZXJtaXNzaW9ucyB0aGF0IGNhbiBiZSByZXZva2VkIGFyZTpcbiAgICAgICAgICogLSBgc2VuZC1hdWRpb2BcbiAgICAgICAgICogLSBgc2VuZC12aWRlb2BcbiAgICAgICAgICogLSBgc2NyZWVuc2hhcmVgXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB1c2VySWQgdGhlIGlkIG9mIHRoZSB1c2VyIHRvIHJldm9rZSBwZXJtaXNzaW9ucyBmcm9tLlxuICAgICAgICAgKiBAcGFyYW0gcGVybWlzc2lvbnMgdGhlIHBlcm1pc3Npb25zIHRvIHJldm9rZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmV2b2tlUGVybWlzc2lvbnMgPSBhc3luYyAodXNlcklkLCBwZXJtaXNzaW9ucykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlVXNlclBlcm1pc3Npb25zKHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiB1c2VySWQsXG4gICAgICAgICAgICAgICAgcmV2b2tlX3Blcm1pc3Npb25zOiBwZXJtaXNzaW9ucyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQWxsb3dzIHlvdSB0byBncmFudCBvciByZXZva2UgYSBzcGVjaWZpYyBwZXJtaXNzaW9uIHRvIGEgdXNlciBpbiBhIGNhbGwuIFRoZSBwZXJtaXNzaW9ucyBhcmUgc3BlY2lmaWMgdG8gdGhlIGNhbGwgZXhwZXJpZW5jZSBhbmQgZG8gbm90IHN1cnZpdmUgdGhlIGNhbGwgaXRzZWxmLlxuICAgICAgICAgKlxuICAgICAgICAgKiBXaGVuIHJldm9raW5nIGEgcGVybWlzc2lvbiwgdGhpcyBlbmRwb2ludCB3aWxsIGFsc28gbXV0ZSB0aGUgcmVsZXZhbnQgdHJhY2sgZnJvbSB0aGUgdXNlci4gVGhpcyBpcyBzaW1pbGFyIHRvIG11dGluZyBhIHVzZXIgd2l0aCB0aGUgZGlmZmVyZW5jZSB0aGF0IHRoZSB1c2VyIHdpbGwgbm90IGJlIGFibGUgdG8gdW5tdXRlIGFmdGVyd2FyZHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIFN1cHBvcnRlZCBwZXJtaXNzaW9ucyB0aGF0IGNhbiBiZSBncmFudGVkIG9yIHJldm9rZWQ6IGBzZW5kLWF1ZGlvYCwgYHNlbmQtdmlkZW9gIGFuZCBgc2NyZWVuc2hhcmVgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBgY2FsbC5wZXJtaXNzaW9uc191cGRhdGVkYCBldmVudCBpcyBzZW50IHRvIGFsbCBtZW1iZXJzIG9mIHRoZSBjYWxsLlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51cGRhdGVVc2VyUGVybWlzc2lvbnMgPSBhc3luYyAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtQ2xpZW50LnBvc3QoYCR7dGhpcy5zdHJlYW1DbGllbnRCYXNlUGF0aH0vdXNlcl9wZXJtaXNzaW9uc2AsIGRhdGEpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU3RhcnRzIHRoZSBsaXZlc3RyZWFtaW5nIG9mIHRoZSBjYWxsLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gZGF0YSB0aGUgcmVxdWVzdCBkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gcGFyYW1zIHRoZSByZXF1ZXN0IHBhcmFtcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ29MaXZlID0gYXN5bmMgKGRhdGEgPSB7fSwgcGFyYW1zKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW1DbGllbnQucG9zdChgJHt0aGlzLnN0cmVhbUNsaWVudEJhc2VQYXRofS9nb19saXZlYCwgZGF0YSwgcGFyYW1zKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3BzIHRoZSBsaXZlc3RyZWFtaW5nIG9mIHRoZSBjYWxsLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdG9wTGl2ZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5wb3N0KGAke3RoaXMuc3RyZWFtQ2xpZW50QmFzZVBhdGh9L3N0b3BfbGl2ZWAsIHt9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0YXJ0cyB0aGUgYnJvYWRjYXN0aW5nIG9mIHRoZSBjYWxsLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFydEhMUyA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5wb3N0KGAke3RoaXMuc3RyZWFtQ2xpZW50QmFzZVBhdGh9L3N0YXJ0X2Jyb2FkY2FzdGluZ2AsIHt9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3BzIHRoZSBicm9hZGNhc3Rpbmcgb2YgdGhlIGNhbGwuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0b3BITFMgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW1DbGllbnQucG9zdChgJHt0aGlzLnN0cmVhbUNsaWVudEJhc2VQYXRofS9zdG9wX2Jyb2FkY2FzdGluZ2AsIHt9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZGF0ZXMgdGhlIGNhbGwgc2V0dGluZ3Mgb3IgY3VzdG9tIGRhdGEuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB1cGRhdGVzIHRoZSB1cGRhdGVzIHRvIGFwcGx5IHRvIHRoZSBjYWxsLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51cGRhdGUgPSBhc3luYyAodXBkYXRlcykgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnN0cmVhbUNsaWVudC5wYXRjaChgJHt0aGlzLnN0cmVhbUNsaWVudEJhc2VQYXRofWAsIHVwZGF0ZXMpO1xuICAgICAgICAgICAgY29uc3QgeyBjYWxsLCBtZW1iZXJzLCBvd25fY2FwYWJpbGl0aWVzIH0gPSByZXNwb25zZTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUudXBkYXRlRnJvbUNhbGxSZXNwb25zZShjYWxsKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuc2V0TWVtYmVycyhtZW1iZXJzKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuc2V0T3duQ2FwYWJpbGl0aWVzKG93bl9jYXBhYmlsaXRpZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5kcyB0aGUgY2FsbC4gT25jZSB0aGUgY2FsbCBpcyBlbmRlZCwgaXQgY2Fubm90IGJlIHJlLWpvaW5lZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZW5kQ2FsbCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5wb3N0KGAke3RoaXMuc3RyZWFtQ2xpZW50QmFzZVBhdGh9L21hcmtfZW5kZWRgKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBpbnMgdGhlIGdpdmVuIHNlc3Npb24gdG8gdGhlIHRvcCBvZiB0aGUgcGFydGljaXBhbnRzIGxpc3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBzZXNzaW9uSWQgdGhlIHNlc3Npb25JZCB0byBwaW4uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnBpbiA9IChzZXNzaW9uSWQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUudXBkYXRlUGFydGljaXBhbnQoc2Vzc2lvbklkLCB7XG4gICAgICAgICAgICAgICAgcGluOiB7XG4gICAgICAgICAgICAgICAgICAgIGlzTG9jYWxQaW46IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHBpbm5lZEF0OiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVucGlucyB0aGUgZ2l2ZW4gc2Vzc2lvbiBmcm9tIHRoZSB0b3Agb2YgdGhlIHBhcnRpY2lwYW50cyBsaXN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gc2Vzc2lvbklkIHRoZSBzZXNzaW9uSWQgdG8gdW5waW4uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVucGluID0gKHNlc3Npb25JZCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS51cGRhdGVQYXJ0aWNpcGFudChzZXNzaW9uSWQsIHtcbiAgICAgICAgICAgICAgICBwaW46IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUGlucyB0aGUgZ2l2ZW4gc2Vzc2lvbiB0byB0aGUgdG9wIG9mIHRoZSBwYXJ0aWNpcGFudHMgbGlzdCBmb3IgZXZlcnlvbmVcbiAgICAgICAgICogaW4gdGhlIGNhbGwuXG4gICAgICAgICAqIFlvdSBjYW4gZXhlY3V0ZSB0aGlzIG1ldGhvZCBvbmx5IGlmIHlvdSBoYXZlIHRoZSBgcGluLWZvci1ldmVyeW9uZWAgY2FwYWJpbGl0eS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHJlcXVlc3QgdGhlIHJlcXVlc3Qgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5waW5Gb3JFdmVyeW9uZSA9IGFzeW5jIChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW1DbGllbnQucG9zdChgJHt0aGlzLnN0cmVhbUNsaWVudEJhc2VQYXRofS9waW5gLCByZXF1ZXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVucGlucyB0aGUgZ2l2ZW4gc2Vzc2lvbiBmcm9tIHRoZSB0b3Agb2YgdGhlIHBhcnRpY2lwYW50cyBsaXN0IGZvciBldmVyeW9uZVxuICAgICAgICAgKiBpbiB0aGUgY2FsbC5cbiAgICAgICAgICogWW91IGNhbiBleGVjdXRlIHRoaXMgbWV0aG9kIG9ubHkgaWYgeW91IGhhdmUgdGhlIGBwaW4tZm9yLWV2ZXJ5b25lYCBjYXBhYmlsaXR5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gcmVxdWVzdCB0aGUgcmVxdWVzdCBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVucGluRm9yRXZlcnlvbmUgPSBhc3luYyAocmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtQ2xpZW50LnBvc3QoYCR7dGhpcy5zdHJlYW1DbGllbnRCYXNlUGF0aH0vdW5waW5gLCByZXF1ZXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFF1ZXJ5IGNhbGwgbWVtYmVycyB3aXRoIGZpbHRlciBxdWVyeS4gVGhlIHJlc3VsdCB3b24ndCBiZSBzdG9yZWQgaW4gY2FsbCBzdGF0ZS5cbiAgICAgICAgICogQHBhcmFtIHJlcXVlc3RcbiAgICAgICAgICogQHJldHVybnNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucXVlcnlNZW1iZXJzID0gKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5wb3N0KCcvY2FsbC9tZW1iZXJzJywge1xuICAgICAgICAgICAgICAgIC4uLihyZXF1ZXN0IHx8IHt9KSxcbiAgICAgICAgICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdpbGwgdXBkYXRlIHRoZSBjYWxsIG1lbWJlcnMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBkYXRhIHRoZSByZXF1ZXN0IGRhdGEuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVwZGF0ZUNhbGxNZW1iZXJzID0gYXN5bmMgKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5wb3N0KGAke3RoaXMuc3RyZWFtQ2xpZW50QmFzZVBhdGh9L21lbWJlcnNgLCBkYXRhKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNjaGVkdWxlcyBhbiBhdXRvLWRyb3AgdGltZW91dCBiYXNlZCBvbiB0aGUgY2FsbCBzZXR0aW5ncy5cbiAgICAgICAgICogQXBwbGljYWJsZSBvbmx5IGZvciByaW5naW5nIGNhbGxzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zY2hlZHVsZUF1dG9Ecm9wID0gKCkgPT4ge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZHJvcFRpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5sZWF2ZUNhbGxIb29rcy5hZGQoY3JlYXRlU3Vic2NyaXB0aW9uKHRoaXMuc3RhdGUuc2V0dGluZ3MkLCAoc2V0dGluZ3MpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXNldHRpbmdzKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgLy8gaWdub3JlIGlmIHRoZSBjYWxsIGlzIG5vdCByaW5naW5nXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuY2FsbGluZ1N0YXRlICE9PSBDYWxsaW5nU3RhdGUuUklOR0lORylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVvdXRJbk1zID0gc2V0dGluZ3MucmluZy5hdXRvX2NhbmNlbF90aW1lb3V0X21zO1xuICAgICAgICAgICAgICAgIC8vIDAgbWVhbnMgbm8gYXV0by1kcm9wXG4gICAgICAgICAgICAgICAgaWYgKHRpbWVvdXRJbk1zIDw9IDApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5kcm9wVGltZW91dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kcm9wVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxlYXZlKHsgcmVhc29uOiAncmluZzogdGltZW91dCcgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ2Vycm9yJywgJ0ZhaWxlZCB0byBkcm9wIGNhbGwnLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCB0aW1lb3V0SW5Ncyk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXRyaWV2ZXMgdGhlIGxpc3Qgb2YgcmVjb3JkaW5ncyBmb3IgdGhlIGN1cnJlbnQgY2FsbCBvciBjYWxsIHNlc3Npb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIElmIGBjYWxsU2Vzc2lvbklkYCBpcyBwcm92aWRlZCwgaXQgd2lsbCByZXR1cm4gdGhlIHJlY29yZGluZ3MgZm9yIHRoYXQgY2FsbCBzZXNzaW9uLlxuICAgICAgICAgKiBPdGhlcndpc2UsIGFsbCByZWNvcmRpbmdzIGZvciB0aGUgY3VycmVudCBjYWxsIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBjYWxsU2Vzc2lvbklkIHRoZSBjYWxsIHNlc3Npb24gaWQgdG8gcmV0cmlldmUgcmVjb3JkaW5ncyBmb3IuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnF1ZXJ5UmVjb3JkaW5ncyA9IGFzeW5jIChjYWxsU2Vzc2lvbklkKSA9PiB7XG4gICAgICAgICAgICBsZXQgZW5kcG9pbnQgPSB0aGlzLnN0cmVhbUNsaWVudEJhc2VQYXRoO1xuICAgICAgICAgICAgaWYgKGNhbGxTZXNzaW9uSWQpIHtcbiAgICAgICAgICAgICAgICBlbmRwb2ludCA9IGAke2VuZHBvaW50fS8ke2NhbGxTZXNzaW9uSWR9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5nZXQoYCR7ZW5kcG9pbnR9L3JlY29yZGluZ3NgKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHJpZXZlIGNhbGwgc3RhdGlzdGljcyBmb3IgYSBwYXJ0aWN1bGFyIGNhbGwgc2Vzc2lvbiAoaGlzdG9yaWNhbCkuXG4gICAgICAgICAqIEhlcmUgYGNhbGxTZXNzaW9uSURgIGlzIG1hbmRhdG9yeS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGNhbGxTZXNzaW9uSUQgdGhlIGNhbGwgc2Vzc2lvbiBJRCB0byByZXRyaWV2ZSBzdGF0aXN0aWNzIGZvci5cbiAgICAgICAgICogQHJldHVybnMgVGhlIGNhbGwgc3RhdHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdldENhbGxTdGF0cyA9IGFzeW5jIChjYWxsU2Vzc2lvbklEKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbmRwb2ludCA9IGAke3RoaXMuc3RyZWFtQ2xpZW50QmFzZVBhdGh9L3N0YXRzLyR7Y2FsbFNlc3Npb25JRH1gO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtQ2xpZW50LmdldChlbmRwb2ludCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZW5kcyBhIGN1c3RvbSBldmVudCB0byBhbGwgY2FsbCBwYXJ0aWNpcGFudHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBwYXlsb2FkIHRoZSBwYXlsb2FkIHRvIHNlbmQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNlbmRDdXN0b21FdmVudCA9IGFzeW5jIChwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW1DbGllbnQucG9zdChgJHt0aGlzLnN0cmVhbUNsaWVudEJhc2VQYXRofS9ldmVudGAsIHsgY3VzdG9tOiBwYXlsb2FkIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFwcGx5RGV2aWNlQ29uZmlnID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbml0Q2FtZXJhKHsgc2V0U3RhdHVzOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIHRoaXMuaW5pdE1pYyh7IHNldFN0YXR1czogZmFsc2UgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaWxsIGJlZ2luIHRyYWNraW5nIHRoZSBnaXZlbiBlbGVtZW50IGZvciB2aXNpYmlsaXR5IGNoYW5nZXMgd2l0aGluIHRoZVxuICAgICAgICAgKiBjb25maWd1cmVkIHZpZXdwb3J0IGVsZW1lbnQgKGBjYWxsLnNldFZpZXdwb3J0YCkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBlbGVtZW50IHRoZSBlbGVtZW50IHRvIHRyYWNrLlxuICAgICAgICAgKiBAcGFyYW0gc2Vzc2lvbklkIHRoZSBzZXNzaW9uIGlkLlxuICAgICAgICAgKiBAcGFyYW0gdHJhY2tUeXBlIHRoZSB2aWRlbyBtb2RlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50cmFja0VsZW1lbnRWaXNpYmlsaXR5ID0gKGVsZW1lbnQsIHNlc3Npb25JZCwgdHJhY2tUeXBlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5keW5hc2NhbGVNYW5hZ2VyLnRyYWNrRWxlbWVudFZpc2liaWxpdHkoZWxlbWVudCwgc2Vzc2lvbklkLCB0cmFja1R5cGUpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgdmlld3BvcnQgZWxlbWVudCB0byB0cmFjayBib3VuZCB2aWRlbyBlbGVtZW50cyBmb3IgdmlzaWJpbGl0eS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGVsZW1lbnQgdGhlIHZpZXdwb3J0IGVsZW1lbnQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNldFZpZXdwb3J0ID0gKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmR5bmFzY2FsZU1hbmFnZXIuc2V0Vmlld3BvcnQoZWxlbWVudCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCaW5kcyBhIERPTSA8dmlkZW8+IGVsZW1lbnQgdG8gdGhlIGdpdmVuIHNlc3Npb24gaWQuXG4gICAgICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgbWFrZSBzdXJlIHRoYXQgdGhlIHZpZGVvIGVsZW1lbnQgd2lsbCBwbGF5XG4gICAgICAgICAqIHRoZSBjb3JyZWN0IHZpZGVvIHN0cmVhbSBmb3IgdGhlIGdpdmVuIHNlc3Npb24gaWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIFVuZGVyIHRoZSBob29kLCBpdCB3b3VsZCBhbHNvIGtlZXAgdHJhY2sgb2YgdGhlIHZpZGVvIGVsZW1lbnQgZGltZW5zaW9uc1xuICAgICAgICAgKiBhbmQgdXBkYXRlIHRoZSBzdWJzY3JpcHRpb24gYWNjb3JkaW5nbHkgaW4gb3JkZXIgdG8gb3B0aW1pemUgdGhlIGJhbmR3aWR0aC5cbiAgICAgICAgICpcbiAgICAgICAgICogSWYgYSBcInZpZXdwb3J0XCIgaXMgY29uZmlndXJlZCwgdGhlIHZpZGVvIGVsZW1lbnQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5XG4gICAgICAgICAqIHRyYWNrZWQgZm9yIHZpc2liaWxpdHkgYW5kIHRoZSBzdWJzY3JpcHRpb24gd2lsbCBiZSB1cGRhdGVkIGFjY29yZGluZ2x5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdmlkZW9FbGVtZW50IHRoZSB2aWRlbyBlbGVtZW50IHRvIGJpbmQgdG8uXG4gICAgICAgICAqIEBwYXJhbSBzZXNzaW9uSWQgdGhlIHNlc3Npb24gaWQuXG4gICAgICAgICAqIEBwYXJhbSB0cmFja1R5cGUgdGhlIGtpbmQgb2YgdmlkZW8uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmJpbmRWaWRlb0VsZW1lbnQgPSAodmlkZW9FbGVtZW50LCBzZXNzaW9uSWQsIHRyYWNrVHlwZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdW5iaW5kID0gdGhpcy5keW5hc2NhbGVNYW5hZ2VyLmJpbmRWaWRlb0VsZW1lbnQodmlkZW9FbGVtZW50LCBzZXNzaW9uSWQsIHRyYWNrVHlwZSk7XG4gICAgICAgICAgICBpZiAoIXVuYmluZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmxlYXZlQ2FsbEhvb2tzLmFkZCh1bmJpbmQpO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxlYXZlQ2FsbEhvb2tzLmRlbGV0ZSh1bmJpbmQpO1xuICAgICAgICAgICAgICAgIHVuYmluZCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJpbmRzIGEgRE9NIDxhdWRpbz4gZWxlbWVudCB0byB0aGUgZ2l2ZW4gc2Vzc2lvbiBpZC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBtZXRob2Qgd2lsbCBtYWtlIHN1cmUgdGhhdCB0aGUgYXVkaW8gZWxlbWVudCB3aWxsXG4gICAgICAgICAqIHBsYXkgdGhlIGNvcnJlY3QgYXVkaW8gc3RyZWFtIGZvciB0aGUgZ2l2ZW4gc2Vzc2lvbiBpZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGF1ZGlvRWxlbWVudCB0aGUgYXVkaW8gZWxlbWVudCB0byBiaW5kIHRvLlxuICAgICAgICAgKiBAcGFyYW0gc2Vzc2lvbklkIHRoZSBzZXNzaW9uIGlkLlxuICAgICAgICAgKiBAcGFyYW0gdHJhY2tUeXBlIHRoZSBraW5kIG9mIGF1ZGlvLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5iaW5kQXVkaW9FbGVtZW50ID0gKGF1ZGlvRWxlbWVudCwgc2Vzc2lvbklkLCB0cmFja1R5cGUgPSAnYXVkaW9UcmFjaycpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHVuYmluZCA9IHRoaXMuZHluYXNjYWxlTWFuYWdlci5iaW5kQXVkaW9FbGVtZW50KGF1ZGlvRWxlbWVudCwgc2Vzc2lvbklkLCB0cmFja1R5cGUpO1xuICAgICAgICAgICAgaWYgKCF1bmJpbmQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5sZWF2ZUNhbGxIb29rcy5hZGQodW5iaW5kKTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5sZWF2ZUNhbGxIb29rcy5kZWxldGUodW5iaW5kKTtcbiAgICAgICAgICAgICAgICB1bmJpbmQoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCaW5kcyBhIERPTSA8aW1nPiBlbGVtZW50IHRvIHRoaXMgY2FsbCdzIHRodW1ibmFpbCAoaWYgZW5hYmxlZCBpbiBzZXR0aW5ncykuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBpbWFnZUVsZW1lbnQgdGhlIGltYWdlIGVsZW1lbnQgdG8gYmluZCB0by5cbiAgICAgICAgICogQHBhcmFtIG9wdHMgb3B0aW9ucyBmb3IgdGhlIGJpbmRpbmcuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmJpbmRDYWxsVGh1bWJuYWlsRWxlbWVudCA9IChpbWFnZUVsZW1lbnQsIG9wdHMgPSB7fSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlRXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaW1hZ2VFbGVtZW50LnNyYyA9XG4gICAgICAgICAgICAgICAgICAgIG9wdHMuZmFsbGJhY2tJbWFnZVNvdXJjZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2h0dHBzOi8vZ2V0c3RyZWFtLmlvL3JhbmRvbV9zdmcvP25hbWU9eCZpZD14JztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCB1bnN1YnNjcmliZSA9IGNyZWF0ZVN1YnNjcmlwdGlvbih0aGlzLnN0YXRlLnRodW1ibmFpbHMkLCAodGh1bWJuYWlscykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGh1bWJuYWlscylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGltYWdlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGhhbmRsZUVycm9yKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aHVtYm5haWxVcmwgPSBuZXcgVVJMKHRodW1ibmFpbHMuaW1hZ2VfdXJsKTtcbiAgICAgICAgICAgICAgICB0aHVtYm5haWxVcmwuc2VhcmNoUGFyYW1zLnNldCgndycsIFN0cmluZyhpbWFnZUVsZW1lbnQuY2xpZW50V2lkdGgpKTtcbiAgICAgICAgICAgICAgICB0aHVtYm5haWxVcmwuc2VhcmNoUGFyYW1zLnNldCgnaCcsIFN0cmluZyhpbWFnZUVsZW1lbnQuY2xpZW50SGVpZ2h0KSk7XG4gICAgICAgICAgICAgICAgaW1hZ2VFbGVtZW50LnNyYyA9IHRodW1ibmFpbFVybC50b1N0cmluZygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgaW1hZ2VFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgaGFuZGxlRXJyb3IpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmNpZCA9IGAke3R5cGV9OiR7aWR9YDtcbiAgICAgICAgdGhpcy5yaW5naW5nU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3QocmluZ2luZyk7XG4gICAgICAgIHRoaXMud2F0Y2hpbmcgPSB3YXRjaGluZztcbiAgICAgICAgdGhpcy5zdHJlYW1DbGllbnQgPSBzdHJlYW1DbGllbnQ7XG4gICAgICAgIHRoaXMuY2xpZW50U3RvcmUgPSBjbGllbnRTdG9yZTtcbiAgICAgICAgdGhpcy5zdHJlYW1DbGllbnRCYXNlUGF0aCA9IGAvY2FsbC8ke3RoaXMudHlwZX0vJHt0aGlzLmlkfWA7XG4gICAgICAgIHRoaXMubG9nZ2VyID0gZ2V0TG9nZ2VyKFsnQ2FsbCddKTtcbiAgICAgICAgY29uc3QgY2FsbFR5cGVDb25maWcgPSBDYWxsVHlwZXMuZ2V0KHR5cGUpO1xuICAgICAgICBjb25zdCBwYXJ0aWNpcGFudFNvcnRlciA9IHNvcnRQYXJ0aWNpcGFudHNCeSB8fCBjYWxsVHlwZUNvbmZpZy5vcHRpb25zLnNvcnRQYXJ0aWNpcGFudHNCeTtcbiAgICAgICAgaWYgKHBhcnRpY2lwYW50U29ydGVyKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnNldFNvcnRQYXJ0aWNpcGFudHNCeShwYXJ0aWNpcGFudFNvcnRlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZS5zZXRNZW1iZXJzKG1lbWJlcnMgfHwgW10pO1xuICAgICAgICB0aGlzLnN0YXRlLnNldE93bkNhcGFiaWxpdGllcyhvd25DYXBhYmlsaXRpZXMgfHwgW10pO1xuICAgICAgICB0aGlzLnN0YXRlLnNldENhbGxpbmdTdGF0ZShyaW5naW5nID8gQ2FsbGluZ1N0YXRlLlJJTkdJTkcgOiBDYWxsaW5nU3RhdGUuSURMRSk7XG4gICAgICAgIHRoaXMub24oJ2FsbCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gdXBkYXRlIHN0YXRlIHdpdGggdGhlIGxhdGVzdCBldmVudCBkYXRhXG4gICAgICAgICAgICB0aGlzLnN0YXRlLnVwZGF0ZUZyb21FdmVudChldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxlYXZlQ2FsbEhvb2tzLmFkZChyZWdpc3RlckV2ZW50SGFuZGxlcnModGhpcywgdGhpcy5zdGF0ZSwgdGhpcy5kaXNwYXRjaGVyKSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJFZmZlY3RzKCk7XG4gICAgICAgIHRoaXMubGVhdmVDYWxsSG9va3MuYWRkKGNyZWF0ZVN1YnNjcmlwdGlvbih0aGlzLnRyYWNrU3Vic2NyaXB0aW9uc1N1YmplY3QucGlwZShkZWJvdW5jZSgodikgPT4gdGltZXIodi50eXBlKSksIG1hcCQxKCh2KSA9PiB2LmRhdGEpKSwgKHN1YnNjcmlwdGlvbnMpID0+IHRoaXMuc2Z1Q2xpZW50Py51cGRhdGVTdWJzY3JpcHRpb25zKHN1YnNjcmlwdGlvbnMpKSk7XG4gICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IENhbWVyYU1hbmFnZXIodGhpcyk7XG4gICAgICAgIHRoaXMubWljcm9waG9uZSA9IG5ldyBNaWNyb3Bob25lTWFuYWdlcih0aGlzKTtcbiAgICAgICAgdGhpcy5zcGVha2VyID0gbmV3IFNwZWFrZXJNYW5hZ2VyKHRoaXMpO1xuICAgICAgICB0aGlzLnNjcmVlblNoYXJlID0gbmV3IFNjcmVlblNoYXJlTWFuYWdlcih0aGlzKTtcbiAgICB9XG4gICAgcmVnaXN0ZXJFZmZlY3RzKCkge1xuICAgICAgICB0aGlzLmxlYXZlQ2FsbEhvb2tzLmFkZChcbiAgICAgICAgLy8gaGFuZGxlcyB1cGRhdGluZyB0aGUgcGVybWlzc2lvbnMgY29udGV4dCB3aGVuIHRoZSBzZXR0aW5ncyBjaGFuZ2UuXG4gICAgICAgIGNyZWF0ZVN1YnNjcmlwdGlvbih0aGlzLnN0YXRlLnNldHRpbmdzJCwgKHNldHRpbmdzKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXNldHRpbmdzKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMucGVybWlzc2lvbnNDb250ZXh0LnNldENhbGxTZXR0aW5ncyhzZXR0aW5ncyk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5sZWF2ZUNhbGxIb29rcy5hZGQoXG4gICAgICAgIC8vIGhhbmRsZSB0aGUgY2FzZSB3aGVuIHRoZSB1c2VyIHBlcm1pc3Npb25zIGFyZSBtb2RpZmllZC5cbiAgICAgICAgY3JlYXRlU3Vic2NyaXB0aW9uKHRoaXMuc3RhdGUub3duQ2FwYWJpbGl0aWVzJCwgKG93bkNhcGFiaWxpdGllcykgPT4ge1xuICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBwZXJtaXNzaW9uIGNvbnRleHQuXG4gICAgICAgICAgICB0aGlzLnBlcm1pc3Npb25zQ29udGV4dC5zZXRQZXJtaXNzaW9ucyhvd25DYXBhYmlsaXRpZXMpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnB1Ymxpc2hlcilcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgdXNlciBzdGlsbCBoYXMgcHVibGlzaGluZyBwZXJtaXNzaW9ucyBhbmQgc3RvcCBwdWJsaXNoaW5nIGlmIG5vdC5cbiAgICAgICAgICAgIGNvbnN0IHBlcm1pc3Npb25Ub1RyYWNrVHlwZSA9IHtcbiAgICAgICAgICAgICAgICBbT3duQ2FwYWJpbGl0eS5TRU5EX0FVRElPXTogVHJhY2tUeXBlLkFVRElPLFxuICAgICAgICAgICAgICAgIFtPd25DYXBhYmlsaXR5LlNFTkRfVklERU9dOiBUcmFja1R5cGUuVklERU8sXG4gICAgICAgICAgICAgICAgW093bkNhcGFiaWxpdHkuU0NSRUVOU0hBUkVdOiBUcmFja1R5cGUuU0NSRUVOX1NIQVJFLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW3Blcm1pc3Npb24sIHRyYWNrVHlwZV0gb2YgT2JqZWN0LmVudHJpZXMocGVybWlzc2lvblRvVHJhY2tUeXBlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhc1Blcm1pc3Npb24gPSB0aGlzLnBlcm1pc3Npb25zQ29udGV4dC5oYXNQZXJtaXNzaW9uKHBlcm1pc3Npb24pO1xuICAgICAgICAgICAgICAgIGlmICghaGFzUGVybWlzc2lvbiAmJlxuICAgICAgICAgICAgICAgICAgICAodGhpcy5wdWJsaXNoZXIuaXNQdWJsaXNoaW5nKHRyYWNrVHlwZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVibGlzaGVyLmlzTGl2ZSh0cmFja1R5cGUpKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTdG9wIHRyYWNrcywgdGhlbiBub3RpZnkgZGV2aWNlIG1hbmFnZXJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wUHVibGlzaCh0cmFja1R5cGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ2Vycm9yJywgYEVycm9yIHN0b3BwaW5nIHB1Ymxpc2ggJHt0cmFja1R5cGV9YCwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFja1R5cGUgPT09IFRyYWNrVHlwZS5WSURFTyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FtZXJhLnN0YXRlLnN0YXR1cyA9PT0gJ2VuYWJsZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW1lcmFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRpc2FibGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gdGhpcy5sb2dnZXIoJ2Vycm9yJywgYEVycm9yIGRpc2FibGluZyBjYW1lcmEgYWZ0ZXIgcGVybWlzc2lvbiByZXZva2VkYCwgZXJyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2tUeXBlID09PSBUcmFja1R5cGUuQVVESU8gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1pY3JvcGhvbmUuc3RhdGUuc3RhdHVzID09PSAnZW5hYmxlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1pY3JvcGhvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRpc2FibGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gdGhpcy5sb2dnZXIoJ2Vycm9yJywgYEVycm9yIGRpc2FibGluZyBtaWNyb3Bob25lIGFmdGVyIHBlcm1pc3Npb24gcmV2b2tlZGAsIGVycikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5sZWF2ZUNhbGxIb29rcy5hZGQoXG4gICAgICAgIC8vIGhhbmRsZXMgdGhlIGNhc2Ugd2hlbiB0aGUgdXNlciBpcyBibG9ja2VkIGJ5IHRoZSBjYWxsIG93bmVyLlxuICAgICAgICBjcmVhdGVTdWJzY3JpcHRpb24odGhpcy5zdGF0ZS5ibG9ja2VkVXNlcklkcyQsIGFzeW5jIChibG9ja2VkVXNlcklkcykgPT4ge1xuICAgICAgICAgICAgaWYgKCFibG9ja2VkVXNlcklkcyB8fCBibG9ja2VkVXNlcklkcy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFVzZXJJZCA9IHRoaXMuY3VycmVudFVzZXJJZDtcbiAgICAgICAgICAgIGlmIChjdXJyZW50VXNlcklkICYmIGJsb2NrZWRVc2VySWRzLmluY2x1ZGVzKGN1cnJlbnRVc2VySWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ2luZm8nLCAnTGVhdmluZyBjYWxsIGJlY2F1c2Ugb2YgYmVpbmcgYmxvY2tlZCcpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubGVhdmUoeyByZWFzb246ICd1c2VyIGJsb2NrZWQnIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMubGVhdmVDYWxsSG9va3MuYWRkKFxuICAgICAgICAvLyB3YXRjaCBmb3IgYXV0byBkcm9wIGNhbmNlbGxhdGlvblxuICAgICAgICBjcmVhdGVTdWJzY3JpcHRpb24odGhpcy5zdGF0ZS5jYWxsaW5nU3RhdGUkLCAoY2FsbGluZ1N0YXRlKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucmluZ2luZylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAoY2FsbGluZ1N0YXRlID09PSBDYWxsaW5nU3RhdGUuSk9JTkVEIHx8XG4gICAgICAgICAgICAgICAgY2FsbGluZ1N0YXRlID09PSBDYWxsaW5nU3RhdGUuSk9JTklORyB8fFxuICAgICAgICAgICAgICAgIGNhbGxpbmdTdGF0ZSA9PT0gQ2FsbGluZ1N0YXRlLkxFRlQpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5kcm9wVGltZW91dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kcm9wVGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLmxlYXZlQ2FsbEhvb2tzLmFkZChcbiAgICAgICAgLy8gXCJyaW5naW5nXCIgbW9kZSBlZmZlY3RzIGFuZCBldmVudCBoYW5kbGVyc1xuICAgICAgICBjcmVhdGVTdWJzY3JpcHRpb24odGhpcy5yaW5naW5nU3ViamVjdCwgKGlzUmluZ2luZykgPT4ge1xuICAgICAgICAgICAgaWYgKCFpc1JpbmdpbmcpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZUF1dG9Ecm9wKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5jYWxsaW5nU3RhdGUgPT09IENhbGxpbmdTdGF0ZS5JRExFKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZXRDYWxsaW5nU3RhdGUoQ2FsbGluZ1N0YXRlLlJJTkdJTkcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5sZWF2ZUNhbGxIb29rcy5hZGQocmVnaXN0ZXJSaW5naW5nQ2FsbEV2ZW50SGFuZGxlcnModGhpcykpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGNhbGwgaXMgXCJyaW5naW5nXCIgdHlwZSBvZiBjYWxsLlxuICAgICAqL1xuICAgIGdldCByaW5naW5nKCkge1xuICAgICAgICByZXR1cm4gZ2V0Q3VycmVudFZhbHVlKHRoaXMucmluZ2luZ1N1YmplY3QpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGN1cnJlbnQgdXNlciBJRC5cbiAgICAgKi9cbiAgICBnZXQgY3VycmVudFVzZXJJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50U3RvcmUuY29ubmVjdGVkVXNlcj8uaWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGNhbGwgd2FzIGNyZWF0ZWQgYnkgdGhlIGN1cnJlbnQgdXNlci5cbiAgICAgKi9cbiAgICBnZXQgaXNDcmVhdGVkQnlNZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuY3JlYXRlZEJ5Py5pZCA9PT0gdGhpcy5jdXJyZW50VXNlcklkO1xuICAgIH1cbiAgICBhc3luYyBpbml0Q2FtZXJhKG9wdGlvbnMpIHtcbiAgICAgICAgLy8gV2FpdCBmb3IgYW55IGluIHByb2dyZXNzIGNhbWVyYSBvcGVyYXRpb25cbiAgICAgICAgaWYgKHRoaXMuY2FtZXJhLmVuYWJsZVByb21pc2UpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2FtZXJhLmVuYWJsZVByb21pc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2FtZXJhLmRpc2FibGVQcm9taXNlKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNhbWVyYS5kaXNhYmxlUHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5sb2NhbFBhcnRpY2lwYW50Py52aWRlb1N0cmVhbSB8fFxuICAgICAgICAgICAgIXRoaXMucGVybWlzc2lvbnNDb250ZXh0Lmhhc1Blcm1pc3Npb24oJ3NlbmQtdmlkZW8nKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldCBjYW1lcmEgZGlyZWN0aW9uIGlmIGl0J3Mgbm90IHlldCBzZXRcbiAgICAgICAgaWYgKCF0aGlzLmNhbWVyYS5zdGF0ZS5kaXJlY3Rpb24gJiYgIXRoaXMuY2FtZXJhLnN0YXRlLnNlbGVjdGVkRGV2aWNlKSB7XG4gICAgICAgICAgICBsZXQgZGVmYXVsdERpcmVjdGlvbiA9ICdmcm9udCc7XG4gICAgICAgICAgICBjb25zdCBiYWNrZW5kU2V0dGluZyA9IHRoaXMuc3RhdGUuc2V0dGluZ3M/LnZpZGVvLmNhbWVyYV9mYWNpbmc7XG4gICAgICAgICAgICBpZiAoYmFja2VuZFNldHRpbmcpIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0RGlyZWN0aW9uID0gYmFja2VuZFNldHRpbmcgPT09ICdmcm9udCcgPyAnZnJvbnQnIDogJ2JhY2snO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jYW1lcmEuc3RhdGUuc2V0RGlyZWN0aW9uKGRlZmF1bHREaXJlY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldCB0YXJnZXQgcmVzb2x1dGlvblxuICAgICAgICBjb25zdCB0YXJnZXRSZXNvbHV0aW9uID0gdGhpcy5zdGF0ZS5zZXR0aW5ncz8udmlkZW8udGFyZ2V0X3Jlc29sdXRpb247XG4gICAgICAgIGlmICh0YXJnZXRSZXNvbHV0aW9uKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNhbWVyYS5zZWxlY3RUYXJnZXRSZXNvbHV0aW9uKHRhcmdldFJlc29sdXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnNldFN0YXR1cykge1xuICAgICAgICAgICAgLy8gUHVibGlzaCBhbHJlYWR5IHRoYXQgd2FzIHNldCBiZWZvcmUgd2Ugam9pbmVkXG4gICAgICAgICAgICBpZiAodGhpcy5jYW1lcmEuc3RhdGUuc3RhdHVzID09PSAnZW5hYmxlZCcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmNhbWVyYS5zdGF0ZS5tZWRpYVN0cmVhbSAmJlxuICAgICAgICAgICAgICAgICF0aGlzLnB1Ymxpc2hlcj8uaXNQdWJsaXNoaW5nKFRyYWNrVHlwZS5WSURFTykpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnB1Ymxpc2hWaWRlb1N0cmVhbSh0aGlzLmNhbWVyYS5zdGF0ZS5tZWRpYVN0cmVhbSwge1xuICAgICAgICAgICAgICAgICAgICBwcmVmZXJyZWRDb2RlYzogdGhpcy5jYW1lcmEucHJlZmVycmVkQ29kZWMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTdGFydCBjYW1lcmEgaWYgYmFja2VuZCBjb25maWcgc3BlY2lmaWVzLCBhbmQgdGhlcmUgaXMgbm8gbG9jYWwgc2V0dGluZ1xuICAgICAgICAgICAgaWYgKHRoaXMuY2FtZXJhLnN0YXRlLnN0YXR1cyA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZXR0aW5ncz8udmlkZW8uY2FtZXJhX2RlZmF1bHRfb24pIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNhbWVyYS5lbmFibGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBpbml0TWljKG9wdGlvbnMpIHtcbiAgICAgICAgLy8gV2FpdCBmb3IgYW55IGluIHByb2dyZXNzIG1pYyBvcGVyYXRpb25cbiAgICAgICAgaWYgKHRoaXMubWljcm9waG9uZS5lbmFibGVQcm9taXNlKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm1pY3JvcGhvbmUuZW5hYmxlUHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5taWNyb3Bob25lLmRpc2FibGVQcm9taXNlKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm1pY3JvcGhvbmUuZGlzYWJsZVByb21pc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUubG9jYWxQYXJ0aWNpcGFudD8uYXVkaW9TdHJlYW0gfHxcbiAgICAgICAgICAgICF0aGlzLnBlcm1pc3Npb25zQ29udGV4dC5oYXNQZXJtaXNzaW9uKCdzZW5kLWF1ZGlvJykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5zZXRTdGF0dXMpIHtcbiAgICAgICAgICAgIC8vIFB1Ymxpc2ggbWVkaWEgc3RyZWFtIHRoYXQgd2FzIHNldCBiZWZvcmUgd2Ugam9pbmVkXG4gICAgICAgICAgICBpZiAodGhpcy5taWNyb3Bob25lLnN0YXRlLnN0YXR1cyA9PT0gJ2VuYWJsZWQnICYmXG4gICAgICAgICAgICAgICAgdGhpcy5taWNyb3Bob25lLnN0YXRlLm1lZGlhU3RyZWFtICYmXG4gICAgICAgICAgICAgICAgIXRoaXMucHVibGlzaGVyPy5pc1B1Ymxpc2hpbmcoVHJhY2tUeXBlLkFVRElPKSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucHVibGlzaEF1ZGlvU3RyZWFtKHRoaXMubWljcm9waG9uZS5zdGF0ZS5tZWRpYVN0cmVhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTdGFydCBtaWMgaWYgYmFja2VuZCBjb25maWcgc3BlY2lmaWVzLCBhbmQgdGhlcmUgaXMgbm8gbG9jYWwgc2V0dGluZ1xuICAgICAgICAgICAgaWYgKHRoaXMubWljcm9waG9uZS5zdGF0ZS5zdGF0dXMgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2V0dGluZ3M/LmF1ZGlvLm1pY19kZWZhdWx0X29uKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5taWNyb3Bob25lLmVuYWJsZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBJbnNpZ2h0TWV0cmljcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXJ0VGltZXN0YW1wID0gbnVsbDtcbiAgICAgICAgdGhpcy53c1RvdGFsRmFpbHVyZXMgPSAwO1xuICAgICAgICB0aGlzLndzQ29uc2VjdXRpdmVGYWlsdXJlcyA9IDA7XG4gICAgICAgIHRoaXMuaW5zdGFuY2VDbGllbnRJZCA9IHJhbmRvbUlkKCk7XG4gICAgfVxufVxuLyoqXG4gKiBwb3N0SW5zaWdodHMgaXMgbm90IHN1cHBvc2VkIHRvIGJlIHVzZWQgYnkgZW5kIHVzZXJzIGRpcmVjdGx5IHdpdGhpbiBjaGF0IGFwcGxpY2F0aW9uLCBhbmQgdGh1cyBpcyBrZXB0IGlzb2xhdGVkXG4gKiBmcm9tIGFsbCB0aGUgY2xpZW50L2Nvbm5lY3Rpb24gY29kZS9sb2dpYy5cbiAqXG4gKiBAcGFyYW0gaW5zaWdodFR5cGVcbiAqIEBwYXJhbSBpbnNpZ2h0c1xuICovXG5jb25zdCBwb3N0SW5zaWdodHMgPSBhc3luYyAoaW5zaWdodFR5cGUsIGluc2lnaHRzKSA9PiB7XG4gICAgY29uc3QgbWF4QXR0ZW1wdHMgPSAzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4QXR0ZW1wdHM7IGkrKykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgYXhpb3MucG9zdChgaHR0cHM6Ly9jaGF0LWluc2lnaHRzLmdldHN0cmVhbS5pby9pbnNpZ2h0cy8ke2luc2lnaHRUeXBlfWAsIGluc2lnaHRzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgYXdhaXQgc2xlZXAoKGkgKyAxKSAqIDMwMDApO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxufTtcbmZ1bmN0aW9uIGJ1aWxkV3NGYXRhbEluc2lnaHQoY29ubmVjdGlvbiwgZXZlbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5ldmVudCxcbiAgICAgICAgLi4uYnVpbGRXc0Jhc2VJbnNpZ2h0KGNvbm5lY3Rpb24pLFxuICAgIH07XG59XG5mdW5jdGlvbiBidWlsZFdzQmFzZUluc2lnaHQoY29ubmVjdGlvbikge1xuICAgIGNvbnN0IHsgY2xpZW50IH0gPSBjb25uZWN0aW9uO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlYWR5X3N0YXRlOiBjb25uZWN0aW9uLndzPy5yZWFkeVN0YXRlLFxuICAgICAgICB1cmw6IGNvbm5lY3Rpb24uX2J1aWxkVXJsKCksXG4gICAgICAgIGFwaV9rZXk6IGNsaWVudC5rZXksXG4gICAgICAgIHN0YXJ0X3RzOiBjbGllbnQuaW5zaWdodE1ldHJpY3MuY29ubmVjdGlvblN0YXJ0VGltZXN0YW1wLFxuICAgICAgICBlbmRfdHM6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgICAgICBhdXRoX3R5cGU6IGNsaWVudC5nZXRBdXRoVHlwZSgpLFxuICAgICAgICB0b2tlbjogY2xpZW50LnRva2VuTWFuYWdlci50b2tlbixcbiAgICAgICAgdXNlcl9pZDogY2xpZW50LnVzZXJJRCxcbiAgICAgICAgdXNlcl9kZXRhaWxzOiBjbGllbnQuX3VzZXIsXG4gICAgICAgIC8vIGRldmljZTogY2xpZW50Lm9wdGlvbnMuZGV2aWNlLFxuICAgICAgICBkZXZpY2U6ICdicm93c2VyJyxcbiAgICAgICAgY2xpZW50X2lkOiBjb25uZWN0aW9uLmNvbm5lY3Rpb25JRCxcbiAgICAgICAgd3NfZGV0YWlsczogY29ubmVjdGlvbi53cyxcbiAgICAgICAgd3NfY29uc2VjdXRpdmVfZmFpbHVyZXM6IGNsaWVudC5pbnNpZ2h0TWV0cmljcy53c0NvbnNlY3V0aXZlRmFpbHVyZXMsXG4gICAgICAgIHdzX3RvdGFsX2ZhaWx1cmVzOiBjbGllbnQuaW5zaWdodE1ldHJpY3Mud3NUb3RhbEZhaWx1cmVzLFxuICAgICAgICByZXF1ZXN0X2lkOiBjb25uZWN0aW9uLnJlcXVlc3RJRCxcbiAgICAgICAgb25saW5lOiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyA/IG5hdmlnYXRvcj8ub25MaW5lIDogbnVsbCxcbiAgICAgICAgdXNlcl9hZ2VudDogdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgPyBuYXZpZ2F0b3I/LnVzZXJBZ2VudCA6IG51bGwsXG4gICAgICAgIGluc3RhbmNlX2NsaWVudF9pZDogY2xpZW50Lmluc2lnaHRNZXRyaWNzLmluc3RhbmNlQ2xpZW50SWQsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGJ1aWxkV3NTdWNjZXNzQWZ0ZXJGYWlsdXJlSW5zaWdodChjb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuIGJ1aWxkV3NCYXNlSW5zaWdodChjb25uZWN0aW9uKTtcbn1cblxuLy8gVHlwZSBndWFyZHMgdG8gY2hlY2sgV2ViU29ja2V0IGVycm9yIHR5cGVcbmNvbnN0IGlzQ2xvc2VFdmVudCA9IChyZXMpID0+IHJlcy5jb2RlICE9PSB1bmRlZmluZWQ7XG5jb25zdCBpc0Vycm9yRXZlbnQgPSAocmVzKSA9PiByZXMuZXJyb3IgIT09IHVuZGVmaW5lZDtcbi8qKlxuICogU3RhYmxlV1NDb25uZWN0aW9uIC0gQSBXUyBjb25uZWN0aW9uIHRoYXQgcmVjb25uZWN0cyB1cG9uIGZhaWx1cmUuXG4gKiAtIHRoZSBicm93c2VyIHdpbGwgc29tZXRpbWVzIHJlcG9ydCB0aGF0IHlvdSdyZSBvbmxpbmUgb3Igb2ZmbGluZVxuICogLSB0aGUgV1MgY29ubmVjdGlvbiBjYW4gYnJlYWsgYW5kIGZhaWwgKHRoZXJlIGlzIGEgMzBzIGhlYWx0aCBjaGVjaylcbiAqIC0gc29tZXRpbWVzIHlvdXIgV1MgY29ubmVjdGlvbiB3aWxsIHNlZW0gdG8gd29yayB3aGlsZSB0aGUgdXNlciBpcyBpbiBmYWN0IG9mZmxpbmVcbiAqIC0gdG8gc3BlZWQgdXAgb25saW5lL29mZmxpbmUgZGV0ZWN0aW9uIHlvdSBjYW4gdXNlIHRoZSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb2ZmbGluZScpO1xuICpcbiAqIFRoZXJlIGFyZSA0IHdheXMgaW4gd2hpY2ggYSBjb25uZWN0aW9uIGNhbiBiZWNvbWUgdW5oZWFsdGh5OlxuICogLSB3ZWJzb2NrZXQub25lcnJvciBpcyBjYWxsZWRcbiAqIC0gd2Vic29ja2V0Lm9uY2xvc2UgaXMgY2FsbGVkXG4gKiAtIHRoZSBoZWFsdGggY2hlY2sgZmFpbHMgYW5kIG5vIGV2ZW50IGlzIHJlY2VpdmVkIGZvciB+NDAgc2Vjb25kc1xuICogLSB0aGUgYnJvd3NlciBpbmRpY2F0ZXMgdGhlIGNvbm5lY3Rpb24gaXMgbm93IG9mZmxpbmVcbiAqXG4gKiBUaGVyZSBhcmUgMiBhc3N1bXB0aW9ucyB3ZSBtYWtlIGFib3V0IHRoZSBzZXJ2ZXI6XG4gKiAtIHN0YXRlIGNhbiBiZSByZWNvdmVyZWQgYnkgcXVlcnlpbmcgdGhlIGNoYW5uZWwgYWdhaW5cbiAqIC0gaWYgdGhlIHNlcnZlcnMgZmFpbHMgdG8gcHVibGlzaCBhIG1lc3NhZ2UgdG8gdGhlIGNsaWVudCwgdGhlIFdTIGNvbm5lY3Rpb24gaXMgZGVzdHJveWVkXG4gKi9cbmNsYXNzIFN0YWJsZVdTQ29ubmVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgICAgIHRoaXMuX2xvZyA9IChtc2csIGV4dHJhID0ge30sIGxldmVsID0gJ2luZm8nKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsaWVudC5sb2dnZXIobGV2ZWwsICdjb25uZWN0aW9uOicgKyBtc2csIHtcbiAgICAgICAgICAgICAgICAuLi5leHRyYSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNldENsaWVudCA9IChjbGllbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQnVpbGRzIGFuZCByZXR1cm5zIHRoZSB1cmwgZm9yIHdlYnNvY2tldC5cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQHJldHVybnMgdXJsIHN0cmluZ1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fYnVpbGRVcmwgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgICAgICAgICAvLyBjb25zdCBxcyA9IGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNsaWVudC5fYnVpbGRXU1BheWxvYWQodGhpcy5yZXF1ZXN0SUQpKTtcbiAgICAgICAgICAgIC8vIHBhcmFtcy5zZXQoJ2pzb24nLCBxcyk7XG4gICAgICAgICAgICBwYXJhbXMuc2V0KCdhcGlfa2V5JywgdGhpcy5jbGllbnQua2V5KTtcbiAgICAgICAgICAgIHBhcmFtcy5zZXQoJ3N0cmVhbS1hdXRoLXR5cGUnLCB0aGlzLmNsaWVudC5nZXRBdXRoVHlwZSgpKTtcbiAgICAgICAgICAgIHBhcmFtcy5zZXQoJ1gtU3RyZWFtLUNsaWVudCcsIHRoaXMuY2xpZW50LmdldFVzZXJBZ2VudCgpKTtcbiAgICAgICAgICAgIC8vIHBhcmFtcy5hcHBlbmQoJ2F1dGhvcml6YXRpb24nLCB0aGlzLmNsaWVudC5fZ2V0VG9rZW4oKSEpO1xuICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuY2xpZW50LndzQmFzZVVSTH0vY29ubmVjdD8ke3BhcmFtcy50b1N0cmluZygpfWA7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBvbmxpbmVTdGF0dXNDaGFuZ2VkIC0gdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbiB0aGUgYnJvd3NlciBjb25uZWN0cyBvciBkaXNjb25uZWN0cyBmcm9tIHRoZSBpbnRlcm5ldC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgRXZlbnQgd2l0aCB0eXBlIG9ubGluZSBvciBvZmZsaW5lXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9ubGluZVN0YXR1c0NoYW5nZWQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAnb2ZmbGluZScpIHtcbiAgICAgICAgICAgICAgICAvLyBtYXJrIHRoZSBjb25uZWN0aW9uIGFzIGRvd25cbiAgICAgICAgICAgICAgICB0aGlzLl9sb2coJ29ubGluZVN0YXR1c0NoYW5nZWQoKSAtIFN0YXR1cyBjaGFuZ2luZyB0byBvZmZsaW5lJyk7XG4gICAgICAgICAgICAgICAgLy8gd2Uga25vdyB0aGF0IHRoZSBhcHAgaXMgb2ZmbGluZSBzbyBkaXNwYXRjaCB0aGUgdW5oZWFsdGh5IGNvbm5lY3Rpb24gZXZlbnQgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRIZWFsdGgoZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ29ubGluZScpIHtcbiAgICAgICAgICAgICAgICAvLyByZXRyeSByaWdodCBub3cuLi5cbiAgICAgICAgICAgICAgICAvLyBXZSBjaGVjayB0aGlzLmlzSGVhbHRoeSwgbm90IHN1cmUgaWYgaXQncyBhbHdheXNcbiAgICAgICAgICAgICAgICAvLyBzbWFydCB0byBjcmVhdGUgYSBuZXcgV1MgY29ubmVjdGlvbiBpZiB0aGUgb2xkIG9uZSBpcyBzdGlsbCB1cCBhbmQgcnVubmluZy5cbiAgICAgICAgICAgICAgICAvLyBpdCdzIHBvc3NpYmxlIHdlIGRpZG4ndCBtaXNzIGFueSBtZXNzYWdlcywgc28gdGhpcyBwcm9jZXNzIGlzIGp1c3QgZXhwZW5zaXZlIGFuZCBub3QgbmVlZGVkLlxuICAgICAgICAgICAgICAgIHRoaXMuX2xvZyhgb25saW5lU3RhdHVzQ2hhbmdlZCgpIC0gU3RhdHVzIGNoYW5naW5nIHRvIG9ubGluZS4gaXNIZWFsdGh5OiAke3RoaXMuaXNIZWFsdGh5fWApO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0hlYWx0aHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0KHsgaW50ZXJ2YWw6IDEwIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbm9wZW4gPSAod3NJRCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMud3NJRCAhPT0gd3NJRClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCB1c2VyID0gdGhpcy5jbGllbnQudXNlcjtcbiAgICAgICAgICAgIGlmICghdXNlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50LmxvZ2dlcignZXJyb3InLCBgVXNlciBub3Qgc2V0LCBjYW4ndCBjb25uZWN0IHRvIFdTYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmNsaWVudC5fZ2V0VG9rZW4oKTtcbiAgICAgICAgICAgIGlmICghdG9rZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5sb2dnZXIoJ2Vycm9yJywgYFRva2VuIG5vdCBzZXQsIGNhbid0IGNvbm5lY3QgYXV0aGVudGljYXRlYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYXV0aE1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgdG9rZW4sXG4gICAgICAgICAgICAgICAgdXNlcl9kZXRhaWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiB1c2VyLmlkLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB1c2VyLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGltYWdlOiB1c2VyLmltYWdlLFxuICAgICAgICAgICAgICAgICAgICBjdXN0b206IHVzZXIuY3VzdG9tLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5hdXRoZW50aWNhdGlvblNlbnQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy53cz8uc2VuZChKU09OLnN0cmluZ2lmeShhdXRoTWVzc2FnZSkpO1xuICAgICAgICAgICAgdGhpcy5fbG9nKCdvbm9wZW4oKSAtIG9ub3BlbiBjYWxsYmFjaycsIHsgd3NJRCB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbm1lc3NhZ2UgPSAod3NJRCwgZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLndzSUQgIT09IHdzSUQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5fbG9nKCdvbm1lc3NhZ2UoKSAtIG9ubWVzc2FnZSBjYWxsYmFjaycsIHsgZXZlbnQsIHdzSUQgfSk7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gdHlwZW9mIGV2ZW50LmRhdGEgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyBKU09OLnBhcnNlKGV2ZW50LmRhdGEpXG4gICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgLy8gd2Ugd2FpdCB0aWxsIHRoZSBmaXJzdCBtZXNzYWdlIGJlZm9yZSB3ZSBjb25zaWRlciB0aGUgY29ubmVjdGlvbiBvcGVuLlxuICAgICAgICAgICAgLy8gdGhlIHJlYXNvbiBmb3IgdGhpcyBpcyB0aGF0IGF1dGggZXJyb3JzIGFuZCBzaW1pbGFyIGVycm9ycyB0cmlnZ2VyIGEgd3Mub25vcGVuIGFuZCBpbW1lZGlhdGVseVxuICAgICAgICAgICAgLy8gYWZ0ZXIgdGhhdCBhIHdzLm9uY2xvc2UuXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNSZXNvbHZlZCAmJiBkYXRhICYmIGRhdGEudHlwZSA9PT0gJ2Nvbm5lY3Rpb24uZXJyb3InKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1Jlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gdGhlIHR5cGVzIG9mIF9lcnJvckZyb21XU0V2ZW50IGFyZSBpbmNvcnJlY3RcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWplY3RQcm9taXNlPy4odGhpcy5fZXJyb3JGcm9tV1NFdmVudChkYXRhLCBmYWxzZSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdHJpZ2dlciB0aGUgZXZlbnQuLlxuICAgICAgICAgICAgdGhpcy5sYXN0RXZlbnQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgaWYgKGRhdGEgJiZcbiAgICAgICAgICAgICAgICAoZGF0YS50eXBlID09PSAnaGVhbHRoLmNoZWNrJyB8fCBkYXRhLnR5cGUgPT09ICdjb25uZWN0aW9uLm9rJykpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGUgaW5pdGlhbCBoZWFsdGgtY2hlY2sgc2hvdWxkIGNvbWUgZnJvbSB0aGUgY2xpZW50XG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZU5leHRQaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnR5cGUgPT09ICdjb25uZWN0aW9uLm9rJykge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZVByb21pc2U/LihkYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRIZWFsdGgodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnR5cGUgPT09ICdjb25uZWN0aW9uLmVycm9yJyAmJiBkYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBjb2RlIH0gPSBkYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNIZWFsdGh5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0Nvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnNlY3V0aXZlRmFpbHVyZXMgKz0gMTtcbiAgICAgICAgICAgICAgICBpZiAoY29kZSA9PT0gS25vd25Db2Rlcy5UT0tFTl9FWFBJUkVEICYmXG4gICAgICAgICAgICAgICAgICAgICF0aGlzLmNsaWVudC50b2tlbk1hbmFnZXIuaXNTdGF0aWMoKSkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5jb25uZWN0aW9uQ2hlY2tUaW1lb3V0UmVmKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9nKCdjb25uZWN0KCkgLSBXUyBmYWlsdXJlIGR1ZSB0byBleHBpcmVkIHRva2VuLCBzbyBnb2luZyB0byB0cnkgdG8gcmVsb2FkIHRva2VuIGFuZCByZWNvbm5lY3QnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0KHsgcmVmcmVzaFRva2VuOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGllbnQuZGlzcGF0Y2hFdmVudChkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVDb25uZWN0aW9uQ2hlY2soKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbmNsb3NlID0gKHdzSUQsIGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy53c0lEICE9PSB3c0lEKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuX2xvZygnb25jbG9zZSgpIC0gb25jbG9zZSBjYWxsYmFjayAtICcgKyBldmVudC5jb2RlLCB7IGV2ZW50LCB3c0lEIH0pO1xuICAgICAgICAgICAgaWYgKGV2ZW50LmNvZGUgPT09IEtub3duQ29kZXMuV1NfQ0xPU0VEX1NVQ0NFU1MpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGEgcGVybWFuZW50IGVycm9yIHJhaXNlZCBieSBzdHJlYW0uLlxuICAgICAgICAgICAgICAgIC8vIHVzdWFsbHkgY2F1c2VkIGJ5IGludmFsaWQgYXV0aCBkZXRhaWxzXG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYFdTIGNvbm5lY3Rpb24gcmVqZWN0IHdpdGggZXJyb3IgJHtldmVudC5yZWFzb259YCk7XG4gICAgICAgICAgICAgICAgZXJyb3IucmVhc29uID0gZXZlbnQucmVhc29uO1xuICAgICAgICAgICAgICAgIGVycm9yLmNvZGUgPSBldmVudC5jb2RlO1xuICAgICAgICAgICAgICAgIGVycm9yLndhc0NsZWFuID0gZXZlbnQud2FzQ2xlYW47XG4gICAgICAgICAgICAgICAgZXJyb3IudGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRoaXMucmVqZWN0UHJvbWlzZT8uKGVycm9yKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2coYG9uY2xvc2UoKSAtIFdTIGNvbm5lY3Rpb24gcmVqZWN0IHdpdGggZXJyb3IgJHtldmVudC5yZWFzb259YCwge1xuICAgICAgICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY29uc2VjdXRpdmVGYWlsdXJlcyArPSAxO1xuICAgICAgICAgICAgICAgIHRoaXMudG90YWxGYWlsdXJlcyArPSAxO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldEhlYWx0aChmYWxzZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0Nvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlamVjdFByb21pc2U/Lih0aGlzLl9lcnJvckZyb21XU0V2ZW50KGV2ZW50KSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9nKGBvbmNsb3NlKCkgLSBXUyBjb25uZWN0aW9uIGNsb3NlZC4gQ2FsbGluZyByZWNvbm5lY3QgLi4uYCwge1xuICAgICAgICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyByZWNvbm5lY3QgaWYgaXRzIGFuIGFibm9ybWFsIGZhaWx1cmVcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbmVycm9yID0gKHdzSUQsIGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy53c0lEICE9PSB3c0lEKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuY29uc2VjdXRpdmVGYWlsdXJlcyArPSAxO1xuICAgICAgICAgICAgdGhpcy50b3RhbEZhaWx1cmVzICs9IDE7XG4gICAgICAgICAgICB0aGlzLl9zZXRIZWFsdGgoZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5pc0Nvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucmVqZWN0UHJvbWlzZT8uKHRoaXMuX2Vycm9yRnJvbVdTRXZlbnQoZXZlbnQpKTtcbiAgICAgICAgICAgIHRoaXMuX2xvZyhgb25lcnJvcigpIC0gV1MgY29ubmVjdGlvbiByZXN1bHRlZCBpbnRvIGVycm9yYCwgeyBldmVudCB9KTtcbiAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdCgpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogX3NldEhlYWx0aCAtIFNldHMgdGhlIGNvbm5lY3Rpb24gdG8gaGVhbHRoeSBvciB1bmhlYWx0aHkuXG4gICAgICAgICAqIEJyb2FkY2FzdHMgYW4gZXZlbnQgaW4gY2FzZSB0aGUgY29ubmVjdGlvbiBzdGF0dXMgY2hhbmdlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBoZWFsdGh5IGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgY29ubmVjdGlvbiBpcyBoZWFsdGh5IG9yIG5vdFxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRpc3BhdGNoSW1tZWRpYXRlbHkgYm9vbGVhbiBpbmRpY2F0aW5nIHRvIGRpc3BhdGNoIGV2ZW50IGltbWVkaWF0ZWx5IGV2ZW4gaWYgdGhlIGNvbm5lY3Rpb24gaXMgdW5oZWFsdGh5XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9zZXRIZWFsdGggPSAoaGVhbHRoeSwgZGlzcGF0Y2hJbW1lZGlhdGVseSA9IGZhbHNlKSA9PiB7XG4gICAgICAgICAgICBpZiAoaGVhbHRoeSA9PT0gdGhpcy5pc0hlYWx0aHkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5pc0hlYWx0aHkgPSBoZWFsdGh5O1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNIZWFsdGh5IHx8IGRpc3BhdGNoSW1tZWRpYXRlbHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Nvbm5lY3Rpb24uY2hhbmdlZCcsXG4gICAgICAgICAgICAgICAgICAgIG9ubGluZTogdGhpcy5pc0hlYWx0aHksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gd2UncmUgb2ZmbGluZSwgd2FpdCBmZXcgc2Vjb25kcyBhbmQgZmlyZSBhbmQgZXZlbnQgaWYgc3RpbGwgb2ZmbGluZVxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNIZWFsdGh5KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy5jbGllbnQuZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjb25uZWN0aW9uLmNoYW5nZWQnLFxuICAgICAgICAgICAgICAgICAgICBvbmxpbmU6IHRoaXMuaXNIZWFsdGh5LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgNTAwMCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBfZXJyb3JGcm9tV1NFdmVudCAtIENyZWF0ZXMgYW4gZXJyb3Igb2JqZWN0IGZvciB0aGUgV1MgZXZlbnRcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2Vycm9yRnJvbVdTRXZlbnQgPSAoZXZlbnQsIGlzV1NGYWlsdXJlID0gdHJ1ZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGNvZGU7XG4gICAgICAgICAgICBsZXQgc3RhdHVzQ29kZTtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlO1xuICAgICAgICAgICAgaWYgKGlzQ2xvc2VFdmVudChldmVudCkpIHtcbiAgICAgICAgICAgICAgICBjb2RlID0gZXZlbnQuY29kZTtcbiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlID0gJ3Vua25vd24nO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBldmVudC5yZWFzb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNFcnJvckV2ZW50KGV2ZW50KSkge1xuICAgICAgICAgICAgICAgIGNvZGUgPSBldmVudC5lcnJvci5jb2RlO1xuICAgICAgICAgICAgICAgIHN0YXR1c0NvZGUgPSBldmVudC5lcnJvci5TdGF0dXNDb2RlO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBldmVudC5lcnJvci5tZXNzYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gS2VlcGluZyB0aGlzIGB3YXJuYCBsZXZlbCBsb2csIHRvIGF2b2lkIGNsdXR0ZXJpbmcgb2YgZXJyb3IgbG9ncyBmcm9tIHdzIGZhaWx1cmVzLlxuICAgICAgICAgICAgdGhpcy5fbG9nKGBfZXJyb3JGcm9tV1NFdmVudCgpIC0gV1MgZmFpbGVkIHdpdGggY29kZSAke2NvZGV9YCwgeyBldmVudCB9LCAnd2FybicpO1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYFdTIGZhaWxlZCB3aXRoIGNvZGUgJHtjb2RlfSBhbmQgcmVhc29uIC0gJHttZXNzYWdlfWApO1xuICAgICAgICAgICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFN0YXR1c0NvZGUgZG9lcyBub3QgZXhpc3Qgb24gYW55IGV2ZW50IHR5cGVzIGJ1dCBoYXMgYmVlbiBsZWZ0XG4gICAgICAgICAgICAgKiBhcyBpcyB0byBwcmVzZXJ2ZSBKUyBmdW5jdGlvbmFsaXR5IGR1cmluZyB0aGUgVFMgaW1wbGVtZW50YXRpb25cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZXJyb3IuU3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gICAgICAgICAgICBlcnJvci5pc1dTRmFpbHVyZSA9IGlzV1NGYWlsdXJlO1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogX3NldHVwUHJvbWlzZSAtIHNldHMgdXAgdGhlIHRoaXMuY29ubmVjdE9wZW4gcHJvbWlzZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fc2V0dXBDb25uZWN0aW9uUHJvbWlzZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaXNSZXNvbHZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqIGEgcHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIG9uY2Ugd3Mub3BlbiBpcyBjYWxsZWQgKi9cbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbk9wZW4gPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWplY3RQcm9taXNlID0gcmVqZWN0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTY2hlZHVsZXMgYSBuZXh0IGhlYWx0aCBjaGVjayBwaW5nIGZvciB3ZWJzb2NrZXQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNjaGVkdWxlTmV4dFBpbmcgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5oZWFsdGhDaGVja1RpbWVvdXRSZWYpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5oZWFsdGhDaGVja1RpbWVvdXRSZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gMzAgc2Vjb25kcyBpcyB0aGUgcmVjb21tZW5kZWQgaW50ZXJ2YWwgKG1lc3NlbmdlciB1c2VzIHRoaXMpXG4gICAgICAgICAgICB0aGlzLmhlYWx0aENoZWNrVGltZW91dFJlZiA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIHNlbmQgdGhlIGhlYWx0aGNoZWNrLi4uLCBzZXJ2ZXIgcmVwbGllcyB3aXRoIGEgaGVhbHRoIGNoZWNrIGV2ZW50XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IFt7IHR5cGU6ICdoZWFsdGguY2hlY2snLCBjbGllbnRfaWQ6IHRoaXMuY2xpZW50LmNsaWVudElEIH1dO1xuICAgICAgICAgICAgICAgIC8vIHRyeSB0byBzZW5kIG9uIHRoZSBjb25uZWN0aW9uXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53cz8uc2VuZChKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVycm9yIHdpbGwgYWxyZWFkeSBiZSBkZXRlY3RlZCBlbHNld2hlcmVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzLnBpbmdJbnRlcnZhbCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzY2hlZHVsZUNvbm5lY3Rpb25DaGVjayAtIHNjaGVkdWxlcyBhIGNoZWNrIGZvciB0aW1lIGRpZmZlcmVuY2UgYmV0d2VlbiBsYXN0IHJlY2VpdmVkIGV2ZW50IGFuZCBub3cuXG4gICAgICAgICAqIElmIHRoZSBkaWZmZXJlbmNlIGlzIG1vcmUgdGhhbiAzNSBzZWNvbmRzLCBpdCBtZWFucyBvdXIgaGVhbHRoIGNoZWNrIGxvZ2ljIGhhcyBmYWlsZWQgYW5kIHdlYnNvY2tldCBuZWVkc1xuICAgICAgICAgKiB0byBiZSByZWNvbm5lY3RlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2NoZWR1bGVDb25uZWN0aW9uQ2hlY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uQ2hlY2tUaW1lb3V0UmVmKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY29ubmVjdGlvbkNoZWNrVGltZW91dFJlZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25DaGVja1RpbWVvdXRSZWYgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxhc3RFdmVudCAmJlxuICAgICAgICAgICAgICAgICAgICBub3cuZ2V0VGltZSgpIC0gdGhpcy5sYXN0RXZlbnQuZ2V0VGltZSgpID4gdGhpcy5jb25uZWN0aW9uQ2hlY2tUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZygnc2NoZWR1bGVDb25uZWN0aW9uQ2hlY2sgLSBnb2luZyB0byByZWNvbm5lY3QnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0SGVhbHRoKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcy5jb25uZWN0aW9uQ2hlY2tUaW1lb3V0KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgICAgIC8qKiBjb25zZWN1dGl2ZSBmYWlsdXJlcyBpbmZsdWVuY2UgdGhlIGR1cmF0aW9uIG9mIHRoZSB0aW1lb3V0ICovXG4gICAgICAgIHRoaXMuY29uc2VjdXRpdmVGYWlsdXJlcyA9IDA7XG4gICAgICAgIC8qKiBrZWVwIHRyYWNrIG9mIHRoZSB0b3RhbCBudW1iZXIgb2YgZmFpbHVyZXMgKi9cbiAgICAgICAgdGhpcy50b3RhbEZhaWx1cmVzID0gMDtcbiAgICAgICAgLyoqIFdlIG9ubHkgbWFrZSAxIGF0dGVtcHQgdG8gcmVjb25uZWN0IGF0IHRoZSBzYW1lIHRpbWUuLiAqL1xuICAgICAgICB0aGlzLmlzQ29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAvKiogVHJ1ZSBhZnRlciB0aGUgYXV0aCBwYXlsb2FkIGlzIHNlbnQgdG8gdGhlIHNlcnZlciAqL1xuICAgICAgICB0aGlzLmF1dGhlbnRpY2F0aW9uU2VudCA9IGZhbHNlO1xuICAgICAgICAvKiogVG8gYXZvaWQgcmVjb25uZWN0IGlmIGNsaWVudCBpcyBkaXNjb25uZWN0ZWQgKi9cbiAgICAgICAgdGhpcy5pc0Rpc2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICAvKiogQm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgY29ubmVjdGlvbiBwcm9taXNlIGlzIHJlc29sdmVkICovXG4gICAgICAgIHRoaXMuaXNSZXNvbHZlZCA9IGZhbHNlO1xuICAgICAgICAvKiogQm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB3ZSBoYXZlIGEgd29ya2luZyBjb25uZWN0aW9uIHRvIHRoZSBzZXJ2ZXIgKi9cbiAgICAgICAgdGhpcy5pc0hlYWx0aHkgPSBmYWxzZTtcbiAgICAgICAgLyoqIEluY3JlbWVudGVkIHdoZW4gYSBuZXcgV1MgY29ubmVjdGlvbiBpcyBtYWRlICovXG4gICAgICAgIHRoaXMud3NJRCA9IDE7XG4gICAgICAgIC8qKiBTdG9yZSB0aGUgbGFzdCBldmVudCB0aW1lIGZvciBoZWFsdGggY2hlY2tzICovXG4gICAgICAgIHRoaXMubGFzdEV2ZW50ID0gbnVsbDtcbiAgICAgICAgLyoqIFNlbmQgYSBoZWFsdGggY2hlY2sgbWVzc2FnZSBldmVyeSAyNSBzZWNvbmRzICovXG4gICAgICAgIHRoaXMucGluZ0ludGVydmFsID0gMjUgKiAxMDAwO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25DaGVja1RpbWVvdXQgPSB0aGlzLnBpbmdJbnRlcnZhbCArIDEwICogMTAwMDtcbiAgICAgICAgYWRkQ29ubmVjdGlvbkV2ZW50TGlzdGVuZXJzKHRoaXMub25saW5lU3RhdHVzQ2hhbmdlZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGNvbm5lY3QgLSBDb25uZWN0IHRvIHRoZSBXUyBVUkxcbiAgICAgKiB0aGUgZGVmYXVsdCAxNXMgdGltZW91dCBhbGxvd3MgYmV0d2VlbiAyfjMgdHJpZXNcbiAgICAgKiBAcmV0dXJuIHtDb25uZWN0QVBJUmVzcG9uc2U8Q29ubmVjdGVkRXZlbnQ+fSBQcm9taXNlIHRoYXQgY29tcGxldGVzIG9uY2UgdGhlIGZpcnN0IGhlYWx0aCBjaGVjayBtZXNzYWdlIGlzIHJlY2VpdmVkXG4gICAgICovXG4gICAgYXN5bmMgY29ubmVjdCh0aW1lb3V0ID0gMTUwMDApIHtcbiAgICAgICAgaWYgKHRoaXMuaXNDb25uZWN0aW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgWW91J3ZlIGNhbGxlZCBjb25uZWN0IHR3aWNlLCBjYW4gb25seSBhdHRlbXB0IDEgY29ubmVjdGlvbiBhdCB0aGUgdGltZWApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNEaXNjb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGhlYWx0aENoZWNrID0gYXdhaXQgdGhpcy5fY29ubmVjdCgpO1xuICAgICAgICAgICAgdGhpcy5jb25zZWN1dGl2ZUZhaWx1cmVzID0gMDtcbiAgICAgICAgICAgIHRoaXMuX2xvZyhgY29ubmVjdCgpIC0gRXN0YWJsaXNoZWQgd3MgY29ubmVjdGlvbiB3aXRoIGhlYWx0aGNoZWNrOiAke2hlYWx0aENoZWNrfWApO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5pc0hlYWx0aHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuY29uc2VjdXRpdmVGYWlsdXJlcyArPSAxO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgZXJyb3IuY29kZSA9PT0gS25vd25Db2Rlcy5UT0tFTl9FWFBJUkVEICYmXG4gICAgICAgICAgICAgICAgIXRoaXMuY2xpZW50LnRva2VuTWFuYWdlci5pc1N0YXRpYygpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9nKCdjb25uZWN0KCkgLSBXUyBmYWlsdXJlIGR1ZSB0byBleHBpcmVkIHRva2VuLCBzbyBnb2luZyB0byB0cnkgdG8gcmVsb2FkIHRva2VuIGFuZCByZWNvbm5lY3QnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3QoeyByZWZyZXNoVG9rZW46IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgaWYgKCFlcnJvci5pc1dTRmFpbHVyZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBUEkgcmVqZWN0ZWQgdGhlIGNvbm5lY3Rpb24gYW5kIHdlIHNob3VsZCBub3QgcmV0cnlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGVycm9yLmNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgICAgICBTdGF0dXNDb2RlOiBlcnJvci5TdGF0dXNDb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzV1NGYWlsdXJlOiBlcnJvci5pc1dTRmFpbHVyZSxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fd2FpdEZvckhlYWx0aHkodGltZW91dCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIF93YWl0Rm9ySGVhbHRoeSBwb2xscyB0aGUgcHJvbWlzZSBjb25uZWN0aW9uIHRvIHNlZSBpZiBpdHMgcmVzb2x2ZWQgdW50aWwgaXQgdGltZXMgb3V0XG4gICAgICogdGhlIGRlZmF1bHQgMTVzIHRpbWVvdXQgYWxsb3dzIGJldHdlZW4gMn4zIHRyaWVzXG4gICAgICogQHBhcmFtIHRpbWVvdXQgZHVyYXRpb24obXMpXG4gICAgICovXG4gICAgYXN5bmMgX3dhaXRGb3JIZWFsdGh5KHRpbWVvdXQgPSAxNTAwMCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSA1MDsgLy8gbXNcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSB0aW1lb3V0OyBpICs9IGludGVydmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb25uZWN0aW9uT3BlbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09PSB0aW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogZXJyb3IuY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdHVzQ29kZTogZXJyb3IuU3RhdHVzQ29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNXU0ZhaWx1cmU6IGVycm9yLmlzV1NGYWlsdXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwKGludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKCksXG4gICAgICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwKHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNDb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogJycsXG4gICAgICAgICAgICAgICAgICAgIFN0YXR1c0NvZGU6ICcnLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5pdGlhbCBXUyBjb25uZWN0aW9uIGNvdWxkIG5vdCBiZSBlc3RhYmxpc2hlZCcsXG4gICAgICAgICAgICAgICAgICAgIGlzV1NGYWlsdXJlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pKCksXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBkaXNjb25uZWN0IC0gRGlzY29ubmVjdCB0aGUgY29ubmVjdGlvbiBhbmQgZG9lc24ndCByZWNvdmVyLi4uXG4gICAgICpcbiAgICAgKi9cbiAgICBkaXNjb25uZWN0KHRpbWVvdXQpIHtcbiAgICAgICAgdGhpcy5fbG9nKGBkaXNjb25uZWN0KCkgLSBDbG9zaW5nIHRoZSB3ZWJzb2NrZXQgY29ubmVjdGlvbiBmb3Igd3NJRCAke3RoaXMud3NJRH1gKTtcbiAgICAgICAgdGhpcy53c0lEICs9IDE7XG4gICAgICAgIHRoaXMuaXNDb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNEaXNjb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAvLyBzdGFydCBieSByZW1vdmluZyBhbGwgdGhlIGxpc3RlbmVyc1xuICAgICAgICBpZiAodGhpcy5oZWFsdGhDaGVja1RpbWVvdXRSZWYpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5oZWFsdGhDaGVja1RpbWVvdXRSZWYpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25DaGVja1RpbWVvdXRSZWYpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5jb25uZWN0aW9uQ2hlY2tUaW1lb3V0UmVmKTtcbiAgICAgICAgfVxuICAgICAgICByZW1vdmVDb25uZWN0aW9uRXZlbnRMaXN0ZW5lcnModGhpcy5vbmxpbmVTdGF0dXNDaGFuZ2VkKTtcbiAgICAgICAgdGhpcy5pc0hlYWx0aHkgPSBmYWxzZTtcbiAgICAgICAgLy8gcmVtb3ZlIHdzIGhhbmRsZXJzLi4uXG4gICAgICAgIGlmICh0aGlzLndzICYmIHRoaXMud3MucmVtb3ZlQWxsTGlzdGVuZXJzKSB7XG4gICAgICAgICAgICB0aGlzLndzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBpc0Nsb3NlZFByb21pc2U7XG4gICAgICAgIC8vIGFuZCBmaW5hbGx5IGNsb3NlLi4uXG4gICAgICAgIC8vIEFzc2lnbmluZyB0byBsb2NhbCBoZXJlIGJlY2F1c2Ugd2Ugd2lsbCByZW1vdmUgaXQgZnJvbSB0aGlzIGJlZm9yZSB0aGVcbiAgICAgICAgLy8gcHJvbWlzZSByZXNvbHZlcy5cbiAgICAgICAgY29uc3QgeyB3cyB9ID0gdGhpcztcbiAgICAgICAgaWYgKHdzICYmIHdzLmNsb3NlICYmIHdzLnJlYWR5U3RhdGUgPT09IHdzLk9QRU4pIHtcbiAgICAgICAgICAgIGlzQ2xvc2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb25jbG9zZSA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2coYGRpc2Nvbm5lY3QoKSAtIHJlc29sdmluZyBpc0Nsb3NlZFByb21pc2UgJHtldmVudCA/ICd3aXRoJyA6ICd3aXRob3V0J30gY2xvc2UgZnJhbWVgLCB7IGV2ZW50IH0pO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB3cy5vbmNsb3NlID0gb25jbG9zZTtcbiAgICAgICAgICAgICAgICAvLyBJbiBjYXNlIHdlIGRvbid0IHJlY2VpdmUgY2xvc2UgZnJhbWUgd2Vic29ja2V0IHNlcnZlciBpbiB0aW1lLFxuICAgICAgICAgICAgICAgIC8vIGxldHMgbm90IHdhaXQgZm9yIG1vcmUgdGhhbiAxIHNlY29uZC5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KG9uY2xvc2UsIHRpbWVvdXQgIT0gbnVsbCA/IHRpbWVvdXQgOiAxMDAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fbG9nKGBkaXNjb25uZWN0KCkgLSBNYW51YWxseSBjbG9zZWQgY29ubmVjdGlvbiBieSBjYWxsaW5nIGNsaWVudC5kaXNjb25uZWN0KClgKTtcbiAgICAgICAgICAgIHdzLmNsb3NlKEtub3duQ29kZXMuV1NfQ0xPU0VEX1NVQ0NFU1MsICdNYW51YWxseSBjbG9zZWQgY29ubmVjdGlvbiBieSBjYWxsaW5nIGNsaWVudC5kaXNjb25uZWN0KCknKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2xvZyhgZGlzY29ubmVjdCgpIC0gd3MgY29ubmVjdGlvbiBkb2Vzbid0IGV4aXN0IG9yIGl0IGlzIGFscmVhZHkgY2xvc2VkLmApO1xuICAgICAgICAgICAgaXNDbG9zZWRQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHRoaXMud3M7XG4gICAgICAgIHJldHVybiBpc0Nsb3NlZFByb21pc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIF9jb25uZWN0IC0gQ29ubmVjdCB0byB0aGUgV1MgZW5kcG9pbnRcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Nvbm5lY3RBUElSZXNwb25zZTxDb25uZWN0ZWRFdmVudD59IFByb21pc2UgdGhhdCBjb21wbGV0ZXMgb25jZSB0aGUgZmlyc3QgaGVhbHRoIGNoZWNrIG1lc3NhZ2UgaXMgcmVjZWl2ZWRcbiAgICAgKi9cbiAgICBhc3luYyBfY29ubmVjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNDb25uZWN0aW5nIHx8XG4gICAgICAgICAgICAodGhpcy5pc0Rpc2Nvbm5lY3RlZCAmJiB0aGlzLmNsaWVudC5vcHRpb25zLmVuYWJsZVdTRmFsbGJhY2spKVxuICAgICAgICAgICAgcmV0dXJuOyAvLyBzaW1wbHkgaWdub3JlIF9jb25uZWN0IGlmIGl0J3MgY3VycmVudGx5IHRyeWluZyB0byBjb25uZWN0XG4gICAgICAgIHRoaXMuaXNDb25uZWN0aW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0SUQgPSByYW5kb21JZCgpO1xuICAgICAgICB0aGlzLmNsaWVudC5pbnNpZ2h0TWV0cmljcy5jb25uZWN0aW9uU3RhcnRUaW1lc3RhbXAgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgbGV0IGlzVG9rZW5SZWFkeSA9IGZhbHNlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fbG9nKGBfY29ubmVjdCgpIC0gd2FpdGluZyBmb3IgdG9rZW5gKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2xpZW50LnRva2VuTWFuYWdlci50b2tlblJlYWR5KCk7XG4gICAgICAgICAgICBpc1Rva2VuUmVhZHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyB0b2tlbiBwcm92aWRlciBoYXMgZmFpbGVkIGJlZm9yZSwgc28gdHJ5IGFnYWluXG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghaXNUb2tlblJlYWR5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9nKGBfY29ubmVjdCgpIC0gdG9rZW5Qcm92aWRlciBmYWlsZWQgYmVmb3JlLCBzbyBnb2luZyB0byByZXRyeWApO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY2xpZW50LnRva2VuTWFuYWdlci5sb2FkVG9rZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3NldHVwQ29ubmVjdGlvblByb21pc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IHdzVVJMID0gdGhpcy5fYnVpbGRVcmwoKTtcbiAgICAgICAgICAgIHRoaXMuX2xvZyhgX2Nvbm5lY3QoKSAtIENvbm5lY3RpbmcgdG8gJHt3c1VSTH1gLCB7XG4gICAgICAgICAgICAgICAgd3NVUkwsXG4gICAgICAgICAgICAgICAgcmVxdWVzdElEOiB0aGlzLnJlcXVlc3RJRCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy53cyA9IG5ldyBXZWJTb2NrZXQod3NVUkwpO1xuICAgICAgICAgICAgdGhpcy53cy5vbm9wZW4gPSB0aGlzLm9ub3Blbi5iaW5kKHRoaXMsIHRoaXMud3NJRCk7XG4gICAgICAgICAgICB0aGlzLndzLm9uY2xvc2UgPSB0aGlzLm9uY2xvc2UuYmluZCh0aGlzLCB0aGlzLndzSUQpO1xuICAgICAgICAgICAgdGhpcy53cy5vbmVycm9yID0gdGhpcy5vbmVycm9yLmJpbmQodGhpcywgdGhpcy53c0lEKTtcbiAgICAgICAgICAgIHRoaXMud3Mub25tZXNzYWdlID0gdGhpcy5vbm1lc3NhZ2UuYmluZCh0aGlzLCB0aGlzLndzSUQpO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmNvbm5lY3Rpb25PcGVuO1xuICAgICAgICAgICAgdGhpcy5pc0Nvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbklEID0gcmVzcG9uc2UuY29ubmVjdGlvbl9pZDtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5yZXNvbHZlQ29ubmVjdGlvbklkPy4odGhpcy5jb25uZWN0aW9uSUQpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNsaWVudC5pbnNpZ2h0TWV0cmljcy53c0NvbnNlY3V0aXZlRmFpbHVyZXMgPiAwICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50Lm9wdGlvbnMuZW5hYmxlSW5zaWdodHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zdEluc2lnaHRzKCd3c19zdWNjZXNzX2FmdGVyX2ZhaWx1cmUnLCBidWlsZFdzU3VjY2Vzc0FmdGVyRmFpbHVyZUluc2lnaHQodGhpcykpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5pbnNpZ2h0TWV0cmljcy53c0NvbnNlY3V0aXZlRmFpbHVyZXMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5pc0Nvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHRoaXMuX2xvZyhgX2Nvbm5lY3QoKSAtIEVycm9yIC0gYCwgZXJyKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNsaWVudC5vcHRpb25zLmVuYWJsZUluc2lnaHRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGllbnQuaW5zaWdodE1ldHJpY3Mud3NDb25zZWN1dGl2ZUZhaWx1cmVzKys7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGllbnQuaW5zaWdodE1ldHJpY3Mud3NUb3RhbEZhaWx1cmVzKys7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5zaWdodHMgPSBidWlsZFdzRmF0YWxJbnNpZ2h0KHRoaXMsIGNvbnZlcnRFcnJvclRvSnNvbihlcnIpKTtcbiAgICAgICAgICAgICAgICBwb3N0SW5zaWdodHM/Lignd3NfZmF0YWwnLCBpbnNpZ2h0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNsaWVudC5yZWplY3RDb25uZWN0aW9uSWQ/LigpO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIF9yZWNvbm5lY3QgLSBSZXRyeSB0aGUgY29ubmVjdGlvbiB0byBXUyBlbmRwb2ludFxuICAgICAqXG4gICAgICogQHBhcmFtIHt7IGludGVydmFsPzogbnVtYmVyOyByZWZyZXNoVG9rZW4/OiBib29sZWFuIH19IG9wdGlvbnMgRm9sbG93aW5nIG9wdGlvbnMgYXJlIGF2YWlsYWJsZVxuICAgICAqXG4gICAgICogLSBgaW50ZXJ2YWxgXHR7aW50fVx0XHRcdG51bWJlciBvZiBtcyB0aGF0IGZ1bmN0aW9uIHNob3VsZCB3YWl0IGJlZm9yZSByZWNvbm5lY3RpbmdcbiAgICAgKiAtIGByZWZyZXNoVG9rZW5gIHtib29sZWFufVx0cmVsb2FkL3JlZnJlc2ggdXNlciB0b2tlbiBiZSByZWZyZXNoZWQgYmVmb3JlIGF0dGVtcHRpbmcgcmVjb25uZWN0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIF9yZWNvbm5lY3Qob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuX2xvZygnX3JlY29ubmVjdCgpIC0gSW5pdGlhdGluZyB0aGUgcmVjb25uZWN0Jyk7XG4gICAgICAgIC8vIG9ubHkgYWxsb3cgMSBjb25uZWN0aW9uIGF0IHRoZSB0aW1lXG4gICAgICAgIGlmICh0aGlzLmlzQ29ubmVjdGluZyB8fCB0aGlzLmlzSGVhbHRoeSkge1xuICAgICAgICAgICAgdGhpcy5fbG9nKCdfcmVjb25uZWN0KCkgLSBBYm9ydCAoMSkgc2luY2UgYWxyZWFkeSBjb25uZWN0aW5nIG9yIGhlYWx0aHknKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWNvbm5lY3QgaW4gY2FzZSBvZiBvbiBlcnJvciBvciBvbiBjbG9zZVxuICAgICAgICAvLyBhbHNvIHJlY29ubmVjdCBpZiB0aGUgaGVhbHRoIGNoZWNrIGN5Y2xlIGZhaWxzXG4gICAgICAgIGxldCBpbnRlcnZhbCA9IG9wdGlvbnMuaW50ZXJ2YWw7XG4gICAgICAgIGlmICghaW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIGludGVydmFsID0gcmV0cnlJbnRlcnZhbCh0aGlzLmNvbnNlY3V0aXZlRmFpbHVyZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlY29ubmVjdCwgb3IgdHJ5IGFnYWluIGFmdGVyIGEgbGl0dGxlIHdoaWxlLi4uXG4gICAgICAgIGF3YWl0IHNsZWVwKGludGVydmFsKTtcbiAgICAgICAgLy8gQ2hlY2sgb25jZSBhZ2FpbiBpZiBieSBzb21lIG90aGVyIGNhbGwgdG8gX3JlY29ubmVjdCBpcyBhY3RpdmUgb3IgY29ubmVjdGlvbiBpc1xuICAgICAgICAvLyBhbHJlYWR5IHJlc3RvcmVkLCB0aGVuIG5vIG5lZWQgdG8gcHJvY2VlZC5cbiAgICAgICAgaWYgKHRoaXMuaXNDb25uZWN0aW5nIHx8IHRoaXMuaXNIZWFsdGh5KSB7XG4gICAgICAgICAgICB0aGlzLl9sb2coJ19yZWNvbm5lY3QoKSAtIEFib3J0ICgyKSBzaW5jZSBhbHJlYWR5IGNvbm5lY3Rpbmcgb3IgaGVhbHRoeScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzRGlzY29ubmVjdGVkICYmIHRoaXMuY2xpZW50Lm9wdGlvbnMuZW5hYmxlV1NGYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5fbG9nKCdfcmVjb25uZWN0KCkgLSBBYm9ydCAoMykgc2luY2UgZGlzY29ubmVjdCgpIGlzIGNhbGxlZCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xvZygnX3JlY29ubmVjdCgpIC0gRGVzdHJveWluZyBjdXJyZW50IFdTIGNvbm5lY3Rpb24nKTtcbiAgICAgICAgLy8gY2xlYW51cCB0aGUgb2xkIGNvbm5lY3Rpb25cbiAgICAgICAgdGhpcy5fZGVzdHJveUN1cnJlbnRXU0Nvbm5lY3Rpb24oKTtcbiAgICAgICAgaWYgKG9wdGlvbnMucmVmcmVzaFRva2VuKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNsaWVudC50b2tlbk1hbmFnZXIubG9hZFRva2VuKCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIHRoaXMuX2xvZygnX3JlY29ubmVjdCgpIC0gV2FpdGluZyBmb3IgcmVjb3ZlckNhbGxCYWNrJyk7XG4gICAgICAgICAgICAvLyBhd2FpdCB0aGlzLmNsaWVudC5yZWNvdmVyU3RhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuX2xvZygnX3JlY29ubmVjdCgpIC0gRmluaXNoZWQgcmVjb3ZlckNhbGxCYWNrJyk7XG4gICAgICAgICAgICB0aGlzLmNvbnNlY3V0aXZlRmFpbHVyZXMgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5pc0hlYWx0aHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuY29uc2VjdXRpdmVGYWlsdXJlcyArPSAxO1xuICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IEtub3duQ29kZXMuVE9LRU5fRVhQSVJFRCAmJlxuICAgICAgICAgICAgICAgICF0aGlzLmNsaWVudC50b2tlbk1hbmFnZXIuaXNTdGF0aWMoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvZygnX3JlY29ubmVjdCgpIC0gV1MgZmFpbHVyZSBkdWUgdG8gZXhwaXJlZCB0b2tlbiwgc28gZ29pbmcgdG8gdHJ5IHRvIHJlbG9hZCB0b2tlbiBhbmQgcmVjb25uZWN0Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY29ubmVjdCh7IHJlZnJlc2hUb2tlbjogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHJlY29ubmVjdCBvbiBXUyBmYWlsdXJlcywgZG9uJ3QgcmVjb25uZWN0IGlmIHRoZXJlIGlzIGEgY29kZSBidWdcbiAgICAgICAgICAgIGlmIChlcnJvci5pc1dTRmFpbHVyZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvZygnX3JlY29ubmVjdCgpIC0gV1MgZmFpbHVyZSwgc28gZ29pbmcgdG8gdHJ5IHRvIHJlY29ubmVjdCcpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xvZygnX3JlY29ubmVjdCgpIC0gPT0gRU5EID09Jyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIF9kZXN0cm95Q3VycmVudFdTQ29ubmVjdGlvbiAtIFJlbW92ZXMgdGhlIGN1cnJlbnQgV1MgY29ubmVjdGlvblxuICAgICAqXG4gICAgICovXG4gICAgX2Rlc3Ryb3lDdXJyZW50V1NDb25uZWN0aW9uKCkge1xuICAgICAgICAvLyBpbmNyZW1lbnQgdGhlIElELCBtZWFuaW5nIHdlIHdpbGwgaWdub3JlIGFsbCBtZXNzYWdlcyBmcm9tIHRoZSBvbGRcbiAgICAgICAgLy8gd3MgY29ubmVjdGlvbiBmcm9tIG5vdyBvbi5cbiAgICAgICAgdGhpcy53c0lEICs9IDE7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzPy53cz8ucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICB0aGlzPy53cz8uY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gd2UgZG9uJ3QgY2FyZVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc1N0cmluZyhhcnJheU9yU3RyaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBhcnJheU9yU3RyaW5nID09PSAnc3RyaW5nJztcbn1cbmZ1bmN0aW9uIGlzTWFwU3RyaW5nQ2FsbGJhY2soYXJyYXlPclN0cmluZywgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gISFjYWxsYmFjayAmJiBpc1N0cmluZyhhcnJheU9yU3RyaW5nKTtcbn1cbmZ1bmN0aW9uIG1hcChhcnJheU9yU3RyaW5nLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHJlcyA9IFtdO1xuICAgIGlmIChpc1N0cmluZyhhcnJheU9yU3RyaW5nKSAmJiBpc01hcFN0cmluZ0NhbGxiYWNrKGFycmF5T3JTdHJpbmcsIGNhbGxiYWNrKSkge1xuICAgICAgICBmb3IgKGxldCBrID0gMCwgbGVuID0gYXJyYXlPclN0cmluZy5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgICAgICAgICAgaWYgKGFycmF5T3JTdHJpbmcuY2hhckF0KGspKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga1ZhbHVlID0gYXJyYXlPclN0cmluZy5jaGFyQXQoayk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFwcGVkVmFsdWUgPSBjYWxsYmFjayhrVmFsdWUsIGssIGFycmF5T3JTdHJpbmcpO1xuICAgICAgICAgICAgICAgIHJlc1trXSA9IG1hcHBlZFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKCFpc1N0cmluZyhhcnJheU9yU3RyaW5nKSAmJlxuICAgICAgICAhaXNNYXBTdHJpbmdDYWxsYmFjayhhcnJheU9yU3RyaW5nLCBjYWxsYmFjaykpIHtcbiAgICAgICAgZm9yIChsZXQgayA9IDAsIGxlbiA9IGFycmF5T3JTdHJpbmcubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgICAgIGlmIChrIGluIGFycmF5T3JTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrVmFsdWUgPSBhcnJheU9yU3RyaW5nW2tdO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcHBlZFZhbHVlID0gY2FsbGJhY2soa1ZhbHVlLCBrLCBhcnJheU9yU3RyaW5nKTtcbiAgICAgICAgICAgICAgICByZXNba10gPSBtYXBwZWRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuY29uc3QgZW5jb2RlQmFzZTY0ID0gKGRhdGEpID0+IGZyb21CeXRlQXJyYXkobmV3IFVpbnQ4QXJyYXkobWFwKGRhdGEsIChjaGFyKSA9PiBjaGFyLmNoYXJDb2RlQXQoMCkpKSk7XG4vLyBiYXNlLTY0IGRlY29kZXIgdGhyb3dzIGV4Y2VwdGlvbiBpZiBlbmNvZGVkIHN0cmluZyBpcyBub3QgcGFkZGVkIGJ5ICc9JyB0byBtYWtlIHN0cmluZyBsZW5ndGhcbi8vIGluIG11bHRpcGxlcyBvZiA0LiBTbyBnb25uYSB1c2Ugb3VyIG93biBtZXRob2QgZm9yIHRoaXMgcHVycG9zZSB0byBrZWVwIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDI2XG5jb25zdCBkZWNvZGVCYXNlNjQgPSAocykgPT4ge1xuICAgIGNvbnN0IGUgPSB7fSwgdyA9IFN0cmluZy5mcm9tQ2hhckNvZGUsIEwgPSBzLmxlbmd0aDtcbiAgICBsZXQgaSwgYiA9IDAsIGMsIHgsIGwgPSAwLCBhLCByID0gJyc7XG4gICAgY29uc3QgQSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJztcbiAgICBmb3IgKGkgPSAwOyBpIDwgNjQ7IGkrKykge1xuICAgICAgICBlW0EuY2hhckF0KGkpXSA9IGk7XG4gICAgfVxuICAgIGZvciAoeCA9IDA7IHggPCBMOyB4KyspIHtcbiAgICAgICAgYyA9IGVbcy5jaGFyQXQoeCldO1xuICAgICAgICBiID0gKGIgPDwgNikgKyBjO1xuICAgICAgICBsICs9IDY7XG4gICAgICAgIHdoaWxlIChsID49IDgpIHtcbiAgICAgICAgICAgICgoYSA9IChiID4+PiAobCAtPSA4KSkgJiAweGZmKSB8fCB4IDwgTCAtIDIpICYmIChyICs9IHcoYSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBKV1QgdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCBmb3IgYSBVc2VyU2Vzc2lvblxuICogQG1ldGhvZCBKV1RVc2VyVG9rZW5cbiAqIEBtZW1iZXJvZiBzaWduaW5nXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTZWNyZXR9IGFwaVNlY3JldCAtIEFQSSBTZWNyZXQga2V5XG4gKiBAcGFyYW0ge3N0cmluZ30gdXNlcklkIC0gVGhlIHVzZXJfaWQga2V5IGluIHRoZSBKV1QgcGF5bG9hZFxuICogQHBhcmFtIHtVUn0gW2V4dHJhRGF0YV0gLSBFeHRyYSB0aGF0IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBKV1QgdG9rZW5cbiAqIEBwYXJhbSB7U2lnbk9wdGlvbnN9IFtqd3RPcHRpb25zXSAtIE9wdGlvbnMgdGhhdCBjYW4gYmUgcGFzdCB0byBqd3Quc2lnblxuICogQHJldHVybiB7c3RyaW5nfSBKV1QgVG9rZW5cbiAqL1xuZnVuY3Rpb24gSldUVXNlclRva2VuKGFwaVNlY3JldCwgdXNlcklkLCBleHRyYURhdGEgPSB7fSwgand0T3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKHR5cGVvZiB1c2VySWQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3VzZXJJZCBzaG91bGQgYmUgYSBzdHJpbmcnKTtcbiAgICB9XG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgdXNlcl9pZDogdXNlcklkLFxuICAgICAgICAuLi5leHRyYURhdGEsXG4gICAgfTtcbiAgICAvLyBtYWtlIHN1cmUgd2UgcmV0dXJuIGEgY2xlYXIgZXJyb3Igd2hlbiBqd3QgaXMgc2hpbW1lZCAoaWUuIGJyb3dzZXIgYnVpbGQpXG4gICAgaWYgKGp3dCA9PSBudWxsIHx8IGp3dC5zaWduID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoYFVuYWJsZSB0byBmaW5kIGp3dCBjcnlwdG8sIGlmIHlvdSBhcmUgZ2V0dGluZyB0aGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgeW91IGFyZSB0cnlpbmcgdG8gZ2VuZXJhdGUgdG9rZW5zIG9uIGJyb3dzZXIgb3IgUmVhY3QgTmF0aXZlIChvciBvdGhlciBlbnZpcm9ubWVudCB3aGVyZSBjcnlwdG8gZnVuY3Rpb25zIGFyZSBub3QgYXZhaWxhYmxlKS4gUGxlYXNlIE5vdGU6IHRva2VuIHNob3VsZCBvbmx5IGJlIGdlbmVyYXRlZCBzZXJ2ZXItc2lkZS5gKTtcbiAgICB9XG4gICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oeyBhbGdvcml0aG06ICdIUzI1NicsIG5vVGltZXN0YW1wOiB0cnVlIH0sIGp3dE9wdGlvbnMpO1xuICAgIGlmIChwYXlsb2FkLmlhdCkge1xuICAgICAgICBvcHRzLm5vVGltZXN0YW1wID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBqd3Quc2lnbihwYXlsb2FkLCBhcGlTZWNyZXQsIG9wdHMpO1xufVxuZnVuY3Rpb24gSldUU2VydmVyVG9rZW4oYXBpU2VjcmV0LCBqd3RPcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgICBzZXJ2ZXI6IHRydWUsXG4gICAgfTtcbiAgICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7IGFsZ29yaXRobTogJ0hTMjU2Jywgbm9UaW1lc3RhbXA6IHRydWUgfSwgand0T3B0aW9ucyk7XG4gICAgcmV0dXJuIGp3dC5zaWduKHBheWxvYWQsIGFwaVNlY3JldCwgb3B0cyk7XG59XG5mdW5jdGlvbiBVc2VyRnJvbVRva2VuKHRva2VuKSB7XG4gICAgY29uc3QgZnJhZ21lbnRzID0gdG9rZW4uc3BsaXQoJy4nKTtcbiAgICBpZiAoZnJhZ21lbnRzLmxlbmd0aCAhPT0gMykge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGNvbnN0IGI2NFBheWxvYWQgPSBmcmFnbWVudHNbMV07XG4gICAgY29uc3QgcGF5bG9hZCA9IGRlY29kZUJhc2U2NChiNjRQYXlsb2FkKTtcbiAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShwYXlsb2FkKTtcbiAgICByZXR1cm4gZGF0YS51c2VyX2lkO1xufVxuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVzZXJJZCB0aGUgaWQgb2YgdGhlIHVzZXJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gRGV2VG9rZW4odXNlcklkKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgJ2V5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOScsXG4gICAgICAgIGVuY29kZUJhc2U2NChKU09OLnN0cmluZ2lmeSh7IHVzZXJfaWQ6IHVzZXJJZCB9KSksXG4gICAgICAgICdkZXZ0b2tlbicsIC8vIGhhcmRjb2RlZCBzaWduYXR1cmVcbiAgICBdLmpvaW4oJy4nKTtcbn1cblxuLyoqXG4gKiBUb2tlbk1hbmFnZXJcbiAqXG4gKiBIYW5kbGVzIGFsbCB0aGUgb3BlcmF0aW9ucyBhcm91bmQgdXNlciB0b2tlbi5cbiAqL1xuY2xhc3MgVG9rZW5NYW5hZ2VyIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqXG4gICAgICogQHBhcmFtIHtTZWNyZXR9IHNlY3JldFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNlY3JldCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IHRoZSBzdGF0aWMgc3RyaW5nIHRva2VuIG9yIHRva2VuIHByb3ZpZGVyLlxuICAgICAgICAgKiBUb2tlbiBwcm92aWRlciBzaG91bGQgcmV0dXJuIGEgdG9rZW4gc3RyaW5nIG9yIGEgcHJvbWlzZSB3aGljaCByZXNvbHZlcyB0byBzdHJpbmcgdG9rZW4uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7VG9rZW5PclByb3ZpZGVyfSB0b2tlbk9yUHJvdmlkZXIgLSB0aGUgdG9rZW4gb3IgdG9rZW4gcHJvdmlkZXIuXG4gICAgICAgICAqIEBwYXJhbSB7VXNlclJlc3BvbnNlfSB1c2VyIC0gdGhlIHVzZXIgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzQW5vbnltb3VzIC0gd2hldGhlciB0aGUgdXNlciBpcyBhbm9ueW1vdXMgb3Igbm90LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZXRUb2tlbk9yUHJvdmlkZXIgPSBhc3luYyAodG9rZW5PclByb3ZpZGVyLCB1c2VyLCBpc0Fub255bW91cykgPT4ge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZVRva2VuKHRva2VuT3JQcm92aWRlciwgdXNlciwgaXNBbm9ueW1vdXMpO1xuICAgICAgICAgICAgdGhpcy51c2VyID0gdXNlcjtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHRva2VuT3JQcm92aWRlcikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuUHJvdmlkZXIgPSB0b2tlbk9yUHJvdmlkZXI7XG4gICAgICAgICAgICAgICAgdGhpcy50eXBlID0gJ3Byb3ZpZGVyJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG9rZW5PclByb3ZpZGVyID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbk9yUHJvdmlkZXI7XG4gICAgICAgICAgICAgICAgdGhpcy50eXBlID0gJ3N0YXRpYyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRva2VuT3JQcm92aWRlciAmJiB0aGlzLnVzZXIgJiYgdGhpcy5zZWNyZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuID0gSldUVXNlclRva2VuKHRoaXMuc2VjcmV0LCB1c2VyLmlkLCB7fSwge30pO1xuICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9ICdzdGF0aWMnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkVG9rZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc2V0cyB0aGUgdG9rZW4gbWFuYWdlci5cbiAgICAgICAgICogVXNlZnVsIGZvciBjbGllbnQgZGlzY29ubmVjdGlvbiBvciBzd2l0Y2hpbmcgdXNlci5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVzZXQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRva2VuID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy51c2VyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5sb2FkVG9rZW5Qcm9taXNlID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVmFsaWRhdGVzIHRoZSB1c2VyIHRva2VuLlxuICAgICAgICB0aGlzLnZhbGlkYXRlVG9rZW4gPSAodG9rZW5PclByb3ZpZGVyLCB1c2VyLCBpc0Fub255bW91cykgPT4ge1xuICAgICAgICAgICAgLy8gYWxsb3cgZW1wdHkgdG9rZW4gZm9yIGFub24gdXNlclxuICAgICAgICAgICAgaWYgKHVzZXIgJiYgaXNBbm9ueW1vdXMgJiYgIXRva2VuT3JQcm92aWRlcilcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyBEb24ndCBhbGxvdyBlbXB0eSB0b2tlbiBmb3Igbm9uLXNlcnZlciBzaWRlIGNsaWVudC5cbiAgICAgICAgICAgIGlmICghdGhpcy5zZWNyZXQgJiYgIXRva2VuT3JQcm92aWRlcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVXNlcldpdGhJZCB0b2tlbiBjYW4gbm90IGJlIGVtcHR5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG9rZW5PclByb3ZpZGVyICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRva2VuT3JQcm92aWRlciAhPT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAhaXNGdW5jdGlvbih0b2tlbk9yUHJvdmlkZXIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1c2VyIHRva2VuIHNob3VsZCBlaXRoZXIgYmUgYSBzdHJpbmcgb3IgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0b2tlbk9yUHJvdmlkZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgLy8gQWxsb3cgZW1wdHkgdG9rZW4gZm9yIGFub255bW91cyB1c2Vyc1xuICAgICAgICAgICAgICAgIGlmIChpc0Fub255bW91cyAmJiB0b2tlbk9yUHJvdmlkZXIgPT09ICcnKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc3QgdG9rZW5Vc2VySWQgPSBVc2VyRnJvbVRva2VuKHRva2VuT3JQcm92aWRlcik7XG4gICAgICAgICAgICAgICAgaWYgKHRva2VuT3JQcm92aWRlciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICh0b2tlblVzZXJJZCA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlblVzZXJJZCA9PT0gJycgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICghaXNBbm9ueW1vdXMgJiYgdG9rZW5Vc2VySWQgIT09IHVzZXIuaWQpKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VzZXJUb2tlbiBkb2VzIG5vdCBoYXZlIGEgdXNlcl9pZCBvciBpcyBub3QgbWF0Y2hpbmcgd2l0aCB1c2VyLmlkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBSZXNvbHZlcyB3aGVuIHRva2VuIGlzIHJlYWR5LiBUaGlzIGZ1bmN0aW9uIGlzIHNpbXBseSB0byBjaGVjayBpZiBsb2FkVG9rZW4gaXMgaW4gcHJvZ3Jlc3MsIGluIHdoaWNoXG4gICAgICAgIC8vIGNhc2UgYSBmdW5jdGlvbiBzaG91bGQgd2FpdC5cbiAgICAgICAgdGhpcy50b2tlblJlYWR5ID0gKCkgPT4gdGhpcy5sb2FkVG9rZW5Qcm9taXNlO1xuICAgICAgICAvLyBGZXRjaGVzIGEgdG9rZW4gZnJvbSB0b2tlblByb3ZpZGVyIGZ1bmN0aW9uIGFuZCBzZXRzIGluIHRva2VuTWFuYWdlci5cbiAgICAgICAgLy8gSW4gY2FzZSBvZiBzdGF0aWMgdG9rZW4sIGl0IHdpbGwgc2ltcGx5IHJlc29sdmUgdG8gc3RhdGljIHRva2VuLlxuICAgICAgICB0aGlzLmxvYWRUb2tlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hc3luYy1wcm9taXNlLWV4ZWN1dG9yXG4gICAgICAgICAgICB0aGlzLmxvYWRUb2tlblByb21pc2UgPSBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodGhpcy50b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRva2VuUHJvdmlkZXIgJiYgdHlwZW9mIHRoaXMudG9rZW5Qcm92aWRlciAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG9rZW4gPSBhd2FpdCB0aGlzLnRva2VuUHJvdmlkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoYENhbGwgdG8gdG9rZW5Qcm92aWRlciBmYWlsZWQgd2l0aCBtZXNzYWdlOiAke2V9YCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy50b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkVG9rZW5Qcm9taXNlO1xuICAgICAgICB9O1xuICAgICAgICAvLyBSZXR1cm5zIGEgY3VycmVudCB0b2tlblxuICAgICAgICB0aGlzLmdldFRva2VuID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMudG9rZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnVzZXIgJiYgIXRoaXMudG9rZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnNlY3JldCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBKV1RTZXJ2ZXJUb2tlbih0aGlzLnNlY3JldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEJvdGggc2VjcmV0IGFuZCB1c2VyIHRva2VucyBhcmUgbm90IHNldC4gRWl0aGVyIGNsaWVudC5jb25uZWN0VXNlciB3YXNuJ3QgY2FsbGVkIG9yIGNsaWVudC5kaXNjb25uZWN0IHdhcyBjYWxsZWRgKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pc1N0YXRpYyA9ICgpID0+IHRoaXMudHlwZSA9PT0gJ3N0YXRpYyc7XG4gICAgICAgIHRoaXMubG9hZFRva2VuUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIGlmIChzZWNyZXQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VjcmV0ID0gc2VjcmV0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHlwZSA9ICdzdGF0aWMnO1xuICAgICAgICBpZiAodGhpcy5zZWNyZXQpIHtcbiAgICAgICAgICAgIHRoaXMudG9rZW4gPSBKV1RTZXJ2ZXJUb2tlbih0aGlzLnNlY3JldCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNvbnN0IEFQSUVycm9yQ29kZXMgPSB7XG4gICAgJy0xJzogeyBuYW1lOiAnSW50ZXJuYWxTeXN0ZW1FcnJvcicsIHJldHJ5YWJsZTogdHJ1ZSB9LFxuICAgICcyJzogeyBuYW1lOiAnQWNjZXNzS2V5RXJyb3InLCByZXRyeWFibGU6IGZhbHNlIH0sXG4gICAgJzMnOiB7IG5hbWU6ICdBdXRoZW50aWNhdGlvbkZhaWxlZEVycm9yJywgcmV0cnlhYmxlOiB0cnVlIH0sXG4gICAgJzQnOiB7IG5hbWU6ICdJbnB1dEVycm9yJywgcmV0cnlhYmxlOiBmYWxzZSB9LFxuICAgICc2JzogeyBuYW1lOiAnRHVwbGljYXRlVXNlcm5hbWVFcnJvcicsIHJldHJ5YWJsZTogZmFsc2UgfSxcbiAgICAnOSc6IHsgbmFtZTogJ1JhdGVMaW1pdEVycm9yJywgcmV0cnlhYmxlOiB0cnVlIH0sXG4gICAgJzE2JzogeyBuYW1lOiAnRG9lc05vdEV4aXN0RXJyb3InLCByZXRyeWFibGU6IGZhbHNlIH0sXG4gICAgJzE3JzogeyBuYW1lOiAnTm90QWxsb3dlZEVycm9yJywgcmV0cnlhYmxlOiBmYWxzZSB9LFxuICAgICcxOCc6IHsgbmFtZTogJ0V2ZW50Tm90U3VwcG9ydGVkRXJyb3InLCByZXRyeWFibGU6IGZhbHNlIH0sXG4gICAgJzE5JzogeyBuYW1lOiAnQ2hhbm5lbEZlYXR1cmVOb3RTdXBwb3J0ZWRFcnJvcicsIHJldHJ5YWJsZTogZmFsc2UgfSxcbiAgICAnMjAnOiB7IG5hbWU6ICdNZXNzYWdlVG9vTG9uZ0Vycm9yJywgcmV0cnlhYmxlOiBmYWxzZSB9LFxuICAgICcyMSc6IHsgbmFtZTogJ011bHRpcGxlTmVzdGluZ0xldmVsRXJyb3InLCByZXRyeWFibGU6IGZhbHNlIH0sXG4gICAgJzIyJzogeyBuYW1lOiAnUGF5bG9hZFRvb0JpZ0Vycm9yJywgcmV0cnlhYmxlOiBmYWxzZSB9LFxuICAgICcyMyc6IHsgbmFtZTogJ1JlcXVlc3RUaW1lb3V0RXJyb3InLCByZXRyeWFibGU6IHRydWUgfSxcbiAgICAnMjQnOiB7IG5hbWU6ICdNYXhIZWFkZXJTaXplRXhjZWVkZWRFcnJvcicsIHJldHJ5YWJsZTogZmFsc2UgfSxcbiAgICAnNDAnOiB7IG5hbWU6ICdBdXRoRXJyb3JUb2tlbkV4cGlyZWQnLCByZXRyeWFibGU6IGZhbHNlIH0sXG4gICAgJzQxJzogeyBuYW1lOiAnQXV0aEVycm9yVG9rZW5Ob3RWYWxpZFlldCcsIHJldHJ5YWJsZTogZmFsc2UgfSxcbiAgICAnNDInOiB7IG5hbWU6ICdBdXRoRXJyb3JUb2tlblVzZWRCZWZvcmVJc3N1ZWRBdCcsIHJldHJ5YWJsZTogZmFsc2UgfSxcbiAgICAnNDMnOiB7IG5hbWU6ICdBdXRoRXJyb3JUb2tlblNpZ25hdHVyZUludmFsaWQnLCByZXRyeWFibGU6IGZhbHNlIH0sXG4gICAgJzQ0JzogeyBuYW1lOiAnQ3VzdG9tQ29tbWFuZEVuZHBvaW50TWlzc2luZ0Vycm9yJywgcmV0cnlhYmxlOiBmYWxzZSB9LFxuICAgICc0NSc6IHsgbmFtZTogJ0N1c3RvbUNvbW1hbmRFbmRwb2ludENhbGxFcnJvcicsIHJldHJ5YWJsZTogdHJ1ZSB9LFxuICAgICc0Nic6IHsgbmFtZTogJ0Nvbm5lY3Rpb25JRE5vdEZvdW5kRXJyb3InLCByZXRyeWFibGU6IGZhbHNlIH0sXG4gICAgJzYwJzogeyBuYW1lOiAnQ29vbERvd25FcnJvcicsIHJldHJ5YWJsZTogdHJ1ZSB9LFxuICAgICc2OSc6IHsgbmFtZTogJ0Vycldyb25nUmVnaW9uJywgcmV0cnlhYmxlOiBmYWxzZSB9LFxuICAgICc3MCc6IHsgbmFtZTogJ0VyclF1ZXJ5Q2hhbm5lbFBlcm1pc3Npb25zJywgcmV0cnlhYmxlOiBmYWxzZSB9LFxuICAgICc3MSc6IHsgbmFtZTogJ0VyclRvb01hbnlDb25uZWN0aW9ucycsIHJldHJ5YWJsZTogdHJ1ZSB9LFxuICAgICc5OSc6IHsgbmFtZTogJ0FwcFN1c3BlbmRlZEVycm9yJywgcmV0cnlhYmxlOiBmYWxzZSB9LFxufTtcbmZ1bmN0aW9uIGlzQVBJRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4gZXJyb3IuY29kZSAhPT0gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gaXNFcnJvclJldHJ5YWJsZShlcnJvcikge1xuICAgIGlmICghZXJyb3IuY29kZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGVyciA9IEFQSUVycm9yQ29kZXNbYCR7ZXJyb3IuY29kZX1gXTtcbiAgICBpZiAoIWVycilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBlcnIucmV0cnlhYmxlO1xufVxuZnVuY3Rpb24gaXNDb25uZWN0aW9uSURFcnJvcihlcnJvcikge1xuICAgIHJldHVybiBlcnJvci5jb2RlID09PSA0NjsgLy8gQ29ubmVjdGlvbklETm90Rm91bmRFcnJvclxufVxuZnVuY3Rpb24gaXNXU0ZhaWx1cmUoZXJyKSB7XG4gICAgaWYgKHR5cGVvZiBlcnIuaXNXU0ZhaWx1cmUgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gZXJyLmlzV1NGYWlsdXJlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShlcnIubWVzc2FnZSkuaXNXU0ZhaWx1cmU7XG4gICAgfVxuICAgIGNhdGNoIChfKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc0Vycm9yUmVzcG9uc2UocmVzKSB7XG4gICAgcmV0dXJuICFyZXMuc3RhdHVzIHx8IHJlcy5zdGF0dXMgPCAyMDAgfHwgMzAwIDw9IHJlcy5zdGF0dXM7XG59XG5cbnZhciBDb25uZWN0aW9uU3RhdGU7XG4oZnVuY3Rpb24gKENvbm5lY3Rpb25TdGF0ZSkge1xuICAgIENvbm5lY3Rpb25TdGF0ZVtcIkNsb3NlZFwiXSA9IFwiQ0xPU0VEXCI7XG4gICAgQ29ubmVjdGlvblN0YXRlW1wiQ29ubmVjdGVkXCJdID0gXCJDT05ORUNURURcIjtcbiAgICBDb25uZWN0aW9uU3RhdGVbXCJDb25uZWN0aW5nXCJdID0gXCJDT05ORUNUSU5HXCI7XG4gICAgQ29ubmVjdGlvblN0YXRlW1wiRGlzY29ubmVjdGVkXCJdID0gXCJESVNDT05ORUNURURcIjtcbiAgICBDb25uZWN0aW9uU3RhdGVbXCJJbml0XCJdID0gXCJJTklUXCI7XG59KShDb25uZWN0aW9uU3RhdGUgfHwgKENvbm5lY3Rpb25TdGF0ZSA9IHt9KSk7XG5jbGFzcyBXU0Nvbm5lY3Rpb25GYWxsYmFjayB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgICAgICB0aGlzLl9vbmxpbmVTdGF0dXNDaGFuZ2VkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9sb2coYF9vbmxpbmVTdGF0dXNDaGFuZ2VkKCkgLSAke2V2ZW50LnR5cGV9YCk7XG4gICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ29mZmxpbmUnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0U3RhdGUoQ29ubmVjdGlvblN0YXRlLkNsb3NlZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxUb2tlbj8uY2FuY2VsKCdkaXNjb25uZWN0KCkgaXMgY2FsbGVkJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxUb2tlbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ29ubGluZScgJiYgdGhpcy5zdGF0ZSA9PT0gQ29ubmVjdGlvblN0YXRlLkNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqIEBwcml2YXRlICovXG4gICAgICAgIHRoaXMuX3JlcSA9IGFzeW5jIChwYXJhbXMsIGNvbmZpZywgcmV0cnkpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jYW5jZWxUb2tlbiAmJiAhcGFyYW1zLmNsb3NlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxUb2tlbiA9IGF4aW9zLkNhbmNlbFRva2VuLnNvdXJjZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmNsaWVudC5kb0F4aW9zUmVxdWVzdCgnZ2V0JywgdGhpcy5jbGllbnQuYmFzZVVSTC5yZXBsYWNlKCc6MzAzMCcsICc6ODkwMCcpICsgJy9sb25ncG9sbCcsIC8vIHJlcGxhY2UgcG9ydCBpZiBwcmVzZW50IGZvciB0ZXN0aW5nIHdpdGggbG9jYWwgQVBJXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZzogeyAuLi5jb25maWcsIGNhbmNlbFRva2VuOiB0aGlzLmNhbmNlbFRva2VuPy50b2tlbiB9LFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgIHB1YmxpY0VuZHBvaW50OiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuY29uc2VjdXRpdmVGYWlsdXJlcyA9IDA7IC8vIGFsd2F5cyByZXNldCBpbiBjYXNlIG9mIG5vIGVycm9yXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnNlY3V0aXZlRmFpbHVyZXMgKz0gMTtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgaWYgKHJldHJ5ICYmIGlzRXJyb3JSZXRyeWFibGUoZXJyKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2coYF9yZXEoKSAtIFJldHJ5YWJsZSBlcnJvciwgcmV0cnlpbmcgcmVxdWVzdGApO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzbGVlcChyZXRyeUludGVydmFsKHRoaXMuY29uc2VjdXRpdmVGYWlsdXJlcykpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVxKHBhcmFtcywgY29uZmlnLCByZXRyeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqIEBwcml2YXRlICovXG4gICAgICAgIHRoaXMuX3BvbGwgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB3aGlsZSAodGhpcy5zdGF0ZSA9PT0gQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLl9yZXEoe30sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDMwMDAwLFxuICAgICAgICAgICAgICAgICAgICB9LCB0cnVlKTsgLy8gMzBzID0+IEFQSSByZXNwb25kcyBpbiAyMHMgaWYgdGhlcmUgaXMgbm8gZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZXZlbnRzPy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5ldmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5kaXNwYXRjaEV2ZW50KGRhdGEuZXZlbnRzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChheGlvcy5pc0NhbmNlbChlcnIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2coYF9wb2xsKCkgLSBheGlvcyBjYW5jZWxlZCByZXF1ZXN0YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLyoqIGNsaWVudC5kb0F4aW9zUmVxdWVzdCB3aWxsIHRha2UgY2FyZSBvZiBUT0tFTl9FWFBJUkVEIGVycm9yICovXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ29ubmVjdGlvbklERXJyb3IoZXJyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9nKGBfcG9sbCgpIC0gQ29ubmVjdGlvbklEIGVycm9yLCBjb25uZWN0aW5nIHdpdGhvdXQgSUQuLi5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFN0YXRlKENvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQVBJRXJyb3IoZXJyKSAmJiAhaXNFcnJvclJldHJ5YWJsZShlcnIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRTdGF0ZShDb25uZWN0aW9uU3RhdGUuQ2xvc2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzbGVlcChyZXRyeUludGVydmFsKHRoaXMuY29uc2VjdXRpdmVGYWlsdXJlcykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvbm5lY3QgdHJ5IHRvIG9wZW4gYSBsb25ncG9sbCByZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSByZWNvbm5lY3Qgc2hvdWxkIGJlIGZhbHNlIGZvciBmaXJzdCBjYWxsIGFuZCB0cnVlIGZvciBzdWJzZXF1ZW50IGNhbGxzIHRvIGtlZXAgdGhlIGNvbm5lY3Rpb24gYWxpdmUgYW5kIGNhbGwgcmVjb3ZlclN0YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbm5lY3QgPSBhc3luYyAocmVjb25uZWN0ID0gZmFsc2UpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBDb25uZWN0aW9uU3RhdGUuQ29ubmVjdGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvZygnY29ubmVjdCgpIC0gY29ubmVjdGluZyBhbHJlYWR5IGluIHByb2dyZXNzJywgeyByZWNvbm5lY3QgfSwgJ3dhcm4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvZygnY29ubmVjdCgpIC0gYWxyZWFkeSBjb25uZWN0ZWQgYW5kIHBvbGxpbmcnLCB7IHJlY29ubmVjdCB9LCAnd2FybicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3NldFN0YXRlKENvbm5lY3Rpb25TdGF0ZS5Db25uZWN0aW5nKTtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbklEID0gdW5kZWZpbmVkOyAvLyBjb25uZWN0IHNob3VsZCBiZSBzZW50IHdpdGggZW1wdHkgY29ubmVjdGlvbl9pZCBzbyBBUEkgY3JlYXRlcyBvbmVcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBldmVudCB9ID0gYXdhaXQgdGhpcy5fcmVxKHsganNvbjogdGhpcy5jbGllbnQuX2J1aWxkV1NQYXlsb2FkKCkgfSwge1xuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiA4MDAwLCAvLyA4c1xuICAgICAgICAgICAgICAgIH0sIHJlY29ubmVjdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0U3RhdGUoQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RlZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uSUQgPSBldmVudC5jb25uZWN0aW9uX2lkO1xuICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50LnJlc29sdmVDb25uZWN0aW9uSWQ/LigpO1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wb2xsKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldFN0YXRlKENvbm5lY3Rpb25TdGF0ZS5DbG9zZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50LnJlamVjdENvbm5lY3Rpb25JZD8uKCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogaXNIZWFsdGh5IGNoZWNrcyBpZiB0aGVyZSBpcyBhIGNvbm5lY3Rpb25JRCBhbmQgY29ubmVjdGlvbiBpcyBpbiBDb25uZWN0ZWQgc3RhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaXNIZWFsdGh5ID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5jb25uZWN0aW9uSUQgJiYgdGhpcy5zdGF0ZSA9PT0gQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RlZDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0ID0gYXN5bmMgKHRpbWVvdXQgPSAyMDAwKSA9PiB7XG4gICAgICAgICAgICByZW1vdmVDb25uZWN0aW9uRXZlbnRMaXN0ZW5lcnModGhpcy5fb25saW5lU3RhdHVzQ2hhbmdlZCk7XG4gICAgICAgICAgICB0aGlzLl9zZXRTdGF0ZShDb25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGVkKTtcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsVG9rZW4/LmNhbmNlbCgnZGlzY29ubmVjdCgpIGlzIGNhbGxlZCcpO1xuICAgICAgICAgICAgdGhpcy5jYW5jZWxUb2tlbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNvbnN0IGNvbm5lY3Rpb25faWQgPSB0aGlzLmNvbm5lY3Rpb25JRDtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbklEID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9yZXEoeyBjbG9zZTogdHJ1ZSwgY29ubmVjdGlvbl9pZCB9LCB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVvdXQsXG4gICAgICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvZyhgZGlzY29ubmVjdCgpIC0gQ2xvc2VkIGNvbm5lY3Rpb25JRGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvZyhgZGlzY29ubmVjdCgpIC0gRmFpbGVkYCwgeyBlcnIgfSwgJ2Vycm9yJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgICAgICB0aGlzLnN0YXRlID0gQ29ubmVjdGlvblN0YXRlLkluaXQ7XG4gICAgICAgIHRoaXMuY29uc2VjdXRpdmVGYWlsdXJlcyA9IDA7XG4gICAgICAgIGFkZENvbm5lY3Rpb25FdmVudExpc3RlbmVycyh0aGlzLl9vbmxpbmVTdGF0dXNDaGFuZ2VkKTtcbiAgICB9XG4gICAgX2xvZyhtc2csIGV4dHJhID0ge30sIGxldmVsID0gJ2luZm8nKSB7XG4gICAgICAgIHRoaXMuY2xpZW50LmxvZ2dlcihsZXZlbCwgJ1dTQ29ubmVjdGlvbkZhbGxiYWNrOicgKyBtc2csIHtcbiAgICAgICAgICAgIC4uLmV4dHJhLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3NldFN0YXRlKHN0YXRlKSB7XG4gICAgICAgIHRoaXMuX2xvZyhgX3NldFN0YXRlKCkgLSAke3N0YXRlfWApO1xuICAgICAgICAvLyB0cmFuc2l0aW9uIGZyb20gY29ubmVjdGluZyA9PiBjb25uZWN0ZWRcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IENvbm5lY3Rpb25TdGF0ZS5Db25uZWN0aW5nICYmXG4gICAgICAgICAgICBzdGF0ZSA9PT0gQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5jbGllbnQuZGlzcGF0Y2hFdmVudCh7IHR5cGU6ICdjb25uZWN0aW9uLmNoYW5nZWQnLCBvbmxpbmU6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlID09PSBDb25uZWN0aW9uU3RhdGUuQ2xvc2VkIHx8XG4gICAgICAgICAgICBzdGF0ZSA9PT0gQ29ubmVjdGlvblN0YXRlLkRpc2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5jbGllbnQuZGlzcGF0Y2hFdmVudCh7IHR5cGU6ICdjb25uZWN0aW9uLmNoYW5nZWQnLCBvbmxpbmU6IGZhbHNlIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICB9XG59XG5cbmNvbnN0IGxvZ2dlciA9IGdldExvZ2dlcihbJ2xvY2F0aW9uJ10pO1xuY29uc3QgSElOVF9VUkwgPSBgaHR0cHM6Ly9oaW50LnN0cmVhbS1pby12aWRlby5jb20vYDtcbmNvbnN0IGdldExvY2F0aW9uSGludCA9IGFzeW5jIChoaW50VXJsID0gSElOVF9VUkwsIHRpbWVvdXQgPSAyMDAwKSA9PiB7XG4gICAgY29uc3QgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGNvbnN0IHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4gYWJvcnRDb250cm9sbGVyLmFib3J0KCksIHRpbWVvdXQpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goaGludFVybCwge1xuICAgICAgICAgICAgbWV0aG9kOiAnSEVBRCcsXG4gICAgICAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBhd3NQb3AgPSByZXNwb25zZS5oZWFkZXJzLmdldCgneC1hbXotY2YtcG9wJykgfHwgJ0VSUic7XG4gICAgICAgIGxvZ2dlcignZGVidWcnLCBgTG9jYXRpb24gaGVhZGVyOiAke2F3c1BvcH1gKTtcbiAgICAgICAgcmV0dXJuIGF3c1BvcC5zdWJzdHJpbmcoMCwgMyk7IC8vIEFNUzEtUDIgLT4gQU1TXG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGxvZ2dlcignd2FybicsIGBGYWlsZWQgdG8gZ2V0IGxvY2F0aW9uIGhpbnQgZnJvbSAke2hpbnRVcmx9YCwgZSk7XG4gICAgICAgIHJldHVybiAnRVJSJztcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgIH1cbn07XG5cbmNsYXNzIFN0cmVhbUNsaWVudCB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSBhIGNsaWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSB0aGUgYXBpIGtleVxuICAgICAqIEBwYXJhbSB7U3RyZWFtQ2xpZW50T3B0aW9uc30gW29wdGlvbnNdIC0gYWRkaXRpb25hbCBvcHRpb25zLCBoZXJlIHlvdSBjYW4gcGFzcyBjdXN0b20gb3B0aW9ucyB0byBheGlvcyBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zZWNyZXRdIC0gdGhlIGFwaSBzZWNyZXRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmJyb3dzZXJdIC0gZW5mb3JjZSB0aGUgY2xpZW50IHRvIGJlIGluIGJyb3dzZXIgbW9kZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMud2FybVVwXSAtIGRlZmF1bHQgdG8gZmFsc2UsIGlmIHRydWUsIGNsaWVudCB3aWxsIG9wZW4gYSBjb25uZWN0aW9uIGFzIHNvb24gYXMgcG9zc2libGUgdG8gc3BlZWQgdXAgZm9sbG93aW5nIHJlcXVlc3RzXG4gICAgICogQHBhcmFtIHtMb2dnZXJ9IFtvcHRpb25zLkxvZ2dlcl0gLSBjdXN0b20gbG9nZ2VyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnRpbWVvdXRdIC0gZGVmYXVsdCB0byAzMDAwXG4gICAgICogQHBhcmFtIHtodHRwc0FnZW50fSBbb3B0aW9ucy5odHRwc0FnZW50XSAtIGN1c3RvbSBodHRwc0FnZW50LCBpbiBub2RlIGl0J3MgZGVmYXVsdCB0byBodHRwcy5hZ2VudCgpXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioa2V5LCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0ge307XG4gICAgICAgIHRoaXMubmV4dFJlcXVlc3RBYm9ydENvbnRyb2xsZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmRldlRva2VuID0gKHVzZXJJRCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIERldlRva2VuKHVzZXJJRCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0QXV0aFR5cGUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hbm9ueW1vdXMgPyAnYW5vbnltb3VzJyA6ICdqd3QnO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNldEJhc2VVUkwgPSAoYmFzZVVSTCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5iYXNlVVJMID0gYmFzZVVSTDtcbiAgICAgICAgICAgIHRoaXMud3NCYXNlVVJMID0gdGhpcy5iYXNlVVJMXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoJ2h0dHAnLCAnd3MnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCc6MzAzMCcsICc6ODgwMCcpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldExvY2F0aW9uSGludCA9IGFzeW5jIChoaW50VXJsLCB0aW1lb3V0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBoaW50ID0gYXdhaXQgdGhpcy5sb2NhdGlvbkhpbnQ7XG4gICAgICAgICAgICBpZiAoIWhpbnQgfHwgaGludCA9PT0gJ0VSUicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2F0aW9uSGludCA9IGdldExvY2F0aW9uSGludChoaW50VXJsID8/IHRoaXMub3B0aW9ucy5sb2NhdGlvbkhpbnRVcmwsIHRpbWVvdXQgPz8gdGhpcy5vcHRpb25zLmxvY2F0aW9uSGludFRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2F0aW9uSGludDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBoaW50O1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9nZXRDb25uZWN0aW9uSUQgPSAoKSA9PiB0aGlzLndzQ29ubmVjdGlvbj8uY29ubmVjdGlvbklEIHx8IHRoaXMud3NGYWxsYmFjaz8uY29ubmVjdGlvbklEO1xuICAgICAgICB0aGlzLl9oYXNDb25uZWN0aW9uSUQgPSAoKSA9PiBCb29sZWFuKHRoaXMuX2dldENvbm5lY3Rpb25JRCgpKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvbm5lY3RVc2VyIC0gU2V0IHRoZSBjdXJyZW50IHVzZXIgYW5kIG9wZW4gYSBXZWJTb2NrZXQgY29ubmVjdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdXNlciBEYXRhIGFib3V0IHRoaXMgdXNlci4gSUUge25hbWU6IFwiam9oblwifVxuICAgICAgICAgKiBAcGFyYW0ge1Rva2VuT3JQcm92aWRlcn0gdXNlclRva2VuT3JQcm92aWRlciBUb2tlbiBvciBwcm92aWRlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJuIHtDb25uZWN0QVBJUmVzcG9uc2V9IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgY29ubmVjdGlvbiBpcyBzZXR1cFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb25uZWN0VXNlciA9IGFzeW5jICh1c2VyLCB1c2VyVG9rZW5PclByb3ZpZGVyKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXVzZXIuaWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBcImlkXCIgZmllbGQgb24gdGhlIHVzZXIgaXMgbWlzc2luZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsaW5nIGNvbm5lY3RVc2VyIG11bHRpcGxlIHRpbWVzIGlzIHBvdGVudGlhbGx5IHRoZSByZXN1bHQgb2YgYSAgYmFkIGludGVncmF0aW9uLCBob3dldmVyLFxuICAgICAgICAgICAgICogSWYgdGhlIHVzZXIgaWQgcmVtYWlucyB0aGUgc2FtZSB3ZSBkb24ndCB0aHJvdyBlcnJvclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodGhpcy51c2VySUQgPT09IHVzZXIuaWQgJiYgdGhpcy5zZXRVc2VyUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCd3YXJuJywgJ0NvbnNlY3V0aXZlIGNhbGxzIHRvIGNvbm5lY3RVc2VyIGlzIGRldGVjdGVkLCBpZGVhbGx5IHlvdSBzaG91bGQgb25seSBjYWxsIHRoaXMgZnVuY3Rpb24gb25jZSBpbiB5b3VyIGFwcC4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRVc2VyUHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnVzZXJJRCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVXNlIGNsaWVudC5kaXNjb25uZWN0KCkgYmVmb3JlIHRyeWluZyB0byBjb25uZWN0IGFzIGEgZGlmZmVyZW50IHVzZXIuIGNvbm5lY3RVc2VyIHdhcyBjYWxsZWQgdHdpY2UuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHRoaXMuX2lzVXNpbmdTZXJ2ZXJBdXRoKCkgfHwgdGhpcy5ub2RlKSAmJlxuICAgICAgICAgICAgICAgICF0aGlzLm9wdGlvbnMuYWxsb3dTZXJ2ZXJTaWRlQ29ubmVjdCkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCd3YXJuJywgJ1BsZWFzZSBkbyBub3QgdXNlIGNvbm5lY3RVc2VyIHNlcnZlciBzaWRlLiBjb25uZWN0VXNlciBpbXBhY3RzIE1BVSBhbmQgY29uY3VycmVudCBjb25uZWN0aW9uIHVzYWdlIGFuZCB0aHVzIHlvdXIgYmlsbC4gSWYgeW91IGhhdmUgYSB2YWxpZCB1c2UtY2FzZSwgYWRkIFwiYWxsb3dTZXJ2ZXJTaWRlQ29ubmVjdDogdHJ1ZVwiIHRvIHRoZSBjbGllbnQgb3B0aW9ucyB0byBkaXNhYmxlIHRoaXMgd2FybmluZy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHdlIGdlbmVyYXRlIHRoZSBjbGllbnQgaWQgY2xpZW50IHNpZGVcbiAgICAgICAgICAgIHRoaXMudXNlcklEID0gdXNlci5pZDtcbiAgICAgICAgICAgIHRoaXMuYW5vbnltb3VzID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBzZXRUb2tlblByb21pc2UgPSB0aGlzLl9zZXRUb2tlbih1c2VyLCB1c2VyVG9rZW5PclByb3ZpZGVyLCB0aGlzLmFub255bW91cyk7XG4gICAgICAgICAgICB0aGlzLl9zZXRVc2VyKHVzZXIpO1xuICAgICAgICAgICAgY29uc3Qgd3NQcm9taXNlID0gdGhpcy5vcGVuQ29ubmVjdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5zZXRVc2VyUHJvbWlzZSA9IFByb21pc2UuYWxsKFtzZXRUb2tlblByb21pc2UsIHdzUHJvbWlzZV0pLnRoZW4oKHJlc3VsdCkgPT4gcmVzdWx0WzFdKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2V0VXNlclByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGVyc2lzdFVzZXJPbkNvbm5lY3Rpb25GYWlsdXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNsZWFudXAgY2xpZW50IHRvIGFsbG93IHRoZSB1c2VyIHRvIHJldHJ5IGNvbm5lY3RVc2VyIGFnYWluXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VDb25uZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3RVc2VyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fc2V0VG9rZW4gPSAodXNlciwgdXNlclRva2VuT3JQcm92aWRlciwgaXNBbm9ueW1vdXMpID0+IHRoaXMudG9rZW5NYW5hZ2VyLnNldFRva2VuT3JQcm92aWRlcih1c2VyVG9rZW5PclByb3ZpZGVyLCB1c2VyLCBpc0Fub255bW91cyk7XG4gICAgICAgIHRoaXMuX3NldFVzZXIgPSAodXNlcikgPT4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGlzIG9uZSBpcyB1c2VkIGJ5IHRoZSBmcm9udGVuZC4gVGhpcyBpcyBhIGNvcHkgb2YgdGhlIGN1cnJlbnQgdXNlciBvYmplY3Qgc3RvcmVkIG9uIGJhY2tlbmQuXG4gICAgICAgICAgICAgKiBJdCBjb250YWlucyByZXNlcnZlZCBwcm9wZXJ0aWVzIGFuZCBvd24gdXNlciBwcm9wZXJ0aWVzIHdoaWNoIGFyZSBub3QgcHJlc2VudCBpbiBgdGhpcy5fdXNlcmAuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMudXNlciA9IHVzZXI7XG4gICAgICAgICAgICB0aGlzLnVzZXJJRCA9IHVzZXIuaWQ7XG4gICAgICAgICAgICAvLyB0aGlzIG9uZSBpcyBhY3R1YWxseSB1c2VkIGZvciByZXF1ZXN0cy4gVGhpcyBpcyBhIGNvcHkgb2YgY3VycmVudCB1c2VyIHByb3ZpZGVkIHRvIGBjb25uZWN0VXNlcmAgZnVuY3Rpb24uXG4gICAgICAgICAgICB0aGlzLl91c2VyID0geyAuLi51c2VyIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXNjb25uZWN0cyB0aGUgd2Vic29ja2V0IGNvbm5lY3Rpb24sIHdpdGhvdXQgcmVtb3ZpbmcgdGhlIHVzZXIgc2V0IG9uIGNsaWVudC5cbiAgICAgICAgICogY2xpZW50LmNsb3NlQ29ubmVjdGlvbiB3aWxsIG5vdCB0cmlnZ2VyIGRlZmF1bHQgYXV0by1yZXRyeSBtZWNoYW5pc20gZm9yIHJlY29ubmVjdGlvbi4gWW91IG5lZWRcbiAgICAgICAgICogdG8gY2FsbCBjbGllbnQub3BlbkNvbm5lY3Rpb24gdG8gcmVjb25uZWN0IHRvIHdlYnNvY2tldC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBpcyBtYWlubHkgdXNlZnVsIG9uIG1vYmlsZSBzaWRlLiBZb3UgY2FuIG9ubHkgcmVjZWl2ZSBwdXNoIG5vdGlmaWNhdGlvbnNcbiAgICAgICAgICogaWYgeW91IGRvbid0IGhhdmUgYWN0aXZlIHdlYnNvY2tldCBjb25uZWN0aW9uLlxuICAgICAgICAgKiBTbyB3aGVuIHlvdXIgYXBwIGdvZXMgdG8gYmFja2dyb3VuZCwgeW91IGNhbiBjYWxsIGBjbGllbnQuY2xvc2VDb25uZWN0aW9uYC5cbiAgICAgICAgICogQW5kIHdoZW4gYXBwIGNvbWVzIGJhY2sgdG8gZm9yZWdyb3VuZCwgY2FsbCBgY2xpZW50Lm9wZW5Db25uZWN0aW9uYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHRpbWVvdXQgTWF4IG51bWJlciBvZiBtcywgdG8gd2FpdCBmb3IgY2xvc2UgZXZlbnQgb2Ygd2Vic29ja2V0LCBiZWZvcmUgZm9yY2VmdWxseSBhc3N1bWluZyBzdWNjZXNmdWwgZGlzY29ubmVjdGlvbi5cbiAgICAgICAgICogICAgICAgICAgICAgICAgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0Nsb3NlRXZlbnRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2xvc2VDb25uZWN0aW9uID0gYXN5bmMgKHRpbWVvdXQpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNsZWFuaW5nSW50ZXJ2YWxSZWYgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5jbGVhbmluZ0ludGVydmFsUmVmKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFuaW5nSW50ZXJ2YWxSZWYgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgdGhpcy53c0Nvbm5lY3Rpb24/LmRpc2Nvbm5lY3QodGltZW91dCksXG4gICAgICAgICAgICAgICAgdGhpcy53c0ZhbGxiYWNrPy5kaXNjb25uZWN0KHRpbWVvdXQpLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IFdlYlNvY2tldCBjb25uZWN0aW9uIHdpdGggdGhlIGN1cnJlbnQgdXNlci4gUmV0dXJucyBlbXB0eSBwcm9taXNlLCBpZiB0aGVyZSBpcyBhbiBhY3RpdmUgY29ubmVjdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vcGVuQ29ubmVjdGlvbiA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy51c2VySUQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignVXNlcldpdGhJZCBpcyBub3Qgc2V0IG9uIGNsaWVudCwgdXNlIGNsaWVudC5jb25uZWN0VXNlciBvciBjbGllbnQuY29ubmVjdEFub255bW91c1VzZXIgaW5zdGVhZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMud3NDb25uZWN0aW9uPy5pc0Nvbm5lY3RpbmcgJiYgdGhpcy53c1Byb21pc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlcignaW5mbycsICdjbGllbnQ6b3BlbkNvbm5lY3Rpb24oKSAtIGNvbm5lY3Rpb24gYWxyZWFkeSBpbiBwcm9ncmVzcycpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLndzUHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGhpcy53c0Nvbm5lY3Rpb24/LmlzSGVhbHRoeSB8fCB0aGlzLndzRmFsbGJhY2s/LmlzSGVhbHRoeSgpKSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX2hhc0Nvbm5lY3Rpb25JRCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ2luZm8nLCAnY2xpZW50Om9wZW5Db25uZWN0aW9uKCkgLSBvcGVuQ29ubmVjdGlvbiBjYWxsZWQgdHdpY2UsIGhlYWx0aHkgY29ubmVjdGlvbiBhbHJlYWR5IGV4aXN0cycpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbklkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmVDb25uZWN0aW9uSWQgPSByZXNvbHZlO1xuICAgICAgICAgICAgICAgIHRoaXMucmVqZWN0Q29ubmVjdGlvbklkID0gcmVqZWN0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmNsaWVudElEID0gYCR7dGhpcy51c2VySUR9LS0ke3JhbmRvbUlkKCl9YDtcbiAgICAgICAgICAgIHRoaXMud3NQcm9taXNlID0gdGhpcy5jb25uZWN0KCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53c1Byb21pc2U7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX25vcm1hbGl6ZURhdGUgPSAoYmVmb3JlKSA9PiB7XG4gICAgICAgICAgICBpZiAoYmVmb3JlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgICAgIGJlZm9yZSA9IGJlZm9yZS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJlZm9yZSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEb24ndCBwYXNzIGJsYW5rIHN0cmluZyBmb3Igc2luY2UsIHVzZSBudWxsIGluc3RlYWQgaWYgcmVzZXR0aW5nIHRoZSB0b2tlbiByZXZva2VcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYmVmb3JlO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogRGlzY29ubmVjdHMgdGhlIHdlYnNvY2tldCBhbmQgcmVtb3ZlcyB0aGUgdXNlciBmcm9tIGNsaWVudC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHRpbWVvdXQgTWF4IG51bWJlciBvZiBtcywgdG8gd2FpdCBmb3IgY2xvc2UgZXZlbnQgb2Ygd2Vic29ja2V0LCBiZWZvcmUgZm9yY2VmdWxseSBhc3N1bWluZyBzdWNjZXNzZnVsIGRpc2Nvbm5lY3Rpb24uXG4gICAgICAgICAqICAgICAgICAgICAgICAgIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DbG9zZUV2ZW50XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RVc2VyID0gYXN5bmMgKHRpbWVvdXQpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdpbmZvJywgJ2NsaWVudDpkaXNjb25uZWN0KCkgLSBEaXNjb25uZWN0aW5nIHRoZSBjbGllbnQnKTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgdXNlciBzcGVjaWZpYyBmaWVsZHNcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnVzZXI7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fdXNlcjtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnVzZXJJRDtcbiAgICAgICAgICAgIHRoaXMuYW5vbnltb3VzID0gZmFsc2U7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNsb3NlQ29ubmVjdGlvbih0aW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMudG9rZW5NYW5hZ2VyLnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25JZFByb21pc2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLnJlamVjdENvbm5lY3Rpb25JZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZUNvbm5lY3Rpb25JZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jb25uZWN0R3Vlc3RVc2VyID0gYXN5bmMgKHVzZXIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZ3Vlc3RVc2VyQ3JlYXRlUHJvbWlzZSA9IHRoaXMuZG9BeGlvc1JlcXVlc3QoJ3Bvc3QnLCAnL2d1ZXN0Jywge1xuICAgICAgICAgICAgICAgIHVzZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4udXNlcixcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogJ2d1ZXN0JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSwgeyBwdWJsaWNFbmRwb2ludDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5ndWVzdFVzZXJDcmVhdGVQcm9taXNlO1xuICAgICAgICAgICAgdGhpcy5ndWVzdFVzZXJDcmVhdGVQcm9taXNlLmZpbmFsbHkoKCkgPT4gKHRoaXMuZ3Vlc3RVc2VyQ3JlYXRlUHJvbWlzZSA9IHVuZGVmaW5lZCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdFVzZXIocmVzcG9uc2UudXNlciwgcmVzcG9uc2UuYWNjZXNzX3Rva2VuKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvbm5lY3RBbm9ueW1vdXNVc2VyIC0gU2V0IGFuIGFub255bW91cyB1c2VyIGFuZCBvcGVuIGEgV2ViU29ja2V0IGNvbm5lY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29ubmVjdEFub255bW91c1VzZXIgPSBhc3luYyAodXNlciwgdG9rZW5PclByb3ZpZGVyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25JZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNvbHZlQ29ubmVjdGlvbklkID0gcmVzb2x2ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlamVjdENvbm5lY3Rpb25JZCA9IHJlamVjdDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5hbm9ueW1vdXMgPSB0cnVlO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2V0VG9rZW4odXNlciwgdG9rZW5PclByb3ZpZGVyLCB0aGlzLmFub255bW91cyk7XG4gICAgICAgICAgICB0aGlzLl9zZXRVc2VyKHVzZXIpO1xuICAgICAgICAgICAgLy8gc29tZSBlbmRwb2ludHMgcmVxdWlyZSBhIGNvbm5lY3Rpb25faWQgdG8gYmUgcmVzb2x2ZWQuXG4gICAgICAgICAgICAvLyBhcyBhbm9ueW1vdXMgdXNlcnMgYXJlbid0IGFsbG93ZWQgdG8gb3BlbiBXUyBjb25uZWN0aW9ucywgd2UganVzdFxuICAgICAgICAgICAgLy8gcmVzb2x2ZSB0aGUgY29ubmVjdGlvbl9pZCBoZXJlLlxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlQ29ubmVjdGlvbklkPy4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIG9uIC0gTGlzdGVuIHRvIGV2ZW50cyBvbiBhbGwgY2hhbm5lbHMgYW5kIHVzZXJzIHlvdXIgd2F0Y2hpbmdcbiAgICAgICAgICpcbiAgICAgICAgICogY2xpZW50Lm9uKCdtZXNzYWdlLm5ldycsIGV2ZW50ID0+IHtjb25zb2xlLmxvZyhcIm15IG5ldyBtZXNzYWdlXCIsIGV2ZW50LCBjaGFubmVsLnN0YXRlLm1lc3NhZ2VzKX0pXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBldmVudE5hbWUgVGhlIGV2ZW50IHR5cGUgdG8gbGlzdGVuIGZvciAob3B0aW9uYWwpXG4gICAgICAgICAqIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gY2FsbFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJuICBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2gsIHdoZW4gY2FsbGVkLCB1bnN1YnNjcmliZXMgdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uID0gKGV2ZW50TmFtZSwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXSkge1xuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdkZWJ1ZycsIGBBZGRpbmcgbGlzdGVuZXIgZm9yICR7ZXZlbnROYW1lfSBldmVudGApO1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXT8ucHVzaChjYWxsYmFjayk7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub2ZmKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIG9mZiAtIFJlbW92ZSB0aGUgZXZlbnQgaGFuZGxlclxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vZmYgPSAoZXZlbnROYW1lLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ2RlYnVnJywgYFJlbW92aW5nIGxpc3RlbmVyIGZvciAke2V2ZW50TmFtZX0gZXZlbnRgKTtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV0gPSB0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdPy5maWx0ZXIoKHZhbHVlKSA9PiB2YWx1ZSAhPT0gY2FsbGJhY2spO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9sb2dBcGlSZXF1ZXN0ID0gKHR5cGUsIHVybCwgZGF0YSwgY29uZmlnKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlcigndHJhY2UnLCBgY2xpZW50OiAke3R5cGV9IC0gUmVxdWVzdCAtICR7dXJsfWAsIHtcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBkYXRhLFxuICAgICAgICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9sb2dBcGlSZXNwb25zZSA9ICh0eXBlLCB1cmwsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlcigndHJhY2UnLCBgY2xpZW50OiR7dHlwZX0gLSBSZXNwb25zZSAtIHVybDogJHt1cmx9ID4gc3RhdHVzICR7cmVzcG9uc2Uuc3RhdHVzfWAsIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9sb2dBcGlFcnJvciA9ICh0eXBlLCB1cmwsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlcignZXJyb3InLCBgY2xpZW50OiR7dHlwZX0gLSBFcnJvciAtIHVybDogJHt1cmx9YCwge1xuICAgICAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRvQXhpb3NSZXF1ZXN0ID0gYXN5bmMgKHR5cGUsIHVybCwgZGF0YSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMucHVibGljRW5kcG9pbnQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9rZW5NYW5hZ2VyLnRva2VuUmVhZHkoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ndWVzdFVzZXJDcmVhdGVQcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25JZFByb21pc2UsXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0Q29uZmlnID0gdGhpcy5fZW5yaWNoQXhpb3NPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9nQXBpUmVxdWVzdCh0eXBlLCB1cmwsIGRhdGEsIHJlcXVlc3RDb25maWcpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdnZXQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmF4aW9zSW5zdGFuY2UuZ2V0KHVybCwgcmVxdWVzdENvbmZpZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgdGhpcy5heGlvc0luc3RhbmNlLmRlbGV0ZSh1cmwsIHJlcXVlc3RDb25maWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Bvc3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmF4aW9zSW5zdGFuY2UucG9zdCh1cmwsIGRhdGEsIHJlcXVlc3RDb25maWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3B1dCc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXhpb3NJbnN0YW5jZS5wdXQodXJsLCBkYXRhLCByZXF1ZXN0Q29uZmlnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdwYXRjaCc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXhpb3NJbnN0YW5jZS5wYXRjaCh1cmwsIGRhdGEsIHJlcXVlc3RDb25maWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ29wdGlvbnMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmF4aW9zSW5zdGFuY2Uub3B0aW9ucyh1cmwsIHJlcXVlc3RDb25maWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcmVxdWVzdCB0eXBlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2xvZ0FwaVJlc3BvbnNlKHR5cGUsIHVybCwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29uc2VjdXRpdmVGYWlsdXJlcyA9IDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSAvKipUT0RPOiBnZW5lcmFsaXplIGVycm9yIHR5cGVzICAqLykge1xuICAgICAgICAgICAgICAgIGUuY2xpZW50X3JlcXVlc3RfaWQgPSByZXF1ZXN0Q29uZmlnLmhlYWRlcnM/LlsneC1jbGllbnQtcmVxdWVzdC1pZCddO1xuICAgICAgICAgICAgICAgIHRoaXMuY29uc2VjdXRpdmVGYWlsdXJlcyArPSAxO1xuICAgICAgICAgICAgICAgIGlmIChlLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZ0FwaUVycm9yKHR5cGUsIHVybCwgZS5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIC8qKiBjb25uZWN0aW9uX2ZhbGxiYWNrIGRlcGVuZHMgb24gdGhpcyB0b2tlbiBleHBpcmF0aW9uIGxvZ2ljICovXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnJlc3BvbnNlLmRhdGEuY29kZSA9PT0gS25vd25Db2Rlcy5UT0tFTl9FWFBJUkVEICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhdGhpcy50b2tlbk1hbmFnZXIuaXNTdGF0aWMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uc2VjdXRpdmVGYWlsdXJlcyA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzbGVlcChyZXRyeUludGVydmFsKHRoaXMuY29uc2VjdXRpdmVGYWlsdXJlcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50b2tlbk1hbmFnZXIubG9hZFRva2VuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5kb0F4aW9zUmVxdWVzdCh0eXBlLCB1cmwsIGRhdGEsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlKGUucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9nQXBpRXJyb3IodHlwZSwgdXJsLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0ID0gKHVybCwgcGFyYW1zKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kb0F4aW9zUmVxdWVzdCgnZ2V0JywgdXJsLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHV0ID0gKHVybCwgZGF0YSwgcGFyYW1zKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kb0F4aW9zUmVxdWVzdCgncHV0JywgdXJsLCBkYXRhLCB7IHBhcmFtcyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wb3N0ID0gKHVybCwgZGF0YSwgcGFyYW1zKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kb0F4aW9zUmVxdWVzdCgncG9zdCcsIHVybCwgZGF0YSwgeyBwYXJhbXMgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucGF0Y2ggPSAodXJsLCBkYXRhLCBwYXJhbXMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRvQXhpb3NSZXF1ZXN0KCdwYXRjaCcsIHVybCwgZGF0YSwgeyBwYXJhbXMgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGVsZXRlID0gKHVybCwgcGFyYW1zKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kb0F4aW9zUmVxdWVzdCgnZGVsZXRlJywgdXJsLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZXJyb3JGcm9tUmVzcG9uc2UgPSAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGxldCBlcnI7XG4gICAgICAgICAgICBlcnIgPSBuZXcgRXJyb3JGcm9tUmVzcG9uc2UoYFN0cmVhbSBlcnJvciBIVFRQIGNvZGU6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEgJiYgcmVzcG9uc2UuZGF0YS5jb2RlKSB7XG4gICAgICAgICAgICAgICAgZXJyID0gbmV3IEVycm9yKGBTdHJlYW0gZXJyb3IgY29kZSAke3Jlc3BvbnNlLmRhdGEuY29kZX06ICR7cmVzcG9uc2UuZGF0YS5tZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgIGVyci5jb2RlID0gcmVzcG9uc2UuZGF0YS5jb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXJyLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgICAgICBlcnIuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICAgICAgcmV0dXJuIGVycjtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVSZXNwb25zZSA9IChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICBpZiAoaXNFcnJvclJlc3BvbnNlKHJlc3BvbnNlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IHRoaXMuZXJyb3JGcm9tUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFldmVudC5yZWNlaXZlZF9hdClcbiAgICAgICAgICAgICAgICBldmVudC5yZWNlaXZlZF9hdCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlcignZGVidWcnLCBgRGlzcGF0Y2hpbmcgZXZlbnQ6ICR7ZXZlbnQudHlwZX1gLCBldmVudCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMubGlzdGVuZXJzKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8vIGNhbGwgZ2VuZXJpYyBsaXN0ZW5lcnNcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgdGhpcy5saXN0ZW5lcnMuYWxsIHx8IFtdKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY2FsbCB0eXBlIHNwZWNpZmljIGxpc3RlbmVyc1xuICAgICAgICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiB0aGlzLmxpc3RlbmVyc1tldmVudC50eXBlXSB8fCBbXSkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbm5lY3QgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudXNlcklEIHx8ICF0aGlzLl91c2VyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0NhbGwgY29ubmVjdFVzZXIgb3IgY29ubmVjdEFub255bW91c1VzZXIgYmVmb3JlIHN0YXJ0aW5nIHRoZSBjb25uZWN0aW9uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMud3NCYXNlVVJMKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1dlYnNvY2tldCBiYXNlIHVybCBub3Qgc2V0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuY2xpZW50SUQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignY2xpZW50SUQgaXMgbm90IHNldCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLndzQ29ubmVjdGlvbiAmJlxuICAgICAgICAgICAgICAgICh0aGlzLm9wdGlvbnMud2FybVVwIHx8IHRoaXMub3B0aW9ucy5lbmFibGVJbnNpZ2h0cykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zYXlIaSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhlIFN0YWJsZVdTQ29ubmVjdGlvbiBoYW5kbGVzIGFsbCB0aGUgcmVjb25uZWN0aW9uIGxvZ2ljLlxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy53c0Nvbm5lY3Rpb24gJiYgdGhpcy5ub2RlKSB7XG4gICAgICAgICAgICAgICAgLy8gSW50ZW50aW9uYWxseSBhdm9pZGluZyBhZGRpbmcgdHMgZ2VuZXJpY3Mgb24gd3NDb25uZWN0aW9uIGluIG9wdGlvbnMgc2luY2UgaXRzIG9ubHkgdXNlZnVsIGZvciB1bml0IHRlc3QgcHVycG9zZS5cbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMud3NDb25uZWN0aW9uLnNldENsaWVudCh0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLndzQ29ubmVjdGlvbiA9IHRoaXMub3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAud3NDb25uZWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy53c0Nvbm5lY3Rpb24gPSBuZXcgU3RhYmxlV1NDb25uZWN0aW9uKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBpZiBmYWxsYmFjayBpcyB1c2VkIGJlZm9yZSwgY29udGludWUgdXNpbmcgaXQgaW5zdGVhZCBvZiB3YWl0aW5nIGZvciBXUyB0byBmYWlsXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMud3NGYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy53c0ZhbGxiYWNrLmNvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ2luZm8nLCAnU3RyZWFtQ2xpZW50LmNvbm5lY3Q6IHRoaXMud3NDb25uZWN0aW9uLmNvbm5lY3QoKScpO1xuICAgICAgICAgICAgICAgIC8vIGlmIFdTRmFsbGJhY2sgaXMgZW5hYmxlZCwgd3MgY29ubmVjdCBzaG91bGQgdGltZW91dCBmYXN0ZXIgc28gZmFsbGJhY2sgY2FuIHRyeVxuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLndzQ29ubmVjdGlvbi5jb25uZWN0KHRoaXMub3B0aW9ucy5lbmFibGVXU0ZhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5kZWZhdWx0V1NUaW1lb3V0V2l0aEZhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5kZWZhdWx0V1NUaW1lb3V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAvLyBydW4gZmFsbGJhY2sgb25seSBpZiBpdCdzIFdTL05ldHdvcmsgZXJyb3IgYW5kIG5vdCBhIG5vcm1hbCBBUEkgZXJyb3JcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgYnJvd3NlciBpcyBvbmxpbmUgYmVmb3JlIGV2ZW4gdHJ5aW5nIHRoZSBsb25ncG9sbFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZW5hYmxlV1NGYWxsYmFjayAmJlxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIGlzV1NGYWlsdXJlKGVycikgJiZcbiAgICAgICAgICAgICAgICAgICAgaXNPbmxpbmUodGhpcy5sb2dnZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCd3YXJuJywgJ2NsaWVudDpjb25uZWN0KCkgLSBXUyBmYWlsZWQsIGZhbGxiYWNrIHRvIGxvbmdwb2xsJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh7IHR5cGU6ICd0cmFuc3BvcnQuY2hhbmdlZCcsIG1vZGU6ICdsb25ncG9sbCcgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud3NDb25uZWN0aW9uLl9kZXN0cm95Q3VycmVudFdTQ29ubmVjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndzQ29ubmVjdGlvbi5kaXNjb25uZWN0KCkudGhlbigpOyAvLyBjbG9zZSBXUyBzbyBubyByZXRyeVxuICAgICAgICAgICAgICAgICAgICB0aGlzLndzRmFsbGJhY2sgPSBuZXcgV1NDb25uZWN0aW9uRmFsbGJhY2sodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLndzRmFsbGJhY2suY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVjayB0aGUgY29ubmVjdGl2aXR5IHdpdGggc2VydmVyIGZvciB3YXJtdXAgcHVycG9zZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3NheUhpID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2xpZW50X3JlcXVlc3RfaWQgPSByYW5kb21JZCgpO1xuICAgICAgICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBBeGlvc0hlYWRlcnMuZnJvbSh7XG4gICAgICAgICAgICAgICAgICAgICd4LWNsaWVudC1yZXF1ZXN0LWlkJzogY2xpZW50X3JlcXVlc3RfaWQsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5kb0F4aW9zUmVxdWVzdCgnZ2V0JywgdGhpcy5iYXNlVVJMICsgJy9oaScsIG51bGwsIG9wdHMpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5lbmFibGVJbnNpZ2h0cykge1xuICAgICAgICAgICAgICAgICAgICBwb3N0SW5zaWdodHMoJ2h0dHBfaGlfZmFpbGVkJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBpX2tleTogdGhpcy5rZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnI6IGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRfcmVxdWVzdF9pZCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0VXNlckFnZW50ID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmVyc2lvbiA9IFwiMC42LjdcIiA7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMudXNlckFnZW50IHx8XG4gICAgICAgICAgICAgICAgYHN0cmVhbS12aWRlby1qYXZhc2NyaXB0LWNsaWVudC0ke3RoaXMubm9kZSA/ICdub2RlJyA6ICdicm93c2VyJ30tJHt2ZXJzaW9ufWApO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNldFVzZXJBZ2VudCA9ICh1c2VyQWdlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMudXNlckFnZW50ID0gdXNlckFnZW50O1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogX2lzVXNpbmdTZXJ2ZXJBdXRoIC0gUmV0dXJucyB0cnVlIGlmIHdlJ3JlIHVzaW5nIHNlcnZlciBzaWRlIGF1dGhcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2lzVXNpbmdTZXJ2ZXJBdXRoID0gKCkgPT4gISF0aGlzLnNlY3JldDtcbiAgICAgICAgdGhpcy5fZW5yaWNoQXhpb3NPcHRpb25zID0gKG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBwYXJhbXM6IHt9LFxuICAgICAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgICAgICBjb25maWc6IHt9LFxuICAgICAgICB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IG9wdGlvbnMucHVibGljRW5kcG9pbnQgJiYgIXRoaXMudXNlciA/IHVuZGVmaW5lZCA6IHRoaXMuX2dldFRva2VuKCk7XG4gICAgICAgICAgICBjb25zdCBhdXRob3JpemF0aW9uID0gdG9rZW4gPyB7IEF1dGhvcml6YXRpb246IHRva2VuIH0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBsZXQgc2lnbmFsID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLm5leHRSZXF1ZXN0QWJvcnRDb250cm9sbGVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc2lnbmFsID0gdGhpcy5uZXh0UmVxdWVzdEFib3J0Q29udHJvbGxlci5zaWduYWw7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXh0UmVxdWVzdEFib3J0Q29udHJvbGxlciA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuaGVhZGVycz8uWyd4LWNsaWVudC1yZXF1ZXN0LWlkJ10pIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgJ3gtY2xpZW50LXJlcXVlc3QtaWQnOiByYW5kb21JZCgpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICB1c2VyX2lkOiB0aGlzLnVzZXJJRCxcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbl9pZDogdGhpcy5fZ2V0Q29ubmVjdGlvbklEKCksXG4gICAgICAgICAgICAgICAgICAgIGFwaV9rZXk6IHRoaXMua2V5LFxuICAgICAgICAgICAgICAgICAgICAuLi5vcHRpb25zLnBhcmFtcyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uYXV0aG9yaXphdGlvbixcbiAgICAgICAgICAgICAgICAgICAgJ3N0cmVhbS1hdXRoLXR5cGUnOiBvcHRpb25zLnB1YmxpY0VuZHBvaW50ICYmICF0aGlzLnVzZXJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ2Fub255bW91cydcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5nZXRBdXRoVHlwZSgpLFxuICAgICAgICAgICAgICAgICAgICAnWC1TdHJlYW0tQ2xpZW50JzogdGhpcy5nZXRVc2VyQWdlbnQoKSxcbiAgICAgICAgICAgICAgICAgICAgLi4ub3B0aW9ucy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLi4uKHNpZ25hbCA/IHsgc2lnbmFsIH0gOiB7fSksXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucy5jb25maWcsXG4gICAgICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLmF4aW9zUmVxdWVzdENvbmZpZyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2dldFRva2VuID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnRva2VuTWFuYWdlcilcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRva2VuTWFuYWdlci5nZXRUb2tlbigpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogZW5jb2RlIHdzIHVybCBwYXlsb2FkXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEByZXR1cm5zIGpzb24gc3RyaW5nXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9idWlsZFdTUGF5bG9hZCA9IChjbGllbnRfcmVxdWVzdF9pZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICB1c2VyX2lkOiB0aGlzLnVzZXJJRCxcbiAgICAgICAgICAgICAgICB1c2VyX2RldGFpbHM6IHRoaXMuX3VzZXIsXG4gICAgICAgICAgICAgICAgY2xpZW50X3JlcXVlc3RfaWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNyZWF0ZXMgYW4gYWJvcnQgY29udHJvbGxlciB0aGF0IHdpbGwgYmUgdXNlZCBieSB0aGUgbmV4dCBIVFRQIFJlcXVlc3QuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNyZWF0ZUFib3J0Q29udHJvbGxlckZvck5leHRSZXF1ZXN0ID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLm5leHRSZXF1ZXN0QWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNyZWF0ZVRva2VuIC0gQ3JlYXRlcyBhIHRva2VuIHRvIGF1dGhlbnRpY2F0ZSB0aGlzIHVzZXIuIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBzZXJ2ZXIgc2lkZS5cbiAgICAgICAgICogVGhlIHJlc3VsdGluZyB0b2tlbiBzaG91bGQgYmUgcGFzc2VkIHRvIHRoZSBjbGllbnQgc2lkZSB3aGVuIHRoZSB1c2VycyByZWdpc3RlcnMgb3IgbG9ncyBpbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJJRCBUaGUgVXNlcldpdGhJZCBJRFxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2V4cF0gVGhlIGV4cGlyYXRpb24gdGltZSBmb3IgdGhlIHRva2VuIGV4cHJlc3NlZCBpbiB0aGUgbnVtYmVyIG9mIHNlY29uZHMgc2luY2UgdGhlIGVwb2NoXG4gICAgICAgICAqIEBwYXJhbSBjYWxsX2NpZHMgZm9yIGFub255bW91cyB0b2tlbnMgeW91IGhhdmUgdG8gcHJvdmlkZSB0aGUgY2FsbCBjaWRzIHRoZSB1c2UgY2FuIGpvaW5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBSZXR1cm5zIGEgdG9rZW5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY3JlYXRlVG9rZW4gPSAodXNlcklELCBleHAsIGlhdCwgY2FsbF9jaWRzKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZWNyZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGB0b2tlbnMgY2FuIG9ubHkgYmUgY3JlYXRlZCBzZXJ2ZXItc2lkZSB1c2luZyB0aGUgQVBJIFNlY3JldGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZXh0cmEgPSB7fTtcbiAgICAgICAgICAgIGlmIChleHApIHtcbiAgICAgICAgICAgICAgICBleHRyYS5leHAgPSBleHA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaWF0KSB7XG4gICAgICAgICAgICAgICAgZXh0cmEuaWF0ID0gaWF0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhbGxfY2lkcykge1xuICAgICAgICAgICAgICAgIGV4dHJhLmNhbGxfY2lkcyA9IGNhbGxfY2lkcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBKV1RVc2VyVG9rZW4odGhpcy5zZWNyZXQsIHVzZXJJRCwgZXh0cmEsIHt9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gc2V0IHRoZSBrZXlcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICAgIC8vIHNldCB0aGUgc2VjcmV0XG4gICAgICAgIHRoaXMuc2VjcmV0ID0gb3B0aW9ucz8uc2VjcmV0O1xuICAgICAgICAvLyBzZXQgdGhlIG9wdGlvbnMuLi4gYW5kIGZpZ3VyZSBvdXQgZGVmYXVsdHMuLi5cbiAgICAgICAgY29uc3QgaW5wdXRPcHRpb25zID0gb3B0aW9uc1xuICAgICAgICAgICAgPyBvcHRpb25zXG4gICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICBicm93c2VyOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIHRoaXMuYnJvd3NlciA9IGlucHV0T3B0aW9ucy5icm93c2VyIHx8IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuICAgICAgICB0aGlzLm5vZGUgPSAhdGhpcy5icm93c2VyO1xuICAgICAgICBpZiAodGhpcy5icm93c2VyKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2F0aW9uSGludCA9IGdldExvY2F0aW9uSGludChvcHRpb25zPy5sb2NhdGlvbkhpbnRVcmwsIG9wdGlvbnM/LmxvY2F0aW9uSGludFRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHRpbWVvdXQ6IDUwMDAsXG4gICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLFxuICAgICAgICAgICAgd2FybVVwOiBmYWxzZSxcbiAgICAgICAgICAgIC4uLmlucHV0T3B0aW9ucyxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMubm9kZSAmJiAhdGhpcy5vcHRpb25zLmh0dHBzQWdlbnQpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5odHRwc0FnZW50ID0gbmV3IGh0dHBzLkFnZW50KHtcbiAgICAgICAgICAgICAgICBrZWVwQWxpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAga2VlcEFsaXZlTXNlY3M6IDMwMDAsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldEJhc2VVUkwodGhpcy5vcHRpb25zLmJhc2VVUkwgfHwgJ2h0dHBzOi8vdmlkZW8uc3RyZWFtLWlvLWFwaS5jb20vdmlkZW8nKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudi5TVFJFQU1fTE9DQUxfVEVTVF9SVU4pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QmFzZVVSTCgnaHR0cDovL2xvY2FsaG9zdDozMDMwL3ZpZGVvJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudi5TVFJFQU1fTE9DQUxfVEVTVF9IT1NUKSB7XG4gICAgICAgICAgICB0aGlzLnNldEJhc2VVUkwoYGh0dHA6Ly8ke3Byb2Nlc3MuZW52LlNUUkVBTV9MT0NBTF9URVNUX0hPU1R9L3ZpZGVvYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5heGlvc0luc3RhbmNlID0gYXhpb3MuY3JlYXRlKHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIGJhc2VVUkw6IHRoaXMuYmFzZVVSTCxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFdTIGNvbm5lY3Rpb24gaXMgaW5pdGlhbGl6ZWQgd2hlbiBzZXRVc2VyIGlzIGNhbGxlZFxuICAgICAgICB0aGlzLndzQ29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMud3NQcm9taXNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZXRVc2VyUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIC8vIG1hcHBpbmcgYmV0d2VlbiBjaGFubmVsIGdyb3VwcyBhbmQgY29uZmlnc1xuICAgICAgICB0aGlzLmFub255bW91cyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBlcnNpc3RVc2VyT25Db25uZWN0aW9uRmFpbHVyZSA9XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnM/LnBlcnNpc3RVc2VyT25Db25uZWN0aW9uRmFpbHVyZTtcbiAgICAgICAgLy8gSWYgaXQgaXMgYSBzZXJ2ZXItc2lkZSBjbGllbnQsIHRoZW4gbGV0cyBpbml0aWFsaXplIHRoZSB0b2tlbk1hbmFnZXIsIHNpbmNlIHRva2VuIHdpbGwgYmVcbiAgICAgICAgLy8gZ2VuZXJhdGVkIGZyb20gc2VjcmV0LlxuICAgICAgICB0aGlzLnRva2VuTWFuYWdlciA9IG5ldyBUb2tlbk1hbmFnZXIodGhpcy5zZWNyZXQpO1xuICAgICAgICB0aGlzLmNvbnNlY3V0aXZlRmFpbHVyZXMgPSAwO1xuICAgICAgICB0aGlzLmluc2lnaHRNZXRyaWNzID0gbmV3IEluc2lnaHRNZXRyaWNzKCk7XG4gICAgICAgIHRoaXMuZGVmYXVsdFdTVGltZW91dFdpdGhGYWxsYmFjayA9IDYwMDA7XG4gICAgICAgIHRoaXMuZGVmYXVsdFdTVGltZW91dCA9IDE1MDAwO1xuICAgICAgICB0aGlzLmxvZ2dlciA9IGlzRnVuY3Rpb24oaW5wdXRPcHRpb25zLmxvZ2dlcilcbiAgICAgICAgICAgID8gaW5wdXRPcHRpb25zLmxvZ2dlclxuICAgICAgICAgICAgOiAoKSA9PiBudWxsO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIGBTdHJlYW1WaWRlb0NsaWVudGAgaW5zdGFuY2UgbGV0cyB5b3UgY29tbXVuaWNhdGUgd2l0aCBvdXIgQVBJLCBhbmQgYXV0aGVudGljYXRlIHVzZXJzLlxuICovXG5jbGFzcyBTdHJlYW1WaWRlb0NsaWVudCB7XG4gICAgY29uc3RydWN0b3IoYXBpS2V5T3JBcmdzLCBvcHRzKSB7XG4gICAgICAgIHRoaXMubG9nTGV2ZWwgPSAnd2Fybic7XG4gICAgICAgIHRoaXMuZXZlbnRIYW5kbGVyc1RvVW5yZWdpc3RlciA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGlzY29ubmVjdHMgdGhlIGN1cnJlbnRseSBjb25uZWN0ZWQgdXNlciBmcm9tIHRoZSBjbGllbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIElmIHRoZSBjb25uZWN0aW9uIGlzIHN1Y2Nlc3NmdWxseSBkaXNjb25uZWN0ZWQsIHRoZSBjb25uZWN0ZWQgdXNlciBbc3RhdGUgdmFyaWFibGVdKCNyZWFkb25seXN0YXRlc3RvcmUpIHdpbGwgYmUgdXBkYXRlZCBhY2NvcmRpbmdseVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdGltZW91dCBNYXggbnVtYmVyIG9mIG1zLCB0byB3YWl0IGZvciBjbG9zZSBldmVudCBvZiB3ZWJzb2NrZXQsIGJlZm9yZSBmb3JjZWZ1bGx5IGFzc3VtaW5nIHN1Y2Nlc3NmdWwgZGlzY29ubmVjdGlvbi5cbiAgICAgICAgICogICAgICAgICAgICAgICAgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0Nsb3NlRXZlbnRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGlzY29ubmVjdFVzZXIgPSBhc3luYyAodGltZW91dCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnN0cmVhbUNsaWVudC51c2VyICYmICF0aGlzLmNvbm5lY3Rpb25Qcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGlzY29ubmVjdFVzZXIgPSAoKSA9PiB0aGlzLnN0cmVhbUNsaWVudC5kaXNjb25uZWN0VXNlcih0aW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdGlvblByb21pc2UgPSB0aGlzLmNvbm5lY3Rpb25Qcm9taXNlXG4gICAgICAgICAgICAgICAgPyB0aGlzLmNvbm5lY3Rpb25Qcm9taXNlLnRoZW4oKCkgPT4gZGlzY29ubmVjdFVzZXIoKSlcbiAgICAgICAgICAgICAgICA6IGRpc2Nvbm5lY3RVc2VyKCk7XG4gICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3Rpb25Qcm9taXNlLmZpbmFsbHkoKCkgPT4gKHRoaXMuZGlzY29ubmVjdGlvblByb21pc2UgPSB1bmRlZmluZWQpKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZGlzY29ubmVjdGlvblByb21pc2U7XG4gICAgICAgICAgICB0aGlzLmV2ZW50SGFuZGxlcnNUb1VucmVnaXN0ZXIuZm9yRWFjaCgodW5yZWdpc3RlcikgPT4gdW5yZWdpc3RlcigpKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRIYW5kbGVyc1RvVW5yZWdpc3RlciA9IFtdO1xuICAgICAgICAgICAgdGhpcy53cml0ZWFibGVTdGF0ZVN0b3JlLnNldENvbm5lY3RlZFVzZXIodW5kZWZpbmVkKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFlvdSBjYW4gc3Vic2NyaWJlIHRvIFdlYlNvY2tldCBldmVudHMgcHJvdmlkZWQgYnkgdGhlIEFQSS5cbiAgICAgICAgICogVG8gcmVtb3ZlIGEgc3Vic2NyaXB0aW9uLCBjYWxsIHRoZSBgb2ZmYCBtZXRob2Qgb3IsIGV4ZWN1dGUgdGhlIHJldHVybmVkIHVuc3Vic2NyaWJlIGZ1bmN0aW9uLlxuICAgICAgICAgKiBQbGVhc2Ugbm90ZSB0aGF0IHN1YnNjcmliaW5nIHRvIFdlYlNvY2tldCBldmVudHMgaXMgYW4gYWR2YW5jZWQgdXNlLWNhc2UsIGZvciBtb3N0IHVzZS1jYXNlcyBpdCBzaG91bGQgYmUgZW5vdWdoIHRvIHdhdGNoIGZvciBjaGFuZ2VzIGluIHRoZSByZWFjdGl2ZSBbc3RhdGUgc3RvcmVdKCNyZWFkb25seXN0YXRlc3RvcmUpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gZXZlbnROYW1lIHRoZSBldmVudCBuYW1lIG9yICdhbGwnLlxuICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgdGhlIGNhbGxiYWNrIHdoaWNoIHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQuXG4gICAgICAgICAqIEByZXR1cm5zIGFuIHVuc3Vic2NyaWJlIGZ1bmN0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbiA9IChldmVudE5hbWUsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW1DbGllbnQub24oZXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdmUgc3Vic2NyaXB0aW9uIGZvciBXZWJTb2NrZXQgZXZlbnRzIHRoYXQgd2VyZSBjcmVhdGVkIGJ5IHRoZSBgb25gIG1ldGhvZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGV2ZW50TmFtZSB0aGUgZXZlbnQgbmFtZS5cbiAgICAgICAgICogQHBhcmFtIGNhbGxiYWNrIHRoZSBjYWxsYmFjayB3aGljaCB3YXMgcGFzc2VkIHRvIHRoZSBgb25gIG1ldGhvZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub2ZmID0gKGV2ZW50TmFtZSwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5vZmYoZXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IGNhbGwuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB0eXBlIHRoZSB0eXBlIG9mIHRoZSBjYWxsLlxuICAgICAgICAgKiBAcGFyYW0gaWQgdGhlIGlkIG9mIHRoZSBjYWxsLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jYWxsID0gKHR5cGUsIGlkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IENhbGwoe1xuICAgICAgICAgICAgICAgIHN0cmVhbUNsaWVudDogdGhpcy5zdHJlYW1DbGllbnQsXG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICAgICAgY2xpZW50U3RvcmU6IHRoaXMud3JpdGVhYmxlU3RhdGVTdG9yZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBndWVzdCB1c2VyIHdpdGggdGhlIGdpdmVuIGRhdGEuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBkYXRhIHRoZSBkYXRhIGZvciB0aGUgZ3Vlc3QgdXNlci5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY3JlYXRlR3Vlc3RVc2VyID0gYXN5bmMgKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5kb0F4aW9zUmVxdWVzdCgncG9zdCcsICcvZ3Vlc3QnLCBkYXRhLCB7IHB1YmxpY0VuZHBvaW50OiB0cnVlIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogV2lsbCBxdWVyeSB0aGUgQVBJIGZvciBjYWxscyBtYXRjaGluZyB0aGUgZ2l2ZW4gZmlsdGVycy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGRhdGEgdGhlIHF1ZXJ5IGRhdGEuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnF1ZXJ5Q2FsbHMgPSBhc3luYyAoZGF0YSA9IHt9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuc3RyZWFtQ2xpZW50LnBvc3QoJy9jYWxscycsIGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgY2FsbHMgPSByZXNwb25zZS5jYWxscy5tYXAoKGMpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYWxsID0gbmV3IENhbGwoe1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW1DbGllbnQ6IHRoaXMuc3RyZWFtQ2xpZW50LFxuICAgICAgICAgICAgICAgICAgICBpZDogYy5jYWxsLmlkLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBjLmNhbGwudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgbWVtYmVyczogYy5tZW1iZXJzLFxuICAgICAgICAgICAgICAgICAgICBvd25DYXBhYmlsaXRpZXM6IGMub3duX2NhcGFiaWxpdGllcyxcbiAgICAgICAgICAgICAgICAgICAgd2F0Y2hpbmc6IGRhdGEud2F0Y2gsXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudFN0b3JlOiB0aGlzLndyaXRlYWJsZVN0YXRlU3RvcmUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY2FsbC5zdGF0ZS51cGRhdGVGcm9tQ2FsbFJlc3BvbnNlKGMuY2FsbCk7XG4gICAgICAgICAgICAgICAgY2FsbC5hcHBseURldmljZUNvbmZpZygpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLndhdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud3JpdGVhYmxlU3RhdGVTdG9yZS5yZWdpc3RlckNhbGwoY2FsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnJlc3BvbnNlLFxuICAgICAgICAgICAgICAgIGNhbGxzOiBjYWxscyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXRyaWV2ZSB0aGUgbGlzdCBvZiBhdmFpbGFibGUgY2FsbCBzdGF0aXN0aWNzIHJlcG9ydHMgbWF0Y2hpbmcgYSBwYXJ0aWN1bGFyIGNvbmRpdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGRhdGEgRmlsdGVyIGFuZCBzb3J0IGNvbmRpdGlvbnMgZm9yIHJldHJpZXZpbmcgYXZhaWxhYmxlIGNhbGwgcmVwb3J0IHN1bW1hcmllcy5cbiAgICAgICAgICogQHJldHVybnMgTGlzdCB3aXRoIHN1bW1hcnkgb2YgYXZhaWxhYmxlIGNhbGwgcmVwb3J0cyBtYXRjaGluZyB0aGUgY29uZGl0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5xdWVyeUNhbGxTdGF0cyA9IGFzeW5jIChkYXRhID0ge30pID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5wb3N0KGAvY2FsbC9zdGF0c2AsIGRhdGEpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBhIGxpc3Qgb2YgYXZhaWxhYmxlIGRhdGEgY2VudGVycyBhdmFpbGFibGUgZm9yIGhvc3RpbmcgY2FsbHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVkZ2VzID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtQ2xpZW50LmdldChgL2VkZ2VzYCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhZGREZXZpY2UgLSBBZGRzIGEgcHVzaCBkZXZpY2UgZm9yIGEgdXNlci5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIHRoZSBkZXZpY2UgaWRcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHB1c2hfcHJvdmlkZXIgdGhlIHB1c2ggcHJvdmlkZXIgbmFtZSAoZWcuIGFwbiwgZmlyZWJhc2UpXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwdXNoX3Byb3ZpZGVyX25hbWUgdXNlciBwcm92aWRlZCBwdXNoIHByb3ZpZGVyIG5hbWVcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFt1c2VySURdIHRoZSB1c2VyIGlkIChkZWZhdWx0cyB0byBjdXJyZW50IHVzZXIpXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ZvaXBfdG9rZW5dIGVuYWJsZXMgdXNlIG9mIFZvSVAgdG9rZW4gZm9yIHB1c2ggbm90aWZpY2F0aW9ucyBvbiBpT1MgcGxhdGZvcm1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYWRkRGV2aWNlID0gYXN5bmMgKGlkLCBwdXNoX3Byb3ZpZGVyLCBwdXNoX3Byb3ZpZGVyX25hbWUsIHVzZXJJRCwgdm9pcF90b2tlbikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc3RyZWFtQ2xpZW50LnBvc3QoJy9kZXZpY2VzJywge1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIHB1c2hfcHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgdm9pcF90b2tlbixcbiAgICAgICAgICAgICAgICAuLi4odXNlcklEICE9IG51bGwgPyB7IHVzZXJfaWQ6IHVzZXJJRCB9IDoge30pLFxuICAgICAgICAgICAgICAgIC4uLihwdXNoX3Byb3ZpZGVyX25hbWUgIT0gbnVsbCA/IHsgcHVzaF9wcm92aWRlcl9uYW1lIH0gOiB7fSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdldERldmljZXMgLSBSZXR1cm5zIHRoZSBkZXZpY2VzIGFzc29jaWF0ZWQgd2l0aCBhIGN1cnJlbnQgdXNlclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3VzZXJJRF0gVXNlciBJRC4gT25seSB3b3JrcyBvbiBzZXJ2ZXJzaWRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdldERldmljZXMgPSBhc3luYyAodXNlcklEKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zdHJlYW1DbGllbnQuZ2V0KCcvZGV2aWNlcycsIHVzZXJJRCA/IHsgdXNlcl9pZDogdXNlcklEIH0gOiB7fSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiByZW1vdmVEZXZpY2UgLSBSZW1vdmVzIHRoZSBkZXZpY2Ugd2l0aCB0aGUgZ2l2ZW4gaWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgZGV2aWNlIGlkXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdXNlcklEXSBUaGUgdXNlciBpZC4gT25seSBzcGVjaWZ5IHRoaXMgZm9yIHNlcnZlcnNpZGUgcmVxdWVzdHNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVtb3ZlRGV2aWNlID0gYXN5bmMgKGlkLCB1c2VySUQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnN0cmVhbUNsaWVudC5kZWxldGUoJy9kZXZpY2VzJywge1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIC4uLih1c2VySUQgPyB7IHVzZXJfaWQ6IHVzZXJJRCB9IDoge30pLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGNhbGxiYWNrIHRoYXQgY2FuIGJlIHVzZWQgdG8gY3JlYXRlIHJpbmdpbmcgY2FsbHMgZnJvbSBwdXNoIG5vdGlmaWNhdGlvbnMuIElmIHRoZSBjYWxsIGFscmVhZHkgZXhpc3RzLCBpdCB3aWxsIGRvIG5vdGhpbmcuXG4gICAgICAgICAqIEBwYXJhbSBjYWxsX2NpZFxuICAgICAgICAgKiBAcmV0dXJuc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vblJpbmdpbmdDYWxsID0gYXN5bmMgKGNhbGxfY2lkKSA9PiB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBmaW5kIHRoZSBjYWxsIGFuZCBpcyBhbHJlYWR5IHJpbmdpbmcsIHdlIGRvbid0IG5lZWQgdG8gY3JlYXRlIGEgbmV3IGNhbGxcbiAgICAgICAgICAgIC8vIGFzIGNsaWVudCB3b3VsZCBoYXZlIHJlY2VpdmVkIHRoZSBjYWxsLnJpbmcgc3RhdGUgYmVjYXVzZSB0aGUgYXBwIGhhZCBXUyBhbGl2ZSB3aGVuIHJlY2VpdmluZyBwdXNoIG5vdGlmaWNhdGlvbnNcbiAgICAgICAgICAgIGxldCBjYWxsID0gdGhpcy5yZWFkT25seVN0YXRlU3RvcmUuY2FsbHMuZmluZCgoYykgPT4gYy5jaWQgPT09IGNhbGxfY2lkICYmIGMucmluZ2luZyk7XG4gICAgICAgICAgICBpZiAoIWNhbGwpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBub3QgaXQgbWVhbnMgdGhhdCBXUyBpcyBub3QgYWxpdmUgd2hlbiByZWNlaXZpbmcgdGhlIHB1c2ggbm90aWZpY2F0aW9ucyBhbmQgd2UgbmVlZCB0byBmZXRjaCB0aGUgY2FsbFxuICAgICAgICAgICAgICAgIGNvbnN0IFtjYWxsVHlwZSwgY2FsbElkXSA9IGNhbGxfY2lkLnNwbGl0KCc6Jyk7XG4gICAgICAgICAgICAgICAgY2FsbCA9IG5ldyBDYWxsKHtcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtQ2xpZW50OiB0aGlzLnN0cmVhbUNsaWVudCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogY2FsbFR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBjYWxsSWQsXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudFN0b3JlOiB0aGlzLndyaXRlYWJsZVN0YXRlU3RvcmUsXG4gICAgICAgICAgICAgICAgICAgIHJpbmdpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgY2FsbC5nZXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYWxsO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29ubmVjdHMgdGhlIGdpdmVuIGFub255bW91cyB1c2VyIHRvIHRoZSBjbGllbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB1c2VyIHRoZSB1c2VyIHRvIGNvbm5lY3QuXG4gICAgICAgICAqIEBwYXJhbSB0b2tlbk9yUHJvdmlkZXIgYSB0b2tlbiBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHRva2VuLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb25uZWN0QW5vbnltb3VzVXNlciA9IGFzeW5jICh1c2VyLCB0b2tlbk9yUHJvdmlkZXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbm5lY3RBbm9ueW1vdXNVc2VyID0gKCkgPT4gdGhpcy5zdHJlYW1DbGllbnQuY29ubmVjdEFub255bW91c1VzZXIodXNlciwgdG9rZW5PclByb3ZpZGVyKTtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblByb21pc2UgPSB0aGlzLmRpc2Nvbm5lY3Rpb25Qcm9taXNlXG4gICAgICAgICAgICAgICAgPyB0aGlzLmRpc2Nvbm5lY3Rpb25Qcm9taXNlLnRoZW4oKCkgPT4gY29ubmVjdEFub255bW91c1VzZXIoKSlcbiAgICAgICAgICAgICAgICA6IGNvbm5lY3RBbm9ueW1vdXNVc2VyKCk7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25Qcm9taXNlLmZpbmFsbHkoKCkgPT4gKHRoaXMuY29ubmVjdGlvblByb21pc2UgPSB1bmRlZmluZWQpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb25Qcm9taXNlO1xuICAgICAgICB9O1xuICAgICAgICBsZXQgbG9nZ2VyID0gbG9nVG9Db25zb2xlO1xuICAgICAgICBsZXQgbG9nTGV2ZWwgPSAnd2Fybic7XG4gICAgICAgIGlmICh0eXBlb2YgYXBpS2V5T3JBcmdzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgbG9nTGV2ZWwgPSBvcHRzPy5sb2dMZXZlbCB8fCBsb2dMZXZlbDtcbiAgICAgICAgICAgIGxvZ2dlciA9IG9wdHM/LmxvZ2dlciB8fCBsb2dnZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsb2dMZXZlbCA9IGFwaUtleU9yQXJncy5vcHRpb25zPy5sb2dMZXZlbCB8fCBsb2dMZXZlbDtcbiAgICAgICAgICAgIGxvZ2dlciA9IGFwaUtleU9yQXJncy5vcHRpb25zPy5sb2dnZXIgfHwgbG9nZ2VyO1xuICAgICAgICB9XG4gICAgICAgIHNldExvZ2dlcihsb2dnZXIsIGxvZ0xldmVsKTtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBnZXRMb2dnZXIoWydjbGllbnQnXSk7XG4gICAgICAgIGlmICh0eXBlb2YgYXBpS2V5T3JBcmdzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy5zdHJlYW1DbGllbnQgPSBuZXcgU3RyZWFtQ2xpZW50KGFwaUtleU9yQXJncywge1xuICAgICAgICAgICAgICAgIHBlcnNpc3RVc2VyT25Db25uZWN0aW9uRmFpbHVyZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgICAgIGxvZ0xldmVsLFxuICAgICAgICAgICAgICAgIGxvZ2dlcjogdGhpcy5sb2dnZXIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtQ2xpZW50ID0gbmV3IFN0cmVhbUNsaWVudChhcGlLZXlPckFyZ3MuYXBpS2V5LCB7XG4gICAgICAgICAgICAgICAgcGVyc2lzdFVzZXJPbkNvbm5lY3Rpb25GYWlsdXJlOiB0cnVlLFxuICAgICAgICAgICAgICAgIC4uLmFwaUtleU9yQXJncy5vcHRpb25zLFxuICAgICAgICAgICAgICAgIGxvZ0xldmVsLFxuICAgICAgICAgICAgICAgIGxvZ2dlcjogdGhpcy5sb2dnZXIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHNka0luZm8gPSBnZXRTZGtJbmZvKCk7XG4gICAgICAgICAgICBpZiAoc2RrSW5mbykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtQ2xpZW50LnNldFVzZXJBZ2VudCh0aGlzLnN0cmVhbUNsaWVudC5nZXRVc2VyQWdlbnQoKSArXG4gICAgICAgICAgICAgICAgICAgIGAtdmlkZW8tJHtTZGtUeXBlW3Nka0luZm8udHlwZV0udG9Mb3dlckNhc2UoKX0tc2RrLSR7c2RrSW5mby5tYWpvcn0uJHtzZGtJbmZvLm1pbm9yfS4ke3Nka0luZm8ucGF0Y2h9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53cml0ZWFibGVTdGF0ZVN0b3JlID0gbmV3IFN0cmVhbVZpZGVvV3JpdGVhYmxlU3RhdGVTdG9yZSgpO1xuICAgICAgICB0aGlzLnJlYWRPbmx5U3RhdGVTdG9yZSA9IG5ldyBTdHJlYW1WaWRlb1JlYWRPbmx5U3RhdGVTdG9yZSh0aGlzLndyaXRlYWJsZVN0YXRlU3RvcmUpO1xuICAgICAgICBpZiAodHlwZW9mIGFwaUtleU9yQXJncyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXIgPSBhcGlLZXlPckFyZ3MudXNlcjtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0gYXBpS2V5T3JBcmdzLnRva2VuIHx8IGFwaUtleU9yQXJncy50b2tlblByb3ZpZGVyO1xuICAgICAgICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RVc2VyKHVzZXIsIHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIHJlYWN0aXZlIHN0YXRlIHN0b3JlLCB1c2UgdGhpcyBpZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCBhYm91dCBjaGFuZ2VzIHRvIHRoZSBjbGllbnQgc3RhdGVcbiAgICAgKi9cbiAgICBnZXQgc3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRPbmx5U3RhdGVTdG9yZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29ubmVjdHMgdGhlIGdpdmVuIHVzZXIgdG8gdGhlIGNsaWVudC5cbiAgICAgKiBPbmx5IG9uZSB1c2VyIGNhbiBjb25uZWN0IGF0IGEgdGltZSwgaWYgeW91IHdhbnQgdG8gY2hhbmdlIHVzZXJzLCBjYWxsIGBkaXNjb25uZWN0VXNlcmAgYmVmb3JlIGNvbm5lY3RpbmcgYSBuZXcgdXNlci5cbiAgICAgKiBJZiB0aGUgY29ubmVjdGlvbiBpcyBzdWNjZXNzZnVsLCB0aGUgY29ubmVjdGVkIHVzZXIgW3N0YXRlIHZhcmlhYmxlXSgjcmVhZG9ubHlzdGF0ZXN0b3JlKSB3aWxsIGJlIHVwZGF0ZWQgYWNjb3JkaW5nbHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXNlciB0aGUgdXNlciB0byBjb25uZWN0LlxuICAgICAqIEBwYXJhbSB0b2tlbiBhIHRva2VuIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgdG9rZW4uXG4gICAgICovXG4gICAgYXN5bmMgY29ubmVjdFVzZXIodXNlciwgdG9rZW4pIHtcbiAgICAgICAgaWYgKHVzZXIudHlwZSA9PT0gJ2Fub255bW91cycpIHtcbiAgICAgICAgICAgIHVzZXIuaWQgPSAnIWFub24nO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdEFub255bW91c1VzZXIodXNlciwgdG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjb25uZWN0VXNlciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5jb25uZWN0VXNlcih1c2VyLCB0b2tlbik7XG4gICAgICAgIH07XG4gICAgICAgIGlmICh1c2VyLnR5cGUgPT09ICdndWVzdCcpIHtcbiAgICAgICAgICAgIGNvbm5lY3RVc2VyID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5jb25uZWN0R3Vlc3RVc2VyKHVzZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25Qcm9taXNlID0gdGhpcy5kaXNjb25uZWN0aW9uUHJvbWlzZVxuICAgICAgICAgICAgPyB0aGlzLmRpc2Nvbm5lY3Rpb25Qcm9taXNlLnRoZW4oKCkgPT4gY29ubmVjdFVzZXIoKSlcbiAgICAgICAgICAgIDogY29ubmVjdFVzZXIoKTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uUHJvbWlzZT8uZmluYWxseSgoKSA9PiAodGhpcy5jb25uZWN0aW9uUHJvbWlzZSA9IHVuZGVmaW5lZCkpO1xuICAgICAgICBjb25zdCBjb25uZWN0VXNlclJlc3BvbnNlID0gYXdhaXQgdGhpcy5jb25uZWN0aW9uUHJvbWlzZTtcbiAgICAgICAgLy8gY29ubmVjdFVzZXJSZXNwb25zZSB3aWxsIGJlIHZvaWQgaWYgY29ubmVjdFVzZXIgY2FsbGVkIHR3aWNlIGZvciB0aGUgc2FtZSB1c2VyXG4gICAgICAgIGlmIChjb25uZWN0VXNlclJlc3BvbnNlPy5tZSkge1xuICAgICAgICAgICAgdGhpcy53cml0ZWFibGVTdGF0ZVN0b3JlLnNldENvbm5lY3RlZFVzZXIoY29ubmVjdFVzZXJSZXNwb25zZS5tZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzVG9VbnJlZ2lzdGVyLnB1c2godGhpcy5vbignY29ubmVjdGlvbi5jaGFuZ2VkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQub25saW5lKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2FsbHNUb1JlV2F0Y2ggPSB0aGlzLndyaXRlYWJsZVN0YXRlU3RvcmUuY2FsbHNcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigoY2FsbCkgPT4gY2FsbC53YXRjaGluZylcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoY2FsbCkgPT4gY2FsbC5jaWQpO1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdpbmZvJywgYFJld2F0Y2hpbmcgY2FsbHMgYWZ0ZXIgY29ubmVjdGlvbiBjaGFuZ2VkICR7Y2FsbHNUb1JlV2F0Y2guam9pbignLCAnKX1gKTtcbiAgICAgICAgICAgICAgICBpZiAoY2FsbHNUb1JlV2F0Y2gubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5Q2FsbHMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgd2F0Y2g6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJfY29uZGl0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpZDogeyAkaW46IGNhbGxzVG9SZVdhdGNoIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgc29ydDogW3sgZmllbGQ6ICdjaWQnLCBkaXJlY3Rpb246IDEgfV0sXG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdlcnJvcicsICdGYWlsZWQgdG8gcmUtd2F0Y2ggY2FsbHMnLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzVG9VbnJlZ2lzdGVyLnB1c2godGhpcy5vbignY2FsbC5jcmVhdGVkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGNhbGwsIG1lbWJlcnMgfSA9IGV2ZW50O1xuICAgICAgICAgICAgaWYgKHVzZXIuaWQgPT09IGNhbGwuY3JlYXRlZF9ieS5pZCkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyKCd3YXJuJywgJ1JlY2VpdmVkIGBjYWxsLmNyZWF0ZWRgIHNlbnQgYnkgdGhlIGN1cnJlbnQgdXNlcicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubG9nZ2VyKCdpbmZvJywgYE5ldyBjYWxsIGNyZWF0ZWQgYW5kIHJlZ2lzdGVyZWQ6ICR7Y2FsbC5jaWR9YCk7XG4gICAgICAgICAgICBjb25zdCBuZXdDYWxsID0gbmV3IENhbGwoe1xuICAgICAgICAgICAgICAgIHN0cmVhbUNsaWVudDogdGhpcy5zdHJlYW1DbGllbnQsXG4gICAgICAgICAgICAgICAgdHlwZTogY2FsbC50eXBlLFxuICAgICAgICAgICAgICAgIGlkOiBjYWxsLmlkLFxuICAgICAgICAgICAgICAgIG1lbWJlcnMsXG4gICAgICAgICAgICAgICAgY2xpZW50U3RvcmU6IHRoaXMud3JpdGVhYmxlU3RhdGVTdG9yZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbmV3Q2FsbC5zdGF0ZS51cGRhdGVGcm9tQ2FsbFJlc3BvbnNlKGNhbGwpO1xuICAgICAgICAgICAgdGhpcy53cml0ZWFibGVTdGF0ZVN0b3JlLnJlZ2lzdGVyQ2FsbChuZXdDYWxsKTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLmV2ZW50SGFuZGxlcnNUb1VucmVnaXN0ZXIucHVzaCh0aGlzLm9uKCdjYWxsLnJpbmcnLCBhc3luYyAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgY2FsbCwgbWVtYmVycyB9ID0gZXZlbnQ7XG4gICAgICAgICAgICBpZiAodXNlci5pZCA9PT0gY2FsbC5jcmVhdGVkX2J5LmlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIoJ2RlYnVnJywgJ1JlY2VpdmVkIGBjYWxsLnJpbmdgIHNlbnQgYnkgdGhlIGN1cnJlbnQgdXNlciBzbyBpZ25vcmluZyB0aGUgZXZlbnQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGUgY2FsbCBtaWdodCBhbHJlYWR5IGJlIHRyYWNrZWQgYnkgdGhlIGNsaWVudCxcbiAgICAgICAgICAgIC8vIGlmIGBjYWxsLmNyZWF0ZWRgIHdhcyByZWNlaXZlZCBiZWZvcmUgYGNhbGwucmluZ2AuXG4gICAgICAgICAgICAvLyBJbiB0aGF0IGNhc2UsIHdlIGNsZWFudXAgdGhlIGFscmVhZHkgdHJhY2tlZCBjYWxsLlxuICAgICAgICAgICAgY29uc3QgcHJldkNhbGwgPSB0aGlzLndyaXRlYWJsZVN0YXRlU3RvcmUuZmluZENhbGwoY2FsbC50eXBlLCBjYWxsLmlkKTtcbiAgICAgICAgICAgIGF3YWl0IHByZXZDYWxsPy5sZWF2ZSh7IHJlYXNvbjogJ2NsZWFuaW5nLXVwIGluIGNhbGwucmluZycgfSk7XG4gICAgICAgICAgICAvLyB3ZSBjcmVhdGUgYSBuZXcgY2FsbFxuICAgICAgICAgICAgY29uc3QgdGhlQ2FsbCA9IG5ldyBDYWxsKHtcbiAgICAgICAgICAgICAgICBzdHJlYW1DbGllbnQ6IHRoaXMuc3RyZWFtQ2xpZW50LFxuICAgICAgICAgICAgICAgIHR5cGU6IGNhbGwudHlwZSxcbiAgICAgICAgICAgICAgICBpZDogY2FsbC5pZCxcbiAgICAgICAgICAgICAgICBtZW1iZXJzLFxuICAgICAgICAgICAgICAgIGNsaWVudFN0b3JlOiB0aGlzLndyaXRlYWJsZVN0YXRlU3RvcmUsXG4gICAgICAgICAgICAgICAgcmluZ2luZzogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhlQ2FsbC5zdGF0ZS51cGRhdGVGcm9tQ2FsbFJlc3BvbnNlKGNhbGwpO1xuICAgICAgICAgICAgLy8gd2UgZmV0Y2ggdGhlIGxhdGVzdCBtZXRhZGF0YSBmb3IgdGhlIGNhbGwgZnJvbSB0aGUgc2VydmVyXG4gICAgICAgICAgICBhd2FpdCB0aGVDYWxsLmdldCgpO1xuICAgICAgICAgICAgdGhpcy53cml0ZWFibGVTdGF0ZVN0b3JlLnJlZ2lzdGVyQ2FsbCh0aGVDYWxsKTtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gY29ubmVjdFVzZXJSZXNwb25zZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogYWRkRGV2aWNlIC0gQWRkcyBhIHB1c2ggZGV2aWNlIGZvciBhIHVzZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgdGhlIGRldmljZSBpZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwdXNoX3Byb3ZpZGVyIHRoZSBwdXNoIHByb3ZpZGVyIG5hbWUgKGVnLiBhcG4sIGZpcmViYXNlKVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwdXNoX3Byb3ZpZGVyX25hbWUgdXNlciBwcm92aWRlZCBwdXNoIHByb3ZpZGVyIG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3VzZXJJRF0gdGhlIHVzZXIgaWQgKGRlZmF1bHRzIHRvIGN1cnJlbnQgdXNlcilcbiAgICAgKi9cbiAgICBhc3luYyBhZGRWb2lwRGV2aWNlKGlkLCBwdXNoX3Byb3ZpZGVyLCBwdXNoX3Byb3ZpZGVyX25hbWUsIHVzZXJJRCkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5hZGREZXZpY2UoaWQsIHB1c2hfcHJvdmlkZXIsIHB1c2hfcHJvdmlkZXJfbmFtZSwgdXNlcklELCB0cnVlKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSB0aGUgYEBzdHJlYW0taW8vbm9kZS1zZGtgIHBhY2thZ2UgaW5zdGVhZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2V0c3RyZWFtLmlvL3ZpZGVvL2RvY3MvYXBpL1xuICovXG5jbGFzcyBTdHJlYW1WaWRlb1NlcnZlckNsaWVudCBleHRlbmRzIFN0cmVhbVZpZGVvQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvcihhcGlLZXksIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoeyBhcGlLZXksIG9wdGlvbnMgfSk7XG4gICAgICAgIHRoaXMuZ2V0Q2FsbFR5cGVzID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtQ2xpZW50LmdldCgnL2NhbGx0eXBlcycpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldENhbGxUeXBlID0gKG5hbWUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5nZXQoYC9jYWxsdHlwZXMvJHtuYW1lfWApO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNyZWF0ZUNhbGxUeXBlID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5wb3N0KCcvY2FsbHR5cGVzJywgZGF0YSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGVsZXRlQ2FsbFR5cGUgPSAobmFtZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtQ2xpZW50LmRlbGV0ZShgL2NhbGx0eXBlcy8ke25hbWV9YCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlQ2FsbFR5cGUgPSAobmFtZSwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtQ2xpZW50LnB1dChgL2NhbGx0eXBlcy8ke25hbWV9YCwgZGF0YSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubGlzdEV4dGVybmFsU3RvcmFnZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5nZXQoJy9leHRlcm5hbF9zdG9yYWdlJyk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY3JlYXRlRXh0ZXJuYWxTdG9yYWdlID0gKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5wb3N0KCcvZXh0ZXJuYWxfc3RvcmFnZScsIHJlcXVlc3QpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRlbGV0ZUV4dGVybmFsU3RvcmFnZSA9IChuYW1lKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW1DbGllbnQuZGVsZXRlKGAvZXh0ZXJuYWxfc3RvcmFnZS8ke25hbWV9YCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlRXh0ZXJuYWxTdG9yYWdlID0gKG5hbWUsIHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmVhbUNsaWVudC5wdXQoYC9leHRlcm5hbF9zdG9yYWdlLyR7bmFtZX1gLCByZXF1ZXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jaGVja0V4dGVybmFsU3RvcmFnZSA9IChuYW1lKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW1DbGllbnQuZ2V0KGAvZXh0ZXJuYWxfc3RvcmFnZS8ke25hbWV9L2NoZWNrYCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGNyZWF0ZVRva2VuIC0gQ3JlYXRlcyBhIHRva2VuIHRvIGF1dGhlbnRpY2F0ZSB0aGlzIHVzZXIuIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBzZXJ2ZXIgc2lkZS5cbiAgICAgKiBUaGUgcmVzdWx0aW5nIHRva2VuIHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIGNsaWVudCBzaWRlIHdoZW4gdGhlIHVzZXJzIHJlZ2lzdGVyIG9yIGxvZ3MgaW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlcklEIFRoZSBVc2VyIElEXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtleHBdIFRoZSBleHBpcmF0aW9uIHRpbWUgZm9yIHRoZSB0b2tlbiBleHByZXNzZWQgaW4gdGhlIG51bWJlciBvZiBzZWNvbmRzIHNpbmNlIHRoZSBlcG9jaFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbaWF0XSBUaGUgdGltZXN0YW1wIHdoZW4gYSB0b2tlbiBoYXMgYmVlbiBpc3N1ZWRcbiAgICAgKiBAcGFyYW0gY2FsbF9jaWRzIGZvciBhbm9ueW1vdXMgdG9rZW5zIHlvdSBoYXZlIHRvIHByb3ZpZGUgdGhlIGNhbGwgY2lkcyB0aGUgdXNlIGNhbiBqb2luXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFJldHVybnMgYSB0b2tlblxuICAgICAqL1xuICAgIGNyZWF0ZVRva2VuKHVzZXJJRCwgZXhwLCBpYXQsIGNhbGxfY2lkcykge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW1DbGllbnQuY3JlYXRlVG9rZW4odXNlcklELCBleHAsIGlhdCwgY2FsbF9jaWRzKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEF1ZGlvU2V0dGluZ3NEZWZhdWx0RGV2aWNlRW51bSwgQXVkaW9TZXR0aW5nc1JlcXVlc3REZWZhdWx0RGV2aWNlRW51bSwgYnJvd3NlcnMgYXMgQnJvd3NlcnMsIENhbGwsIENhbGxTdGF0ZSwgQ2FsbFR5cGUsIENhbGxUeXBlcywgQ2FsbGluZ1N0YXRlLCBDYW1lcmFNYW5hZ2VyLCBDYW1lcmFNYW5hZ2VyU3RhdGUsIENyZWF0ZURldmljZVJlcXVlc3RQdXNoUHJvdmlkZXJFbnVtLCBEZWJvdW5jZVR5cGUsIER5bmFzY2FsZU1hbmFnZXIsIEVycm9yRnJvbVJlc3BvbnNlLCBJbnB1dE1lZGlhRGV2aWNlTWFuYWdlciwgSW5wdXRNZWRpYURldmljZU1hbmFnZXJTdGF0ZSwgTGF5b3V0U2V0dGluZ3NOYW1lRW51bSwgTGF5b3V0U2V0dGluZ3NSZXF1ZXN0TmFtZUVudW0sIE1pY3JvcGhvbmVNYW5hZ2VyLCBNaWNyb3Bob25lTWFuYWdlclN0YXRlLCBPd25DYXBhYmlsaXR5LCBSZWNvcmRTZXR0aW5nc1JlcXVlc3RNb2RlRW51bSwgUmVjb3JkU2V0dGluZ3NSZXF1ZXN0UXVhbGl0eUVudW0sIHJ4VXRpbHMgYXMgUnhVdGlscywgU2NyZWVuU2hhcmVNYW5hZ2VyLCBTY3JlZW5TaGFyZVN0YXRlLCBldmVudHMgYXMgU2Z1RXZlbnRzLCBtb2RlbHMgYXMgU2Z1TW9kZWxzLCBTcGVha2VyTWFuYWdlciwgU3BlYWtlclN0YXRlLCBTdHJlYW1TZnVDbGllbnQsIFN0cmVhbVZpZGVvQ2xpZW50LCBTdHJlYW1WaWRlb1JlYWRPbmx5U3RhdGVTdG9yZSwgU3RyZWFtVmlkZW9TZXJ2ZXJDbGllbnQsIFN0cmVhbVZpZGVvV3JpdGVhYmxlU3RhdGVTdG9yZSwgVHJhbnNjcmlwdGlvblNldHRpbmdzTW9kZUVudW0sIFRyYW5zY3JpcHRpb25TZXR0aW5nc1JlcXVlc3RNb2RlRW51bSwgVmlkZW9TZXR0aW5nc0NhbWVyYUZhY2luZ0VudW0sIFZpZGVvU2V0dGluZ3NSZXF1ZXN0Q2FtZXJhRmFjaW5nRW51bSwgVmlld3BvcnRUcmFja2VyLCBWaXNpYmlsaXR5U3RhdGUsIGNoZWNrSWZBdWRpb091dHB1dENoYW5nZVN1cHBvcnRlZCwgY29tYmluZUNvbXBhcmF0b3JzLCBjb25kaXRpb25hbCwgY3JlYXRlU291bmREZXRlY3RvciwgZGVmYXVsdFNvcnRQcmVzZXQsIGRlc2NlbmRpbmcsIGRldmljZUlkcyQsIGRpc3Bvc2VPZk1lZGlhU3RyZWFtLCBkb21pbmFudFNwZWFrZXIsIGdldEF1ZGlvRGV2aWNlcywgZ2V0QXVkaW9PdXRwdXREZXZpY2VzLCBnZXRBdWRpb1N0cmVhbSwgZ2V0Q2xpZW50RGV0YWlscywgZ2V0RGV2aWNlSW5mbywgZ2V0TG9nZ2VyLCBnZXRPU0luZm8sIGdldFNjcmVlblNoYXJlU3RyZWFtLCBnZXRTZGtJbmZvLCBnZXRWaWRlb0RldmljZXMsIGdldFZpZGVvU3RyZWFtLCBnZXRXZWJSVENJbmZvLCBsaXZlc3RyZWFtT3JBdWRpb1Jvb21Tb3J0UHJlc2V0LCBsb2dMZXZlbHMsIGxvZ1RvQ29uc29sZSwgbmFtZSwgbm9vcENvbXBhcmF0b3IsIHBhZ2luYXRlZExheW91dFNvcnRQcmVzZXQsIHBpbm5lZCwgcHVibGlzaGluZ0F1ZGlvLCBwdWJsaXNoaW5nVmlkZW8sIHJlYWN0aW9uVHlwZSwgcm9sZSwgc2NyZWVuU2hhcmluZywgc2V0RGV2aWNlSW5mbywgc2V0TG9nTGV2ZWwsIHNldExvZ2dlciwgc2V0T1NJbmZvLCBzZXRTZGtJbmZvLCBzZXRXZWJSVENJbmZvLCBzcGVha2VyTGF5b3V0U29ydFByZXNldCwgc3BlYWtpbmcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk1lc3NhZ2VUeXBlIiwiaXNKc29uT2JqZWN0IiwidHlwZW9mSnNvblZhbHVlIiwicmVmbGVjdGlvbk1lcmdlUGFydGlhbCIsIlVua25vd25GaWVsZEhhbmRsZXIiLCJXaXJlVHlwZSIsIlBiTG9uZyIsIlNlcnZpY2VUeXBlIiwic3RhY2tJbnRlcmNlcHQiLCJheGlvcyIsIkF4aW9zSGVhZGVycyIsIkF4aW9zRXJyb3IiLCJUd2lycEZldGNoVHJhbnNwb3J0IiwiUmVwbGF5U3ViamVjdCIsImNvbWJpbmVMYXRlc3QiLCJCZWhhdmlvclN1YmplY3QiLCJtYXAiLCJtYXAkMSIsInNoYXJlUmVwbGF5IiwiZGlzdGluY3RVbnRpbENoYW5nZWQiLCJ0YWtlV2hpbGUiLCJkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCIsIm1lcmdlIiwiZnJvbSIsIk9ic2VydmFibGUiLCJkZWJvdW5jZVRpbWUiLCJjb25jYXRNYXAiLCJwYWlyd2lzZSIsIm9mIiwiZmlsdGVyIiwiZGVib3VuY2UiLCJ0aW1lciIsIlNEUCIsIlVBUGFyc2VyIiwiV2ViU29ja2V0IiwiaHR0cHMiLCJqd3QiLCJmcm9tQnl0ZUFycmF5IiwiQXVkaW9TZXR0aW5nc0RlZmF1bHREZXZpY2VFbnVtIiwiU1BFQUtFUiIsIkVBUlBJRUNFIiwiQXVkaW9TZXR0aW5nc1JlcXVlc3REZWZhdWx0RGV2aWNlRW51bSIsIkNyZWF0ZURldmljZVJlcXVlc3RQdXNoUHJvdmlkZXJFbnVtIiwiRklSRUJBU0UiLCJBUE4iLCJIVUFXRUkiLCJYSUFPTUkiLCJMYXlvdXRTZXR0aW5nc05hbWVFbnVtIiwiU1BPVExJR0hUIiwiR1JJRCIsIlNJTkdMRV9QQVJUSUNJUEFOVCIsIk1PQklMRSIsIkNVU1RPTSIsIkxheW91dFNldHRpbmdzUmVxdWVzdE5hbWVFbnVtIiwiT3duQ2FwYWJpbGl0eSIsIkJMT0NLX1VTRVJTIiwiQ1JFQVRFX0NBTEwiLCJDUkVBVEVfUkVBQ1RJT04iLCJFTkRfQ0FMTCIsIkpPSU5fQkFDS1NUQUdFIiwiSk9JTl9DQUxMIiwiSk9JTl9FTkRFRF9DQUxMIiwiTVVURV9VU0VSUyIsIlBJTl9GT1JfRVZFUllPTkUiLCJSRUFEX0NBTEwiLCJSRU1PVkVfQ0FMTF9NRU1CRVIiLCJTQ1JFRU5TSEFSRSIsIlNFTkRfQVVESU8iLCJTRU5EX1ZJREVPIiwiU1RBUlRfQlJPQURDQVNUX0NBTEwiLCJTVEFSVF9SRUNPUkRfQ0FMTCIsIlNUQVJUX1RSQU5TQ1JJUFRJT05fQ0FMTCIsIlNUT1BfQlJPQURDQVNUX0NBTEwiLCJTVE9QX1JFQ09SRF9DQUxMIiwiU1RPUF9UUkFOU0NSSVBUSU9OX0NBTEwiLCJVUERBVEVfQ0FMTCIsIlVQREFURV9DQUxMX01FTUJFUiIsIlVQREFURV9DQUxMX1BFUk1JU1NJT05TIiwiVVBEQVRFX0NBTExfU0VUVElOR1MiLCJSZWNvcmRTZXR0aW5nc1JlcXVlc3RNb2RlRW51bSIsIkFWQUlMQUJMRSIsIkRJU0FCTEVEIiwiQVVUT19PTiIsIlJlY29yZFNldHRpbmdzUmVxdWVzdFF1YWxpdHlFbnVtIiwiXzM2MFAiLCJfNDgwUCIsIl83MjBQIiwiXzEwODBQIiwiXzE0NDBQIiwiVHJhbnNjcmlwdGlvblNldHRpbmdzTW9kZUVudW0iLCJUcmFuc2NyaXB0aW9uU2V0dGluZ3NSZXF1ZXN0TW9kZUVudW0iLCJWaWRlb1NldHRpbmdzQ2FtZXJhRmFjaW5nRW51bSIsIkZST05UIiwiQkFDSyIsIkVYVEVSTkFMIiwiVmlkZW9TZXR0aW5nc1JlcXVlc3RDYW1lcmFGYWNpbmdFbnVtIiwiRXJyb3JGcm9tUmVzcG9uc2UiLCJFcnJvciIsIk51bGxWYWx1ZSIsIlN0cnVjdCRUeXBlIiwiY29uc3RydWN0b3IiLCJubyIsIm5hbWUiLCJraW5kIiwiSyIsIlYiLCJUIiwiVmFsdWUiLCJpbnRlcm5hbEpzb25Xcml0ZSIsIm1lc3NhZ2UiLCJvcHRpb25zIiwianNvbiIsImsiLCJ2IiwiT2JqZWN0IiwiZW50cmllcyIsImZpZWxkcyIsInRvSnNvbiIsImludGVybmFsSnNvblJlYWQiLCJ0YXJnZXQiLCJnbG9iYWxUaGlzIiwidHlwZU5hbWUiLCJjcmVhdGUiLCJmcm9tSnNvbiIsInZhbHVlIiwibWVzc2FnZVByb3RvdHlwZSIsInVuZGVmaW5lZCIsImludGVybmFsQmluYXJ5UmVhZCIsInJlYWRlciIsImxlbmd0aCIsImVuZCIsInBvcyIsImZpZWxkTm8iLCJ3aXJlVHlwZSIsInRhZyIsImJpbmFyeVJlYWRNYXAxIiwidSIsInJlYWRVbmtub3duRmllbGQiLCJkIiwic2tpcCIsIm9uUmVhZCIsImxlbiIsInVpbnQzMiIsImtleSIsInZhbCIsInN0cmluZyIsImludGVybmFsQmluYXJ5V3JpdGUiLCJ3cml0ZXIiLCJrZXlzIiwiTGVuZ3RoRGVsaW1pdGVkIiwiZm9yayIsImpvaW4iLCJ3cml0ZVVua25vd25GaWVsZHMiLCJvbldyaXRlIiwiU3RydWN0IiwiVmFsdWUkVHlwZSIsIm9uZW9mIiwiTGlzdFZhbHVlIiwib25lb2ZLaW5kIiwiYm9vbFZhbHVlIiwibnVtYmVyVmFsdWUiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsInN0cmluZ1ZhbHVlIiwibGlzdFZhbHVlRmllbGQiLCJmaW5kIiwiZiIsImxpc3RWYWx1ZSIsInN0cnVjdFZhbHVlRmllbGQiLCJzdHJ1Y3RWYWx1ZSIsIm51bGxWYWx1ZSIsIk5VTExfVkFMVUUiLCJBcnJheSIsImlzQXJyYXkiLCJpbnQzMiIsImRvdWJsZSIsImJvb2wiLCJWYXJpbnQiLCJCaXQ2NCIsIkxpc3RWYWx1ZSRUeXBlIiwicmVwZWF0IiwidmFsdWVzIiwicHVzaCIsImkiLCJUaW1lc3RhbXAkVHlwZSIsIm5vdyIsIm1zZyIsIm1zIiwiRGF0ZSIsInNlY29uZHMiLCJNYXRoIiwiZmxvb3IiLCJ0b1N0cmluZyIsIm5hbm9zIiwidG9EYXRlIiwidG9OdW1iZXIiLCJjZWlsIiwiZnJvbURhdGUiLCJkYXRlIiwiZ2V0VGltZSIsInBhcnNlIiwieiIsIm5hbm9zU3RyIiwic3Vic3RyaW5nIiwidG9JU09TdHJpbmciLCJyZXBsYWNlIiwibWF0Y2hlcyIsIm1hdGNoIiwiaXNOYU4iLCJwYXJzZUludCIsImludDY0IiwiVGltZXN0YW1wIiwiUGVlclR5cGUiLCJDb25uZWN0aW9uUXVhbGl0eSIsIlZpZGVvUXVhbGl0eSIsIlRyYWNrVHlwZSIsIkVycm9yQ29kZSIsIlNka1R5cGUiLCJUcmFja1VucHVibGlzaFJlYXNvbiIsIkdvQXdheVJlYXNvbiIsIkNhbGxTdGF0ZSRUeXBlIiwiUGFydGljaXBhbnQiLCJQYXJ0aWNpcGFudENvdW50IiwiUGluIiwicGFydGljaXBhbnRzIiwicGlucyIsInN0YXJ0ZWRBdCIsInBhcnRpY2lwYW50Q291bnQiLCJDYWxsU3RhdGUkMSIsIlBhcnRpY2lwYW50Q291bnQkVHlwZSIsInRvdGFsIiwiYW5vbnltb3VzIiwiUGluJFR5cGUiLCJ1c2VySWQiLCJzZXNzaW9uSWQiLCJQYXJ0aWNpcGFudCRUeXBlIiwicHVibGlzaGVkVHJhY2tzIiwidHJhY2tMb29rdXBQcmVmaXgiLCJjb25uZWN0aW9uUXVhbGl0eSIsImlzU3BlYWtpbmciLCJpc0RvbWluYW50U3BlYWtlciIsImF1ZGlvTGV2ZWwiLCJpbWFnZSIsInJvbGVzIiwiZSIsImpvaW5lZEF0IiwiZmxvYXQiLCJjdXN0b20iLCJCaXQzMiIsIlN0cmVhbVF1YWxpdHkkVHlwZSIsInZpZGVvUXVhbGl0eSIsIlN0cmVhbVF1YWxpdHkiLCJWaWRlb0RpbWVuc2lvbiRUeXBlIiwid2lkdGgiLCJoZWlnaHQiLCJWaWRlb0RpbWVuc2lvbiIsIlZpZGVvTGF5ZXIkVHlwZSIsInJpZCIsImJpdHJhdGUiLCJmcHMiLCJxdWFsaXR5IiwidmlkZW9EaW1lbnNpb24iLCJWaWRlb0xheWVyIiwiQ29kZWMkVHlwZSIsInBheWxvYWRUeXBlIiwiZm10cExpbmUiLCJjbG9ja1JhdGUiLCJlbmNvZGluZ1BhcmFtZXRlcnMiLCJmZWVkYmFja3MiLCJDb2RlYyIsIklDRVRyaWNrbGUkVHlwZSQxIiwiSUNFVHJpY2tsZSRUeXBlIiwicGVlclR5cGUiLCJpY2VDYW5kaWRhdGUiLCJJQ0VUcmlja2xlJDEiLCJUcmFja0luZm8kVHlwZSIsInRyYWNrSWQiLCJ0cmFja1R5cGUiLCJsYXllcnMiLCJtaWQiLCJkdHgiLCJzdGVyZW8iLCJyZWQiLCJUcmFja0luZm8iLCJDYWxsJFR5cGUiLCJ0eXBlIiwiaWQiLCJjcmVhdGVkQnlVc2VySWQiLCJob3N0VXNlcklkIiwiY3JlYXRlZEF0IiwidXBkYXRlZEF0IiwiQ2FsbCQxIiwiRXJyb3IkVHlwZSQxIiwiRXJyb3IkVHlwZSIsImNvZGUiLCJzaG91bGRSZXRyeSIsIkVycm9yJDIiLCJDbGllbnREZXRhaWxzJFR5cGUiLCJTZGsiLCJPUyIsIkJyb3dzZXIiLCJEZXZpY2UiLCJzZGsiLCJvcyIsImJyb3dzZXIiLCJkZXZpY2UiLCJDbGllbnREZXRhaWxzIiwiU2RrJFR5cGUiLCJtYWpvciIsIm1pbm9yIiwicGF0Y2giLCJPUyRUeXBlIiwidmVyc2lvbiIsImFyY2hpdGVjdHVyZSIsIkJyb3dzZXIkVHlwZSIsIkRldmljZSRUeXBlIiwiQ2FsbEdyYW50cyRUeXBlIiwiY2FuUHVibGlzaEF1ZGlvIiwiY2FuUHVibGlzaFZpZGVvIiwiY2FuU2NyZWVuc2hhcmUiLCJDYWxsR3JhbnRzIiwibW9kZWxzIiwiZnJlZXplIiwiX19wcm90b19fIiwiQ2FsbCIsIkNhbGxTdGF0ZSIsIklDRVRyaWNrbGUiLCJTZW5kU3RhdHNSZXF1ZXN0JFR5cGUiLCJzdWJzY3JpYmVyU3RhdHMiLCJwdWJsaXNoZXJTdGF0cyIsIndlYnJ0Y1ZlcnNpb24iLCJzZGtWZXJzaW9uIiwiU2VuZFN0YXRzUmVxdWVzdCIsIlNlbmRTdGF0c1Jlc3BvbnNlJFR5cGUiLCJlcnJvciIsIlNlbmRTdGF0c1Jlc3BvbnNlIiwiSUNFUmVzdGFydFJlcXVlc3QkVHlwZSIsIklDRVJlc3RhcnRSZXF1ZXN0IiwiSUNFUmVzdGFydFJlc3BvbnNlJFR5cGUiLCJJQ0VSZXN0YXJ0UmVzcG9uc2UiLCJVcGRhdGVNdXRlU3RhdGVzUmVxdWVzdCRUeXBlIiwiVHJhY2tNdXRlU3RhdGUiLCJtdXRlU3RhdGVzIiwiVXBkYXRlTXV0ZVN0YXRlc1JlcXVlc3QiLCJVcGRhdGVNdXRlU3RhdGVzUmVzcG9uc2UkVHlwZSIsIlVwZGF0ZU11dGVTdGF0ZXNSZXNwb25zZSIsIlRyYWNrTXV0ZVN0YXRlJFR5cGUiLCJtdXRlZCIsIkF1ZGlvTXV0ZUNoYW5nZWQkVHlwZSIsIlZpZGVvTXV0ZUNoYW5nZWQkVHlwZSIsIlVwZGF0ZVN1YnNjcmlwdGlvbnNSZXF1ZXN0JFR5cGUiLCJUcmFja1N1YnNjcmlwdGlvbkRldGFpbHMiLCJ0cmFja3MiLCJVcGRhdGVTdWJzY3JpcHRpb25zUmVxdWVzdCIsIlVwZGF0ZVN1YnNjcmlwdGlvbnNSZXNwb25zZSRUeXBlIiwiVXBkYXRlU3Vic2NyaXB0aW9uc1Jlc3BvbnNlIiwiVHJhY2tTdWJzY3JpcHRpb25EZXRhaWxzJFR5cGUiLCJkaW1lbnNpb24iLCJTZW5kQW5zd2VyUmVxdWVzdCRUeXBlIiwic2RwIiwiU2VuZEFuc3dlclJlcXVlc3QiLCJTZW5kQW5zd2VyUmVzcG9uc2UkVHlwZSIsIlNlbmRBbnN3ZXJSZXNwb25zZSIsIklDRVRyaWNrbGVSZXNwb25zZSRUeXBlIiwiSUNFVHJpY2tsZVJlc3BvbnNlIiwiU2V0UHVibGlzaGVyUmVxdWVzdCRUeXBlIiwiU2V0UHVibGlzaGVyUmVxdWVzdCIsIlNldFB1Ymxpc2hlclJlc3BvbnNlJFR5cGUiLCJpY2VSZXN0YXJ0IiwiU2V0UHVibGlzaGVyUmVzcG9uc2UiLCJTaWduYWxTZXJ2ZXIiLCJJIiwiTyIsIlZpZGVvTGF5ZXJTZXR0aW5nX1ByaW9yaXR5IiwiU2Z1RXZlbnQkVHlwZSIsIlN1YnNjcmliZXJPZmZlciIsIlB1Ymxpc2hlckFuc3dlciIsIkNvbm5lY3Rpb25RdWFsaXR5Q2hhbmdlZCIsIkF1ZGlvTGV2ZWxDaGFuZ2VkIiwiQ2hhbmdlUHVibGlzaFF1YWxpdHkiLCJQYXJ0aWNpcGFudEpvaW5lZCIsIlBhcnRpY2lwYW50TGVmdCIsIkRvbWluYW50U3BlYWtlckNoYW5nZWQiLCJKb2luUmVzcG9uc2UiLCJIZWFsdGhDaGVja1Jlc3BvbnNlIiwiVHJhY2tQdWJsaXNoZWQiLCJUcmFja1VucHVibGlzaGVkIiwiRXJyb3IkMSIsIkNhbGxHcmFudHNVcGRhdGVkIiwiR29Bd2F5IiwiSUNFUmVzdGFydCIsIlBpbnNDaGFuZ2VkIiwiZXZlbnRQYXlsb2FkIiwic3Vic2NyaWJlck9mZmVyIiwicHVibGlzaGVyQW5zd2VyIiwiY29ubmVjdGlvblF1YWxpdHlDaGFuZ2VkIiwiYXVkaW9MZXZlbENoYW5nZWQiLCJpY2VUcmlja2xlIiwiY2hhbmdlUHVibGlzaFF1YWxpdHkiLCJwYXJ0aWNpcGFudEpvaW5lZCIsInBhcnRpY2lwYW50TGVmdCIsImRvbWluYW50U3BlYWtlckNoYW5nZWQiLCJqb2luUmVzcG9uc2UiLCJoZWFsdGhDaGVja1Jlc3BvbnNlIiwidHJhY2tQdWJsaXNoZWQiLCJ0cmFja1VucHVibGlzaGVkIiwiY2FsbEdyYW50c1VwZGF0ZWQiLCJnb0F3YXkiLCJwaW5zVXBkYXRlZCIsIlNmdUV2ZW50IiwiUGluc0NoYW5nZWQkVHlwZSIsIklDRVJlc3RhcnQkVHlwZSIsIlNmdVJlcXVlc3QkVHlwZSIsIkpvaW5SZXF1ZXN0IiwiSGVhbHRoQ2hlY2tSZXF1ZXN0IiwicmVxdWVzdFBheWxvYWQiLCJqb2luUmVxdWVzdCIsImhlYWx0aENoZWNrUmVxdWVzdCIsIlNmdVJlcXVlc3QiLCJIZWFsdGhDaGVja1JlcXVlc3QkVHlwZSIsIkhlYWx0aENoZWNrUmVzcG9uc2UkVHlwZSIsIlRyYWNrUHVibGlzaGVkJFR5cGUiLCJwYXJ0aWNpcGFudCIsIlRyYWNrVW5wdWJsaXNoZWQkVHlwZSIsImNhdXNlIiwiSm9pblJlcXVlc3QkVHlwZSIsIk1pZ3JhdGlvbiIsInRva2VuIiwic3Vic2NyaWJlclNkcCIsImZhc3RSZWNvbm5lY3QiLCJjbGllbnREZXRhaWxzIiwibWlncmF0aW9uIiwiTWlncmF0aW9uJFR5cGUiLCJmcm9tU2Z1SWQiLCJhbm5vdW5jZWRUcmFja3MiLCJzdWJzY3JpcHRpb25zIiwiSm9pblJlc3BvbnNlJFR5cGUiLCJyZWNvbm5lY3RlZCIsImNhbGxTdGF0ZSIsIlBhcnRpY2lwYW50Sm9pbmVkJFR5cGUiLCJjYWxsQ2lkIiwiUGFydGljaXBhbnRMZWZ0JFR5cGUiLCJTdWJzY3JpYmVyT2ZmZXIkVHlwZSIsIlB1Ymxpc2hlckFuc3dlciRUeXBlIiwiQ29ubmVjdGlvblF1YWxpdHlDaGFuZ2VkJFR5cGUiLCJDb25uZWN0aW9uUXVhbGl0eUluZm8iLCJjb25uZWN0aW9uUXVhbGl0eVVwZGF0ZXMiLCJDb25uZWN0aW9uUXVhbGl0eUluZm8kVHlwZSIsIkRvbWluYW50U3BlYWtlckNoYW5nZWQkVHlwZSIsIkF1ZGlvTGV2ZWwkVHlwZSIsImxldmVsIiwiQXVkaW9MZXZlbCIsIkF1ZGlvTGV2ZWxDaGFuZ2VkJFR5cGUiLCJhdWRpb0xldmVscyIsIkF1ZGlvTWVkaWFSZXF1ZXN0JFR5cGUiLCJjaGFubmVsQ291bnQiLCJBdWRpb01lZGlhUmVxdWVzdCIsIkF1ZGlvU2VuZGVyJFR5cGUiLCJtZWRpYVJlcXVlc3QiLCJjb2RlYyIsIkF1ZGlvU2VuZGVyIiwiVmlkZW9NZWRpYVJlcXVlc3QkVHlwZSIsImlkZWFsSGVpZ2h0IiwiaWRlYWxXaWR0aCIsImlkZWFsRnJhbWVSYXRlIiwiVmlkZW9NZWRpYVJlcXVlc3QiLCJWaWRlb0xheWVyU2V0dGluZyRUeXBlIiwiYWN0aXZlIiwibWF4Qml0cmF0ZSIsInNjYWxlUmVzb2x1dGlvbkRvd25CeSIsInByaW9yaXR5IiwibWF4RnJhbWVyYXRlIiwiVmlkZW9MYXllclNldHRpbmciLCJWaWRlb1NlbmRlciRUeXBlIiwiVmlkZW9TZW5kZXIiLCJDaGFuZ2VQdWJsaXNoUXVhbGl0eSRUeXBlIiwiYXVkaW9TZW5kZXJzIiwidmlkZW9TZW5kZXJzIiwiQ2FsbEdyYW50c1VwZGF0ZWQkVHlwZSIsImN1cnJlbnRHcmFudHMiLCJHb0F3YXkkVHlwZSIsInJlYXNvbiIsImV2ZW50cyIsIlZpc2liaWxpdHlTdGF0ZSIsIkRlYm91bmNlVHlwZSIsIlNpZ25hbFNlcnZlckNsaWVudCIsIl90cmFuc3BvcnQiLCJtZXRob2RzIiwic2V0UHVibGlzaGVyIiwiaW5wdXQiLCJtZXRob2QiLCJvcHQiLCJtZXJnZU9wdGlvbnMiLCJzZW5kQW5zd2VyIiwidXBkYXRlU3Vic2NyaXB0aW9ucyIsInVwZGF0ZU11dGVTdGF0ZXMiLCJzZW5kU3RhdHMiLCJkZWZhdWx0T3B0aW9ucyIsImJhc2VVcmwiLCJzZW5kSnNvbiIsInRpbWVvdXQiLCJqc29uT3B0aW9ucyIsImlnbm9yZVVua25vd25GaWVsZHMiLCJ3aXRoSGVhZGVycyIsImhlYWRlcnMiLCJpbnRlcmNlcHRVbmFyeSIsIm5leHQiLCJtZXRhIiwiY3JlYXRlU2lnbmFsQ2xpZW50IiwidHJhbnNwb3J0IiwiaXNSZWFjdE5hdGl2ZSIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJ0b0xvd2VyQ2FzZSIsImxvZ0xldmVscyIsInRyYWNlIiwiZGVidWciLCJpbmZvIiwid2FybiIsImxvZ2dlciQ0IiwibG9nVG9Db25zb2xlIiwibG9nTGV2ZWwiLCJhcmdzIiwibG9nTWV0aG9kIiwiY29uc29sZSIsImxvZyIsInNldExvZ2dlciIsImwiLCJsdmwiLCJzZXRMb2dMZXZlbCIsImdldExvZ2dlciIsIndpdGhUYWdzIiwibG9nZ2VyTWV0aG9kIiwidGFncyIsInJlc3VsdCIsImdldFByZWZlcnJlZENvZGVjcyIsInByZWZlcnJlZENvZGVjIiwiY29kZWNUb1JlbW92ZSIsImxvZ2dlciIsIlJUQ1J0cFNlbmRlciIsImNhcCIsImdldENhcGFiaWxpdGllcyIsIm1hdGNoZWQiLCJwYXJ0aWFsTWF0Y2hlZCIsInVubWF0Y2hlZCIsImNvZGVjcyIsImZvckVhY2giLCJjIiwibWltZVR5cGUiLCJzaG91bGRSZW1vdmVDb2RlYyIsIm1hdGNoZXNDb2RlYyIsInNkcEZtdHBMaW5lIiwiaW5jbHVkZXMiLCJnZXRHZW5lcmljU2RwIiwiZGlyZWN0aW9uIiwidGVtcFBjIiwiUlRDUGVlckNvbm5lY3Rpb24iLCJhZGRUcmFuc2NlaXZlciIsIm9mZmVyIiwiY3JlYXRlT2ZmZXIiLCJnZXRUcmFuc2NlaXZlcnMiLCJ0Iiwic3RvcCIsImNsb3NlIiwic2Z1RXZlbnRLaW5kcyIsImlzU2Z1RXZlbnQiLCJldmVudE5hbWUiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJEaXNwYXRjaGVyIiwic3Vic2NyaWJlcnMiLCJkaXNwYXRjaCIsImV2ZW50S2luZCIsInBheWxvYWQiLCJsaXN0ZW5lcnMiLCJmbiIsIm9uIiwiX2EiLCJvZmYiLCJvZmZBbGwiLCJJY2VUcmlja2xlQnVmZmVyIiwic3Vic2NyaWJlckNhbmRpZGF0ZXMiLCJwdWJsaXNoZXJDYW5kaWRhdGVzIiwiU1VCU0NSSUJFUiIsIlBVQkxJU0hFUl9VTlNQRUNJRklFRCIsImdldEljZUNhbmRpZGF0ZSIsImNhbmRpZGF0ZSIsInVzZXJuYW1lRnJhZ21lbnQiLCJzcGxpdHRlZENhbmRpZGF0ZSIsInNwbGl0IiwidWZyYWdJbmRleCIsImZpbmRJbmRleCIsInMiLCJKU09OIiwic3RyaW5naWZ5IiwidG9KU09OIiwic2RrSW5mbyIsIm9zSW5mbyIsImRldmljZUluZm8iLCJ3ZWJSdGNJbmZvIiwic2V0U2RrSW5mbyIsImdldFNka0luZm8iLCJzZXRPU0luZm8iLCJnZXRPU0luZm8iLCJzZXREZXZpY2VJbmZvIiwiZ2V0RGV2aWNlSW5mbyIsImdldFdlYlJUQ0luZm8iLCJzZXRXZWJSVENJbmZvIiwiZ2V0Q2xpZW50RGV0YWlscyIsInVzZXJBZ2VudCIsImNwdSIsImdldFJlc3VsdCIsInZlbmRvciIsIm1vZGVsIiwiQm9vbGVhbiIsIkRFRkFVTFRfQklUUkFURSIsImRlZmF1bHRUYXJnZXRSZXNvbHV0aW9uIiwiZmluZE9wdGltYWxWaWRlb0xheWVycyIsInZpZGVvVHJhY2siLCJ0YXJnZXRSZXNvbHV0aW9uIiwib3B0aW1hbFZpZGVvTGF5ZXJzIiwic2V0dGluZ3MiLCJnZXRTZXR0aW5ncyIsInciLCJoIiwiaXNSTklvcyIsImdldENvbXB1dGVkTWF4Qml0cmF0ZSIsImRvd25zY2FsZUZhY3RvciIsInVuc2hpZnQiLCJyb3VuZCIsInEiLCJ3aXRoU2ltdWxjYXN0Q29uc3RyYWludHMiLCJjdXJyZW50V2lkdGgiLCJjdXJyZW50SGVpZ2h0IiwidGFyZ2V0V2lkdGgiLCJ0YXJnZXRIZWlnaHQiLCJjdXJyZW50UGl4ZWxzIiwidGFyZ2V0UGl4ZWxzIiwicmVkdWN0aW9uRmFjdG9yIiwic2l6ZSIsIm1heCIsImxheWVyIiwicmlkTWFwcGluZyIsImluZGV4IiwiZmluZE9wdGltYWxTY3JlZW5TaGFyaW5nTGF5ZXJzIiwicHJlZmVyZW5jZXMiLCJ0cmFja1R5cGVUb1BhcnRpY2lwYW50U3RyZWFtS2V5IiwiU0NSRUVOX1NIQVJFIiwiU0NSRUVOX1NIQVJFX0FVRElPIiwiVklERU8iLCJBVURJTyIsIlVOU1BFQ0lGSUVEIiwiZXhoYXVzdGl2ZVRyYWNrVHlwZUNoZWNrIiwibXV0ZVR5cGVUb1RyYWNrVHlwZSIsIm11dGVUeXBlIiwiZXhoYXVzdGl2ZU11dGVUeXBlQ2hlY2siLCJpc0Z1bmN0aW9uUGF0Y2giLCJ1cGRhdGUiLCJnZXRDdXJyZW50VmFsdWUiLCJvYnNlcnZhYmxlJCIsImVyciIsInN1YnNjcmliZSIsInVuc3Vic2NyaWJlIiwic2V0Q3VycmVudFZhbHVlIiwic3ViamVjdCIsImNyZWF0ZVN1YnNjcmlwdGlvbiIsIm9ic2VydmFibGUiLCJoYW5kbGVyIiwic3Vic2NyaXB0aW9uIiwicnhVdGlscyIsImNvbWJpbmVDb21wYXJhdG9ycyIsImNvbXBhcmF0b3JzIiwiYSIsImIiLCJjb21wYXJhdG9yIiwiZGVzY2VuZGluZyIsImNvbmRpdGlvbmFsIiwicHJlZGljYXRlIiwibm9vcENvbXBhcmF0b3IiLCJkb21pbmFudFNwZWFrZXIiLCJzcGVha2luZyIsInNjcmVlblNoYXJpbmciLCJoYXNTY3JlZW5TaGFyZSIsInB1Ymxpc2hpbmdWaWRlbyIsImhhc1ZpZGVvIiwicHVibGlzaGluZ0F1ZGlvIiwiaGFzQXVkaW8iLCJwaW5uZWQiLCJwaW4iLCJpc0xvY2FsUGluIiwicGlubmVkQXQiLCJyZWFjdGlvblR5cGUiLCJyZWFjdGlvbiIsInJvbGUiLCJoYXNBbnlSb2xlIiwicCIsInNvbWUiLCJyIiwiaWZJbnZpc2libGVCeSIsInZpZXdwb3J0VmlzaWJpbGl0eVN0YXRlIiwiSU5WSVNJQkxFIiwiaWZJbnZpc2libGVPclVua25vd25CeSIsIlVOS05PV04iLCJkZWZhdWx0U29ydFByZXNldCIsInNwZWFrZXJMYXlvdXRTb3J0UHJlc2V0IiwicGFnaW5hdGVkTGF5b3V0U29ydFByZXNldCIsImxpdmVzdHJlYW1PckF1ZGlvUm9vbVNvcnRQcmVzZXQiLCJDYWxsaW5nU3RhdGUiLCJkZWZhdWx0RWdyZXNzIiwiYnJvYWRjYXN0aW5nIiwiaGxzIiwicGxheWxpc3RfdXJsIiwicnRtcHMiLCJiYWNrc3RhZ2VTdWJqZWN0IiwiYmxvY2tlZFVzZXJJZHNTdWJqZWN0IiwiY3JlYXRlZEF0U3ViamVjdCIsImVuZGVkQXRTdWJqZWN0Iiwic3RhcnRzQXRTdWJqZWN0IiwidXBkYXRlZEF0U3ViamVjdCIsImNyZWF0ZWRCeVN1YmplY3QiLCJjdXN0b21TdWJqZWN0IiwiZWdyZXNzU3ViamVjdCIsImluZ3Jlc3NTdWJqZWN0IiwicmVjb3JkaW5nU3ViamVjdCIsInNlc3Npb25TdWJqZWN0Iiwic2V0dGluZ3NTdWJqZWN0IiwidHJhbnNjcmliaW5nU3ViamVjdCIsImVuZGVkQnlTdWJqZWN0IiwidGh1bWJuYWlsc1N1YmplY3QiLCJtZW1iZXJzU3ViamVjdCIsIm93bkNhcGFiaWxpdGllc1N1YmplY3QiLCJjYWxsaW5nU3RhdGVTdWJqZWN0Iiwic3RhcnRlZEF0U3ViamVjdCIsInBhcnRpY2lwYW50Q291bnRTdWJqZWN0IiwiYW5vbnltb3VzUGFydGljaXBhbnRDb3VudFN1YmplY3QiLCJwYXJ0aWNpcGFudHNTdWJqZWN0IiwiY2FsbFN0YXRzUmVwb3J0U3ViamVjdCIsInNvcnRQYXJ0aWNpcGFudHNCeSIsInNldFNvcnRQYXJ0aWNpcGFudHNCeSIsInBzIiwic2V0UGFydGljaXBhbnRDb3VudCIsImNvdW50Iiwic2V0U3RhcnRlZEF0Iiwic2V0QW5vbnltb3VzUGFydGljaXBhbnRDb3VudCIsInNldFBhcnRpY2lwYW50cyIsInNldENhbGxpbmdTdGF0ZSIsInN0YXRlIiwic2V0Q2FsbFN0YXRzUmVwb3J0IiwicmVwb3J0Iiwic2V0TWVtYmVycyIsIm1lbWJlcnMiLCJzZXRPd25DYXBhYmlsaXRpZXMiLCJjYXBhYmlsaXRpZXMiLCJmaW5kUGFydGljaXBhbnRCeVNlc3Npb25JZCIsImdldFBhcnRpY2lwYW50TG9va3VwQnlTZXNzaW9uSWQiLCJyZWR1Y2UiLCJsb29rdXBUYWJsZSIsInVwZGF0ZVBhcnRpY2lwYW50IiwidGhlUGF0Y2giLCJ1cGRhdGVkUGFydGljaXBhbnQiLCJ1cGRhdGVPckFkZFBhcnRpY2lwYW50IiwidXBkYXRlUGFydGljaXBhbnRzIiwidXBkYXRlRnJvbUV2ZW50IiwiZXZlbnQiLCJldmVudEhhbmRsZXJzIiwic2V0U2VydmVyU2lkZVBpbnMiLCJwaW5zTG9va3VwIiwibG9va3VwIiwic2VydmVyU2lkZVBpbm5lZEF0IiwidXBkYXRlRnJvbUNhbGxSZXNwb25zZSIsImJhY2tzdGFnZSIsImJsb2NrZWRfdXNlcl9pZHMiLCJjcmVhdGVkX2F0IiwidXBkYXRlZF9hdCIsInN0YXJ0c19hdCIsImVuZGVkX2F0IiwiY3JlYXRlZF9ieSIsImVncmVzcyIsImluZ3Jlc3MiLCJyZWNvcmRpbmciLCJzZXNzaW9uIiwidHJhbnNjcmliaW5nIiwidGh1bWJuYWlscyIsInVwZGF0ZUZyb21NZW1iZXJSZW1vdmVkIiwibSIsImluZGV4T2YiLCJ1c2VyX2lkIiwidXBkYXRlRnJvbU1lbWJlckFkZGVkIiwidXBkYXRlRnJvbUhMU0Jyb2FkY2FzdFN0b3BwZWQiLCJ1cGRhdGVGcm9tSExTQnJvYWRjYXN0aW5nRmFpbGVkIiwidXBkYXRlRnJvbUhMU0Jyb2FkY2FzdFN0YXJ0ZWQiLCJobHNfcGxheWxpc3RfdXJsIiwidXBkYXRlRnJvbVNlc3Npb25QYXJ0aWNpcGFudExlZnQiLCJwYXJ0aWNpcGFudHNfY291bnRfYnlfcm9sZSIsInVzZXIiLCJ1c2VyX3Nlc3Npb25faWQiLCJ1cGRhdGVGcm9tU2Vzc2lvblBhcnRpY2lwYW50Sm9pbmVkIiwic2hvdWxkSW5zZXJ0UGFydGljaXBhbnQiLCJ1cGRhdGVkUGFydGljaXBhbnRzIiwiaW5jcmVtZW50IiwidXBkYXRlTWVtYmVycyIsIm1lbWJlciIsIm1lbWJlclVwZGF0ZSIsInVwZGF0ZVBhcnRpY2lwYW50UmVhY3Rpb24iLCJlbW9qaV9jb2RlIiwidW5ibG9ja1VzZXIiLCJjdXJyZW50IiwiYmxvY2tVc2VyIiwidXBkYXRlT3duQ2FwYWJpbGl0aWVzIiwibG9jYWxQYXJ0aWNpcGFudCIsIm93bl9jYXBhYmlsaXRpZXMiLCJwYXJ0aWNpcGFudHMkIiwiYXNPYnNlcnZhYmxlIiwicGlwZSIsInNvcnQiLCJidWZmZXJTaXplIiwicmVmQ291bnQiLCJsb2NhbFBhcnRpY2lwYW50JCIsImlzTG9jYWxQYXJ0aWNpcGFudCIsInJlbW90ZVBhcnRpY2lwYW50cyQiLCJwaW5uZWRQYXJ0aWNpcGFudHMkIiwiZG9taW5hbnRTcGVha2VyJCIsImhhc09uZ29pbmdTY3JlZW5TaGFyZSQiLCJzdGFydGVkQXQkIiwicGFydGljaXBhbnRDb3VudCQiLCJhbm9ueW1vdXNQYXJ0aWNpcGFudENvdW50JCIsImNhbGxTdGF0c1JlcG9ydCQiLCJtZW1iZXJzJCIsIm93bkNhcGFiaWxpdGllcyQiLCJjYWxsaW5nU3RhdGUkIiwiYmFja3N0YWdlJCIsImJsb2NrZWRVc2VySWRzJCIsImNyZWF0ZWRBdCQiLCJlbmRlZEF0JCIsInN0YXJ0c0F0JCIsInVwZGF0ZWRBdCQiLCJjcmVhdGVkQnkkIiwiY3VzdG9tJCIsImVncmVzcyQiLCJpbmdyZXNzJCIsInJlY29yZGluZyQiLCJzZXNzaW9uJCIsInNldHRpbmdzJCIsInRyYW5zY3JpYmluZyQiLCJlbmRlZEJ5JCIsInRodW1ibmFpbHMkIiwiYW5vbnltb3VzUGFydGljaXBhbnRDb3VudCIsInJlbW90ZVBhcnRpY2lwYW50cyIsInBpbm5lZFBhcnRpY2lwYW50cyIsImhhc09uZ29pbmdTY3JlZW5TaGFyZSIsImNhbGxpbmdTdGF0ZSIsImNhbGxTdGF0c1JlcG9ydCIsIm93bkNhcGFiaWxpdGllcyIsImJsb2NrZWRVc2VySWRzIiwiZW5kZWRBdCIsInN0YXJ0c0F0IiwiY3JlYXRlZEJ5IiwiZW5kZWRCeSIsIlN0cmVhbVZpZGVvV3JpdGVhYmxlU3RhdGVTdG9yZSIsImNvbm5lY3RlZFVzZXJTdWJqZWN0IiwiY2FsbHNTdWJqZWN0Iiwic2V0Q29ubmVjdGVkVXNlciIsInNldENhbGxzIiwiY2FsbHMiLCJyZWdpc3RlckNhbGwiLCJjaWQiLCJ1bnJlZ2lzdGVyQ2FsbCIsImZpbmRDYWxsIiwiTEVGVCIsImxlYXZlIiwiY2F0Y2giLCJjb25uZWN0ZWRVc2VyIiwiU3RyZWFtVmlkZW9SZWFkT25seVN0YXRlU3RvcmUiLCJzdG9yZSIsImNvbm5lY3RlZFVzZXIkIiwiY2FsbHMkIiwiZ2V0UnRwTWFwIiwibGluZSIsInJ0cFJlZ2V4IiwicnRwTWF0Y2giLCJleGVjIiwib3JpZ2luYWwiLCJnZXRGbXRwIiwiZm10cFJlZ2V4IiwiZm10cE1hdGNoIiwiY29uZmlnIiwiZ2V0TWVkaWEiLCJtZWRpYVR5cGUiLCJyZWdleCIsIlJlZ0V4cCIsIm1lZGlhV2l0aFBvcnRzIiwiY29kZWNPcmRlciIsImdldE1lZGlhU2VjdGlvbiIsIm1lZGlhIiwicnRwTWFwIiwiZm10cCIsImlzVGhlUmVxdWlyZWRNZWRpYVNlY3Rpb24iLCJpc1ZhbGlkTGluZSIsInRlc3QiLCJfbWVkaWEiLCJydHBNYXBMaW5lIiwiZ2V0T3B1c0ZtdHAiLCJzZWN0aW9uIiwiY29kZWNJZCIsInRvZ2dsZUR0eCIsImVuYWJsZSIsIm9wdXNGbXRwIiwibWF0Y2hEdHgiLCJyZXF1aXJlZER0eENvbmZpZyIsIm5ld0ZtdHAiLCJlbmFibGVIaWdoUXVhbGl0eUF1ZGlvIiwidHJhY2tNaWQiLCJtaW4iLCJwYXJzZWRTZHAiLCJhdWRpb01lZGlhIiwiU3RyaW5nIiwib3B1c1J0cCIsInJ0cCIsIndyaXRlIiwibG9nZ2VyJDMiLCJQdWJsaXNoZXIiLCJjb25uZWN0aW9uQ29uZmlndXJhdGlvbiIsInBjIiwiZ2V0Q29uZmlndXJhdGlvbiIsIl9jb25uZWN0aW9uQ29uZmlndXJhdGlvbiIsImNvbm5lY3Rpb25Db25maWciLCJzZnVDbGllbnQiLCJkaXNwYXRjaGVyIiwiaXNEdHhFbmFibGVkIiwiaXNSZWRFbmFibGVkIiwiaWNlUmVzdGFydERlbGF5IiwidHJhbnNjZWl2ZXJSZWdpc3RyeSIsInB1Ymxpc2hPcHRpb25zUGVyVHJhY2tUeXBlIiwiTWFwIiwidHJhbnNjZWl2ZXJJbml0T3JkZXIiLCJ0cmFja0tpbmRNYXBwaW5nIiwidHJhY2tMYXllcnNDYWNoZSIsImlzSWNlUmVzdGFydGluZyIsImNyZWF0ZVBlZXJDb25uZWN0aW9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uSWNlQ2FuZGlkYXRlIiwib25OZWdvdGlhdGlvbk5lZWRlZCIsIm9uSWNlQ2FuZGlkYXRlRXJyb3IiLCJvbkljZUNvbm5lY3Rpb25TdGF0ZUNoYW5nZSIsIm9uSWNlR2F0aGVyaW5nU3RhdGVDaGFuZ2UiLCJvblNpZ25hbGluZ1N0YXRlQ2hhbmdlIiwic3RvcFRyYWNrcyIsInN0b3BQdWJsaXNoaW5nIiwiY2xlYXJUaW1lb3V0IiwiaWNlUmVzdGFydFRpbWVvdXQiLCJ1bnN1YnNjcmliZU9uSWNlUmVzdGFydCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJwdWJsaXNoU3RyZWFtIiwibWVkaWFTdHJlYW0iLCJ0cmFjayIsIm9wdHMiLCJyZWFkeVN0YXRlIiwidHJhbnNjZWl2ZXIiLCJzZW5kZXIiLCJoYW5kbGVUcmFja0VuZGVkIiwibm90aWZ5VHJhY2tNdXRlU3RhdGVDaGFuZ2VkIiwidmlkZW8iLCJ0YXJnZXRfcmVzb2x1dGlvbiIsInZpZGVvRW5jb2RpbmdzIiwic2NyZWVuU2hhcmVTZXR0aW5ncyIsIm9zTmFtZSIsImNvZGVjUHJlZmVyZW5jZXMiLCJnZXRDb2RlY1ByZWZlcmVuY2VzIiwiZW5hYmxlZCIsInN0cmVhbXMiLCJzZW5kRW5jb2RpbmdzIiwic2V0Iiwic2V0Q29kZWNQcmVmZXJlbmNlcyIsInByZXZpb3VzVHJhY2siLCJyZXBsYWNlVHJhY2siLCJ1bnB1Ymxpc2hTdHJlYW0iLCJzdG9wVHJhY2siLCJpc1B1Ymxpc2hpbmciLCJ0cmFuc2NlaXZlckZvclRyYWNrVHlwZSIsImlzTGl2ZSIsImlzTXV0ZWQiLCJ1cGRhdGVNdXRlU3RhdGUiLCJhdWRpb09yVmlkZW9PclNjcmVlblNoYXJlU3RyZWFtIiwiZ2V0U2VuZGVycyIsInNpZ25hbGluZ1N0YXRlIiwicmVtb3ZlVHJhY2siLCJ1cGRhdGVWaWRlb1B1Ymxpc2hRdWFsaXR5IiwiZW5hYmxlZExheWVycyIsInZpZGVvU2VuZGVyIiwicGFyYW1zIiwiZ2V0UGFyYW1ldGVycyIsImVuY29kaW5ncyIsImNoYW5nZWQiLCJlbmFibGVkUmlkcyIsImx5IiwiZW5jIiwic2hvdWxkRW5hYmxlIiwidmxzIiwiYWN0aXZlTGF5ZXJzIiwic2V0UGFyYW1ldGVycyIsImdldFN0YXRzIiwic2VsZWN0b3IiLCJkZWZhdWx0QXVkaW9Db2RlYyIsInNldFNmdUNsaWVudCIsIm1pZ3JhdGVUbyIsInNldENvbmZpZ3VyYXRpb24iLCJzaG91bGRSZXN0YXJ0SWNlIiwiaWNlQ29ubmVjdGlvblN0YXRlIiwibmVnb3RpYXRlIiwicmVzdGFydEljZSIsIm11bmdlQ29kZWNzIiwiZXh0cmFjdE1pZCIsInRyYWNrSW5mb3MiLCJnZXRDdXJyZW50VHJhY2tJbmZvcyIsInNldExvY2FsRGVzY3JpcHRpb24iLCJyZXNwb25zZSIsInNldFJlbW90ZURlc2NyaXB0aW9uIiwiaWNlVHJpY2tsZUJ1ZmZlciIsImFkZEljZUNhbmRpZGF0ZSIsIm1zaWQiLCJoZXVyaXN0aWNNaWQiLCJsb2NhbERlc2NyaXB0aW9uIiwib3B0aW1hbExheWVycyIsInB1Ymxpc2hPcHRzIiwiZ2V0Iiwib3B0aW1hbExheWVyIiwicmlkVG9WaWRlb1F1YWxpdHkiLCJpc0F1ZGlvVHJhY2siLCJ0cmFja1NldHRpbmdzIiwiaXNTdGVyZW8iLCJlcnJvck1lc3NhZ2UiLCJSVENQZWVyQ29ubmVjdGlvbkljZUVycm9yRXZlbnQiLCJlcnJvckNvZGUiLCJlcnJvclRleHQiLCJpY2VTdGF0ZSIsImhhc05ldHdvcmtDb25uZWN0aW9uIiwiT0ZGTElORSIsInNldFRpbWVvdXQiLCJpY2VHYXRoZXJpbmdTdGF0ZSIsIkxPV19VTlNQRUNJRklFRCIsIk1JRCIsIkhJR0giLCJsb2dnZXIkMiIsIlN1YnNjcmliZXIiLCJoYW5kbGVPblRyYWNrIiwidW5yZWdpc3Rlck9uU3Vic2NyaWJlck9mZmVyIiwidW5yZWdpc3Rlck9uSWNlUmVzdGFydCIsInByZXZpb3VzUEMiLCJ0cmFja0lkc1RvTWlncmF0ZSIsIlNldCIsImdldFJlY2VpdmVycyIsImFkZCIsIm1pZ3JhdGlvblRpbWVvdXRJZCIsImNsZWFudXBNaWdyYXRpb24iLCJoYW5kbGVUcmFja01pZ3JhdGlvbiIsImRlbGV0ZSIsImhhbmRsZUNvbm5lY3Rpb25TdGF0ZUNoYW5nZSIsImNvbm5lY3Rpb25TdGF0ZSIsInByZXZpb3VzSXNJY2VSZXN0YXJ0aW5nIiwicHJpbWFyeVN0cmVhbSIsInBhcnRpY2lwYW50VG9VcGRhdGUiLCJzdHJlYW1LaW5kUHJvcCIsIlRSQUNLX1RZUEVfQVVESU8iLCJUUkFDS19UWVBFX1ZJREVPIiwiVFJBQ0tfVFlQRV9TQ1JFRU5fU0hBUkUiLCJUUkFDS19UWVBFX1NDUkVFTl9TSEFSRV9BVURJTyIsInByZXZpb3VzU3RyZWFtIiwiZ2V0VHJhY2tzIiwiYW5zd2VyIiwiY3JlYXRlQW5zd2VyIiwiY3JlYXRlV2ViU29ja2V0U2lnbmFsQ2hhbm5lbCIsImVuZHBvaW50Iiwib25NZXNzYWdlIiwid3MiLCJiaW5hcnlUeXBlIiwiZGF0YSIsIkFycmF5QnVmZmVyIiwiZnJvbUJpbmFyeSIsIlVpbnQ4QXJyYXkiLCJmcm9tSnNvblN0cmluZyIsInNsZWVwIiwiUHJvbWlzZSIsImlzRnVuY3Rpb24iLCJGdW5jdGlvbiIsIktub3duQ29kZXMiLCJUT0tFTl9FWFBJUkVEIiwiV1NfQ0xPU0VEX1NVQ0NFU1MiLCJXU19DTE9TRURfQUJSVVBUTFkiLCJXU19QT0xJQ1lfVklPTEFUSU9OIiwicmV0cnlJbnRlcnZhbCIsIm51bWJlck9mRmFpbHVyZXMiLCJyYW5kb20iLCJyYW5kb21JZCIsImdlbmVyYXRlVVVJRHY0IiwiaGV4IiwiYnl0ZXMiLCJwYWRTdGFydCIsImdldFJhbmRvbUJ5dGVzIiwic3ViYXJyYXkiLCJnZXRSYW5kb21WYWx1ZXNXaXRoTWF0aFJhbmRvbSIsInBvdyIsImJ5dGVMZW5ndGgiLCJnZXRSYW5kb21WYWx1ZXMiLCJjcnlwdG8iLCJiaW5kIiwibXNDcnlwdG8iLCJjb252ZXJ0RXJyb3JUb0pzb24iLCJqc29uT2JqIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl8iLCJpc09ubGluZSIsIm5hdiIsIndpbmRvdyIsIm9uTGluZSIsImFkZENvbm5lY3Rpb25FdmVudExpc3RlbmVycyIsImNiIiwicmVtb3ZlQ29ubmVjdGlvbkV2ZW50TGlzdGVuZXJzIiwiU3RyZWFtU2Z1Q2xpZW50Iiwic2Z1U2VydmVyIiwiaXNNaWdyYXRpbmdBd2F5IiwiaXNGYXN0UmVjb25uZWN0aW5nIiwicGluZ0ludGVydmFsSW5NcyIsInVuaGVhbHRoeVRpbWVvdXRJbk1zIiwic2lnbmFsV3MiLCJDTE9TRUQiLCJ1bnN1YnNjcmliZUljZVRyaWNrbGUiLCJjbGVhckludGVydmFsIiwia2VlcEFsaXZlSW50ZXJ2YWwiLCJjb25uZWN0aW9uQ2hlY2tUaW1lb3V0IiwicmV0cnlhYmxlIiwicnBjIiwic3RhdHMiLCJzZW5kIiwic2lnbmFsUmVhZHkiLCJ0aGVuIiwic2lnbmFsIiwiT1BFTiIsImVkZ2VOYW1lIiwidG9CaW5hcnkiLCJrZWVwQWxpdmUiLCJzZXRJbnRlcnZhbCIsInNjaGVkdWxlQ29ubmVjdGlvbkNoZWNrIiwibGFzdE1lc3NhZ2VUaW1lc3RhbXAiLCJ0aW1lU2luY2VMYXN0TWVzc2FnZSIsIkVSUk9SX0NPTk5FQ1RJT05fVU5IRUFMVEhZIiwiZWRnZV9uYW1lIiwibG9nSW50ZXJjZXB0b3IiLCJ1cmwiLCJpbnRlcmNlcHRvcnMiLCJBdXRob3JpemF0aW9uIiwid3NfZW5kcG9pbnQiLCJyZXNvbHZlIiwib25PcGVuIiwiTk9STUFMX0NMT1NVUkUiLCJFUlJPUl9DT05ORUNUSU9OX0JST0tFTiIsIk1BWF9SRVRSSUVTIiwicmV0cnlBdHRlbXB0IiwicnBjQ2FsbFJlc3VsdCIsIndhdGNoQ2FsbEFjY2VwdGVkIiwib25DYWxsQWNjZXB0ZWQiLCJjdXJyZW50VXNlcklkIiwiUklOR0lORyIsIndhdGNoQ2FsbFJlamVjdGVkIiwib25DYWxsUmVqZWN0ZWQiLCJldmVudENhbGwiLCJjYWxsU2Vzc2lvbiIsInJlamVjdGVkQnkiLCJyZWplY3RlZF9ieSIsImlzQ3JlYXRlZEJ5TWUiLCJldmVyeW9uZUVsc2VSZWplY3RlZCIsImV2ZXJ5Iiwid2F0Y2hDYWxsRW5kZWQiLCJvbkNhbGxFbmRlZCIsIkpPSU5FRCIsIkpPSU5JTkciLCJ3YXRjaENhbGxHcmFudHNVcGRhdGVkIiwib25DYWxsR3JhbnRzVXBkYXRlZCIsIm5leHRDYXBhYmlsaXRpZXMiLCJjYXBhYmlsaXR5IiwibG9nZ2VyJDEiLCJ3YXRjaENoYW5nZVB1Ymxpc2hRdWFsaXR5IiwidXBkYXRlUHVibGlzaFF1YWxpdHkiLCJ3YXRjaENvbm5lY3Rpb25RdWFsaXR5Q2hhbmdlZCIsInBhdGNoZXMiLCJ3YXRjaFBhcnRpY2lwYW50Q291bnRDaGFuZ2VkIiwid2F0Y2hMaXZlRW5kZWQiLCJMSVZFX0VOREVEIiwicGVybWlzc2lvbnNDb250ZXh0IiwiaGFzUGVybWlzc2lvbiIsIndhdGNoU2Z1RXJyb3JSZXBvcnRzIiwid2F0Y2hQaW5zVXBkYXRlZCIsIm9uUGluc1VwZGF0ZWQiLCJoYW5kbGVSZW1vdGVTb2Z0TXV0ZSIsIk1PREVSQVRJT04iLCJjYW1lcmEiLCJkaXNhYmxlIiwibWljcm9waG9uZSIsInB1Ymxpc2hlciIsInN0b3BQdWJsaXNoIiwid2F0Y2hQYXJ0aWNpcGFudEpvaW5lZCIsIm9uUGFydGljaXBhbnRKb2luZWQiLCJhc3NpZ24iLCJzY3JlZW5TaGFyZVRyYWNrIiwid2F0Y2hQYXJ0aWNpcGFudExlZnQiLCJvblBhcnRpY2lwYW50TGVmdCIsIndhdGNoVHJhY2tQdWJsaXNoZWQiLCJvblRyYWNrUHVibGlzaGVkIiwidW5pcXVlIiwid2F0Y2hUcmFja1VucHVibGlzaGVkIiwib25UcmFja1VucHVibGlzaGVkIiwiYXJyIiwid2F0Y2hEb21pbmFudFNwZWFrZXJDaGFuZ2VkIiwid2F0Y2hBdWRpb0xldmVsQ2hhbmdlZCIsInJlZ2lzdGVyRXZlbnRIYW5kbGVycyIsInJpbmdpbmciLCJyZWdpc3RlclJpbmdpbmdDYWxsRXZlbnRIYW5kbGVycyIsImNvb3JkaW5hdG9yUmluZ0V2ZW50cyIsImh0dHBDbGllbnQiLCJjcmVkZW50aWFscyIsInN0YXRzX29wdGlvbnMiLCJkb0pvaW4iLCJ0b1J0Y0NvbmZpZ3VyYXRpb24iLCJpY2Vfc2VydmVycyIsInNlcnZlciIsIm1ldGFkYXRhIiwic3RhdHNPcHRpb25zIiwibG9jYXRpb24iLCJnZXRMb2NhdGlvbkhpbnQiLCJyZXF1ZXN0IiwicG9zdCIsInJ0Y0NvbmZpZyIsImljZVNlcnZlcnMiLCJpY2UiLCJ1cmxzIiwidXNlcm5hbWUiLCJjcmVkZW50aWFsIiwicGFzc3dvcmQiLCJmbGF0dGVuJDEiLCJjcmVhdGVTdGF0c1JlcG9ydGVyIiwic3Vic2NyaWJlciIsInBvbGxpbmdJbnRlcnZhbEluTXMiLCJnZXRSYXdTdGF0c0ZvclRyYWNrIiwiZ2V0U3RhdHNGb3JTdHJlYW0iLCJzdGF0c0ZvclN0cmVhbSIsInRyYW5zZm9ybSIsInRyYWNrS2luZCIsInN0YXJ0UmVwb3J0aW5nU3RhdHNGb3IiLCJzZXNzaW9uSWRzVG9UcmFjayIsInJ1biIsInN0b3BSZXBvcnRpbmdTdGF0c0ZvciIsInBhcnRpY2lwYW50U3RhdHMiLCJzZXNzaW9uSWRzIiwiaGFzIiwibWVyZ2VkU3RyZWFtIiwiTWVkaWFTdHJlYW0iLCJ2aWRlb1N0cmVhbSIsImdldFZpZGVvVHJhY2tzIiwiYXVkaW9TdHJlYW0iLCJnZXRBdWRpb1RyYWNrcyIsImFsbCIsImFnZ3JlZ2F0ZSIsInN1YnNjcmliZXJSYXdTdGF0cyIsInB1Ymxpc2hlclJhd1N0YXRzIiwiZGF0YWNlbnRlciIsInRpbWVzdGFtcCIsInRpbWVvdXRJZCIsImxvb3AiLCJzdGF0IiwicnRjU3RyZWFtU3RhdHMiLCJ0cmFuc3BvcnRJZCIsInJvdW5kVHJpcFRpbWUiLCJkdGxzU3RhdGUiLCJjYW5kaWRhdGVQYWlyIiwic2VsZWN0ZWRDYW5kaWRhdGVQYWlySWQiLCJjdXJyZW50Um91bmRUcmlwVGltZSIsImJ5dGVzU2VudCIsImJ5dGVzUmVjZWl2ZWQiLCJmcmFtZUhlaWdodCIsImZyYW1lV2lkdGgiLCJmcmFtZXNQZXJTZWNvbmQiLCJqaXR0ZXIiLCJxdWFsaXR5TGltaXRhdGlvblJlYXNvbiIsInNzcmMiLCJyYXdTdGF0cyIsImFnZ3JlZ2F0ZWRTdGF0cyIsInJhd1JlcG9ydCIsInRvdGFsQnl0ZXNTZW50IiwidG90YWxCeXRlc1JlY2VpdmVkIiwiYXZlcmFnZUppdHRlckluTXMiLCJhdmVyYWdlUm91bmRUcmlwVGltZUluTXMiLCJxdWFsaXR5TGltaXRhdGlvblJlYXNvbnMiLCJoaWdoZXN0RnJhbWVXaWR0aCIsImhpZ2hlc3RGcmFtZUhlaWdodCIsImhpZ2hlc3RGcmFtZXNQZXJTZWNvbmQiLCJtYXhBcmVhIiwiYXJlYSIsImFjYyIsInN0cmVhbSIsInN0cmVhbUFyZWEiLCJTZnVTdGF0c1JlcG9ydGVyIiwic2RrTmFtZSIsIndlYlJUQ1ZlcnNpb24iLCJzdGFydCIsInJlcG9ydGluZ19pbnRlcnZhbF9tcyIsImludGVydmFsSWQiLCJ3ZWJSVENJbmZvIiwiUkVBQ1QiLCJSRUFDVF9OQVRJVkUiLCJERUZBVUxUX1RIUkVTSE9MRCIsIlZpZXdwb3J0VHJhY2tlciIsImVsZW1lbnRIYW5kbGVyTWFwIiwib2JzZXJ2ZXIiLCJxdWV1ZVNldCIsInNldFZpZXdwb3J0Iiwidmlld3BvcnRFbGVtZW50IiwiY2xlYW51cCIsImRpc2Nvbm5lY3QiLCJjbGVhciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiZW50cnkiLCJyb290IiwidGhyZXNob2xkIiwicXVldWVFbGVtZW50IiwicXVldWVIYW5kbGVyIiwiY29udGFpbnMiLCJvYnNlcnZlIiwiZWxlbWVudCIsInF1ZXVlSXRlbSIsInVub2JzZXJ2ZSIsImlzU2FmYXJpIiwiaXNGaXJlZm94IiwiaXNDaHJvbWUiLCJicm93c2VycyIsIkRFRkFVTFRfVklFV1BPUlRfVklTSUJJTElUWV9TVEFURSIsIkR5bmFzY2FsZU1hbmFnZXIiLCJ2aWV3cG9ydFRyYWNrZXIiLCJ0cmFja0VsZW1lbnRWaXNpYmlsaXR5IiwicHJldmlvdXNWaXNpYmlsaXR5U3RhdGUiLCJpc1Zpc2libGUiLCJpc0ludGVyc2VjdGluZyIsImRvY3VtZW50IiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJWSVNJQkxFIiwiYmluZFZpZGVvRWxlbWVudCIsInZpZGVvRWxlbWVudCIsImJvdW5kUGFydGljaXBhbnQiLCJyZXF1ZXN0VHJhY2tXaXRoRGltZW5zaW9ucyIsImRlYm91bmNlVHlwZSIsInVwZGF0ZVN1YnNjcmlwdGlvbnNQYXJ0aWFsIiwicGFydGljaXBhbnQkIiwidmlld3BvcnRWaXNpYmlsaXR5U3RhdGVTdWJzY3JpcHRpb24iLCJuZXh0Vmlld3BvcnRWaXNpYmlsaXR5U3RhdGUiLCJNRURJVU0iLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImxhc3REaW1lbnNpb25zIiwicmVzaXplT2JzZXJ2ZXIiLCJSZXNpemVPYnNlcnZlciIsImN1cnJlbnREaW1lbnNpb25zIiwiU0xPVyIsInB1Ymxpc2hlZFRyYWNrc1N1YnNjcmlwdGlvbiIsIkZBU1QiLCJhdXRvcGxheSIsInBsYXlzSW5saW5lIiwic3RyZWFtU3Vic2NyaXB0aW9uIiwic291cmNlIiwic2NyZWVuU2hhcmVTdHJlYW0iLCJzcmNPYmplY3QiLCJwbGF5IiwiYmluZEF1ZGlvRWxlbWVudCIsImF1ZGlvRWxlbWVudCIsInVwZGF0ZU1lZGlhU3RyZWFtU3Vic2NyaXB0aW9uIiwic2NyZWVuU2hhcmVBdWRpb1N0cmVhbSIsInNlbGVjdGVkRGV2aWNlIiwic3BlYWtlciIsInNldFNpbmtJZCIsInNpbmtJZFN1YnNjcmlwdGlvbiIsInNlbGVjdGVkRGV2aWNlJCIsImRldmljZUlkIiwidm9sdW1lU3Vic2NyaXB0aW9uIiwidm9sdW1lJCIsInZvbHVtZSIsImF1ZGlvVm9sdW1lIiwiUGVybWlzc2lvbnNDb250ZXh0IiwicGVybWlzc2lvbnMiLCJzZXRQZXJtaXNzaW9ucyIsInNldENhbGxTZXR0aW5ncyIsInBlcm1pc3Npb24iLCJjYW5SZXF1ZXN0IiwiYXVkaW8iLCJzY3JlZW5zaGFyaW5nIiwiYWNjZXNzX3JlcXVlc3RfZW5hYmxlZCIsIkNhbGxUeXBlIiwiQ2FsbFR5cGVzUmVnaXN0cnkiLCJjYWxsVHlwZXMiLCJyZWdpc3RlciIsImNhbGxUeXBlIiwidW5yZWdpc3RlciIsIkNhbGxUeXBlcyIsImdldERldmljZXMiLCJjb25zdHJhaW50cyIsImVudW1lcmF0ZSIsImRldmljZXMiLCJtZWRpYURldmljZXMiLCJlbnVtZXJhdGVEZXZpY2VzIiwibmVlZHNHZXRVc2VyTWVkaWEiLCJsYWJlbCIsImdldFVzZXJNZWRpYSIsImRpc3Bvc2VPZk1lZGlhU3RyZWFtIiwiY29tcGxldGUiLCJjaGVja0lmQXVkaW9PdXRwdXRDaGFuZ2VTdXBwb3J0ZWQiLCJjcmVhdGVFbGVtZW50IiwiYXVkaW9EZXZpY2VDb25zdHJhaW50cyIsImF1dG9HYWluQ29udHJvbCIsIm5vaXNlU3VwcHJlc3Npb24iLCJlY2hvQ2FuY2VsbGF0aW9uIiwidmlkZW9EZXZpY2VDb25zdHJhaW50cyIsIm1lbW9pemVkT2JzZXJ2YWJsZSIsIm1lbW9pemVkIiwiZ2V0RGV2aWNlQ2hhbmdlT2JzZXJ2ZXIiLCJub3RpZnkiLCJnZXRBdWRpb0RldmljZXNPYnNlcnZlciIsImdldEF1ZGlvT3V0cHV0RGV2aWNlc09ic2VydmVyIiwiZ2V0VmlkZW9EZXZpY2VzT2JzZXJ2ZXIiLCJnZXRBdWRpb0RldmljZXMiLCJnZXRWaWRlb0RldmljZXMiLCJnZXRBdWRpb091dHB1dERldmljZXMiLCJnZXRTdHJlYW0iLCJnZXRBdWRpb1N0cmVhbSIsInRyYWNrQ29uc3RyYWludHMiLCJnZXRWaWRlb1N0cmVhbSIsImdldFNjcmVlblNoYXJlU3RyZWFtIiwiZ2V0RGlzcGxheU1lZGlhIiwiaWRlYWwiLCJzeXN0ZW1BdWRpbyIsImRldmljZUlkcyQiLCJyZWxlYXNlIiwiSW5wdXRNZWRpYURldmljZU1hbmFnZXIiLCJzdG9wT25MZWF2ZSIsImlzVHJhY2tTdG9wcGVkRHVlVG9UcmFja0VuZCIsInJlbW92ZVN1YnNjcmlwdGlvbnMiLCJoYW5kbGVEaXNjb25uZWN0ZWRPclJlcGxhY2VkRGV2aWNlcyIsImxpc3REZXZpY2VzIiwic3RhdHVzIiwiZW5hYmxlUHJvbWlzZSIsInVubXV0ZVN0cmVhbSIsInNldFN0YXR1cyIsImZvcmNlU3RvcCIsInByZXZTdGF0dXMiLCJkaXNhYmxlTW9kZSIsImRpc2FibGVQcm9taXNlIiwibXV0ZVN0cmVhbSIsInJlc3VtZSIsInRvZ2dsZSIsInNldERlZmF1bHRDb25zdHJhaW50cyIsInNlbGVjdCIsInNldERldmljZSIsImFwcGx5U2V0dGluZ3NUb1N0cmVhbSIsInN0b3BQdWJsaXNoU3RyZWFtIiwibXV0ZUxvY2FsU3RyZWFtIiwiYWxsRW5kZWQiLCJzZXRNZWRpYVN0cmVhbSIsIm11dGVUcmFja3MiLCJ1bm11dGVUcmFja3MiLCJkZWZhdWx0Q29uc3RyYWludHMiLCJtZWRpYURldmljZUtpbmQiLCJwcmV2RGV2aWNlcyIsImN1cnJlbnREZXZpY2VzIiwiaXNEZXZpY2VEaXNjb25uZWN0ZWQiLCJpc0RldmljZVJlcGxhY2VkIiwiY3VycmVudERldmljZSIsImZpbmREZXZpY2VJbkxpc3QiLCJwcmV2RGV2aWNlIiwiZ3JvdXBJZCIsIklucHV0TWVkaWFEZXZpY2VNYW5hZ2VyU3RhdGUiLCJwZXJtaXNzaW9uTmFtZSIsInN0YXR1c1N1YmplY3QiLCJtZWRpYVN0cmVhbVN1YmplY3QiLCJzZWxlY3RlZERldmljZVN1YmplY3QiLCJkZWZhdWx0Q29uc3RyYWludHNTdWJqZWN0IiwibWVkaWFTdHJlYW0kIiwic3RhdHVzJCIsImRlZmF1bHRDb25zdHJhaW50cyQiLCJoYXNCcm93c2VyUGVybWlzc2lvbiQiLCJub3RpZnlHcmFudGVkIiwicGVybWlzc2lvbnNBUElBdmFpbGFibGUiLCJxdWVyeSIsInBlcm1pc3Npb25TdGF0ZSIsInBlcm1pc3Npb25TdGF0dXMiLCJnZXREZXZpY2VJZEZyb21TdHJlYW0iLCJDYW1lcmFNYW5hZ2VyU3RhdGUiLCJkaXJlY3Rpb25TdWJqZWN0IiwiZGlyZWN0aW9uJCIsInNldERpcmVjdGlvbiIsImZhY2luZ01vZGUiLCJDYW1lcmFNYW5hZ2VyIiwic2VsZWN0RGlyZWN0aW9uIiwiZmxpcCIsIm5ld0RpcmVjdGlvbiIsInNlbGVjdFRhcmdldFJlc29sdXRpb24iLCJyZXNvbHV0aW9uIiwic2V0UHJlZmVycmVkQ29kZWMiLCJwdWJsaXNoVmlkZW9TdHJlYW0iLCJNaWNyb3Bob25lTWFuYWdlclN0YXRlIiwic3BlYWtpbmdXaGlsZU11dGVkU3ViamVjdCIsInNwZWFraW5nV2hpbGVNdXRlZCQiLCJzcGVha2luZ1doaWxlTXV0ZWQiLCJzZXRTcGVha2luZ1doaWxlTXV0ZWQiLCJERVRFQ1RJT05fRlJFUVVFTkNZX0lOX01TIiwiQVVESU9fTEVWRUxfVEhSRVNIT0xEJDEiLCJGRlRfU0laRSIsImNyZWF0ZVNvdW5kRGV0ZWN0b3IiLCJvblNvdW5kRGV0ZWN0ZWRTdGF0ZUNoYW5nZWQiLCJkZXRlY3Rpb25GcmVxdWVuY3lJbk1zIiwiYXVkaW9MZXZlbFRocmVzaG9sZCIsImZmdFNpemUiLCJkZXN0cm95U3RyZWFtT25TdG9wIiwiYXVkaW9Db250ZXh0IiwiQXVkaW9Db250ZXh0IiwiYW5hbHlzZXIiLCJjcmVhdGVBbmFseXNlciIsImNyZWF0ZU1lZGlhU3RyZWFtU291cmNlIiwiY29ubmVjdCIsImZyZXF1ZW5jeUJpbkNvdW50IiwiZ2V0Qnl0ZUZyZXF1ZW5jeURhdGEiLCJpc1NvdW5kRGV0ZWN0ZWQiLCJhdmVyYWdlZERhdGFWYWx1ZSIsInB2IiwiY3YiLCJwZXJjZW50YWdlIiwiZmxhdHRlbiIsIkFVRElPX0xFVkVMX1RIUkVTSE9MRCIsIlJOU3BlZWNoRGV0ZWN0b3IiLCJwYzEiLCJwYzIiLCJhZGRUcmFjayIsImF1ZGlvVHJhY2tzIiwib25TcGVha2luZ0RldGVjdGVkU3RhdGVDaGFuZ2UiLCJhdWRpb01lZGlhU291cmNlU3RhdHMiLCJNaWNyb3Bob25lTWFuYWdlciIsInN0b3BTcGVha2luZ1doaWxlTXV0ZWREZXRlY3Rpb24iLCJzdGFydFNwZWFraW5nV2hpbGVNdXRlZERldGVjdGlvbiIsInB1Ymxpc2hBdWRpb1N0cmVhbSIsInJuU3BlZWNoRGV0ZWN0b3IiLCJzb3VuZERldGVjdG9yQ2xlYW51cCIsIlNjcmVlblNoYXJlU3RhdGUiLCJhcmd1bWVudHMiLCJhdWRpb0VuYWJsZWRTdWJqZWN0IiwiYXVkaW9FbmFibGVkJCIsImF1ZGlvRW5hYmxlZCIsInNldEF1ZGlvRW5hYmxlZCIsImlzRW5hYmxlZCIsInNldFNldHRpbmdzIiwiU2NyZWVuU2hhcmVNYW5hZ2VyIiwiZW5hYmxlU2NyZWVuU2hhcmVBdWRpbyIsImRpc2FibGVTY3JlZW5TaGFyZUF1ZGlvIiwicHVibGlzaFNjcmVlblNoYXJlU3RyZWFtIiwiU3BlYWtlclN0YXRlIiwidm9sdW1lU3ViamVjdCIsImlzRGV2aWNlU2VsZWN0aW9uU3VwcG9ydGVkIiwic2V0Vm9sdW1lIiwiU3BlYWtlck1hbmFnZXIiLCJzZXRQYXJ0aWNpcGFudFZvbHVtZSIsInN0cmVhbUNsaWVudCIsImNsaWVudFN0b3JlIiwid2F0Y2hpbmciLCJkeW5hc2NhbGVNYW5hZ2VyIiwidHJhY2tTdWJzY3JpcHRpb25zU3ViamVjdCIsInJlY29ubmVjdEF0dGVtcHRzIiwibWF4UmVjb25uZWN0QXR0ZW1wdHMiLCJsZWF2ZUNhbGxIb29rcyIsInN0cmVhbUNsaWVudEV2ZW50SGFuZGxlcnMiLCJvZmZIYW5kbGVyIiwiY2FsbF9jaWQiLCJyZWdpc3RlcmVkT2ZmSGFuZGxlciIsInJlamVjdCIsImFzc2VydENhbGxKb2luZWQiLCJoYXNPdGhlclBhcnRpY2lwYW50cyIsInN0YXRzUmVwb3J0ZXIiLCJzZnVTdGF0c1JlcG9ydGVyIiwiaG9vayIsInNjcmVlblNoYXJlIiwic3RvcE9uTGVhdmVQcm9taXNlcyIsInN0cmVhbUNsaWVudEJhc2VQYXRoIiwicmluZyIsInJpbmdpbmdTdWJqZWN0IiwiX2hhc0Nvbm5lY3Rpb25JRCIsImFwcGx5RGV2aWNlQ29uZmlnIiwiZ2V0T3JDcmVhdGUiLCJhY2NlcHQiLCJpc01pZ3JhdGluZyIsIk1JR1JBVElORyIsImlzUmVjb25uZWN0aW5nIiwiUkVDT05ORUNUSU5HIiwic2Z1VG9rZW4iLCJwcmV2aW91c1NmdUNsaWVudCIsInJlY29ubmVjdCIsInN0cmF0ZWd5IiwiY3VycmVudFN0YXRlIiwibWlncmF0aW5nX2Zyb20iLCJ1bnJlZ2lzdGVyR29Bd2F5IiwiUkVDT05ORUNUSU5HX0ZBSUxFRCIsInVuc3Vic2NyaWJlT25saW5lRXZlbnQiLCJvbmxpbmUiLCJjdXJyZW50Q2FsbGluZ1N0YXRlIiwic2hvdWxkUmVjb25uZWN0IiwiaXNGaXJzdFJlY29ubmVjdEF0dGVtcHQiLCJ1bnN1YnNjcmliZU9mZmxpbmVFdmVudCIsImF1ZGlvU2V0dGluZ3MiLCJvcHVzX2R0eF9lbmFibGVkIiwicmVkdW5kYW50X2NvZGluZ19lbmFibGVkIiwid2FpdEZvckpvaW5SZXNwb25zZSIsImN1cnJlbnRQYXJ0aWNpcGFudHMiLCJwYXJ0aWNpcGFudExvb2t1cCIsImV4aXN0aW5nUGFydGljaXBhbnQiLCJpbml0Q2FtZXJhIiwiaW5pdE1pYyIsImF1ZGlvVHJhY2siLCJzY3JlZW5TaGFyZUF1ZGlvVHJhY2siLCJjaGFuZ2VzIiwiY2hhbmdlIiwicHJvcCIsInNjcmVlblNoYXJlRGltZW5zaW9uIiwicmVzZXRSZWFjdGlvbiIsImNyaXRlcmlhIiwic2VuZFJlYWN0aW9uIiwibXV0ZVNlbGYiLCJteVVzZXJJZCIsIm11dGVVc2VyIiwibXV0ZU90aGVycyIsInVzZXJJZHNUb011dGUiLCJ1c2VyX2lkcyIsIm11dGVBbGxVc2VycyIsIm11dGVfYWxsX3VzZXJzIiwic3RhcnRSZWNvcmRpbmciLCJzdG9wUmVjb3JkaW5nIiwicmVxdWVzdFBlcm1pc3Npb25zIiwiY2FuUmVxdWVzdFBlcm1pc3Npb25zIiwiZ3JhbnRQZXJtaXNzaW9ucyIsInVwZGF0ZVVzZXJQZXJtaXNzaW9ucyIsImdyYW50X3Blcm1pc3Npb25zIiwicmV2b2tlUGVybWlzc2lvbnMiLCJyZXZva2VfcGVybWlzc2lvbnMiLCJnb0xpdmUiLCJzdG9wTGl2ZSIsInN0YXJ0SExTIiwic3RvcEhMUyIsInVwZGF0ZXMiLCJlbmRDYWxsIiwidW5waW4iLCJwaW5Gb3JFdmVyeW9uZSIsInVucGluRm9yRXZlcnlvbmUiLCJxdWVyeU1lbWJlcnMiLCJ1cGRhdGVDYWxsTWVtYmVycyIsInNjaGVkdWxlQXV0b0Ryb3AiLCJkcm9wVGltZW91dCIsInRpbWVvdXRJbk1zIiwiYXV0b19jYW5jZWxfdGltZW91dF9tcyIsInF1ZXJ5UmVjb3JkaW5ncyIsImNhbGxTZXNzaW9uSWQiLCJnZXRDYWxsU3RhdHMiLCJjYWxsU2Vzc2lvbklEIiwic2VuZEN1c3RvbUV2ZW50IiwidW5iaW5kIiwiYmluZENhbGxUaHVtYm5haWxFbGVtZW50IiwiaW1hZ2VFbGVtZW50IiwiaGFuZGxlRXJyb3IiLCJzcmMiLCJmYWxsYmFja0ltYWdlU291cmNlIiwidGh1bWJuYWlsVXJsIiwiVVJMIiwiaW1hZ2VfdXJsIiwic2VhcmNoUGFyYW1zIiwiY2FsbFR5cGVDb25maWciLCJwYXJ0aWNpcGFudFNvcnRlciIsIklETEUiLCJyZWdpc3RlckVmZmVjdHMiLCJwZXJtaXNzaW9uVG9UcmFja1R5cGUiLCJpc1JpbmdpbmciLCJkZWZhdWx0RGlyZWN0aW9uIiwiYmFja2VuZFNldHRpbmciLCJjYW1lcmFfZmFjaW5nIiwiY2FtZXJhX2RlZmF1bHRfb24iLCJtaWNfZGVmYXVsdF9vbiIsIkluc2lnaHRNZXRyaWNzIiwiY29ubmVjdGlvblN0YXJ0VGltZXN0YW1wIiwid3NUb3RhbEZhaWx1cmVzIiwid3NDb25zZWN1dGl2ZUZhaWx1cmVzIiwiaW5zdGFuY2VDbGllbnRJZCIsInBvc3RJbnNpZ2h0cyIsImluc2lnaHRUeXBlIiwiaW5zaWdodHMiLCJtYXhBdHRlbXB0cyIsImJ1aWxkV3NGYXRhbEluc2lnaHQiLCJjb25uZWN0aW9uIiwiYnVpbGRXc0Jhc2VJbnNpZ2h0IiwiY2xpZW50IiwicmVhZHlfc3RhdGUiLCJfYnVpbGRVcmwiLCJhcGlfa2V5Iiwic3RhcnRfdHMiLCJpbnNpZ2h0TWV0cmljcyIsImVuZF90cyIsImF1dGhfdHlwZSIsImdldEF1dGhUeXBlIiwidG9rZW5NYW5hZ2VyIiwidXNlcklEIiwidXNlcl9kZXRhaWxzIiwiX3VzZXIiLCJjbGllbnRfaWQiLCJjb25uZWN0aW9uSUQiLCJ3c19kZXRhaWxzIiwid3NfY29uc2VjdXRpdmVfZmFpbHVyZXMiLCJ3c190b3RhbF9mYWlsdXJlcyIsInJlcXVlc3RfaWQiLCJyZXF1ZXN0SUQiLCJ1c2VyX2FnZW50IiwiaW5zdGFuY2VfY2xpZW50X2lkIiwiYnVpbGRXc1N1Y2Nlc3NBZnRlckZhaWx1cmVJbnNpZ2h0IiwiaXNDbG9zZUV2ZW50IiwicmVzIiwiaXNFcnJvckV2ZW50IiwiU3RhYmxlV1NDb25uZWN0aW9uIiwiX2xvZyIsImV4dHJhIiwic2V0Q2xpZW50IiwiVVJMU2VhcmNoUGFyYW1zIiwiZ2V0VXNlckFnZW50Iiwid3NCYXNlVVJMIiwib25saW5lU3RhdHVzQ2hhbmdlZCIsIl9zZXRIZWFsdGgiLCJpc0hlYWx0aHkiLCJfcmVjb25uZWN0IiwiaW50ZXJ2YWwiLCJvbm9wZW4iLCJ3c0lEIiwiX2dldFRva2VuIiwiYXV0aE1lc3NhZ2UiLCJhdXRoZW50aWNhdGlvblNlbnQiLCJvbm1lc3NhZ2UiLCJpc1Jlc29sdmVkIiwicmVqZWN0UHJvbWlzZSIsIl9lcnJvckZyb21XU0V2ZW50IiwibGFzdEV2ZW50Iiwic2NoZWR1bGVOZXh0UGluZyIsInJlc29sdmVQcm9taXNlIiwiaXNDb25uZWN0aW5nIiwiY29uc2VjdXRpdmVGYWlsdXJlcyIsImlzU3RhdGljIiwiY29ubmVjdGlvbkNoZWNrVGltZW91dFJlZiIsInJlZnJlc2hUb2tlbiIsImRpc3BhdGNoRXZlbnQiLCJvbmNsb3NlIiwid2FzQ2xlYW4iLCJ0b3RhbEZhaWx1cmVzIiwib25lcnJvciIsImhlYWx0aHkiLCJkaXNwYXRjaEltbWVkaWF0ZWx5IiwiaXNXU0ZhaWx1cmUiLCJzdGF0dXNDb2RlIiwiU3RhdHVzQ29kZSIsIl9zZXR1cENvbm5lY3Rpb25Qcm9taXNlIiwiY29ubmVjdGlvbk9wZW4iLCJoZWFsdGhDaGVja1RpbWVvdXRSZWYiLCJjbGllbnRJRCIsInBpbmdJbnRlcnZhbCIsImlzRGlzY29ubmVjdGVkIiwiaGVhbHRoQ2hlY2siLCJfY29ubmVjdCIsIl93YWl0Rm9ySGVhbHRoeSIsInJhY2UiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJpc0Nsb3NlZFByb21pc2UiLCJlbmFibGVXU0ZhbGxiYWNrIiwiaXNUb2tlblJlYWR5IiwidG9rZW5SZWFkeSIsImxvYWRUb2tlbiIsIndzVVJMIiwiY29ubmVjdGlvbl9pZCIsInJlc29sdmVDb25uZWN0aW9uSWQiLCJlbmFibGVJbnNpZ2h0cyIsInJlamVjdENvbm5lY3Rpb25JZCIsIl9kZXN0cm95Q3VycmVudFdTQ29ubmVjdGlvbiIsImlzU3RyaW5nIiwiYXJyYXlPclN0cmluZyIsImlzTWFwU3RyaW5nQ2FsbGJhY2siLCJjYWxsYmFjayIsImNoYXJBdCIsImtWYWx1ZSIsIm1hcHBlZFZhbHVlIiwiZW5jb2RlQmFzZTY0IiwiY2hhciIsImNoYXJDb2RlQXQiLCJkZWNvZGVCYXNlNjQiLCJmcm9tQ2hhckNvZGUiLCJMIiwieCIsIkEiLCJKV1RVc2VyVG9rZW4iLCJhcGlTZWNyZXQiLCJleHRyYURhdGEiLCJqd3RPcHRpb25zIiwiVHlwZUVycm9yIiwic2lnbiIsImFsZ29yaXRobSIsIm5vVGltZXN0YW1wIiwiaWF0IiwiSldUU2VydmVyVG9rZW4iLCJVc2VyRnJvbVRva2VuIiwiZnJhZ21lbnRzIiwiYjY0UGF5bG9hZCIsIkRldlRva2VuIiwiVG9rZW5NYW5hZ2VyIiwic2VjcmV0Iiwic2V0VG9rZW5PclByb3ZpZGVyIiwidG9rZW5PclByb3ZpZGVyIiwiaXNBbm9ueW1vdXMiLCJ2YWxpZGF0ZVRva2VuIiwidG9rZW5Qcm92aWRlciIsInJlc2V0IiwibG9hZFRva2VuUHJvbWlzZSIsInRva2VuVXNlcklkIiwiZ2V0VG9rZW4iLCJBUElFcnJvckNvZGVzIiwiaXNBUElFcnJvciIsImlzRXJyb3JSZXRyeWFibGUiLCJpc0Nvbm5lY3Rpb25JREVycm9yIiwiaXNFcnJvclJlc3BvbnNlIiwiQ29ubmVjdGlvblN0YXRlIiwiV1NDb25uZWN0aW9uRmFsbGJhY2siLCJfb25saW5lU3RhdHVzQ2hhbmdlZCIsIl9zZXRTdGF0ZSIsIkNsb3NlZCIsImNhbmNlbFRva2VuIiwiY2FuY2VsIiwiX3JlcSIsInJldHJ5IiwiQ2FuY2VsVG9rZW4iLCJkb0F4aW9zUmVxdWVzdCIsImJhc2VVUkwiLCJwdWJsaWNFbmRwb2ludCIsIl9wb2xsIiwiQ29ubmVjdGVkIiwiaXNDYW5jZWwiLCJEaXNjb25uZWN0ZWQiLCJDb25uZWN0aW5nIiwiX2J1aWxkV1NQYXlsb2FkIiwiSW5pdCIsIkhJTlRfVVJMIiwiaGludFVybCIsImFib3J0Q29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsImFib3J0IiwiZmV0Y2giLCJhd3NQb3AiLCJTdHJlYW1DbGllbnQiLCJuZXh0UmVxdWVzdEFib3J0Q29udHJvbGxlciIsImRldlRva2VuIiwic2V0QmFzZVVSTCIsImhpbnQiLCJsb2NhdGlvbkhpbnQiLCJsb2NhdGlvbkhpbnRVcmwiLCJsb2NhdGlvbkhpbnRUaW1lb3V0IiwiX2dldENvbm5lY3Rpb25JRCIsIndzQ29ubmVjdGlvbiIsIndzRmFsbGJhY2siLCJjb25uZWN0VXNlciIsInVzZXJUb2tlbk9yUHJvdmlkZXIiLCJzZXRVc2VyUHJvbWlzZSIsIl9pc1VzaW5nU2VydmVyQXV0aCIsIm5vZGUiLCJhbGxvd1NlcnZlclNpZGVDb25uZWN0Iiwic2V0VG9rZW5Qcm9taXNlIiwiX3NldFRva2VuIiwiX3NldFVzZXIiLCJ3c1Byb21pc2UiLCJvcGVuQ29ubmVjdGlvbiIsInBlcnNpc3RVc2VyT25Db25uZWN0aW9uRmFpbHVyZSIsImNsb3NlQ29ubmVjdGlvbiIsImRpc2Nvbm5lY3RVc2VyIiwiY2xlYW5pbmdJbnRlcnZhbFJlZiIsImNvbm5lY3Rpb25JZFByb21pc2UiLCJfbm9ybWFsaXplRGF0ZSIsImJlZm9yZSIsImNvbm5lY3RHdWVzdFVzZXIiLCJndWVzdFVzZXJDcmVhdGVQcm9taXNlIiwiZmluYWxseSIsImFjY2Vzc190b2tlbiIsImNvbm5lY3RBbm9ueW1vdXNVc2VyIiwiX2xvZ0FwaVJlcXVlc3QiLCJfbG9nQXBpUmVzcG9uc2UiLCJfbG9nQXBpRXJyb3IiLCJyZXF1ZXN0Q29uZmlnIiwiX2VucmljaEF4aW9zT3B0aW9ucyIsImF4aW9zSW5zdGFuY2UiLCJwdXQiLCJoYW5kbGVSZXNwb25zZSIsImNsaWVudF9yZXF1ZXN0X2lkIiwiZXJyb3JGcm9tUmVzcG9uc2UiLCJyZWNlaXZlZF9hdCIsImxpc3RlbmVyIiwid2FybVVwIiwiX3NheUhpIiwiZGVmYXVsdFdTVGltZW91dFdpdGhGYWxsYmFjayIsImRlZmF1bHRXU1RpbWVvdXQiLCJtb2RlIiwic2V0VXNlckFnZW50IiwiYXV0aG9yaXphdGlvbiIsImF4aW9zUmVxdWVzdENvbmZpZyIsImNyZWF0ZUFib3J0Q29udHJvbGxlckZvck5leHRSZXF1ZXN0IiwiY3JlYXRlVG9rZW4iLCJleHAiLCJjYWxsX2NpZHMiLCJpbnB1dE9wdGlvbnMiLCJ3aXRoQ3JlZGVudGlhbHMiLCJodHRwc0FnZW50IiwiQWdlbnQiLCJrZWVwQWxpdmVNc2VjcyIsInByb2Nlc3MiLCJlbnYiLCJTVFJFQU1fTE9DQUxfVEVTVF9SVU4iLCJTVFJFQU1fTE9DQUxfVEVTVF9IT1NUIiwiU3RyZWFtVmlkZW9DbGllbnQiLCJhcGlLZXlPckFyZ3MiLCJldmVudEhhbmRsZXJzVG9VbnJlZ2lzdGVyIiwiY29ubmVjdGlvblByb21pc2UiLCJkaXNjb25uZWN0aW9uUHJvbWlzZSIsIndyaXRlYWJsZVN0YXRlU3RvcmUiLCJjcmVhdGVHdWVzdFVzZXIiLCJxdWVyeUNhbGxzIiwid2F0Y2giLCJxdWVyeUNhbGxTdGF0cyIsImVkZ2VzIiwiYWRkRGV2aWNlIiwicHVzaF9wcm92aWRlciIsInB1c2hfcHJvdmlkZXJfbmFtZSIsInZvaXBfdG9rZW4iLCJyZW1vdmVEZXZpY2UiLCJvblJpbmdpbmdDYWxsIiwicmVhZE9ubHlTdGF0ZVN0b3JlIiwiY2FsbElkIiwiYXBpS2V5IiwiY29ubmVjdFVzZXJSZXNwb25zZSIsIm1lIiwiY2FsbHNUb1JlV2F0Y2giLCJmaWx0ZXJfY29uZGl0aW9ucyIsIiRpbiIsImZpZWxkIiwibmV3Q2FsbCIsInByZXZDYWxsIiwidGhlQ2FsbCIsImFkZFZvaXBEZXZpY2UiLCJTdHJlYW1WaWRlb1NlcnZlckNsaWVudCIsImdldENhbGxUeXBlcyIsImdldENhbGxUeXBlIiwiY3JlYXRlQ2FsbFR5cGUiLCJkZWxldGVDYWxsVHlwZSIsInVwZGF0ZUNhbGxUeXBlIiwibGlzdEV4dGVybmFsU3RvcmFnZSIsImNyZWF0ZUV4dGVybmFsU3RvcmFnZSIsImRlbGV0ZUV4dGVybmFsU3RvcmFnZSIsInVwZGF0ZUV4dGVybmFsU3RvcmFnZSIsImNoZWNrRXh0ZXJuYWxTdG9yYWdlIiwiQnJvd3NlcnMiLCJSeFV0aWxzIiwiU2Z1RXZlbnRzIiwiU2Z1TW9kZWxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-react-bindings/dist/index.es.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-bindings/dist/index.es.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_LANGUAGE: () => (/* binding */ DEFAULT_LANGUAGE),\n/* harmony export */   DEFAULT_NAMESPACE: () => (/* binding */ DEFAULT_NAMESPACE),\n/* harmony export */   Restricted: () => (/* binding */ Restricted),\n/* harmony export */   StreamCallProvider: () => (/* binding */ StreamCallProvider),\n/* harmony export */   StreamI18n: () => (/* binding */ StreamI18n),\n/* harmony export */   StreamI18nProvider: () => (/* binding */ StreamI18nProvider),\n/* harmony export */   StreamVideoProvider: () => (/* binding */ StreamVideoProvider),\n/* harmony export */   defaultTranslationFunction: () => (/* binding */ defaultTranslationFunction),\n/* harmony export */   mapToRegistry: () => (/* binding */ mapToRegistry),\n/* harmony export */   useCall: () => (/* binding */ useCall),\n/* harmony export */   useCallStateHooks: () => (/* binding */ useCallStateHooks),\n/* harmony export */   useCalls: () => (/* binding */ useCalls),\n/* harmony export */   useConnectedUser: () => (/* binding */ useConnectedUser),\n/* harmony export */   useCreateI18n: () => (/* binding */ useCreateI18n),\n/* harmony export */   useI18n: () => (/* binding */ useI18n),\n/* harmony export */   useStore: () => (/* binding */ useStore),\n/* harmony export */   useStreamVideoClient: () => (/* binding */ useStreamVideoClient)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! i18next */ \"(ssr)/./node_modules/i18next/dist/esm/i18next.js\");\n/* harmony import */ var _stream_io_video_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @stream-io/video-client */ \"(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js\");\n\n\n\n\n\nconst StreamCallContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n * A provider for the call object.\n */\nconst StreamCallProvider = (props) => {\n    const { call, children } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamCallContext.Provider, { value: call, children: children }));\n};\n/**\n * A hook to get the call object from the closest provider.\n */\nconst useCall = () => {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StreamCallContext);\n};\n\nconst mapToRegistry = (translationsMap, namespace) => Object.entries(translationsMap).reduce((acc, [lng, translations]) => {\n    acc[lng] = { [namespace]: translations };\n    return acc;\n}, {});\n\nconst DEFAULT_LANGUAGE = 'en';\nconst DEFAULT_NAMESPACE = 'stream-video';\nconst DEFAULT_CONFIG = {\n    debug: false,\n    currentLanguage: DEFAULT_LANGUAGE,\n    fallbackLanguage: false,\n};\nconst DEFAULT_TRANSLATIONS_REGISTRY = mapToRegistry({}, DEFAULT_NAMESPACE);\nconst defaultTranslationFunction = (key) => key;\nclass StreamI18n {\n    /** Simple logger function */\n    constructor(options = {}) {\n        /** Translator function that converts the provided string into its equivalent in the current language. */\n        this.t = defaultTranslationFunction;\n        this.init = async () => {\n            try {\n                this.t = await this.i18nInstance.init();\n            }\n            catch (e) {\n                console.error(`Failed to initialize translations: ${JSON.stringify(e)}`);\n            }\n            return this;\n        };\n        this.changeLanguage = async (language, onChange) => {\n            if (!this._checkIsInitialized())\n                return;\n            // i18next detects the language, if none provided, but it is better\n            // to show this detection here explicitly\n            const browserLanguage = typeof window !== 'undefined' && window.navigator\n                ? window.navigator.language\n                : undefined;\n            await this.i18nInstance.changeLanguage(language || browserLanguage);\n            onChange?.(this.currentLanguage);\n        };\n        this.registerTranslationsForLanguage = ({ lng, translations, }) => {\n            if (!this._checkIsInitialized())\n                return;\n            this.i18nInstance.addResourceBundle(lng, DEFAULT_NAMESPACE, translations, true, true);\n        };\n        this._checkIsInitialized = () => {\n            if (!this.i18nInstance.isInitialized) {\n                console.warn('I18n instance is not initialized. Call yourStreamI18nInstance.init().');\n            }\n            return this.i18nInstance.isInitialized;\n        };\n        const { debug = DEFAULT_CONFIG.debug, currentLanguage = DEFAULT_CONFIG.currentLanguage, fallbackLanguage = DEFAULT_CONFIG.fallbackLanguage, translationsOverrides, } = options;\n        this.i18nInstance = i18next__WEBPACK_IMPORTED_MODULE_2__[\"default\"].createInstance({\n            debug,\n            defaultNS: DEFAULT_NAMESPACE,\n            fallbackLng: fallbackLanguage,\n            interpolation: { escapeValue: false },\n            keySeparator: false,\n            lng: currentLanguage,\n            nsSeparator: false,\n            parseMissingKeyHandler: (key) => {\n                return key;\n            },\n            resources: DEFAULT_TRANSLATIONS_REGISTRY,\n        });\n        if (translationsOverrides) {\n            this.i18nInstance.on('initialized', () => {\n                Object.entries(translationsOverrides).forEach(([lng, translations]) => {\n                    this.registerTranslationsForLanguage({ lng, translations });\n                });\n            });\n        }\n    }\n    get currentLanguage() {\n        this._checkIsInitialized();\n        return this.i18nInstance.language;\n    }\n    get isInitialized() {\n        return this.i18nInstance.isInitialized;\n    }\n}\n\nconst StreamI18nContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    t: defaultTranslationFunction,\n});\nconst StreamI18nProvider = ({ children, ...createI18nParams }) => {\n    const { i18n, t } = useCreateI18n(createI18nParams);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamI18nContext.Provider, { value: { t, i18n }, children: children }));\n};\nconst useCreateI18n = ({ i18nInstance, language, fallbackLanguage, translationsOverrides, }) => {\n    const [i18n] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => i18nInstance ||\n        new StreamI18n({\n            currentLanguage: language,\n            fallbackLanguage,\n            translationsOverrides,\n        }));\n    const [t, setTranslationFn] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => defaultTranslationFunction);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        const { isInitialized } = i18n;\n        if (!isInitialized) {\n            i18n.init().then((_i18n) => setTranslationFn(() => _i18n.i18nInstance.t));\n            return;\n        }\n        if (language && i18n?.currentLanguage !== language) {\n            i18n.changeLanguage(language).catch((err) => {\n                console.log('Error while changing language', err);\n            });\n        }\n    }, [i18n, i18nInstance, language, translationsOverrides]);\n    return { i18n, t };\n};\nconst useI18n = () => (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StreamI18nContext);\n\nconst StreamVideoContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n * StreamVideo is a provider component which should be used to wrap the entire application.\n * It provides the client object to all children components and initializes the i18n instance.\n *  @param PropsWithChildren<StreamVideoProps>\n *  @category Client State\n */\nconst StreamVideoProvider = ({ children, client, i18nInstance, language, translationsOverrides, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamVideoContext.Provider, { value: client, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamI18nProvider, { i18nInstance: i18nInstance, language: language, translationsOverrides: translationsOverrides, children: children }) }));\n};\n/**\n *\n * @returns\n *\n * @category Client State\n */\nconst useStreamVideoClient = () => {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StreamVideoContext);\n};\n\n/**\n * Utility hook which provides the current value of the given observable.\n * @internal\n */\nconst useObservableValue = (observable$) => {\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => _stream_io_video_client__WEBPACK_IMPORTED_MODULE_3__.RxUtils.getCurrentValue(observable$));\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        const subscription = observable$.subscribe(setValue);\n        return () => {\n            subscription.unsubscribe();\n        };\n    }, [observable$]);\n    return value;\n};\n\n/**\n * Checks whether we are using React Native\n */\nconst isReactNative = () => {\n    if (typeof navigator === 'undefined')\n        return false;\n    return navigator.product?.toLowerCase() === 'reactnative';\n};\n\n/**\n * Utility hook, which provides the current call's state.\n *\n * @category Call State\n */\nconst useCallState = () => {\n    const call = useCall();\n    // return an empty and unlinked CallState object if there is no call in the provider\n    // this ensures that the hooks always return a value and many null checks can be avoided\n    if (!call) {\n        const message = 'You are using useCallState() outside a Call context. ' +\n            'Please wrap your component in <StreamCall /> and provide a \"call\" instance.';\n        console.warn(message);\n        return new _stream_io_video_client__WEBPACK_IMPORTED_MODULE_3__.CallState();\n    }\n    return call.state;\n};\n/**\n * Utility hook which provides information whether the current call is being recorded. It will return `true` if the call is being recorded.\n *\n * @category Call State\n */\nconst useIsCallRecordingInProgress = () => {\n    const { recording$ } = useCallState();\n    return useObservableValue(recording$);\n};\n/**\n * Utility hook which provides information whether the current call is broadcasting.\n *\n * @category Call State\n */\nconst useIsCallHLSBroadcastingInProgress = () => {\n    const { egress$ } = useCallState();\n    const egress = useObservableValue(egress$);\n    if (!egress)\n        return false;\n    return egress.broadcasting;\n};\n/**\n * Utility hook which provides information whether the current call is live.\n *\n * @category Call State\n */\nconst useIsCallLive = () => {\n    const { backstage$ } = useCallState();\n    const isBackstageOn = useObservableValue(backstage$);\n    return !isBackstageOn;\n};\n/**\n * Returns the list of blocked users in the current call.\n */\nconst useCallBlockedUserIds = () => {\n    const { blockedUserIds$ } = useCallState();\n    return useObservableValue(blockedUserIds$);\n};\n/**\n * Returns the timestamp when this call was created.\n */\nconst useCallCreatedAt = () => {\n    const { createdAt$ } = useCallState();\n    return useObservableValue(createdAt$);\n};\n/**\n * Returns the timestamp when this call was ended.\n */\nconst useCallEndedAt = () => {\n    const { endedAt$ } = useCallState();\n    return useObservableValue(endedAt$);\n};\n/**\n * Returns the timestamp telling when the call is scheduled to start.\n */\nconst useCallStartsAt = () => {\n    const { startsAt$ } = useCallState();\n    return useObservableValue(startsAt$);\n};\n/**\n * Returns the timestamp when this call was updated.\n */\nconst useCallUpdatedAt = () => {\n    const { updatedAt$ } = useCallState();\n    return useObservableValue(updatedAt$);\n};\n/**\n * Returns the information about the call's creator.\n */\nconst useCallCreatedBy = () => {\n    const { createdBy$ } = useCallState();\n    return useObservableValue(createdBy$);\n};\n/**\n * Returns the call's custom data.\n */\nconst useCallCustomData = () => {\n    const { custom$ } = useCallState();\n    return useObservableValue(custom$);\n};\n/**\n * Returns the call's Egress information.\n */\nconst useCallEgress = () => {\n    const { egress$ } = useCallState();\n    return useObservableValue(egress$);\n};\n/**\n * Returns the call's Ingress information.\n */\nconst useCallIngress = () => {\n    const { ingress$ } = useCallState();\n    return useObservableValue(ingress$);\n};\n/**\n * Returns the data for the current call session.\n */\nconst useCallSession = () => {\n    const { session$ } = useCallState();\n    return useObservableValue(session$);\n};\n/**\n * Returns the call's settings.\n */\nconst useCallSettings = () => {\n    const { settings$ } = useCallState();\n    return useObservableValue(settings$);\n};\n/**\n * Returns whether the call has transcribing enabled.\n */\nconst useIsCallTranscribingInProgress = () => {\n    const { transcribing$ } = useCallState();\n    return useObservableValue(transcribing$);\n};\n/**\n * Returns information about the user who has marked this call as ended.\n */\nconst useCallEndedBy = () => {\n    const { endedBy$ } = useCallState();\n    return useObservableValue(endedBy$);\n};\n/**\n * Utility hook which provides a boolean indicating whether there is\n * a participant in the current call which shares their screen.\n *\n * @category Call State\n */\nconst useHasOngoingScreenShare = () => {\n    const { hasOngoingScreenShare$ } = useCallState();\n    return useObservableValue(hasOngoingScreenShare$);\n};\n/**\n * Utility hook which provides the latest stats report of the current call.\n *\n * The latest stats report of the current call.\n * When stats gathering is enabled, this observable will emit a new value\n * at a regular (configurable) interval.\n *\n * Consumers of this observable can implement their own batching logic\n * in case they want to show historical stats data.\n *\n * @category Call State\n */\nconst useCallStatsReport = () => {\n    const { callStatsReport$ } = useCallState();\n    return useObservableValue(callStatsReport$);\n};\n/**\n * Utility hook which provides the dominant speaker of the current call.\n *\n * @category Call State\n */\nconst useDominantSpeaker = () => {\n    const { dominantSpeaker$ } = useCallState();\n    return useObservableValue(dominantSpeaker$);\n};\n/**\n * Utility hook which provides a list of call members.\n *\n * @category Call State\n */\nconst useCallMembers = () => {\n    const { members$ } = useCallState();\n    return useObservableValue(members$);\n};\n/**\n * Utility hook providing the current calling state of the call. For example, `RINGING` or `JOINED`.\n *\n * @category Call State\n */\nconst useCallCallingState = () => {\n    const { callingState$ } = useCallState();\n    return useObservableValue(callingState$);\n};\n/**\n * Utility hook providing the actual start time of the current session.\n * Useful for calculating the call duration.\n *\n * @category Call State\n */\nconst useCallStartedAt = () => {\n    const { startedAt$ } = useCallState();\n    return useObservableValue(startedAt$);\n};\n/**\n * A hook which provides a list of all participants that have joined an active call.\n *\n * @category Call State\n *\n * @param options.sortBy - A comparator function to sort the participants by.\n * Make sure to memoize output of the `combineComparators` function\n * (or keep it out of component's scope if possible) before passing it down to this property.\n */\nconst useParticipants = ({ sortBy, } = {}) => {\n    const { participants$ } = useCallState();\n    const participants = useObservableValue(participants$);\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        if (sortBy) {\n            return [...participants].sort(sortBy);\n        }\n        return participants;\n    }, [participants, sortBy]);\n};\n/**\n * A hook which provides a StreamVideoLocalParticipant object.\n * It signals that I have joined a call.\n *\n * @category Call State\n */\nconst useLocalParticipant = () => {\n    const { localParticipant$ } = useCallState();\n    return useObservableValue(localParticipant$);\n};\n/**\n * A hook which provides a list of all other participants than me that have joined an active call.\n *\n * @category Call State\n */\nconst useRemoteParticipants = () => {\n    const { remoteParticipants$ } = useCallState();\n    return useObservableValue(remoteParticipants$);\n};\n/**\n * Returns the approximate participant count of the active call.\n * This includes the anonymous users as well, and it is computed on the server.\n *\n * @category Call State\n */\nconst useParticipantCount = () => {\n    const { participantCount$ } = useCallState();\n    return useObservableValue(participantCount$);\n};\n/**\n * Returns the approximate anonymous participant count of the active call.\n * The regular participants are not included in this count. It is computed on the server.\n *\n * @category Call State\n */\nconst useAnonymousParticipantCount = () => {\n    const { anonymousParticipantCount$ } = useCallState();\n    return useObservableValue(anonymousParticipantCount$);\n};\n/**\n * Returns the generated thumbnail of the current call, if enabled in settings.\n */\nconst useCallThumbnail = () => {\n    const { thumbnails$ } = useCallState();\n    return useObservableValue(thumbnails$);\n};\n/**\n * A hook which returns the local participant's own capabilities.\n */\nconst useOwnCapabilities = () => {\n    const { ownCapabilities$ } = useCallState();\n    return useObservableValue(ownCapabilities$);\n};\n/**\n * Hook that returns true if the local participant has all the given permissions.\n *\n * @param permissions the permissions to check.\n */\nconst useHasPermissions = (...permissions) => {\n    const capabilities = useOwnCapabilities();\n    return permissions.every((permission) => capabilities?.includes(permission));\n};\n/**\n * Returns the camera state of the current call.\n *\n * @category Camera Manager State\n *\n */\nconst useCameraState = () => {\n    const call = useCall();\n    const { camera } = call;\n    const devices$ = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => camera.listDevices(), [camera]);\n    const { state } = camera;\n    const status = useObservableValue(state.status$);\n    const direction = useObservableValue(state.direction$);\n    const mediaStream = useObservableValue(state.mediaStream$);\n    const selectedDevice = useObservableValue(state.selectedDevice$);\n    const devices = useObservableValue(devices$);\n    const hasBrowserPermission = useObservableValue(state.hasBrowserPermission$);\n    const isMute = status !== 'enabled';\n    return {\n        camera,\n        status,\n        isEnabled: status === 'enabled',\n        direction,\n        mediaStream,\n        devices,\n        hasBrowserPermission,\n        selectedDevice,\n        isMute,\n    };\n};\n/**\n * Returns the microphone state of the current call.\n *\n * @category Microphone Manager State\n */\nconst useMicrophoneState = () => {\n    const call = useCall();\n    const { microphone } = call;\n    const devices$ = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => microphone.listDevices(), [microphone]);\n    const { state } = microphone;\n    const status = useObservableValue(state.status$);\n    const mediaStream = useObservableValue(state.mediaStream$);\n    const selectedDevice = useObservableValue(state.selectedDevice$);\n    const devices = useObservableValue(devices$);\n    const hasBrowserPermission = useObservableValue(state.hasBrowserPermission$);\n    const isSpeakingWhileMuted = useObservableValue(state.speakingWhileMuted$);\n    const isMute = status !== 'enabled';\n    return {\n        microphone,\n        status,\n        isEnabled: status === 'enabled',\n        mediaStream,\n        devices,\n        selectedDevice,\n        hasBrowserPermission,\n        isSpeakingWhileMuted,\n        isMute,\n    };\n};\n/**\n * Returns the speaker state of the current call.\n *\n * Note: This hook is not supported in React Native\n */\nconst useSpeakerState = () => {\n    if (isReactNative()) {\n        throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');\n    }\n    const call = useCall();\n    const { speaker } = call;\n    const devices$ = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => speaker.listDevices(), [speaker]);\n    const devices = useObservableValue(devices$);\n    const selectedDevice = useObservableValue(speaker.state.selectedDevice$);\n    return {\n        speaker,\n        devices,\n        selectedDevice,\n        isDeviceSelectionSupported: speaker.state.isDeviceSelectionSupported,\n    };\n};\n/**\n * Returns the Screen Share state of the current call.\n */\nconst useScreenShareState = () => {\n    const call = useCall();\n    const { screenShare } = call;\n    const status = useObservableValue(screenShare.state.status$);\n    const mediaStream = useObservableValue(screenShare.state.mediaStream$);\n    const isMute = status !== 'enabled';\n    return {\n        screenShare,\n        mediaStream,\n        status,\n        isMute,\n    };\n};\n\nvar CallStateHooks = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    useAnonymousParticipantCount: useAnonymousParticipantCount,\n    useCallBlockedUserIds: useCallBlockedUserIds,\n    useCallCallingState: useCallCallingState,\n    useCallCreatedAt: useCallCreatedAt,\n    useCallCreatedBy: useCallCreatedBy,\n    useCallCustomData: useCallCustomData,\n    useCallEgress: useCallEgress,\n    useCallEndedAt: useCallEndedAt,\n    useCallEndedBy: useCallEndedBy,\n    useCallIngress: useCallIngress,\n    useCallMembers: useCallMembers,\n    useCallSession: useCallSession,\n    useCallSettings: useCallSettings,\n    useCallStartedAt: useCallStartedAt,\n    useCallStartsAt: useCallStartsAt,\n    useCallState: useCallState,\n    useCallStatsReport: useCallStatsReport,\n    useCallThumbnail: useCallThumbnail,\n    useCallUpdatedAt: useCallUpdatedAt,\n    useCameraState: useCameraState,\n    useDominantSpeaker: useDominantSpeaker,\n    useHasOngoingScreenShare: useHasOngoingScreenShare,\n    useHasPermissions: useHasPermissions,\n    useIsCallHLSBroadcastingInProgress: useIsCallHLSBroadcastingInProgress,\n    useIsCallLive: useIsCallLive,\n    useIsCallRecordingInProgress: useIsCallRecordingInProgress,\n    useIsCallTranscribingInProgress: useIsCallTranscribingInProgress,\n    useLocalParticipant: useLocalParticipant,\n    useMicrophoneState: useMicrophoneState,\n    useOwnCapabilities: useOwnCapabilities,\n    useParticipantCount: useParticipantCount,\n    useParticipants: useParticipants,\n    useRemoteParticipants: useRemoteParticipants,\n    useScreenShareState: useScreenShareState,\n    useSpeakerState: useSpeakerState\n});\n\n/**\n * Utility hook which provides access to client's state store.\n */\nconst useStore = () => {\n    const client = useStreamVideoClient();\n    if (!client) {\n        throw new Error(`StreamVideoClient isn't initialized or this hook is called outside of <StreamVideo> context.`);\n    }\n    return client.readOnlyStateStore;\n};\n/**\n * Utility hook which provides a list of all notifications about created calls.\n * In the ring call settings, these calls can be outgoing (I have called somebody)\n * or incoming (somebody has called me).\n *\n * @category Client State\n */\nconst useCalls = () => {\n    const { calls$ } = useStore();\n    return useObservableValue(calls$);\n};\n/**\n * Returns the current connected user.\n *\n * @category Client State\n */\nconst useConnectedUser = () => {\n    const { connectedUser$ } = useStore();\n    return useObservableValue(connectedUser$);\n};\n\n/**\n * A hook-alike function that exposes all call state hooks.\n *\n * @category Call State\n */\nconst useCallStateHooks = () => CallStateHooks;\n\nconst Restricted = ({ canRequestOnly, hasPermissionsOnly, requiredGrants, requireAll = true, children, }) => {\n    const call = useCall();\n    const { useCallSettings, useOwnCapabilities } = useCallStateHooks();\n    const ownCapabilities = useOwnCapabilities();\n    const settings = useCallSettings();\n    const hasPermissions = requiredGrants[requireAll ? 'every' : 'some']((capability) => ownCapabilities?.includes(capability));\n    if (hasPermissionsOnly)\n        return hasPermissions ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: children }) : null;\n    const canRequest = requiredGrants.some((capability) => call?.permissionsContext.canRequest(capability, settings));\n    if (canRequestOnly)\n        return canRequest ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: children }) : null;\n    if (hasPermissions || canRequest)\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: children });\n    return null;\n};\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-react-bindings/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-react-sdk/dist/index.es.js":
/*!******************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-sdk/dist/index.es.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AcceptCallButton: () => (/* binding */ AcceptCallButton),\n/* harmony export */   Audio: () => (/* binding */ Audio),\n/* harmony export */   AudioSettingsDefaultDeviceEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.AudioSettingsDefaultDeviceEnum),\n/* harmony export */   AudioSettingsRequestDefaultDeviceEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.AudioSettingsRequestDefaultDeviceEnum),\n/* harmony export */   Avatar: () => (/* binding */ Avatar),\n/* harmony export */   AvatarFallback: () => (/* binding */ AvatarFallback),\n/* harmony export */   AxiosError: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.AxiosError),\n/* harmony export */   BaseVideo: () => (/* binding */ BaseVideo),\n/* harmony export */   Browsers: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Browsers),\n/* harmony export */   Call: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Call),\n/* harmony export */   CallControls: () => (/* binding */ CallControls),\n/* harmony export */   CallParticipantListing: () => (/* binding */ CallParticipantListing),\n/* harmony export */   CallParticipantListingItem: () => (/* binding */ CallParticipantListingItem),\n/* harmony export */   CallParticipantsList: () => (/* binding */ CallParticipantsList),\n/* harmony export */   CallPreview: () => (/* binding */ CallPreview),\n/* harmony export */   CallRecordingList: () => (/* binding */ CallRecordingList),\n/* harmony export */   CallRecordingListHeader: () => (/* binding */ CallRecordingListHeader),\n/* harmony export */   CallRecordingListItem: () => (/* binding */ CallRecordingListItem),\n/* harmony export */   CallState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallState),\n/* harmony export */   CallStats: () => (/* binding */ CallStats),\n/* harmony export */   CallStatsButton: () => (/* binding */ CallStatsButton),\n/* harmony export */   CallStatsLatencyChart: () => (/* binding */ CallStatsLatencyChart),\n/* harmony export */   CallType: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallType),\n/* harmony export */   CallTypes: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallTypes),\n/* harmony export */   CallingState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState),\n/* harmony export */   CameraManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CameraManager),\n/* harmony export */   CameraManagerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CameraManagerState),\n/* harmony export */   CancelCallButton: () => (/* binding */ CancelCallButton),\n/* harmony export */   CancelCallConfirmButton: () => (/* binding */ CancelCallConfirmButton),\n/* harmony export */   CompositeButton: () => (/* binding */ CompositeButton),\n/* harmony export */   CreateDeviceRequestPushProviderEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CreateDeviceRequestPushProviderEnum),\n/* harmony export */   DEFAULT_LANGUAGE: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_LANGUAGE),\n/* harmony export */   DEFAULT_NAMESPACE: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_NAMESPACE),\n/* harmony export */   DebounceType: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.DebounceType),\n/* harmony export */   DefaultParticipantViewUI: () => (/* binding */ DefaultParticipantViewUI),\n/* harmony export */   DefaultReactionsMenu: () => (/* binding */ DefaultReactionsMenu),\n/* harmony export */   DefaultScreenShareOverlay: () => (/* binding */ DefaultScreenShareOverlay),\n/* harmony export */   DefaultVideoPlaceholder: () => (/* binding */ DefaultVideoPlaceholder),\n/* harmony export */   DeviceSelector: () => (/* binding */ DeviceSelector),\n/* harmony export */   DeviceSelectorAudioInput: () => (/* binding */ DeviceSelectorAudioInput),\n/* harmony export */   DeviceSelectorAudioOutput: () => (/* binding */ DeviceSelectorAudioOutput),\n/* harmony export */   DeviceSelectorVideo: () => (/* binding */ DeviceSelectorVideo),\n/* harmony export */   DeviceSettings: () => (/* binding */ DeviceSettings),\n/* harmony export */   DropDownSelect: () => (/* binding */ DropDownSelect),\n/* harmony export */   DropDownSelectOption: () => (/* binding */ DropDownSelectOption),\n/* harmony export */   DynascaleManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.DynascaleManager),\n/* harmony export */   EmptyCallRecordingListing: () => (/* binding */ EmptyCallRecordingListing),\n/* harmony export */   ErrorFromResponse: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ErrorFromResponse),\n/* harmony export */   GenericMenu: () => (/* binding */ GenericMenu),\n/* harmony export */   GenericMenuButtonItem: () => (/* binding */ GenericMenuButtonItem),\n/* harmony export */   Icon: () => (/* binding */ Icon),\n/* harmony export */   IconButton: () => (/* binding */ IconButton),\n/* harmony export */   InputMediaDeviceManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.InputMediaDeviceManager),\n/* harmony export */   InputMediaDeviceManagerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.InputMediaDeviceManagerState),\n/* harmony export */   LayoutSettingsNameEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.LayoutSettingsNameEnum),\n/* harmony export */   LayoutSettingsRequestNameEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.LayoutSettingsRequestNameEnum),\n/* harmony export */   LivestreamLayout: () => (/* binding */ LivestreamLayout),\n/* harmony export */   LoadingCallRecordingListing: () => (/* binding */ LoadingCallRecordingListing),\n/* harmony export */   LoadingIndicator: () => (/* binding */ LoadingIndicator),\n/* harmony export */   MenuToggle: () => (/* binding */ MenuToggle),\n/* harmony export */   MenuVisualType: () => (/* binding */ MenuVisualType),\n/* harmony export */   MicrophoneManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.MicrophoneManager),\n/* harmony export */   MicrophoneManagerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.MicrophoneManagerState),\n/* harmony export */   Notification: () => (/* binding */ Notification),\n/* harmony export */   OwnCapability: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability),\n/* harmony export */   PaginatedGridLayout: () => (/* binding */ PaginatedGridLayout),\n/* harmony export */   ParticipantActionsContextMenu: () => (/* binding */ ParticipantActionsContextMenu),\n/* harmony export */   ParticipantDetails: () => (/* binding */ ParticipantDetails),\n/* harmony export */   ParticipantView: () => (/* binding */ ParticipantView),\n/* harmony export */   ParticipantViewContext: () => (/* binding */ ParticipantViewContext),\n/* harmony export */   ParticipantsAudio: () => (/* binding */ ParticipantsAudio),\n/* harmony export */   PermissionNotification: () => (/* binding */ PermissionNotification),\n/* harmony export */   PermissionRequestList: () => (/* binding */ PermissionRequestList),\n/* harmony export */   PermissionRequests: () => (/* binding */ PermissionRequests),\n/* harmony export */   ReactionsButton: () => (/* binding */ ReactionsButton),\n/* harmony export */   RecordCallButton: () => (/* binding */ RecordCallButton),\n/* harmony export */   RecordCallConfirmationButton: () => (/* binding */ RecordCallConfirmationButton),\n/* harmony export */   RecordSettingsRequestModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RecordSettingsRequestModeEnum),\n/* harmony export */   RecordSettingsRequestQualityEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RecordSettingsRequestQualityEnum),\n/* harmony export */   RecordingInProgressNotification: () => (/* binding */ RecordingInProgressNotification),\n/* harmony export */   Restricted: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted),\n/* harmony export */   RingingCall: () => (/* binding */ RingingCall),\n/* harmony export */   RingingCallControls: () => (/* binding */ RingingCallControls),\n/* harmony export */   RxUtils: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RxUtils),\n/* harmony export */   ScreenShareButton: () => (/* binding */ ScreenShareButton),\n/* harmony export */   ScreenShareManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ScreenShareManager),\n/* harmony export */   ScreenShareState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ScreenShareState),\n/* harmony export */   SearchInput: () => (/* binding */ SearchInput),\n/* harmony export */   SearchResults: () => (/* binding */ SearchResults),\n/* harmony export */   SfuEvents: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuEvents),\n/* harmony export */   SfuModels: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels),\n/* harmony export */   SpeakerLayout: () => (/* binding */ SpeakerLayout),\n/* harmony export */   SpeakerManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SpeakerManager),\n/* harmony export */   SpeakerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SpeakerState),\n/* harmony export */   SpeakingWhileMutedNotification: () => (/* binding */ SpeakingWhileMutedNotification),\n/* harmony export */   SpeechIndicator: () => (/* binding */ SpeechIndicator),\n/* harmony export */   StatCard: () => (/* binding */ StatCard),\n/* harmony export */   StatCardExplanation: () => (/* binding */ StatCardExplanation),\n/* harmony export */   StatsTag: () => (/* binding */ StatsTag),\n/* harmony export */   Statuses: () => (/* binding */ Statuses),\n/* harmony export */   StreamCall: () => (/* binding */ StreamCall),\n/* harmony export */   StreamCallProvider: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamCallProvider),\n/* harmony export */   StreamI18n: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamI18n),\n/* harmony export */   StreamI18nProvider: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamI18nProvider),\n/* harmony export */   StreamSfuClient: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamSfuClient),\n/* harmony export */   StreamTheme: () => (/* binding */ StreamTheme),\n/* harmony export */   StreamVideo: () => (/* binding */ StreamVideo),\n/* harmony export */   StreamVideoClient: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamVideoClient),\n/* harmony export */   StreamVideoProvider: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamVideoProvider),\n/* harmony export */   StreamVideoReadOnlyStateStore: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamVideoReadOnlyStateStore),\n/* harmony export */   StreamVideoServerClient: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamVideoServerClient),\n/* harmony export */   StreamVideoWriteableStateStore: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamVideoWriteableStateStore),\n/* harmony export */   TextButton: () => (/* binding */ TextButton),\n/* harmony export */   ToggleAudioOutputButton: () => (/* binding */ ToggleAudioOutputButton),\n/* harmony export */   ToggleAudioPreviewButton: () => (/* binding */ ToggleAudioPreviewButton),\n/* harmony export */   ToggleAudioPublishingButton: () => (/* binding */ ToggleAudioPublishingButton),\n/* harmony export */   ToggleVideoPreviewButton: () => (/* binding */ ToggleVideoPreviewButton),\n/* harmony export */   ToggleVideoPublishingButton: () => (/* binding */ ToggleVideoPublishingButton),\n/* harmony export */   Tooltip: () => (/* binding */ Tooltip),\n/* harmony export */   TranscriptionSettingsModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.TranscriptionSettingsModeEnum),\n/* harmony export */   TranscriptionSettingsRequestModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.TranscriptionSettingsRequestModeEnum),\n/* harmony export */   Video: () => (/* binding */ Video$1),\n/* harmony export */   VideoPreview: () => (/* binding */ VideoPreview),\n/* harmony export */   VideoSettingsCameraFacingEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VideoSettingsCameraFacingEnum),\n/* harmony export */   VideoSettingsRequestCameraFacingEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VideoSettingsRequestCameraFacingEnum),\n/* harmony export */   ViewportTracker: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ViewportTracker),\n/* harmony export */   VisibilityState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VisibilityState),\n/* harmony export */   WithTooltip: () => (/* binding */ WithTooltip),\n/* harmony export */   checkIfAudioOutputChangeSupported: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.checkIfAudioOutputChangeSupported),\n/* harmony export */   combineComparators: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.combineComparators),\n/* harmony export */   conditional: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.conditional),\n/* harmony export */   createSoundDetector: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.createSoundDetector),\n/* harmony export */   defaultReactions: () => (/* binding */ defaultReactions),\n/* harmony export */   defaultSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.defaultSortPreset),\n/* harmony export */   defaultTranslationFunction: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.defaultTranslationFunction),\n/* harmony export */   descending: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.descending),\n/* harmony export */   deviceIds$: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.deviceIds$),\n/* harmony export */   disposeOfMediaStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.disposeOfMediaStream),\n/* harmony export */   dominantSpeaker: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.dominantSpeaker),\n/* harmony export */   getAudioDevices: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioDevices),\n/* harmony export */   getAudioOutputDevices: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioOutputDevices),\n/* harmony export */   getAudioStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioStream),\n/* harmony export */   getClientDetails: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getClientDetails),\n/* harmony export */   getDeviceInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getDeviceInfo),\n/* harmony export */   getLogger: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getLogger),\n/* harmony export */   getOSInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getOSInfo),\n/* harmony export */   getScreenShareStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getScreenShareStream),\n/* harmony export */   getSdkInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getSdkInfo),\n/* harmony export */   getVideoDevices: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getVideoDevices),\n/* harmony export */   getVideoStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getVideoStream),\n/* harmony export */   getWebRTCInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getWebRTCInfo),\n/* harmony export */   livestreamOrAudioRoomSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.livestreamOrAudioRoomSortPreset),\n/* harmony export */   logLevels: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.logLevels),\n/* harmony export */   logToConsole: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.logToConsole),\n/* harmony export */   mapToRegistry: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.mapToRegistry),\n/* harmony export */   name: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.name),\n/* harmony export */   noopComparator: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.noopComparator),\n/* harmony export */   paginatedLayoutSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.paginatedLayoutSortPreset),\n/* harmony export */   pinned: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.pinned),\n/* harmony export */   publishingAudio: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.publishingAudio),\n/* harmony export */   publishingVideo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.publishingVideo),\n/* harmony export */   reactionType: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.reactionType),\n/* harmony export */   role: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.role),\n/* harmony export */   screenSharing: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.screenSharing),\n/* harmony export */   setDeviceInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setDeviceInfo),\n/* harmony export */   setLogLevel: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setLogLevel),\n/* harmony export */   setLogger: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setLogger),\n/* harmony export */   setOSInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setOSInfo),\n/* harmony export */   setSdkInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setSdkInfo),\n/* harmony export */   setWebRTCInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setWebRTCInfo),\n/* harmony export */   speakerLayoutSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.speakerLayoutSortPreset),\n/* harmony export */   speaking: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.speaking),\n/* harmony export */   translations: () => (/* binding */ translations),\n/* harmony export */   useCall: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall),\n/* harmony export */   useCallStateHooks: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks),\n/* harmony export */   useCalls: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCalls),\n/* harmony export */   useConnectedUser: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useConnectedUser),\n/* harmony export */   useCreateI18n: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCreateI18n),\n/* harmony export */   useHorizontalScrollPosition: () => (/* binding */ useHorizontalScrollPosition),\n/* harmony export */   useI18n: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n),\n/* harmony export */   useMenuContext: () => (/* binding */ useMenuContext),\n/* harmony export */   useParticipantViewContext: () => (/* binding */ useParticipantViewContext),\n/* harmony export */   usePersistedDevicePreferences: () => (/* binding */ usePersistedDevicePreferences),\n/* harmony export */   useRequestPermission: () => (/* binding */ useRequestPermission),\n/* harmony export */   useStore: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useStore),\n/* harmony export */   useStreamVideoClient: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useStreamVideoClient),\n/* harmony export */   useTrackElementVisibility: () => (/* binding */ useTrackElementVisibility),\n/* harmony export */   useVerticalScrollPosition: () => (/* binding */ useVerticalScrollPosition)\n/* harmony export */ });\n/* harmony import */ var _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stream-io/video-client */ \"(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js\");\n/* harmony import */ var _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stream-io/video-react-bindings */ \"(ssr)/./node_modules/@stream-io/video-react-bindings/dist/index.es.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react/dist/floating-ui.react.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/core/dist/floating-ui.core.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! chart.js */ \"(ssr)/./node_modules/chart.js/dist/chart.js\");\n/* harmony import */ var react_chartjs_2__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-chartjs-2 */ \"(ssr)/./node_modules/react-chartjs-2/dist/index.js\");\n\n\n\n\n\n\n\n\n\n\n\nconst Audio = ({ participant, trackType = 'audioTrack', ...rest }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const [audioElement, setAudioElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const { userId, sessionId } = participant;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !audioElement)\n            return;\n        const cleanup = call.bindAudioElement(audioElement, sessionId, trackType);\n        return () => {\n            cleanup?.();\n        };\n    }, [call, sessionId, audioElement, trackType]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"audio\", { autoPlay: true, ...rest, ref: setAudioElement, \"data-user-id\": userId, \"data-session-id\": sessionId, \"data-track-type\": trackType }));\n};\n\nconst ParticipantsAudio = (props) => {\n    const { participants, audioProps } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: participants.map((participant) => {\n            if (participant.isLocalParticipant)\n                return null;\n            const { publishedTracks, audioStream, screenShareAudioStream, sessionId, } = participant;\n            const hasAudio = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.AUDIO);\n            const audioTrackElement = hasAudio && audioStream && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { ...audioProps, trackType: \"audioTrack\", participant: participant }));\n            const hasScreenShareAudio = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.SCREEN_SHARE_AUDIO);\n            const screenShareAudioTrackElement = hasScreenShareAudio &&\n                screenShareAudioStream && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { ...audioProps, trackType: \"screenShareAudioTrack\", participant: participant }));\n            return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: [audioTrackElement, screenShareAudioTrackElement] }, sessionId));\n        }) }));\n};\n\nconst ParticipantViewContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(undefined);\nconst useParticipantViewContext = () => (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ParticipantViewContext);\n\nconst Avatar = ({ imageSrc, name, style, className, ...rest }) => {\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(!imageSrc || error) && name && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AvatarFallback, { className: className, style: style, names: [name] })), imageSrc && !error && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { onError: () => setError(true), alt: \"avatar\", className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__avatar', className), src: imageSrc, style: style, ...rest }))] }));\n};\nconst AvatarFallback = ({ className, names, style, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__avatar--initials-fallback', className), style: style, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { children: [names[0][0], names[1]?.[0]] }) }));\n};\n\nconst useFloatingUIPreset = ({ placement, strategy, offset: offsetInPx = 10, }) => {\n    const { refs, x, y, update, elements: { domReference, floating }, } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useFloating)({\n        placement,\n        strategy,\n        middleware: [\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.offset)(offsetInPx),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.shift)(),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.flip)(),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.size)({\n                padding: 10,\n                apply: ({ availableHeight, elements }) => {\n                    Object.assign(elements.floating.style, {\n                        maxHeight: `${availableHeight}px`,\n                    });\n                },\n            }),\n        ],\n    });\n    // handle window resizing\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!domReference || !floating)\n            return;\n        const cleanup = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.autoUpdate)(domReference, floating, update);\n        return () => cleanup();\n    }, [domReference, floating, update]);\n    return { refs, x, y, domReference, floating, strategy };\n};\n\n/**\n * This hook will persist the device settings to local storage.\n *\n * @param key the key to use for local storage.\n */\nconst usePersistDevicePreferences = (key) => {\n    const { useMicrophoneState, useCameraState, useSpeakerState, useCallSettings, } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const mic = useMicrophoneState();\n    const camera = useCameraState();\n    const speaker = useSpeakerState();\n    const settings = useCallSettings();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !settings)\n            return;\n        if (call.state.callingState === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.LEFT)\n            return;\n        try {\n            const hasPreferences = !!window.localStorage.getItem(key);\n            const { audio, video } = settings;\n            const defaultDevice = 'default';\n            const preferences = {\n                mic: {\n                    selectedDeviceId: mic.selectedDevice || defaultDevice,\n                    muted: hasPreferences ? mic.isMute : !audio.mic_default_on,\n                },\n                camera: {\n                    selectedDeviceId: camera.selectedDevice || defaultDevice,\n                    muted: hasPreferences ? camera.isMute : !video.camera_default_on,\n                },\n                speaker: {\n                    selectedDeviceId: speaker.selectedDevice || defaultDevice,\n                    muted: false,\n                },\n            };\n            window.localStorage.setItem(key, JSON.stringify(preferences));\n        }\n        catch (err) {\n            console.warn('Failed to save device preferences', err);\n        }\n    }, [\n        call,\n        camera.isMute,\n        camera.selectedDevice,\n        key,\n        mic.isMute,\n        mic.selectedDevice,\n        settings,\n        speaker.selectedDevice,\n    ]);\n};\n/**\n * This hook will apply the device settings from local storage.\n *\n * @param key the key to use for local storage.\n */\nconst useApplyDevicePreferences = (key) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useCallSettings } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const settings = useCallSettings();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !settings)\n            return;\n        const apply = async () => {\n            const initMic = async (setting) => {\n                await call.microphone.select(setting.selectedDeviceId);\n                if (setting.muted) {\n                    await call.microphone.disable();\n                }\n                else {\n                    await call.microphone.enable();\n                }\n            };\n            const initCamera = async (setting) => {\n                await call.camera.select(setting.selectedDeviceId);\n                if (setting.muted) {\n                    await call.camera.disable();\n                }\n                else {\n                    await call.camera.enable();\n                }\n            };\n            const initSpeaker = (setting) => {\n                call.speaker.select(setting.selectedDeviceId);\n            };\n            let preferences = null;\n            try {\n                preferences = JSON.parse(window.localStorage.getItem(key));\n            }\n            catch (err) {\n                console.warn('Failed to load device preferences', err);\n            }\n            if (preferences) {\n                await initMic(preferences.mic);\n                await initCamera(preferences.camera);\n                initSpeaker(preferences.speaker);\n            }\n            else {\n                const { audio, video } = settings;\n                if (audio.mic_default_on)\n                    await call.microphone.enable();\n                if (video.camera_default_on)\n                    await call.camera.enable();\n            }\n        };\n        apply().catch((err) => {\n            console.warn('Failed to apply device preferences', err);\n        });\n    }, [call, key, settings]);\n};\n/**\n * This hook will apply and persist the device preferences from local storage.\n *\n * @param key the key to use for local storage.\n */\nconst usePersistedDevicePreferences = (key = '@stream-io/device-preferences') => {\n    useApplyDevicePreferences(key);\n    usePersistDevicePreferences(key);\n};\n\nconst SCROLL_THRESHOLD = 10;\n/**\n * Hook which observes element's scroll position and returns text value based on the\n * position of the scrollbar (`top`, `bottom`, `between` and `null` if no scrollbar is available)\n */\nconst useVerticalScrollPosition = (scrollElement, threshold = SCROLL_THRESHOLD) => {\n    const [scrollPosition, setScrollPosition] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!scrollElement)\n            return;\n        const scrollHandler = () => {\n            const element = scrollElement;\n            const hasVerticalScrollbar = element.scrollHeight > element.clientHeight;\n            if (!hasVerticalScrollbar)\n                return setScrollPosition(null);\n            const isAtTheTop = element.scrollTop <= threshold;\n            if (isAtTheTop)\n                return setScrollPosition('top');\n            const isAtTheBottom = Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) <= threshold;\n            if (isAtTheBottom)\n                return setScrollPosition('bottom');\n            setScrollPosition('between');\n        };\n        const resizeObserver = new ResizeObserver(scrollHandler);\n        resizeObserver.observe(scrollElement);\n        scrollElement.addEventListener('scroll', scrollHandler);\n        return () => {\n            scrollElement.removeEventListener('scroll', scrollHandler);\n            resizeObserver.disconnect();\n        };\n    }, [scrollElement, threshold]);\n    return scrollPosition;\n};\nconst useHorizontalScrollPosition = (scrollElement, threshold = SCROLL_THRESHOLD) => {\n    const [scrollPosition, setScrollPosition] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!scrollElement)\n            return;\n        const scrollHandler = () => {\n            const element = scrollElement;\n            const hasHorizontalScrollbar = element.scrollWidth > element.clientWidth;\n            if (!hasHorizontalScrollbar)\n                return setScrollPosition(null);\n            const isAtTheStart = element.scrollLeft <= threshold;\n            if (isAtTheStart)\n                return setScrollPosition('start');\n            const isAtTheEnd = Math.abs(element.scrollWidth - element.scrollLeft - element.clientWidth) <= threshold;\n            if (isAtTheEnd)\n                return setScrollPosition('end');\n            setScrollPosition('between');\n        };\n        const resizeObserver = new ResizeObserver(scrollHandler);\n        resizeObserver.observe(scrollElement);\n        scrollElement.addEventListener('scroll', scrollHandler);\n        return () => {\n            scrollElement.removeEventListener('scroll', scrollHandler);\n            resizeObserver.disconnect();\n        };\n    }, [scrollElement, threshold]);\n    return scrollPosition;\n};\n\nconst useToggleCallRecording = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useIsCallRecordingInProgress } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const isCallRecordingInProgress = useIsCallRecordingInProgress();\n    const [isAwaitingResponse, setIsAwaitingResponse] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    // TODO: add permissions\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        // we wait until call.recording_started/stopped event to flips the\n        // `isCallRecordingInProgress` state variable.\n        // Once the flip happens, we remove the loading indicator\n        setIsAwaitingResponse((isAwaiting) => {\n            if (isAwaiting)\n                return false;\n            return isAwaiting;\n        });\n    }, [isCallRecordingInProgress]);\n    const toggleCallRecording = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async () => {\n        try {\n            setIsAwaitingResponse(true);\n            if (isCallRecordingInProgress) {\n                await call?.stopRecording();\n            }\n            else {\n                await call?.startRecording();\n            }\n        }\n        catch (e) {\n            console.error(`Failed start recording`, e);\n        }\n    }, [call, isCallRecordingInProgress]);\n    return { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress };\n};\n\nconst useRequestPermission = (permission) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const hasPermission = useHasPermissions(permission);\n    const [isAwaitingPermission, setIsAwaitingPermission] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false); // TODO: load with possibly pending state\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        const reset = () => setIsAwaitingPermission(false);\n        if (hasPermission)\n            reset();\n    }, [hasPermission]);\n    const requestPermission = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async () => {\n        if (hasPermission)\n            return true;\n        const canRequestPermission = !!call?.permissionsContext.canRequest(permission);\n        if (isAwaitingPermission || !canRequestPermission)\n            return false;\n        setIsAwaitingPermission(true);\n        try {\n            await call?.requestPermissions({\n                permissions: [permission],\n            });\n        }\n        catch (error) {\n            setIsAwaitingPermission(false);\n            throw new Error(`requestPermission failed: ${error}`);\n        }\n        return false;\n    }, [call, hasPermission, isAwaitingPermission, permission]);\n    return {\n        requestPermission,\n        hasPermission,\n        canRequestPermission: !!call?.permissionsContext.canRequest(permission),\n        isAwaitingPermission,\n    };\n};\n\nvar MenuVisualType;\n(function (MenuVisualType) {\n    MenuVisualType[\"PORTAL\"] = \"portal\";\n    MenuVisualType[\"MENU\"] = \"menu\";\n})(MenuVisualType || (MenuVisualType = {}));\n/**\n * Used to provide utility APIs to the components rendered inside the portal.\n */\nconst MenuContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});\n/**\n * Access to the closes MenuContext.\n */\nconst useMenuContext = () => {\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(MenuContext);\n};\nconst MenuPortal = ({ children, refs, }) => {\n    const portalId = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => `str-video-portal-${Math.random().toString(36).substring(2, 9)}`, []);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { id: portalId, className: \"str-video__portal\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.FloatingOverlay, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.FloatingPortal, { id: portalId, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__portal-content\", ref: refs.setFloating, children: children }) }) })] }));\n};\nconst MenuToggle = ({ ToggleButton, placement = 'top-start', strategy = 'absolute', offset, visualType = MenuVisualType.MENU, children, }) => {\n    const [menuShown, setMenuShown] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const { floating, domReference, refs, x, y } = useFloatingUIPreset({\n        placement,\n        strategy,\n        offset,\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        const handleClick = (event) => {\n            if (!floating && domReference?.contains(event.target)) {\n                setMenuShown(true);\n            }\n            else if (floating && !floating?.contains(event.target)) {\n                setMenuShown(false);\n            }\n        };\n        const handleKeyDown = (event) => {\n            if (event.key.toLowerCase() === 'escape' &&\n                !event.altKey &&\n                !event.ctrlKey) {\n                setMenuShown(false);\n            }\n        };\n        document?.addEventListener('click', handleClick, { capture: true });\n        document?.addEventListener('keydown', handleKeyDown);\n        return () => {\n            document?.removeEventListener('click', handleClick, { capture: true });\n            document?.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [floating, domReference]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [menuShown && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuContext.Provider, { value: { close: () => setMenuShown(false) }, children: visualType === MenuVisualType.PORTAL ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuPortal, { refs: refs, children: children })) : visualType === MenuVisualType.MENU ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__menu-container\", ref: refs.setFloating, style: {\n                        position: strategy,\n                        top: y ?? 0,\n                        left: x ?? 0,\n                        overflowY: 'auto',\n                    }, children: children })) : null })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ToggleButton, { menuShown: menuShown, ref: refs.setReference })] }));\n};\n\nconst GenericMenu = ({ children, onItemClick, }) => {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"ul\", { className: \"str-video__generic-menu\", ref: ref, onClick: (e) => {\n            if (onItemClick &&\n                e.target !== ref.current &&\n                ref.current?.contains(e.target)) {\n                onItemClick(e);\n            }\n        }, children: children }));\n};\nconst GenericMenuButtonItem = ({ children, ...rest }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"li\", { className: \"str-video__generic-menu--item\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { ...rest, children: children }) }));\n};\n\nconst Icon = ({ className, icon }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__icon', icon && `str-video__icon--${icon}`, className) }));\n\nconst IconButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function IconButton(props, ref) {\n    const { icon, enabled, variant, onClick, className, ...rest } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-controls__button', className, {\n            [`str-video__call-controls__button--variant-${variant}`]: variant,\n            'str-video__call-controls__button--enabled': enabled,\n        }), onClick: (e) => {\n            e.preventDefault();\n            onClick?.(e);\n        }, ref: ref, ...rest, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: icon }) }));\n});\n\nconst isComponentType = (elementOrComponent) => {\n    return elementOrComponent === null\n        ? false\n        : !(0,react__WEBPACK_IMPORTED_MODULE_3__.isValidElement)(elementOrComponent);\n};\n\nconst chunk = (array, size) => {\n    const chunkCount = Math.ceil(array.length / size);\n    return Array.from({ length: chunkCount }, (_, index) => array.slice(size * index, size * index + size));\n};\n\nconst applyElementToRef = (ref, element) => {\n    if (!ref)\n        return;\n    if (typeof ref === 'function')\n        return ref(element);\n    ref.current = element;\n};\n\nconst CompositeButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function CompositeButton({ caption, children, className, active, Menu, menuPlacement, menuOffset, title, ToggleMenuButton = DefaultToggleMenuButton, variant, onClick, ...restButtonProps }, ref) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__composite-button', className, {\n            'str-video__composite-button--caption': caption,\n            'str-video__composite-button--menu': Menu,\n        }), title: title, ref: ref, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__composite-button__button-group', {\n                    'str-video__composite-button__button-group--active': active,\n                    'str-video__composite-button__button-group--active-primary': active && variant === 'primary',\n                    'str-video__composite-button__button-group--active-secondary': active && variant === 'secondary',\n                }), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { type: \"button\", className: \"str-video__composite-button__button\", onClick: (e) => {\n                            e.preventDefault();\n                            onClick?.(e);\n                        }, ...restButtonProps, children: children }), Menu && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { offset: menuOffset, placement: menuPlacement, ToggleButton: ToggleMenuButton, children: isComponentType(Menu) ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Menu, {}) : Menu }))] }), caption && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__composite-button__caption\", children: caption }))] }));\n});\nconst DefaultToggleMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function DefaultToggleMenuButton({ menuShown }, ref) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__menu-toggle-button', {\n            'str-video__menu-toggle-button--active': menuShown,\n        }), icon: menuShown ? 'caret-down' : 'caret-up', ref: ref }));\n});\n\nconst TextButton = ({ children, ...rest }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { ...rest, className: \"str-video__text-button\", children: children }));\n};\n\nconst AcceptCallButton = ({ disabled, onAccept, onClick, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.join();\n            onAccept?.();\n        }\n    }, [onClick, onAccept, call]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { disabled: disabled, icon: \"call-accept\", variant: \"success\", \"data-testid\": \"accept-call-button\", onClick: handleClick }));\n};\n\nconst Notification = (props) => {\n    const { isVisible, message, children, visibilityTimeout, resetIsVisible, placement = 'top', iconClassName = 'str-video__notification__icon', close, } = props;\n    const { refs, x, y, strategy } = useFloatingUIPreset({\n        placement,\n        strategy: 'absolute',\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!isVisible || !visibilityTimeout || !resetIsVisible)\n            return;\n        const timeout = setTimeout(() => {\n            resetIsVisible();\n        }, visibilityTimeout);\n        return () => clearTimeout(timeout);\n    }, [isVisible, resetIsVisible, visibilityTimeout]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ref: refs.setReference, children: [isVisible && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__notification\", ref: refs.setFloating, style: {\n                    position: strategy,\n                    top: y ?? 0,\n                    left: x ?? 0,\n                    overflowY: 'auto',\n                }, children: [iconClassName && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"i\", { className: iconClassName }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__notification__message\", children: message }), close ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"i\", { className: \"str-video__icon str-video__icon--close str-video__notification__close\", onClick: close })) : null] })), children] }));\n};\n\nconst PermissionNotification = (props) => {\n    const { permission, isAwaitingApproval, messageApproved, messageAwaitingApproval, messageRevoked, visibilityTimeout = 3500, children, } = props;\n    const { useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const hasPermission = useHasPermissions(permission);\n    const prevHasPermission = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(hasPermission);\n    const [showNotification, setShowNotification] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (hasPermission && !prevHasPermission.current) {\n            setShowNotification('granted');\n            prevHasPermission.current = true;\n        }\n        else if (!hasPermission && prevHasPermission.current) {\n            setShowNotification('revoked');\n            prevHasPermission.current = false;\n        }\n    }, [hasPermission]);\n    const resetIsVisible = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => setShowNotification(undefined), []);\n    if (isAwaitingApproval) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { isVisible: isAwaitingApproval && !hasPermission, message: messageAwaitingApproval, children: children }));\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { isVisible: !!showNotification, visibilityTimeout: visibilityTimeout, resetIsVisible: resetIsVisible, message: showNotification === 'granted' ? messageApproved : messageRevoked, children: children }));\n};\n\nconst SpeakingWhileMutedNotification = ({ children, text, placement, }) => {\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { isSpeakingWhileMuted } = useMicrophoneState();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const message = text ?? t('You are muted. Unmute to speak.');\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { message: message, isVisible: isSpeakingWhileMuted, placement: placement || 'top-start', children: children }));\n};\n\nconst RecordingInProgressNotification = ({ children, text, }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { isCallRecordingInProgress } = useToggleCallRecording();\n    const [isVisible, setVisible] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const message = text ?? t('Recording in progress...');\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (isCallRecordingInProgress) {\n            setVisible(true);\n        }\n        else {\n            setVisible(false);\n        }\n    }, [isCallRecordingInProgress]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { message: message, iconClassName: \"str-video__icon str-video__icon--recording-on\", isVisible: isVisible, placement: \"top-start\", close: () => setVisible(false), children: children }));\n};\n\nconst LoadingIndicator = ({ className, type = 'spinner', text, tooltip, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__loading-indicator', className), title: tooltip, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__loading-indicator__icon', type) }), text && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__loading-indicator-text\", children: text })] }));\n};\n\nconst RecordEndConfirmation = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { toggleCallRecording, isAwaitingResponse } = useToggleCallRecording();\n    const { close } = useMenuContext();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-recording__confirmation\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-recording__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"recording-on\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"h2\", { className: \"str-video__end-recording__heading\", children: t('End recording') })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__end-recording__description\", children: t('Are you sure you want end the recording?') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-recording__actions\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { variant: \"secondary\", onClick: close, children: t('Cancel') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { variant: \"primary\", onClick: toggleCallRecording, children: isAwaitingResponse ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, {}) : t('End recording') })] })] }));\n};\nconst ToggleEndRecordingMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleEndRecordingMenuButton(props, ref) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { ref: ref, active: true, variant: \"secondary\", \"data-testid\": \"recording-stop-button\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"recording-off\" }) }));\n});\nconst RecordCallConfirmationButton = ({ caption, }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress } = useToggleCallRecording();\n    if (isCallRecordingInProgress) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [\n                _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.START_RECORD_CALL,\n                _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.STOP_RECORD_CALL,\n            ], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { ToggleButton: ToggleEndRecordingMenuButton, visualType: MenuVisualType.PORTAL, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RecordEndConfirmation, {}) }) }));\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.START_RECORD_CALL,\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.STOP_RECORD_CALL,\n        ], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { active: isCallRecordingInProgress, caption: caption, title: caption || t('Record call'), variant: \"secondary\", \"data-testid\": \"recording-start-button\", onClick: isAwaitingResponse ? undefined : toggleCallRecording, children: isAwaitingResponse ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, { tooltip: t('Waiting for recording to start...') })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"recording-off\" })) }) }));\n};\nconst RecordCallButton = ({ caption }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress } = useToggleCallRecording();\n    let title = caption || t('Record call');\n    if (isAwaitingResponse) {\n        title = isCallRecordingInProgress\n            ? t('Waiting for recording to stop...')\n            : t('Waiting for recording to start...');\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.START_RECORD_CALL,\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.STOP_RECORD_CALL,\n        ], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { active: isCallRecordingInProgress, caption: caption, variant: \"secondary\", \"data-testid\": isCallRecordingInProgress\n                ? 'recording-stop-button'\n                : 'recording-start-button', title: title, onClick: isAwaitingResponse ? undefined : toggleCallRecording, children: isAwaitingResponse ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, {})) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: isCallRecordingInProgress ? 'recording-on' : 'recording-off' })) }) }));\n};\n\nconst defaultEmojiReactionMap = {\n    ':like:': '👍',\n    ':raise-hand:': '✋',\n    ':fireworks:': '🎉',\n    ':dislike:': '👎',\n    ':heart:': '❤️',\n    ':smile:': '😀',\n};\nconst Reaction = ({ participant: { reaction, sessionId }, hideAfterTimeoutInMs = 5500, emojiReactionMap = defaultEmojiReactionMap, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !reaction)\n            return;\n        const timeoutId = setTimeout(() => {\n            call.resetReaction(sessionId);\n        }, hideAfterTimeoutInMs);\n        return () => {\n            clearTimeout(timeoutId);\n        };\n    }, [call, hideAfterTimeoutInMs, reaction, sessionId]);\n    if (!reaction)\n        return null;\n    const { emoji_code: emojiCode } = reaction;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__reaction\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__reaction__emoji\", children: emojiCode && emojiReactionMap[emojiCode] }) }));\n};\n\nconst defaultReactions = [\n    {\n        type: 'reaction',\n        emoji_code: ':like:',\n    },\n    {\n        // TODO OL: use `prompt` type?\n        type: 'raised-hand',\n        emoji_code: ':raise-hand:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':fireworks:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':dislike:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':heart:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':smile:',\n    },\n];\nconst ReactionsButton = ({ reactions = defaultReactions, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.CREATE_REACTION], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"top\", ToggleButton: ToggleReactionsMenuButton, visualType: MenuVisualType.MENU, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultReactionsMenu, { reactions: reactions }) }) }));\n};\nconst ToggleReactionsMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleReactionsMenuButton({ menuShown }, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { ref: ref, active: menuShown, variant: \"primary\", title: t('Reactions'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"reactions\" }) }));\n});\nconst DefaultReactionsMenu = ({ reactions, layout = 'horizontal', }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__reactions-menu', {\n            'str-video__reactions-menu--horizontal': layout === 'horizontal',\n            'str-video__reactions-menu--vertical': layout === 'vertical',\n        }), children: reactions.map((reaction) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { type: \"button\", className: \"str-video__reactions-menu__button\", onClick: () => {\n                call?.sendReaction(reaction);\n            }, children: reaction.emoji_code && defaultEmojiReactionMap[reaction.emoji_code] }, reaction.emoji_code))) }));\n};\n\nconst ScreenShareButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption } = props;\n    const { useHasOngoingScreenShare, useScreenShareState, useCallSettings } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const isSomeoneScreenSharing = useHasOngoingScreenShare();\n    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE);\n    const callSettings = useCallSettings();\n    const isScreenSharingAllowed = callSettings?.screensharing.enabled;\n    const { screenShare, isMute: amIScreenSharing } = useScreenShareState();\n    const disableScreenShareButton = amIScreenSharing\n        ? isSomeoneScreenSharing || isScreenSharingAllowed === false\n        : false;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionNotification, { permission: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now share your screen.'), messageAwaitingApproval: t('Awaiting for an approval to share screen.'), messageRevoked: t('You can no longer share your screen.'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { active: isSomeoneScreenSharing, caption: caption, title: caption || t('Share screen'), variant: \"primary\", \"data-testid\": isSomeoneScreenSharing\n                    ? 'screen-share-stop-button'\n                    : 'screen-share-start-button', disabled: disableScreenShareButton, onClick: async () => {\n                    if (!hasPermission) {\n                        await requestPermission();\n                    }\n                    else {\n                        await screenShare.toggle();\n                    }\n                }, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: isSomeoneScreenSharing ? 'screen-share-on' : 'screen-share-off' }) }) }) }));\n};\n\nconst SelectContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});\nconst Select = (props) => {\n    const { children, icon, defaultSelectedLabel, defaultSelectedIndex, handleSelect: handleSelectProp, } = props;\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const [activeIndex, setActiveIndex] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [selectedIndex, setSelectedIndex] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(defaultSelectedIndex);\n    const [selectedLabel, setSelectedLabel] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(defaultSelectedLabel);\n    const { refs, context } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useFloating)({\n        placement: 'bottom-start',\n        open: isOpen,\n        onOpenChange: setIsOpen,\n        whileElementsMounted: _floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.autoUpdate,\n        middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.flip)()],\n    });\n    const elementsRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n    const labelsRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n    const handleSelect = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((index) => {\n        setSelectedIndex(index);\n        handleSelectProp(index || 0);\n        setIsOpen(false);\n        if (index !== null) {\n            setSelectedLabel(labelsRef.current[index]);\n        }\n    }, [handleSelectProp]);\n    const handleTypeaheadMatch = (index) => {\n        if (isOpen) {\n            setActiveIndex(index);\n        }\n        else {\n            handleSelect(index);\n        }\n    };\n    const listNav = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useListNavigation)(context, {\n        listRef: elementsRef,\n        activeIndex,\n        selectedIndex,\n        onNavigate: setActiveIndex,\n    });\n    const typeahead = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useTypeahead)(context, {\n        listRef: labelsRef,\n        activeIndex,\n        selectedIndex,\n        onMatch: handleTypeaheadMatch,\n    });\n    const click = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useClick)(context);\n    const dismiss = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useDismiss)(context);\n    const role = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useRole)(context, { role: 'listbox' });\n    const { getReferenceProps, getFloatingProps, getItemProps } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useInteractions)([listNav, typeahead, click, dismiss, role]);\n    const selectContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n        activeIndex,\n        selectedIndex,\n        getItemProps,\n        handleSelect,\n    }), [activeIndex, selectedIndex, getItemProps, handleSelect]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__dropdown\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__dropdown-selected\", ref: refs.setReference, tabIndex: 0, ...getReferenceProps(), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"label\", { className: \"str-video__dropdown-selected__label\", children: [icon && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__dropdown-selected__icon\", icon: icon })), selectedLabel] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__dropdown-selected__chevron\", icon: isOpen ? 'chevron-up' : 'chevron-down' })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SelectContext.Provider, { value: selectContext, children: isOpen && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.FloatingFocusManager, { context: context, modal: false, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__dropdown-list\", ref: refs.setFloating, ...getFloatingProps(), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.FloatingList, { elementsRef: elementsRef, labelsRef: labelsRef, children: children }) }) })) })] }));\n};\nconst DropDownSelectOption = (props) => {\n    const { selected, label, icon } = props;\n    const { getItemProps, handleSelect } = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SelectContext);\n    const { ref, index } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useListItem)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__dropdown-option', {\n            'str-video__dropdown-option--selected': selected,\n        }), ref: ref, ...getItemProps({\n            onClick: () => handleSelect(index),\n        }), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__dropdown-icon\", icon: icon }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__dropdown-label\", children: label })] }));\n};\nconst DropDownSelect = (props) => {\n    const { children, icon, handleSelect, defaultSelectedLabel, defaultSelectedIndex, } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Select, { icon: icon, handleSelect: handleSelect, defaultSelectedIndex: defaultSelectedIndex, defaultSelectedLabel: defaultSelectedLabel, children: children }));\n};\n\nconst DeviceSelectorOption = ({ disabled, id, label, onChange, name, selected, defaultChecked, value, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"label\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__device-settings__option', {\n            'str-video__device-settings__option--selected': selected,\n            'str-video__device-settings__option--disabled': disabled,\n        }), htmlFor: id, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"input\", { type: \"radio\", name: name, onChange: onChange, value: value, id: id, checked: selected, defaultChecked: defaultChecked, disabled: disabled }), label] }));\n};\nconst DeviceSelectorList = (props) => {\n    const { devices = [], selectedDeviceId: selectedDeviceFromProps, title, type, onChange, } = props;\n    // sometimes the browser (Chrome) will report the system-default device\n    // with an id of 'default'. In case when it doesn't, we'll select the first\n    // available device.\n    let selectedDeviceId = selectedDeviceFromProps;\n    if (devices.length > 0 &&\n        !devices.find((d) => d.deviceId === selectedDeviceId)) {\n        selectedDeviceId = devices[0].deviceId;\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__device-settings__device-kind\", children: [title && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__device-settings__device-selector-title\", children: title })), !devices.length ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorOption, { id: `${type}--default`, label: \"Default\", name: type, defaultChecked: true, value: \"default\" })) : (devices.map((device) => {\n                return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorOption, { id: `${type}--${device.deviceId}`, value: device.deviceId, label: device.label, onChange: (e) => {\n                        onChange?.(e.target.value);\n                    }, name: type, selected: device.deviceId === selectedDeviceId || devices.length === 1 }, device.deviceId));\n            }))] }));\n};\nconst DeviceSelectorDropdown = (props) => {\n    const { devices = [], selectedDeviceId: selectedDeviceFromProps, title, onChange, icon, } = props;\n    // sometimes the browser (Chrome) will report the system-default device\n    // with an id of 'default'. In case when it doesn't, we'll select the first\n    // available device.\n    let selectedDeviceId = selectedDeviceFromProps;\n    if (devices.length > 0 &&\n        !devices.find((d) => d.deviceId === selectedDeviceId)) {\n        selectedDeviceId = devices[0].deviceId;\n    }\n    const selectedIndex = devices.findIndex((d) => d.deviceId === selectedDeviceId);\n    const handleSelect = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((index) => {\n        onChange?.(devices[index].deviceId);\n    }, [devices, onChange]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__device-settings__device-kind\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__device-settings__device-selector-title\", children: title }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropDownSelect, { icon: icon, defaultSelectedIndex: selectedIndex, defaultSelectedLabel: devices[selectedIndex]?.label, handleSelect: handleSelect, children: devices.map((device) => {\n                    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropDownSelectOption, { icon: icon, label: device.label, selected: device.deviceId === selectedDeviceId || devices.length === 1 }, device.deviceId));\n                }) })] }));\n};\nconst DeviceSelector = (props) => {\n    const { visualType = 'list', icon, placeholder, ...rest } = props;\n    if (visualType === 'list') {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorList, { ...rest });\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorDropdown, { ...rest, icon: icon, placeholder: placeholder }));\n};\n\nconst DeviceSelectorAudioInput = ({ title, visualType, }) => {\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { microphone, selectedDevice, devices } = useMicrophoneState();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelector, { devices: devices || [], selectedDeviceId: selectedDevice, type: \"audioinput\", onChange: async (deviceId) => {\n            await microphone.select(deviceId);\n        }, title: title, visualType: visualType, icon: \"mic\" }));\n};\nconst DeviceSelectorAudioOutput = ({ title, visualType, }) => {\n    const { useSpeakerState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { speaker, selectedDevice, devices, isDeviceSelectionSupported } = useSpeakerState();\n    if (!isDeviceSelectionSupported)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelector, { devices: devices, type: \"audiooutput\", selectedDeviceId: selectedDevice, onChange: (deviceId) => {\n            speaker.select(deviceId);\n        }, title: title, visualType: visualType, icon: \"speaker\" }));\n};\n\nconst DeviceSelectorVideo = ({ title, visualType, }) => {\n    const { useCameraState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { camera, devices, selectedDevice } = useCameraState();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelector, { devices: devices || [], type: \"videoinput\", selectedDeviceId: selectedDevice, onChange: async (deviceId) => {\n            await camera.select(deviceId);\n        }, title: title, visualType: visualType, icon: \"camera\" }));\n};\n\nconst DeviceSettings = ({ visualType = MenuVisualType.MENU, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"bottom-end\", ToggleButton: ToggleDeviceSettingsMenuButton, visualType: visualType, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Menu, {}) }));\n};\nconst Menu = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__device-settings\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorVideo, { title: t('Select a Camera') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorAudioInput, { title: t('Select a Mic') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorAudioOutput, { title: t('Select Speakers') })] }));\n};\nconst ToggleDeviceSettingsMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleDeviceSettingsMenuButton({ menuShown }, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__device-settings__button', {\n            'str-video__device-settings__button--active': menuShown,\n        }), title: t('Toggle device menu'), icon: \"device-settings\", ref: ref }));\n});\n\nconst ToggleAudioPreviewButton = (props) => {\n    const { caption, Menu, menuPlacement, ...restCompositeButtonProps } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { microphone, isMute, hasBrowserPermission } = useMicrophoneState();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: isMute, caption: caption, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(!hasBrowserPermission && 'str-video__device-unavailable'), variant: \"secondary\", title: !hasBrowserPermission\n            ? t('Check your browser audio permissions')\n            : caption || t('Mic'), disabled: !hasBrowserPermission, \"data-testid\": isMute ? 'preview-audio-unmute-button' : 'preview-audio-mute-button', onClick: () => microphone.toggle(), Menu: Menu, menuPlacement: menuPlacement, ...restCompositeButtonProps, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: !isMute ? 'mic' : 'mic-off' }), !hasBrowserPermission && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", title: t('Check your browser audio permissions'), children: \"!\" }))] }));\n};\nconst ToggleAudioPublishingButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, Menu = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorAudioInput, { visualType: \"list\" }), menuPlacement = 'top', ...restCompositeButtonProps } = props;\n    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO);\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { microphone, isMute, hasBrowserPermission } = useMicrophoneState();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionNotification, { permission: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now speak.'), messageAwaitingApproval: t('Awaiting for an approval to speak.'), messageRevoked: t('You can no longer speak.'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: isMute, caption: caption, title: !hasPermission\n                    ? t('You have no permission to share your audio')\n                    : !hasBrowserPermission\n                        ? t('Check your browser mic permissions')\n                        : caption || t('Mic'), variant: \"secondary\", disabled: !hasBrowserPermission || !hasPermission, \"data-testid\": isMute ? 'audio-unmute-button' : 'audio-mute-button', onClick: async () => {\n                    if (!hasPermission) {\n                        await requestPermission();\n                    }\n                    else {\n                        await microphone.toggle();\n                    }\n                }, Menu: Menu, menuPlacement: menuPlacement, menuOffset: 16, ...restCompositeButtonProps, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: isMute ? 'mic-off' : 'mic' }), (!hasBrowserPermission || !hasPermission) && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", children: \"!\" }))] }) }) }));\n};\n\nconst ToggleVideoPreviewButton = (props) => {\n    const { caption, Menu = DeviceSelectorVideo, menuPlacement = 'top', ...restCompositeButtonProps } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { useCameraState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { camera, isMute, hasBrowserPermission } = useCameraState();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: isMute, caption: caption, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(!hasBrowserPermission && 'str-video__device-unavailable'), title: !hasBrowserPermission\n            ? t('Check your browser video permissions')\n            : caption || t('Video'), variant: \"secondary\", \"data-testid\": isMute ? 'preview-video-unmute-button' : 'preview-video-mute-button', onClick: () => camera.toggle(), disabled: !hasBrowserPermission, Menu: Menu, menuPlacement: menuPlacement, ...restCompositeButtonProps, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: !isMute ? 'camera' : 'camera-off' }), !hasBrowserPermission && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", title: t('Check your browser video permissions'), children: \"!\" }))] }));\n};\nconst ToggleVideoPublishingButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, Menu = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorVideo, { visualType: \"list\" }), menuPlacement = 'top', ...restCompositeButtonProps } = props;\n    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO);\n    const { useCameraState, useCallSettings } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { camera, isMute, hasBrowserPermission } = useCameraState();\n    const callSettings = useCallSettings();\n    const isPublishingVideoAllowed = callSettings?.video.enabled;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionNotification, { permission: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now share your video.'), messageAwaitingApproval: t('Awaiting for an approval to share your video.'), messageRevoked: t('You can no longer share your video.'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: isMute, caption: caption, variant: \"secondary\", title: !hasPermission\n                    ? t('You have no permission to share your video')\n                    : !hasBrowserPermission\n                        ? t('Check your browser video permissions')\n                        : !isPublishingVideoAllowed\n                            ? t('Video publishing is disabled by the system')\n                            : caption || t('Video'), disabled: !hasBrowserPermission || !hasPermission || !isPublishingVideoAllowed, \"data-testid\": isMute ? 'video-unmute-button' : 'video-mute-button', onClick: async () => {\n                    if (!hasPermission) {\n                        await requestPermission();\n                    }\n                    else {\n                        await camera.toggle();\n                    }\n                }, Menu: Menu, menuPlacement: menuPlacement, menuOffset: 16, ...restCompositeButtonProps, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: isMute ? 'camera-off' : 'camera' }), (!hasBrowserPermission ||\n                        !hasPermission ||\n                        !isPublishingVideoAllowed) && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", children: \"!\" }))] }) }) }));\n};\n\nconst EndCallMenu = (props) => {\n    const { onLeave, onEnd } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-call__confirmation\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"button\", { className: \"str-video__button str-video__end-call__leave\", type: \"button\", \"data-testid\": \"leave-call-button\", onClick: onLeave, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__button__icon str-video__end-call__leave-icon\", icon: \"logout\" }), t('Leave call')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.END_CALL], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"button\", { className: \"str-video__button str-video__end-call__end\", type: \"button\", \"data-testid\": \"end-call-for-all-button\", onClick: onEnd, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__button__icon str-video__end-call__end-icon\", icon: \"call-end\" }), t('End call for all')] }) })] }));\n};\nconst CancelCallToggleMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function CancelCallToggleMenuButton(props, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { icon: \"call-end\", variant: \"danger\", title: t('Leave call'), \"data-testid\": \"leave-call-button\", ref: ref }));\n});\nconst CancelCallConfirmButton = ({ onClick, onLeave, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const handleLeave = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.leave();\n            onLeave?.();\n        }\n    }, [onClick, onLeave, call]);\n    const handleEndCall = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.endCall();\n            onLeave?.();\n        }\n    }, [onClick, onLeave, call]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"top-start\", ToggleButton: CancelCallToggleMenuButton, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EndCallMenu, { onEnd: handleEndCall, onLeave: handleLeave }) }));\n};\nconst CancelCallButton = ({ disabled, onClick, onLeave, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.leave();\n            onLeave?.();\n        }\n    }, [onClick, onLeave, call]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { disabled: disabled, icon: \"call-end\", variant: \"danger\", title: t('Leave call'), \"data-testid\": \"cancel-call-button\", onClick: handleClick }));\n};\n\nconst CallControls = ({ onLeave }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-controls\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RecordCallButton, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ReactionsButton, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ScreenShareButton, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SpeakingWhileMutedNotification, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ToggleAudioPublishingButton, {}) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ToggleVideoPublishingButton, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CancelCallButton, { onLeave: onLeave })] }));\n\nchart_js__WEBPACK_IMPORTED_MODULE_8__.Chart.register(chart_js__WEBPACK_IMPORTED_MODULE_8__.CategoryScale, chart_js__WEBPACK_IMPORTED_MODULE_8__.LinearScale, chart_js__WEBPACK_IMPORTED_MODULE_8__.LineElement, chart_js__WEBPACK_IMPORTED_MODULE_8__.PointElement);\nconst CallStatsLatencyChart = (props) => {\n    const { values } = props;\n    let max = 0;\n    const data = {\n        labels: values.map((point) => {\n            const date = new Date(point.x * 1000);\n            return `${date.getHours()}:${date.getMinutes()}`;\n        }),\n        datasets: [\n            {\n                data: values.map((point) => {\n                    const { y } = point;\n                    max = Math.max(max, y);\n                    return point;\n                }),\n                borderColor: '#00e2a1',\n                backgroundColor: '#00e2a1',\n            },\n        ],\n    };\n    const options = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => {\n        return {\n            maintainAspectRatio: false,\n            animation: {\n                duration: 0,\n            },\n            elements: {\n                line: {\n                    borderWidth: 1,\n                },\n                point: {\n                    radius: 2,\n                },\n            },\n            scales: {\n                y: {\n                    position: 'right',\n                    stacked: true,\n                    min: 0,\n                    max: Math.max(180, Math.ceil((max + 10) / 10) * 10),\n                    grid: {\n                        display: true,\n                        color: '#979ca0',\n                    },\n                    ticks: {\n                        stepSize: 30,\n                    },\n                },\n                x: {\n                    grid: {\n                        display: false,\n                    },\n                    ticks: {\n                        display: false,\n                    },\n                },\n            },\n        };\n    }, [max]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats-line-chart-container\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_chartjs_2__WEBPACK_IMPORTED_MODULE_9__.Line, { options: options, data: data, className: \"str-video__call-stats__latencychart\" }) }));\n};\n\nvar Statuses;\n(function (Statuses) {\n    Statuses[\"GOOD\"] = \"Good\";\n    Statuses[\"OK\"] = \"Ok\";\n    Statuses[\"BAD\"] = \"Bad\";\n})(Statuses || (Statuses = {}));\nconst statsStatus = ({ value, lowBound, highBound, }) => {\n    if (value <= lowBound) {\n        return Statuses.GOOD;\n    }\n    if (value >= lowBound && value <= highBound) {\n        return Statuses.OK;\n    }\n    if (value >= highBound) {\n        return Statuses.BAD;\n    }\n    return Statuses.GOOD;\n};\nconst CallStats = (props) => {\n    const { latencyLowBound = 75, latencyHighBound = 400 } = props;\n    const [latencyBuffer, setLatencyBuffer] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(() => {\n        const now = Date.now();\n        return Array.from({ length: 20 }, (_, i) => ({ x: now + i, y: 0 }));\n    });\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const [publishBitrate, setPublishBitrate] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('-');\n    const [subscribeBitrate, setSubscribeBitrate] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('-');\n    const previousStats = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    const { useCallStatsReport } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const callStatsReport = useCallStatsReport();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!callStatsReport)\n            return;\n        if (!previousStats.current) {\n            previousStats.current = callStatsReport;\n            return;\n        }\n        const previousCallStatsReport = previousStats.current;\n        setPublishBitrate(() => {\n            return calculatePublishBitrate(previousCallStatsReport, callStatsReport);\n        });\n        setSubscribeBitrate(() => {\n            return calculateSubscribeBitrate(previousCallStatsReport, callStatsReport);\n        });\n        setLatencyBuffer((latencyBuf) => {\n            const newLatencyBuffer = latencyBuf.slice(-19);\n            newLatencyBuffer.push({\n                x: callStatsReport.timestamp,\n                y: callStatsReport.publisherStats.averageRoundTripTimeInMs,\n            });\n            return newLatencyBuffer;\n        });\n        previousStats.current = callStatsReport;\n    }, [callStatsReport]);\n    const latencyComparison = {\n        lowBound: latencyLowBound,\n        highBound: latencyHighBound,\n        value: callStatsReport?.publisherStats.averageRoundTripTimeInMs || 0,\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats\", children: callStatsReport && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"h3\", { className: \"str-video__call-stats__heading\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__call-stats__icon\", icon: \"call-latency\" }), t('Call Latency')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__call-stats__description\", children: t('Very high latency values may reduce call quality, cause lag, and make the call less enjoyable.') })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats__latencychart\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallStatsLatencyChart, { values: latencyBuffer }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"h3\", { className: \"str-video__call-stats__heading\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__call-stats__icon\", icon: \"network-quality\" }), t('Call performance')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__call-stats__description\", children: t('Very high latency values may reduce call quality, cause lag, and make the call less enjoyable.') })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card-container\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Region\", value: callStatsReport.datacenter }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Latency\", value: `${callStatsReport.publisherStats.averageRoundTripTimeInMs} ms.`, comparison: latencyComparison }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Receive jitter\", value: `${callStatsReport.subscriberStats.averageJitterInMs} ms.`, comparison: {\n                                ...latencyComparison,\n                                value: callStatsReport.subscriberStats.averageJitterInMs,\n                            } }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Publish jitter\", value: `${callStatsReport.publisherStats.averageJitterInMs} ms.`, comparison: {\n                                ...latencyComparison,\n                                value: callStatsReport.publisherStats.averageJitterInMs,\n                            } }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Publish resolution\", value: toFrameSize(callStatsReport.publisherStats) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Publish quality drop reason\", value: callStatsReport.publisherStats.qualityLimitationReasons }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Receiving resolution\", value: toFrameSize(callStatsReport.subscriberStats) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Receive quality drop reason\", value: callStatsReport.subscriberStats.qualityLimitationReasons }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Publish bitrate\", value: publishBitrate }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Receiving bitrate\", value: subscribeBitrate })] })] })) }));\n};\nconst StatCardExplanation = (props) => {\n    const { description } = props;\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const { refs, floatingStyles, context } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useFloating)({\n        open: isOpen,\n        onOpenChange: setIsOpen,\n    });\n    const hover = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useHover)(context);\n    const { getReferenceProps, getFloatingProps } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useInteractions)([hover]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-explanation\", ref: refs.setReference, ...getReferenceProps(), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__call-explanation__icon\", icon: \"info\" }) }), isOpen && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-explanation__description\", ref: refs.setFloating, style: floatingStyles, ...getFloatingProps(), children: description }))] }));\n};\nconst StatsTag = ({ children, status = Statuses.GOOD, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-stats__tag', {\n            'str-video__call-stats__tag--good': status === Statuses.GOOD,\n            'str-video__call-stats__tag--ok': status === Statuses.OK,\n            'str-video__call-stats__tag--bad': status === Statuses.BAD,\n        }), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats__tag__text\", children: children }) }));\n};\nconst StatCard = (props) => {\n    const { label, value, description, comparison } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const status = comparison ? statsStatus(comparison) : undefined;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card-content\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card-label\", children: [label, description && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCardExplanation, { description: description })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats__card-value\", children: value })] }), comparison && status && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatsTag, { status: status, children: t(status) })] }));\n};\nconst toFrameSize = (stats) => {\n    const { highestFrameWidth: w, highestFrameHeight: h, highestFramesPerSecond: fps, } = stats;\n    let size = `-`;\n    if (w && h) {\n        size = `${w}x${h}`;\n        if (fps) {\n            size += `@${fps}fps.`;\n        }\n    }\n    return size;\n};\nconst calculatePublishBitrate = (previousCallStatsReport, callStatsReport) => {\n    const { publisherStats: { totalBytesSent: previousTotalBytesSent, timestamp: previousTimestamp, }, } = previousCallStatsReport;\n    const { publisherStats: { totalBytesSent, timestamp }, } = callStatsReport;\n    const bytesSent = totalBytesSent - previousTotalBytesSent;\n    const timeElapsed = timestamp - previousTimestamp;\n    return `${((bytesSent * 8) / timeElapsed).toFixed(2)} kbps`;\n};\nconst calculateSubscribeBitrate = (previousCallStatsReport, callStatsReport) => {\n    const { subscriberStats: { totalBytesReceived: previousTotalBytesReceived, timestamp: previousTimestamp, }, } = previousCallStatsReport;\n    const { subscriberStats: { totalBytesReceived, timestamp }, } = callStatsReport;\n    const bytesReceived = totalBytesReceived - previousTotalBytesReceived;\n    const timeElapsed = timestamp - previousTimestamp;\n    return `${((bytesReceived * 8) / timeElapsed).toFixed(2)} kbps`;\n};\n\nconst CallStatsButton = () => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"top-end\", ToggleButton: ToggleMenuButton, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallStats, {}) }));\nconst ToggleMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleMenuButton(props, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, menuShown } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { ref: ref, active: menuShown, caption: caption, title: caption || t('Statistics'), \"data-testid\": \"stats-button\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"stats\" }) }));\n});\n\nconst ToggleAudioOutputButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, Menu = DeviceSelectorAudioOutput, menuPlacement = 'top', } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { Menu: Menu, menuPlacement: menuPlacement, caption: caption, title: caption || t('Speakers'), \"data-testid\": \"audio-output-button\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"speaker\" }) }));\n};\n\nconst BlockedUserListing = ({ data }) => {\n    if (!data.length)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-listing\", children: data.map((userId) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BlockedUserListingItem, { userId: userId }, userId))) }) }));\n};\nconst BlockedUserListingItem = ({ userId }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const unblockUserClickHandler = () => {\n        if (userId)\n            call?.unblockUser(userId);\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-listing-item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-listing-item__display-name\", children: userId }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.BLOCK_USERS], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TextButton, { onClick: unblockUserClickHandler, children: \"Unblock\" }) })] }));\n};\n\nconst CallParticipantListHeader = ({ onClose, }) => {\n    const { useParticipants, useAnonymousParticipantCount } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participants = useParticipants();\n    const anonymousParticipantCount = useAnonymousParticipantCount();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list-header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list-header__title\", children: [t('Participants'), ' ', (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: \"str-video__participant-list-header__title-count\", children: [\"[\", participants.length, \"]\"] }), anonymousParticipantCount > 0 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__participant-list-header__title-anonymous\", children: t('Anonymous', { count: anonymousParticipantCount }) }))] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: onClose, className: \"str-video__participant-list-header__close-button\", icon: \"close\" })] }));\n};\n\nconst Tooltip = ({ children, referenceElement, tooltipClassName, tooltipPlacement = 'top', visible = false, }) => {\n    const { refs, x, y, strategy } = useFloatingUIPreset({\n        placement: tooltipPlacement,\n        strategy: 'absolute',\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        refs.setReference(referenceElement);\n    }, [referenceElement, refs]);\n    if (!visible)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__tooltip', tooltipClassName), ref: refs.setFloating, style: {\n            position: strategy,\n            top: y ?? 0,\n            left: x ?? 0,\n            overflowY: 'auto',\n        }, children: children }));\n};\n\nconst useEnterLeaveHandlers = ({ onMouseEnter, onMouseLeave, } = {}) => {\n    const [tooltipVisible, setTooltipVisible] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const handleMouseEnter = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((e) => {\n        setTooltipVisible(true);\n        onMouseEnter?.(e);\n    }, [onMouseEnter]);\n    const handleMouseLeave = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((e) => {\n        setTooltipVisible(false);\n        onMouseLeave?.(e);\n    }, [onMouseLeave]);\n    return { handleMouseEnter, handleMouseLeave, tooltipVisible };\n};\n\n// todo: duplicate of CallParticipantList.tsx#MediaIndicator - refactor to a single component\nconst WithTooltip = ({ title, tooltipClassName, tooltipPlacement, ...props }) => {\n    const { handleMouseEnter, handleMouseLeave, tooltipVisible } = useEnterLeaveHandlers();\n    const [tooltipAnchor, setTooltipAnchor] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Tooltip, { referenceElement: tooltipAnchor, visible: tooltipVisible, tooltipClassName: tooltipClassName, tooltipPlacement: tooltipPlacement, children: title || '' }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: setTooltipAnchor, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, ...props })] }));\n};\n\nconst CallParticipantListingItem = ({ participant, DisplayName = DefaultDisplayName, }) => {\n    const isAudioOn = participant.publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.AUDIO);\n    const isVideoOn = participant.publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.VIDEO);\n    const isPinned = !!participant.pin;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-listing-item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Avatar, { name: participant.name, imageSrc: participant.image }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DisplayName, { participant: participant }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-listing-item__media-indicator-group\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MediaIndicator, { title: isAudioOn ? t('Microphone on') : t('Microphone off'), className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-listing-item__icon', `str-video__participant-listing-item__icon-${isAudioOn ? 'mic' : 'mic-off'}`) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MediaIndicator, { title: isVideoOn ? t('Camera on') : t('Camera off'), className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-listing-item__icon', `str-video__participant-listing-item__icon-${isVideoOn ? 'camera' : 'camera-off'}`) }), isPinned && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MediaIndicator, { title: t('Pinned'), className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-listing-item__icon', 'str-video__participant-listing-item__icon-pinned') })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"bottom-end\", ToggleButton: ToggleButton$2, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantViewContext.Provider, { value: { participant, trackType: 'none' }, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantActionsContextMenu, {}) }) })] })] }));\n};\nconst MediaIndicator = (props) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { ...props }));\nconst DefaultDisplayName = ({ participant }) => {\n    const connectedUser = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useConnectedUser)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const meFlag = participant.userId === connectedUser?.id ? t('Me') : '';\n    const nameOrId = participant.name || participant.userId || t('Unknown');\n    let displayName;\n    if (!participant.name) {\n        displayName = meFlag || nameOrId || t('Unknown');\n    }\n    else if (meFlag) {\n        displayName = `${nameOrId} (${meFlag})`;\n    }\n    else {\n        displayName = nameOrId;\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { className: \"str-video__participant-listing-item__display-name\", title: displayName, children: displayName }));\n};\nconst ToggleButton$2 = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleButton(props, ref) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { enabled: props.menuShown, icon: \"ellipsis\", ref: ref });\n});\n\nconst CallParticipantListing = ({ data, }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-listing\", children: data.map((participant) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallParticipantListingItem, { participant: participant }, participant.sessionId))) }));\n\nconst EmptyParticipantSearchList = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-list--empty\", children: t('No participants found') }));\n};\n\nconst SearchInput = ({ exitSearch, isActive, ...rest }) => {\n    const [inputElement, setInputElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!inputElement)\n            return;\n        const handleKeyDown = (e) => {\n            if (e.key.toLowerCase() === 'escape')\n                exitSearch();\n        };\n        inputElement.addEventListener('keydown', handleKeyDown);\n        return () => {\n            inputElement.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [exitSearch, inputElement]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__search-input__container', {\n            'str-video__search-input__container--active': isActive,\n        }), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"input\", { placeholder: \"Search\", ...rest, ref: setInputElement }), isActive ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { className: \"str-video__search-input__clear-btn\", onClick: exitSearch, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__search-input__icon--active\" }) })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__search-input__icon\" }))] }));\n};\n\nconst SearchResults = ({ EmptySearchResultComponent, LoadingIndicator: LoadingIndicator$1 = LoadingIndicator, searchQueryInProgress, searchResults, SearchResultList, }) => {\n    if (searchQueryInProgress) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__search-results--loading\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator$1, {}) }));\n    }\n    if (!searchResults.length) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EmptySearchResultComponent, {});\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchResultList, { data: searchResults });\n};\n\nconst useSearch = ({ debounceInterval, searchFn, searchQuery = '', }) => {\n    const [searchResults, setSearchResults] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]);\n    const [searchQueryInProgress, setSearchQueryInProgress] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!searchQuery.length) {\n            setSearchQueryInProgress(false);\n            setSearchResults([]);\n            return;\n        }\n        setSearchQueryInProgress(true);\n        const timeout = setTimeout(async () => {\n            try {\n                const results = await searchFn(searchQuery);\n                setSearchResults(results);\n            }\n            catch (error) {\n                console.error(error);\n            }\n            finally {\n                setSearchQueryInProgress(false);\n            }\n        }, debounceInterval);\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [debounceInterval, searchFn, searchQuery]);\n    return {\n        searchQueryInProgress,\n        searchResults,\n    };\n};\n\nconst UserListTypes = {\n    active: 'Active users',\n    blocked: 'Blocked users',\n};\nconst DEFAULT_DEBOUNCE_SEARCH_INTERVAL = 200;\nconst CallParticipantsList = ({ onClose, activeUsersSearchFn, blockedUsersSearchFn, debounceSearchInterval, }) => {\n    const [searchQuery, setSearchQuery] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('');\n    const [userListType, setUserListType] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('active');\n    const exitSearch = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => setSearchQuery(''), []);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallParticipantListHeader, { onClose: onClose }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchInput, { value: searchQuery, onChange: ({ currentTarget }) => setSearchQuery(currentTarget.value), exitSearch: exitSearch, isActive: !!searchQuery }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallParticipantListContentHeader, { userListType: userListType, setUserListType: setUserListType }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list__content\", children: [userListType === 'active' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ActiveUsersSearchResults, { searchQuery: searchQuery, activeUsersSearchFn: activeUsersSearchFn, debounceSearchInterval: debounceSearchInterval })), userListType === 'blocked' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BlockedUsersSearchResults, { searchQuery: searchQuery, blockedUsersSearchFn: blockedUsersSearchFn, debounceSearchInterval: debounceSearchInterval }))] })] }));\n};\nconst CallParticipantListContentHeader = ({ userListType, setUserListType, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const muteAll = () => {\n        call?.muteAllUsers('audio');\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list__content-header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-list__content-header-title\", children: userListType === 'active' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.MUTE_USERS], hasPermissionsOnly: true, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TextButton, { onClick: muteAll, children: \"Mute all\" }) })) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"bottom-end\", ToggleButton: ToggleButton$1, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenu, { children: Object.keys(UserListTypes).map((lt) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { \"aria-selected\": lt === userListType, onClick: () => setUserListType(lt), children: UserListTypes[lt] }, lt))) }) })] }));\n};\nconst ActiveUsersSearchResults = ({ searchQuery, activeUsersSearchFn: activeUsersSearchFnFromProps, debounceSearchInterval = DEFAULT_DEBOUNCE_SEARCH_INTERVAL, }) => {\n    const { useParticipants } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participants = useParticipants({ sortBy: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.name });\n    const activeUsersSearchFn = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((queryString) => {\n        const queryRegExp = new RegExp(queryString, 'i');\n        return Promise.resolve(participants.filter((participant) => {\n            return participant.name.match(queryRegExp);\n        }));\n    }, [participants]);\n    const { searchQueryInProgress, searchResults } = useSearch({\n        searchFn: activeUsersSearchFnFromProps ?? activeUsersSearchFn,\n        debounceInterval: debounceSearchInterval,\n        searchQuery,\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchResults, { EmptySearchResultComponent: EmptyParticipantSearchList, LoadingIndicator: LoadingIndicator, searchQueryInProgress: searchQueryInProgress, searchResults: searchQuery ? searchResults : participants, SearchResultList: CallParticipantListing }));\n};\nconst BlockedUsersSearchResults = ({ blockedUsersSearchFn: blockedUsersSearchFnFromProps, debounceSearchInterval = DEFAULT_DEBOUNCE_SEARCH_INTERVAL, searchQuery, }) => {\n    const { useCallBlockedUserIds } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const blockedUsers = useCallBlockedUserIds();\n    const blockedUsersSearchFn = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((queryString) => {\n        const queryRegExp = new RegExp(queryString, 'i');\n        return Promise.resolve(blockedUsers.filter((blockedUser) => {\n            return blockedUser.match(queryRegExp);\n        }));\n    }, [blockedUsers]);\n    const { searchQueryInProgress, searchResults } = useSearch({\n        searchFn: blockedUsersSearchFnFromProps ?? blockedUsersSearchFn,\n        debounceInterval: debounceSearchInterval,\n        searchQuery,\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchResults, { EmptySearchResultComponent: EmptyParticipantSearchList, LoadingIndicator: LoadingIndicator, searchQueryInProgress: searchQueryInProgress, searchResults: searchQuery ? searchResults : blockedUsers, SearchResultList: BlockedUserListing }));\n};\nconst ToggleButton$1 = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleButton(props, ref) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { enabled: props.menuShown, icon: \"filter\", ref: ref });\n});\n\nconst CallPreview = (props) => {\n    const { className, style } = props;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useCallThumbnail } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const thumbnail = useCallThumbnail();\n    const [imageRef, setImageRef] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!imageRef || !call)\n            return;\n        const cleanup = call.bindCallThumbnailElement(imageRef);\n        return () => cleanup();\n    }, [imageRef, call]);\n    if (!thumbnail)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-preview', className), style: style, alt: \"Call Preview Thumbnail\", ref: setImageRef }));\n};\n\nconst CallRecordingListHeader = ({ callRecordings, onRefresh, }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list__title\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { children: t('Call Recordings') }), callRecordings.length ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { children: [\"(\", callRecordings.length, \")\"] }) : null] }), onRefresh && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { icon: \"refresh\", title: t('Refresh'), onClick: onRefresh }))] }));\n};\n\nconst dateFormat = (date) => {\n    const format = new Date(date);\n    return format.toTimeString().split(' ')[0];\n};\nconst CallRecordingListItem = ({ recording, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"li\", { className: \"str-video__call-recording-list__item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__filename\", children: recording.filename }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__time\", children: dateFormat(recording.start_time) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__time\", children: dateFormat(recording.end_time) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__download\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"a\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-recording-list-item__action-button', 'str-video__call-recording-list-item__action-button--download'), role: \"button\", href: recording.url, download: recording.filename, title: \"Download the recording\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"download\" }) }) })] }));\n};\n\nconst EmptyCallRecordingListing = () => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list__listing str-video__call-recording-list__listing--empty\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__listing--icon-empty\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__call-recording-list__listing--text-empty\", children: \"No recordings available\" })] }));\n};\n\nconst LoadingCallRecordingListing = ({ callRecordings, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [callRecordings.map((recording) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallRecordingListItem, { recording: recording }, recording.filename))), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, { text: \"Recording getting ready\" })] }));\n};\n\nconst CallRecordingList = ({ callRecordings, CallRecordingListHeader: CallRecordingListHeader$1 = CallRecordingListHeader, CallRecordingListItem: CallRecordingListItem$1 = CallRecordingListItem, EmptyCallRecordingList = EmptyCallRecordingListing, loading, LoadingCallRecordingList = LoadingCallRecordingListing, onRefresh, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallRecordingListHeader$1, { callRecordings: callRecordings, onRefresh: onRefresh }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__listing\", children: loading ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingCallRecordingList, { callRecordings: callRecordings })) : callRecordings.length ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"ul\", { className: \"str-video__call-recording-list__list\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"li\", { className: \"str-video__call-recording-list__item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__filename\", children: \"Name\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__time\", children: \"Start time\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__time\", children: \"End time\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__download\" })] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"ul\", { className: \"str-video__call-recording-list__list\", children: callRecordings.map((recording) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallRecordingListItem$1, { recording: recording }, recording.filename))) })] })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EmptyCallRecordingList, {})) })] }));\n};\n\nconst RingingCallControls = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useCallCallingState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const callCallingState = useCallCallingState();\n    if (!call)\n        return null;\n    const buttonsDisabled = callCallingState !== _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RINGING;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__pending-call-controls\", children: call.isCreatedByMe ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CancelCallButton, { disabled: buttonsDisabled })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AcceptCallButton, { disabled: buttonsDisabled }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CancelCallButton, { onClick: () => call.leave({ reject: true }), disabled: buttonsDisabled })] })) }));\n};\n\nconst CALLING_STATE_TO_LABEL = {\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.JOINING]: 'Joining',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RINGING]: 'Ringing',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.MIGRATING]: 'Migrating',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RECONNECTING]: 'Re-connecting',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RECONNECTING_FAILED]: 'Failed',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.OFFLINE]: 'No internet connection',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.IDLE]: '',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.UNKNOWN]: '',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.JOINED]: 'Joined',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.LEFT]: 'Left call',\n};\nconst RingingCall = (props) => {\n    const { includeSelf = false, totalMembersToShow = 3 } = props;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { useCallCallingState, useCallMembers } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const callingState = useCallCallingState();\n    const members = useCallMembers();\n    const connectedUser = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useConnectedUser)();\n    if (!call)\n        return null;\n    // take the first N members to show their avatars\n    const membersToShow = (members || [])\n        .slice(0, totalMembersToShow)\n        .map(({ user }) => user)\n        .filter((user) => user.id !== connectedUser?.id || includeSelf);\n    if (includeSelf &&\n        !membersToShow.find((user) => user.id === connectedUser?.id)) {\n        // if the current user is not in the initial batch of members,\n        // replace the first item in membersToShow array with the current user\n        const self = members.find(({ user }) => user.id === connectedUser?.id);\n        if (self) {\n            membersToShow.splice(0, 1, self.user);\n        }\n    }\n    const callingStateLabel = CALLING_STATE_TO_LABEL[callingState];\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-panel str-video__call-panel--ringing\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-panel__members-list\", children: membersToShow.map((user) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-panel__member-box\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Avatar, { name: user.name, imageSrc: user.image }), user.name && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__member_details\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__member_name\", children: user.name }) }))] }, user.id))) }), callingStateLabel && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-panel__calling-state-label\", children: t(callingStateLabel) })), [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RINGING, _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.JOINING].includes(callingState) && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RingingCallControls, {}))] }));\n};\n\nconst byNameOrId = (a, b) => {\n    if (a.name && b.name && a.name < b.name)\n        return -1;\n    if (a.name && b.name && a.name > b.name)\n        return 1;\n    if (a.id < b.id)\n        return -1;\n    if (a.id > b.id)\n        return 1;\n    return 0;\n};\nconst PermissionRequests = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useLocalParticipant, useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const localParticipant = useLocalParticipant();\n    const [expanded, setExpanded] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const [permissionRequests, setPermissionRequests] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]);\n    const canUpdateCallPermissions = useHasPermissions(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.UPDATE_CALL_PERMISSIONS);\n    const localUserId = localParticipant?.userId;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !canUpdateCallPermissions)\n            return;\n        return call.on('call.permission_request', (event) => {\n            if (event.user.id !== localUserId) {\n                setPermissionRequests((requests) => [...requests, event].sort((a, b) => byNameOrId(a.user, b.user)));\n            }\n        });\n    }, [call, canUpdateCallPermissions, localUserId]);\n    const handleUpdatePermission = (request, type) => {\n        return async () => {\n            const { user, permissions } = request;\n            switch (type) {\n                case 'grant':\n                    await call?.grantPermissions(user.id, permissions);\n                    break;\n                case 'revoke':\n                    await call?.revokePermissions(user.id, permissions);\n                    break;\n            }\n            setPermissionRequests((requests) => requests.filter((r) => r !== request));\n        };\n    };\n    const { refs, x, y, strategy } = useFloatingUIPreset({\n        placement: 'bottom',\n        strategy: 'absolute',\n    });\n    // don't render anything if there are no permission requests\n    if (permissionRequests.length === 0)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__permission-requests\", ref: refs.setReference, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__permission-requests__notification\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: \"str-video__permission-requests__notification__message\", children: [permissionRequests.length, \" pending permission requests\"] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { type: \"button\", onClick: () => {\n                            setExpanded((e) => !e);\n                        }, children: expanded ? 'Hide requests' : 'Show requests' })] }), expanded && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionRequestList, { ref: refs.setFloating, style: {\n                    position: strategy,\n                    top: y ?? 0,\n                    left: x ?? 0,\n                    overflowY: 'auto',\n                }, permissionRequests: permissionRequests, handleUpdatePermission: handleUpdatePermission }))] }));\n};\nconst PermissionRequestList = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function PermissionRequestList(props, ref) {\n    const { permissionRequests, handleUpdatePermission, ...rest } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__permission-requests-list\", ref: ref, ...rest, children: permissionRequests.map((request, reqIndex) => {\n            const { user, permissions } = request;\n            return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: permissions.map((permission) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__permission-request\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__permission-request__message\", children: messageForPermission(user.name || user.id, permission, t) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { className: \"str-video__permission-request__button--allow\", type: \"button\", onClick: handleUpdatePermission(request, 'grant'), children: t('Allow') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { className: \"str-video__permission-request__button--reject\", type: \"button\", onClick: handleUpdatePermission(request, 'revoke'), children: t('Revoke') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { className: \"str-video__permission-request__button--reject\", type: \"button\", onClick: handleUpdatePermission(request, 'dismiss'), children: t('Dismiss') })] }, permission))) }, `${user.id}/${reqIndex}`));\n        }) }));\n});\nconst Button = (props) => {\n    const { className, ...rest } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__permission-request__button', className), ...rest }));\n};\nconst messageForPermission = (userName, permission, t) => {\n    switch (permission) {\n        case _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO:\n            return t('{{ userName }} is requesting to speak', { userName });\n        case _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO:\n            return t('{{ userName }} is requesting to share their camera', {\n                userName,\n            });\n        case _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE:\n            return t('{{ userName }} is requesting to present their screen', {\n                userName,\n            });\n        default:\n            return t('{{ userName }} is requesting permission: {{ permission }}', {\n                userName,\n                permission,\n            });\n    }\n};\n\nconst StreamTheme = ({ as: Component = 'div', className, children, ...props }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Component, { ...props, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video', className), children: children }));\n};\n\nconst DefaultVideoPlaceholder = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function DefaultVideoPlaceholder({ participant, style }, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const name = participant.name || participant.userId;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__video-placeholder\", style: style, ref: ref, children: [(!participant.image || error) &&\n                (name ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(InitialsFallback, { name: name })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__video-placeholder__no-video-label\", children: t('Video is disabled') }))), participant.image && !error && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { onError: () => setError(true), alt: \"video-placeholder\", className: \"str-video__video-placeholder__avatar\", src: participant.image }))] }));\n});\nconst InitialsFallback = (props) => {\n    const { name } = props;\n    const initials = name\n        .split(' ')\n        .slice(0, 2)\n        .map((n) => n[0])\n        .join('');\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__video-placeholder__initials-fallback\", children: initials }));\n};\n\nconst Video$1 = ({ trackType, participant, className, VideoPlaceholder = DefaultVideoPlaceholder, refs, ...rest }) => {\n    const { sessionId, videoStream, screenShareStream, publishedTracks, viewportVisibilityState, isLocalParticipant, userId, } = participant;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const [videoElement, setVideoElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    // start with true, will flip once the video starts playing\n    const [isVideoPaused, setIsVideoPaused] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    const [isWideMode, setIsWideMode] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    const stream = trackType === 'videoTrack'\n        ? videoStream\n        : trackType === 'screenShareTrack'\n            ? screenShareStream\n            : undefined;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(() => {\n        if (!call || !videoElement || trackType === 'none')\n            return;\n        const cleanup = call.bindVideoElement(videoElement, sessionId, trackType);\n        return () => {\n            cleanup?.();\n        };\n    }, [call, trackType, sessionId, videoElement]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!stream || !videoElement)\n            return;\n        const [track] = stream.getVideoTracks();\n        if (!track)\n            return;\n        const handlePlayPause = () => {\n            setIsVideoPaused(videoElement.paused);\n            const { width = 0, height = 0 } = track.getSettings();\n            setIsWideMode(width >= height);\n        };\n        // playback may have started before we had a chance to\n        // attach the 'play/pause' event listener, so we set the state\n        // here to make sure it's in sync\n        setIsVideoPaused(videoElement.paused);\n        videoElement.addEventListener('play', handlePlayPause);\n        videoElement.addEventListener('pause', handlePlayPause);\n        track.addEventListener('unmute', handlePlayPause);\n        return () => {\n            videoElement.removeEventListener('play', handlePlayPause);\n            videoElement.removeEventListener('pause', handlePlayPause);\n            track.removeEventListener('unmute', handlePlayPause);\n            // reset the 'pause' state once we unmount the video element\n            setIsVideoPaused(true);\n        };\n    }, [stream, videoElement]);\n    if (!call)\n        return null;\n    const isPublishingTrack = trackType === 'videoTrack'\n        ? publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.VIDEO)\n        : trackType === 'screenShareTrack'\n            ? publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.SCREEN_SHARE)\n            : false;\n    const isInvisible = trackType === 'none' ||\n        viewportVisibilityState?.[trackType] === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VisibilityState.INVISIBLE;\n    const hasNoVideoOrInvisible = !isPublishingTrack || isInvisible;\n    const mirrorVideo = isLocalParticipant && trackType === 'videoTrack';\n    const isScreenShareTrack = trackType === 'screenShareTrack';\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [!hasNoVideoOrInvisible && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"video\", { ...rest, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__video', className, {\n                    'str-video__video--not-playing': isVideoPaused,\n                    'str-video__video--tall': !isWideMode,\n                    'str-video__video--mirror': mirrorVideo,\n                    'str-video__video--screen-share': isScreenShareTrack,\n                }), \"data-user-id\": userId, \"data-session-id\": sessionId, ref: (element) => {\n                    setVideoElement(element);\n                    refs?.setVideoElement?.(element);\n                } })), (hasNoVideoOrInvisible || isVideoPaused) && VideoPlaceholder && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(VideoPlaceholder, { style: { position: 'absolute' }, participant: participant, ref: refs?.setVideoPlaceholderElement }))] }));\n};\n\n/**\n * @description Extends video element with `stream` property\n * (`srcObject`) to reactively handle stream changes\n */\nconst BaseVideo = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function BaseVideo({ stream, ...rest }, ref) {\n    const [videoElement, setVideoElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!videoElement || !stream)\n            return;\n        if (stream === videoElement.srcObject)\n            return;\n        videoElement.srcObject = stream;\n        if (_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Browsers.isSafari() || _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Browsers.isFirefox()) {\n            // Firefox and Safari have some timing issue\n            setTimeout(() => {\n                videoElement.srcObject = stream;\n                videoElement.play().catch((e) => {\n                    console.error(`Failed to play stream`, e);\n                });\n            }, 0);\n        }\n        return () => {\n            videoElement.pause();\n            videoElement.srcObject = null;\n        };\n    }, [stream, videoElement]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"video\", { autoPlay: true, playsInline: true, ...rest, ref: (element) => {\n            applyElementToRef(ref, element);\n            setVideoElement(element);\n        } }));\n});\n\nconst DefaultDisabledVideoPreview = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str_video__video-preview__disabled-video-preview\", children: t('Video is disabled') }));\n};\nconst DefaultNoCameraPreview = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str_video__video-preview__no-camera-preview\", children: t('No camera found') }));\n};\nconst VideoPreview = ({ className, mirror = true, DisabledVideoPreview = DefaultDisabledVideoPreview, NoCameraPreview = DefaultNoCameraPreview, StartingCameraPreview = LoadingIndicator, }) => {\n    const { useCameraState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { devices, status, isMute, mediaStream } = useCameraState();\n    let contents;\n    if (isMute && devices?.length === 0) {\n        contents = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(NoCameraPreview, {});\n    }\n    else if (status === 'enabled') {\n        const loading = !mediaStream;\n        contents = ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [mediaStream && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BaseVideo, { stream: mediaStream, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__video-preview', {\n                        'str-video__video-preview--mirror': mirror,\n                        'str-video__video-preview--loading': loading,\n                    }) })), loading && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StartingCameraPreview, {})] }));\n    }\n    else {\n        contents = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DisabledVideoPreview, {});\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__video-preview-container', className), children: contents }));\n};\n\nconst ParticipantActionsContextMenu = () => {\n    const { participant, participantViewElement, videoElement } = useParticipantViewContext();\n    const [fullscreenModeOn, setFullscreenModeOn] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(!!document.fullscreenElement);\n    const [pictureInPictureElement, setPictureInPictureElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(document.pictureInPictureElement);\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { pin, publishedTracks, sessionId, userId } = participant;\n    const hasAudio = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.AUDIO);\n    const hasVideo = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.VIDEO);\n    const hasScreenShare = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.SCREEN_SHARE);\n    const hasScreenShareAudio = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.SCREEN_SHARE_AUDIO);\n    const blockUser = () => call?.blockUser(userId);\n    const muteAudio = () => call?.muteUser(userId, 'audio');\n    const muteVideo = () => call?.muteUser(userId, 'video');\n    const muteScreenShare = () => call?.muteUser(userId, 'screenshare');\n    const muteScreenShareAudio = () => call?.muteUser(userId, 'screenshare_audio');\n    const grantPermission = (permission) => () => {\n        call?.updateUserPermissions({\n            user_id: userId,\n            grant_permissions: [permission],\n        });\n    };\n    const revokePermission = (permission) => () => {\n        call?.updateUserPermissions({\n            user_id: userId,\n            revoke_permissions: [permission],\n        });\n    };\n    const toggleParticipantPin = () => {\n        if (pin) {\n            call?.unpin(sessionId);\n        }\n        else {\n            call?.pin(sessionId);\n        }\n    };\n    const pinForEveryone = () => {\n        call\n            ?.pinForEveryone({\n            user_id: userId,\n            session_id: sessionId,\n        })\n            .catch((err) => {\n            console.error(`Failed to pin participant ${userId}`, err);\n        });\n    };\n    const unpinForEveryone = () => {\n        call\n            ?.unpinForEveryone({\n            user_id: userId,\n            session_id: sessionId,\n        })\n            .catch((err) => {\n            console.error(`Failed to unpin participant ${userId}`, err);\n        });\n    };\n    const toggleFullscreenMode = () => {\n        if (!fullscreenModeOn) {\n            return participantViewElement?.requestFullscreen().catch(console.error);\n        }\n        return document.exitFullscreen().catch(console.error);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        // handles the case when fullscreen mode is toggled externally,\n        // e.g., by pressing ESC key or some other keyboard shortcut\n        const handleFullscreenChange = () => {\n            setFullscreenModeOn(!!document.fullscreenElement);\n        };\n        document.addEventListener('fullscreenchange', handleFullscreenChange);\n        return () => {\n            document.removeEventListener('fullscreenchange', handleFullscreenChange);\n        };\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!videoElement)\n            return;\n        const handlePiP = () => {\n            setPictureInPictureElement(document.pictureInPictureElement);\n        };\n        videoElement.addEventListener('enterpictureinpicture', handlePiP);\n        videoElement.addEventListener('leavepictureinpicture', handlePiP);\n        return () => {\n            videoElement.removeEventListener('enterpictureinpicture', handlePiP);\n            videoElement.removeEventListener('leavepictureinpicture', handlePiP);\n        };\n    }, [videoElement]);\n    const togglePictureInPicture = () => {\n        if (videoElement && pictureInPictureElement !== videoElement) {\n            return videoElement\n                .requestPictureInPicture()\n                .catch(console.error);\n        }\n        return document.exitPictureInPicture().catch(console.error);\n    };\n    const { close } = useMenuContext() || {};\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenu, { onItemClick: close, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: toggleParticipantPin, disabled: pin && !pin.isLocalPin, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"pin\" }), pin ? t('Unpin') : t('Pin')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.PIN_FOR_EVERYONE], children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: pinForEveryone, disabled: pin && !pin.isLocalPin, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"pin\" }), t('Pin for everyone')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: unpinForEveryone, disabled: !pin || pin.isLocalPin, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"pin\" }), t('Unpin for everyone')] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.BLOCK_USERS], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: blockUser, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"not-allowed\" }), t('Block')] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.MUTE_USERS], children: [hasVideo && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteVideo, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"camera-off-outline\" }), t('Turn off video')] })), hasScreenShare && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteScreenShare, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"screen-share-off\" }), t('Turn off screen share')] })), hasAudio && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteAudio, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"no-audio\" }), t('Mute audio')] })), hasScreenShareAudio && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteScreenShareAudio, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"no-audio\" }), t('Mute screen share audio')] }))] }), participantViewElement && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: toggleFullscreenMode, children: t('{{ direction }} fullscreen', {\n                    direction: fullscreenModeOn ? t('Leave') : t('Enter'),\n                }) })), videoElement && document.pictureInPictureEnabled && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: togglePictureInPicture, children: t('{{ direction }} picture-in-picture', {\n                    direction: pictureInPictureElement === videoElement\n                        ? t('Leave')\n                        : t('Enter'),\n                }) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.UPDATE_CALL_PERMISSIONS], children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: grantPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO), children: t('Allow audio') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: grantPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO), children: t('Allow video') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: grantPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE), children: t('Allow screen sharing') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: revokePermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO), children: t('Disable audio') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: revokePermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO), children: t('Disable video') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: revokePermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE), children: t('Disable screen sharing') })] })] }));\n};\n\nconst useTrackElementVisibility = ({ trackedElement, dynascaleManager: propsDynascaleManager, sessionId, trackType, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const manager = propsDynascaleManager ?? call?.dynascaleManager;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!trackedElement || !manager || !call || trackType === 'none')\n            return;\n        const unobserve = manager.trackElementVisibility(trackedElement, sessionId, trackType);\n        return () => {\n            unobserve();\n        };\n    }, [trackedElement, manager, call, sessionId, trackType]);\n};\n\nconst ToggleButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleButton(props, ref) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { enabled: props.menuShown, icon: \"ellipsis\", ref: ref });\n});\nconst DefaultScreenShareOverlay = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const stopScreenShare = () => {\n        call?.screenShare.disable();\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__screen-share-overlay\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"screen-share-off\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__screen-share-overlay__title\", children: t('You are presenting your screen') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"button\", { onClick: stopScreenShare, className: \"str-video__screen-share-overlay__button\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"close\" }), \" \", t('Stop Screen Sharing')] })] }));\n};\nconst DefaultParticipantViewUI = ({ indicatorsVisible = true, menuPlacement = 'bottom-start', showMenuButton = true, ParticipantActionsContextMenu: ParticipantActionsContextMenu$1 = ParticipantActionsContextMenu, }) => {\n    const { participant, trackType } = useParticipantViewContext();\n    const { publishedTracks } = participant;\n    const hasScreenShare = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.SCREEN_SHARE);\n    if (participant.isLocalParticipant &&\n        hasScreenShare &&\n        trackType === 'screenShareTrack') {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultScreenShareOverlay, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantDetails, { indicatorsVisible: indicatorsVisible })] }));\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [showMenuButton && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { strategy: \"fixed\", placement: menuPlacement, ToggleButton: ToggleButton, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantActionsContextMenu$1, {}) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Reaction, { participant: participant }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantDetails, { indicatorsVisible: indicatorsVisible })] }));\n};\nconst ParticipantDetails = ({ indicatorsVisible = true, }) => {\n    const { participant } = useParticipantViewContext();\n    const { isLocalParticipant, connectionQuality, publishedTracks, pin, sessionId, name, userId, } = participant;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const connectionQualityAsString = !!connectionQuality &&\n        _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.ConnectionQuality[connectionQuality].toLowerCase();\n    const hasAudio = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.AUDIO);\n    const hasVideo = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.VIDEO);\n    const canUnpin = !!pin && pin.isLocalPin;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-details\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: \"str-video__participant-details__name\", children: [name || userId, indicatorsVisible && !hasAudio && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__participant-details__name--audio-muted\" })), indicatorsVisible && !hasVideo && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__participant-details__name--video-muted\" })), indicatorsVisible && canUnpin && (\n                        // TODO: remove this monstrosity once we have a proper design\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { title: t('Unpin'), onClick: () => call?.unpin(sessionId), className: \"str-video__participant-details__name--pinned\" })), indicatorsVisible && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SpeechIndicator, {})] }) }), indicatorsVisible && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { isVisible: isLocalParticipant &&\n                    connectionQuality === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.ConnectionQuality.POOR, message: t('Poor connection quality'), children: connectionQualityAsString && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-details__connection-quality', `str-video__participant-details__connection-quality--${connectionQualityAsString}`), title: connectionQualityAsString })) }))] }));\n};\nconst SpeechIndicator = () => {\n    const { participant } = useParticipantViewContext();\n    const { isSpeaking, isDominantSpeaker } = participant;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__speech-indicator', isSpeaking && 'str-video__speech-indicator--speaking', isDominantSpeaker && 'str-video__speech-indicator--dominant'), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__speech-indicator__bar\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__speech-indicator__bar\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__speech-indicator__bar\" })] }));\n};\n\nconst ParticipantView = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ParticipantView({ participant, trackType = 'videoTrack', muteAudio, refs: { setVideoElement, setVideoPlaceholderElement } = {}, className, VideoPlaceholder, ParticipantViewUI = DefaultParticipantViewUI, }, ref) {\n    const { isLocalParticipant, isSpeaking, isDominantSpeaker, publishedTracks, sessionId, } = participant;\n    const hasAudio = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.AUDIO);\n    const hasVideo = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.VIDEO);\n    const hasScreenShareAudio = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.SCREEN_SHARE_AUDIO);\n    const [trackedElement, setTrackedElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [contextVideoElement, setContextVideoElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [contextVideoPlaceholderElement, setContextVideoPlaceholderElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    // TODO: allow to pass custom ViewportTracker instance from props\n    useTrackElementVisibility({\n        sessionId,\n        trackedElement,\n        trackType,\n    });\n    const participantViewContextValue = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n        participant,\n        participantViewElement: trackedElement,\n        videoElement: contextVideoElement,\n        videoPlaceholderElement: contextVideoPlaceholderElement,\n        trackType,\n    }), [\n        contextVideoElement,\n        contextVideoPlaceholderElement,\n        participant,\n        trackedElement,\n        trackType,\n    ]);\n    const videoRefs = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n        setVideoElement: (element) => {\n            setVideoElement?.(element);\n            setContextVideoElement(element);\n        },\n        setVideoPlaceholderElement: (element) => {\n            setVideoPlaceholderElement?.(element);\n            setContextVideoPlaceholderElement(element);\n        },\n    }), [setVideoElement, setVideoPlaceholderElement]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { \"data-testid\": \"participant-view\", ref: (element) => {\n            applyElementToRef(ref, element);\n            setTrackedElement(element);\n        }, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-view', isDominantSpeaker && 'str-video__participant-view--dominant-speaker', isSpeaking && 'str-video__participant-view--speaking', !hasVideo && 'str-video__participant-view--no-video', !hasAudio && 'str-video__participant-view--no-audio', className), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(ParticipantViewContext.Provider, { value: participantViewContextValue, children: [!isLocalParticipant && !muteAudio && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [hasAudio && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { participant: participant, trackType: \"audioTrack\" })), hasScreenShareAudio && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { participant: participant, trackType: \"screenShareAudioTrack\" }))] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Video$1, { VideoPlaceholder: VideoPlaceholder, participant: participant, trackType: trackType, refs: videoRefs, autoPlay: true }), isComponentType(ParticipantViewUI) ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantViewUI, {})) : (ParticipantViewUI)] }) }));\n});\n\n// re-exporting the StreamCallProvider as StreamCall\nconst StreamCall = _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamCallProvider;\n\nvar Joining = \"Joining\";\nvar Mic = \"Mic\";\nvar Ringing = \"Ringing\";\nvar Speakers = \"Speakers\";\nvar Video = \"Video\";\nvar Live = \"Live\";\nvar Reactions = \"Reactions\";\nvar Statistics = \"Statistics\";\nvar Invite = \"Invite\";\nvar Join = \"Join\";\nvar You = \"You\";\nvar Me = \"Me\";\nvar Unknown = \"Unknown\";\nvar Refresh = \"Refresh\";\nvar Allow = \"Allow\";\nvar Revoke = \"Revoke\";\nvar Dismiss = \"Dismiss\";\nvar Pinned = \"Pinned\";\nvar Unpin = \"Unpin\";\nvar Pin = \"Pin\";\nvar Block = \"Block\";\nvar Enter = \"Enter\";\nvar Leave = \"Leave\";\nvar Participants = \"Participants\";\nvar Anonymous = \", and ({{ count }}) anonymous\";\nvar en = {\n\tJoining: Joining,\n\tMic: Mic,\n\t\"No internet connection\": \"No internet connection\",\n\t\"Re-connecting\": \"Re-connecting\",\n\tRinging: Ringing,\n\t\"Screen Share\": \"Screen Share\",\n\t\"Select a Camera\": \"Select a Camera\",\n\t\"Select a Mic\": \"Select a Mic\",\n\t\"Select Speakers\": \"Select Speakers\",\n\tSpeakers: Speakers,\n\tVideo: Video,\n\t\"You are muted. Unmute to speak.\": \"You are muted. Unmute to speak.\",\n\tLive: Live,\n\t\"You can now speak.\": \"You can now speak.\",\n\t\"Awaiting for an approval to speak.\": \"Awaiting for an approval to speak.\",\n\t\"You can no longer speak.\": \"You can no longer speak.\",\n\t\"You can now share your video.\": \"You can now share your video.\",\n\t\"Awaiting for an approval to share your video.\": \"Awaiting for an approval to share your video.\",\n\t\"You can no longer share your video.\": \"You can no longer share your video.\",\n\t\"Waiting for recording to stop...\": \"Waiting for recording to stop...\",\n\t\"Waiting for recording to start...\": \"Waiting for recording to start...\",\n\t\"Record call\": \"Record call\",\n\tReactions: Reactions,\n\tStatistics: Statistics,\n\t\"You can now share your screen.\": \"You can now share your screen.\",\n\t\"Awaiting for an approval to share screen.\": \"Awaiting for an approval to share screen.\",\n\t\"You can no longer share your screen.\": \"You can no longer share your screen.\",\n\t\"Share screen\": \"Share screen\",\n\t\"Incoming Call...\": \"Incoming Call...\",\n\t\"Calling...\": \"Calling...\",\n\t\"Mute All\": \"Mute All\",\n\tInvite: Invite,\n\tJoin: Join,\n\tYou: You,\n\tMe: Me,\n\tUnknown: Unknown,\n\t\"Toggle device menu\": \"Toggle device menu\",\n\t\"Call Recordings\": \"Call Recordings\",\n\tRefresh: Refresh,\n\t\"Check your browser video permissions\": \"Check your browser video permissions\",\n\t\"Video publishing is disabled by the system\": \"Video publishing is disabled by the system\",\n\t\"You have no permission to share your video\": \"You have no permission to share your video\",\n\t\"You have no permission to share your audio\": \"You have no permission to share your audio\",\n\t\"You are presenting your screen\": \"You are presenting your screen\",\n\t\"Stop Screen Sharing\": \"Stop Screen Sharing\",\n\tAllow: Allow,\n\tRevoke: Revoke,\n\tDismiss: Dismiss,\n\t\"Microphone on\": \"Microphone on\",\n\t\"Microphone off\": \"Microphone off\",\n\t\"Camera on\": \"Camera on\",\n\t\"Camera off\": \"Camera off\",\n\t\"No camera found\": \"No camera found\",\n\t\"Video is disabled\": \"Video is disabled\",\n\tPinned: Pinned,\n\tUnpin: Unpin,\n\tPin: Pin,\n\t\"Pin for everyone\": \"Pin for everyone\",\n\t\"Unpin for everyone\": \"Unpin for everyone\",\n\tBlock: Block,\n\t\"Turn off video\": \"Turn off video\",\n\t\"Turn off screen share\": \"Turn off screen share\",\n\t\"Mute audio\": \"Mute audio\",\n\t\"Mute screen share audio\": \"Mute screen share audio\",\n\t\"Allow audio\": \"Allow audio\",\n\t\"Allow video\": \"Allow video\",\n\t\"Allow screen sharing\": \"Allow screen sharing\",\n\t\"Disable audio\": \"Disable audio\",\n\t\"Disable video\": \"Disable video\",\n\t\"Disable screen sharing\": \"Disable screen sharing\",\n\tEnter: Enter,\n\tLeave: Leave,\n\t\"Leave call\": \"Leave call\",\n\t\"End call for all\": \"End call for all\",\n\t\"{{ direction }} fullscreen\": \"{{ direction }} fullscreen\",\n\t\"{{ direction }} picture-in-picture\": \"{{ direction }} picture-in-picture\",\n\t\"Dominant Speaker\": \"Dominant Speaker\",\n\t\"Poor connection quality\": \"Poor connection quality. Please check your internet connection.\",\n\tParticipants: Participants,\n\tAnonymous: Anonymous,\n\t\"No participants found\": \"No participants found\",\n\t\"Participants ({{ numberOfParticipants }})\": \"Participants ({{ numberOfParticipants }})\",\n\t\"{{ userName }} is sharing their screen\": \"{{ userName }} is sharing their screen\",\n\t\"{{ userName }} is requesting to speak\": \"{{ userName }} is requesting to speak\",\n\t\"{{ userName }} is requesting to share their camera\": \"{{ userName }} is requesting to share their camera\",\n\t\"{{ userName }} is requesting to present their screen\": \"{{ userName }} is requesting to present their screen\",\n\t\"{{ userName }} is requesting permission: {{ permission }}\": \"{{ userName }} is requesting permission: {{ permission }}\"\n};\n\nconst translations = { en };\n\nconst StreamVideo = (props) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamVideoProvider, { translationsOverrides: translations, ...props }));\n};\n\nconst usePaginatedLayoutSortPreset = (call) => {\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call)\n            return;\n        call.setSortParticipantsBy(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.paginatedLayoutSortPreset);\n        return () => {\n            resetSortPreset(call);\n        };\n    }, [call]);\n};\nconst useSpeakerLayoutSortPreset = (call, isOneOnOneCall) => {\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call)\n            return;\n        // always show the remote participant in the spotlight\n        if (isOneOnOneCall) {\n            call.setSortParticipantsBy((0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.combineComparators)(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.screenSharing, loggedIn));\n        }\n        else {\n            call.setSortParticipantsBy(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.speakerLayoutSortPreset);\n        }\n        return () => {\n            resetSortPreset(call);\n        };\n    }, [call, isOneOnOneCall]);\n};\nconst resetSortPreset = (call) => {\n    // reset the sorting to the default for the call type\n    const callConfig = _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallTypes.get(call.type);\n    call.setSortParticipantsBy(callConfig.options.sortParticipantsBy || _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.defaultSortPreset);\n};\nconst loggedIn = (a, b) => {\n    if (a.isLocalParticipant)\n        return 1;\n    if (b.isLocalParticipant)\n        return -1;\n    return 0;\n};\n\nconst LivestreamLayout = (props) => {\n    const { useParticipants, useRemoteParticipants, useHasOngoingScreenShare } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const [currentSpeaker, ...otherParticipants] = useParticipants();\n    const remoteParticipants = useRemoteParticipants();\n    const hasOngoingScreenShare = useHasOngoingScreenShare();\n    const presenter = hasOngoingScreenShare\n        ? hasScreenShare$1(currentSpeaker) && currentSpeaker\n        : otherParticipants.find(hasScreenShare$1);\n    usePaginatedLayoutSortPreset(call);\n    const Overlay = ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantOverlay, { showParticipantCount: props.showParticipantCount, showDuration: props.showDuration, showLiveBadge: props.showLiveBadge, showSpeakerName: props.showSpeakerName }));\n    const { floatingParticipantProps } = props;\n    const FloatingParticipantOverlay = hasOngoingScreenShare && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantOverlay\n    // these elements aren't needed for the video feed\n    , { \n        // these elements aren't needed for the video feed\n        showParticipantCount: floatingParticipantProps?.showParticipantCount ?? false, showDuration: floatingParticipantProps?.showDuration ?? false, showLiveBadge: floatingParticipantProps?.showLiveBadge ?? false, showSpeakerName: floatingParticipantProps?.showSpeakerName ?? true }));\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__livestream-layout__wrapper\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantsAudio, { participants: remoteParticipants }), hasOngoingScreenShare && presenter && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { className: \"str-video__livestream-layout__screen-share\", participant: presenter, ParticipantViewUI: Overlay, trackType: \"screenShareTrack\", muteAudio // audio is rendered by ParticipantsAudio\n                : true })), currentSpeaker && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(hasOngoingScreenShare &&\n                    (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__livestream-layout__floating-participant', `str-video__livestream-layout__floating-participant--${floatingParticipantProps?.position ?? 'top-right'}`)), participant: currentSpeaker, ParticipantViewUI: FloatingParticipantOverlay || Overlay, muteAudio // audio is rendered by ParticipantsAudio\n                : true }))] }));\n};\nconst hasScreenShare$1 = (p) => !!p?.publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.SCREEN_SHARE);\nconst ParticipantOverlay = (props) => {\n    const { enableFullScreen = true, showParticipantCount = true, showDuration = true, showLiveBadge = true, showSpeakerName = false, } = props;\n    const { participant } = useParticipantViewContext();\n    const { useParticipantCount } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participantCount = useParticipantCount();\n    const duration = useUpdateCallDuration();\n    const toggleFullScreen = useToggleFullScreen();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__livestream-layout__overlay\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__livestream-layout__overlay__bar\", children: [showLiveBadge && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__live-badge\", children: t('Live') })), showParticipantCount && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__viewers-count\", children: participantCount })), showSpeakerName && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__speaker-name\", title: participant.name || participant.userId || '', children: participant.name || participant.userId || '' })), showDuration && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__duration\", children: formatDuration(duration) })), enableFullScreen && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__go-fullscreen\", onClick: toggleFullScreen }))] }) }));\n};\nconst useUpdateCallDuration = () => {\n    const { useIsCallLive, useCallSession } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const isCallLive = useIsCallLive();\n    const session = useCallSession();\n    const [duration, setDuration] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(() => {\n        if (!session || !session.live_started_at)\n            return 0;\n        const liveStartTime = new Date(session.live_started_at);\n        const now = new Date();\n        return Math.floor((now.getTime() - liveStartTime.getTime()) / 1000);\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!isCallLive)\n            return;\n        const interval = setInterval(() => {\n            setDuration((d) => d + 1);\n        }, 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [isCallLive]);\n    return duration;\n};\nconst useToggleFullScreen = () => {\n    const { participantViewElement } = useParticipantViewContext();\n    const [isFullscreen, setIsFullscreen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {\n        if (isFullscreen) {\n            document.exitFullscreen().then(() => {\n                setIsFullscreen(false);\n            });\n        }\n        else {\n            participantViewElement?.requestFullscreen().then(() => {\n                setIsFullscreen(true);\n            });\n        }\n    }, [isFullscreen, participantViewElement]);\n};\nconst formatDuration = (durationInMs) => {\n    const days = Math.floor(durationInMs / 86400);\n    const hours = Math.floor(durationInMs / 3600);\n    const minutes = Math.floor((durationInMs % 3600) / 60);\n    const seconds = durationInMs % 60;\n    return `${days ? days + ' ' : ''}${hours ? hours + ':' : ''}${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n};\n\nconst GROUP_SIZE = 16;\nconst PaginatedGridLayoutGroup = ({ group, VideoPlaceholder, ParticipantViewUI, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__paginated-grid-layout__group', {\n            'str-video__paginated-grid-layout--one': group.length === 1,\n            'str-video__paginated-grid-layout--two-four': group.length >= 2 && group.length <= 4,\n            'str-video__paginated-grid-layout--five-nine': group.length >= 5 && group.length <= 9,\n        }), children: group.map((participant) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participant, muteAudio: true, VideoPlaceholder: VideoPlaceholder, ParticipantViewUI: ParticipantViewUI }, participant.sessionId))) }));\n};\nconst PaginatedGridLayout = ({ groupSize = GROUP_SIZE, excludeLocalParticipant = false, pageArrowsVisible = true, VideoPlaceholder, ParticipantViewUI = DefaultParticipantViewUI, }) => {\n    const [page, setPage] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(0);\n    const [paginatedGridLayoutWrapperElement, setPaginatedGridLayoutWrapperElement,] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useParticipants, useRemoteParticipants } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participants = useParticipants();\n    // used to render audio elements\n    const remoteParticipants = useRemoteParticipants();\n    usePaginatedLayoutSortPreset(call);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!paginatedGridLayoutWrapperElement || !call)\n            return;\n        const cleanup = call.setViewport(paginatedGridLayoutWrapperElement);\n        return () => cleanup();\n    }, [paginatedGridLayoutWrapperElement, call]);\n    // only used to render video elements\n    const participantGroups = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => chunk(excludeLocalParticipant ? remoteParticipants : participants, groupSize), [excludeLocalParticipant, remoteParticipants, participants, groupSize]);\n    const pageCount = participantGroups.length;\n    // update page when page count is reduced and selected page no longer exists\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (page > pageCount - 1) {\n            setPage(Math.max(0, pageCount - 1));\n        }\n    }, [page, pageCount]);\n    const selectedGroup = participantGroups[page];\n    if (!call)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__paginated-grid-layout__wrapper\", ref: setPaginatedGridLayoutWrapperElement, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantsAudio, { participants: remoteParticipants }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__paginated-grid-layout\", children: [pageArrowsVisible && pageCount > 1 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { icon: \"caret-left\", disabled: page === 0, onClick: () => setPage((currentPage) => Math.max(0, currentPage - 1)) })), selectedGroup && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PaginatedGridLayoutGroup, { group: participantGroups[page], VideoPlaceholder: VideoPlaceholder, ParticipantViewUI: ParticipantViewUI })), pageArrowsVisible && pageCount > 1 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { disabled: page === pageCount - 1, icon: \"caret-right\", onClick: () => setPage((currentPage) => Math.min(pageCount - 1, currentPage + 1)) }))] })] }));\n};\n\nconst useCalculateHardLimit = (\n/**\n * Element that stretches to 100% of the whole layout component\n */\nwrapperElement, \n/**\n * Element that directly hosts individual `ParticipantView` (or wrapper) elements\n */\nhostElement, limit) => {\n    const [calculatedLimit, setCalculatedLimit] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)({\n        vertical: typeof limit === 'number' ? limit : null,\n        horizontal: typeof limit === 'number' ? limit : null,\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!hostElement ||\n            !wrapperElement ||\n            typeof limit === 'number' ||\n            typeof limit === 'undefined')\n            return;\n        let childWidth = null;\n        let childHeight = null;\n        const resizeObserver = new ResizeObserver((entries, observer) => {\n            // this part should ideally run as little times as possible\n            // get child measurements and disconnect\n            // does not consider dynamically sized children\n            // this hook is for SpeakerLayout use only, where children in the bar are fixed size\n            if (entries.length > 1) {\n                const child = hostElement.firstChild;\n                if (child) {\n                    childHeight = child.clientHeight;\n                    childWidth = child.clientWidth;\n                    observer.unobserve(hostElement);\n                }\n            }\n            // keep the state at { vertical: 1, horizontal: 1 }\n            // until we get the proper child measurements\n            if (childHeight === null || childWidth === null)\n                return;\n            const vertical = Math.floor(wrapperElement.clientHeight / childHeight);\n            const horizontal = Math.floor(wrapperElement.clientWidth / childWidth);\n            setCalculatedLimit((pv) => {\n                if (pv.vertical !== vertical || pv.horizontal !== horizontal)\n                    return { vertical, horizontal };\n                return pv;\n            });\n        });\n        resizeObserver.observe(wrapperElement);\n        resizeObserver.observe(hostElement);\n        return () => {\n            resizeObserver.disconnect();\n        };\n    }, [hostElement, limit, wrapperElement]);\n    return calculatedLimit;\n};\n\nconst DefaultParticipantViewUIBar = () => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultParticipantViewUI, { menuPlacement: \"top-end\" }));\nconst DefaultParticipantViewUISpotlight = () => (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultParticipantViewUI, {});\nconst SpeakerLayout = ({ ParticipantViewUIBar = DefaultParticipantViewUIBar, ParticipantViewUISpotlight = DefaultParticipantViewUISpotlight, VideoPlaceholder, participantsBarPosition = 'bottom', participantsBarLimit, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useParticipants, useRemoteParticipants } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const [participantInSpotlight, ...otherParticipants] = useParticipants();\n    const remoteParticipants = useRemoteParticipants();\n    const [participantsBarWrapperElement, setParticipantsBarWrapperElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [participantsBarElement, setParticipantsBarElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [buttonsWrapperElement, setButtonsWrapperElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const isSpeakerScreenSharing = hasScreenShare(participantInSpotlight);\n    const hardLimit = useCalculateHardLimit(buttonsWrapperElement, participantsBarElement, participantsBarLimit);\n    const isVertical = participantsBarPosition === 'left' || participantsBarPosition === 'right';\n    const isHorizontal = participantsBarPosition === 'top' || participantsBarPosition === 'bottom';\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!participantsBarWrapperElement || !call)\n            return;\n        const cleanup = call.setViewport(participantsBarWrapperElement);\n        return () => cleanup();\n    }, [participantsBarWrapperElement, call]);\n    const isOneOnOneCall = otherParticipants.length === 1;\n    useSpeakerLayoutSortPreset(call, isOneOnOneCall);\n    let participantsWithAppliedLimit = otherParticipants;\n    const hardLimitToApply = isVertical\n        ? hardLimit.vertical\n        : hardLimit.horizontal;\n    if (typeof participantsBarLimit !== 'undefined' &&\n        hardLimitToApply !== null) {\n        participantsWithAppliedLimit = otherParticipants.slice(0, \n        // subtract 1 if speaker is sharing screen as\n        // that one is rendered independently from otherParticipants array\n        hardLimitToApply - (isSpeakerScreenSharing ? 1 : 0));\n    }\n    if (!call)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__speaker-layout__wrapper\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantsAudio, { participants: remoteParticipants }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__speaker-layout', participantsBarPosition &&\n                    `str-video__speaker-layout--variant-${participantsBarPosition}`), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__spotlight\", children: participantInSpotlight && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participantInSpotlight, muteAudio: true, trackType: isSpeakerScreenSharing ? 'screenShareTrack' : 'videoTrack', ParticipantViewUI: ParticipantViewUISpotlight, VideoPlaceholder: VideoPlaceholder })) }), participantsWithAppliedLimit.length > 0 && participantsBarPosition && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ref: setButtonsWrapperElement, className: \"str-video__speaker-layout__participants-bar-buttons-wrapper\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__participants-bar-wrapper\", ref: setParticipantsBarWrapperElement, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ref: setParticipantsBarElement, className: \"str-video__speaker-layout__participants-bar\", children: [isSpeakerScreenSharing && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__participant-tile\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participantInSpotlight, ParticipantViewUI: ParticipantViewUIBar, VideoPlaceholder: VideoPlaceholder, muteAudio: true }) }, participantInSpotlight.sessionId)), participantsWithAppliedLimit.map((participant) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__participant-tile\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participant, ParticipantViewUI: ParticipantViewUIBar, VideoPlaceholder: VideoPlaceholder, muteAudio: true }) }, participant.sessionId)))] }) }), isVertical && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(VerticalScrollButtons, { scrollWrapper: participantsBarWrapperElement })), isHorizontal && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(HorizontalScrollButtons, { scrollWrapper: participantsBarWrapperElement }))] }))] })] }));\n};\nconst HorizontalScrollButtons = ({ scrollWrapper, }) => {\n    const scrollPosition = useHorizontalScrollPosition(scrollWrapper);\n    const scrollStartClickHandler = () => {\n        scrollWrapper?.scrollBy({ left: -150, behavior: 'smooth' });\n    };\n    const scrollEndClickHandler = () => {\n        scrollWrapper?.scrollBy({ left: 150, behavior: 'smooth' });\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [scrollPosition && scrollPosition !== 'start' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollStartClickHandler, icon: \"caret-left\", className: \"str-video__speaker-layout__participants-bar--button-left\" })), scrollPosition && scrollPosition !== 'end' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollEndClickHandler, icon: \"caret-right\", className: \"str-video__speaker-layout__participants-bar--button-right\" }))] }));\n};\nconst VerticalScrollButtons = ({ scrollWrapper, }) => {\n    const scrollPosition = useVerticalScrollPosition(scrollWrapper);\n    const scrollTopClickHandler = () => {\n        scrollWrapper?.scrollBy({ top: -150, behavior: 'smooth' });\n    };\n    const scrollBottomClickHandler = () => {\n        scrollWrapper?.scrollBy({ top: 150, behavior: 'smooth' });\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [scrollPosition && scrollPosition !== 'top' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollTopClickHandler, icon: \"caret-up\", className: \"str-video__speaker-layout__participants-bar--button-top\" })), scrollPosition && scrollPosition !== 'bottom' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollBottomClickHandler, icon: \"caret-down\", className: \"str-video__speaker-layout__participants-bar--button-bottom\" }))] }));\n};\nconst hasScreenShare = (p) => !!p?.publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.SCREEN_SHARE);\n\nconst [major, minor, patch] = (\"0.5.9\" ).split('.');\n(0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setSdkInfo)({\n    type: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.SdkType.REACT,\n    major,\n    minor,\n    patch,\n});\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-react-sdk/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-react-sdk/dist/css/styles.css":
/*!*********************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-sdk/dist/css/styles.css ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"2605c43b14ca\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0cmVhbS1pby92aWRlby1yZWFjdC1zZGsvZGlzdC9jc3Mvc3R5bGVzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rldi1maW5kZXIvLi9ub2RlX21vZHVsZXMvQHN0cmVhbS1pby92aWRlby1yZWFjdC1zZGsvZGlzdC9jc3Mvc3R5bGVzLmNzcz82ZTU2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiMjYwNWM0M2IxNGNhXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-react-sdk/dist/css/styles.css\n");

/***/ })

};
;