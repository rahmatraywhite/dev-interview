"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@stream-io";
exports.ids = ["vendor-chunks/@stream-io"];
exports.modules = {

/***/ "(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js":
/*!***************************************************************!*\
  !*** ./node_modules/@stream-io/video-client/dist/index.es.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioSettingsDefaultDeviceEnum: () => (/* binding */ AudioSettingsDefaultDeviceEnum),\n/* harmony export */   AudioSettingsRequestDefaultDeviceEnum: () => (/* binding */ AudioSettingsRequestDefaultDeviceEnum),\n/* harmony export */   AxiosError: () => (/* reexport safe */ axios__WEBPACK_IMPORTED_MODULE_1__.AxiosError),\n/* harmony export */   Browsers: () => (/* binding */ browsers),\n/* harmony export */   Call: () => (/* binding */ Call),\n/* harmony export */   CallState: () => (/* binding */ CallState),\n/* harmony export */   CallType: () => (/* binding */ CallType),\n/* harmony export */   CallTypes: () => (/* binding */ CallTypes),\n/* harmony export */   CallingState: () => (/* binding */ CallingState),\n/* harmony export */   CameraManager: () => (/* binding */ CameraManager),\n/* harmony export */   CameraManagerState: () => (/* binding */ CameraManagerState),\n/* harmony export */   CreateDeviceRequestPushProviderEnum: () => (/* binding */ CreateDeviceRequestPushProviderEnum),\n/* harmony export */   DebounceType: () => (/* binding */ DebounceType),\n/* harmony export */   DynascaleManager: () => (/* binding */ DynascaleManager),\n/* harmony export */   ErrorFromResponse: () => (/* binding */ ErrorFromResponse),\n/* harmony export */   InputMediaDeviceManager: () => (/* binding */ InputMediaDeviceManager),\n/* harmony export */   InputMediaDeviceManagerState: () => (/* binding */ InputMediaDeviceManagerState),\n/* harmony export */   LayoutSettingsNameEnum: () => (/* binding */ LayoutSettingsNameEnum),\n/* harmony export */   LayoutSettingsRequestNameEnum: () => (/* binding */ LayoutSettingsRequestNameEnum),\n/* harmony export */   MicrophoneManager: () => (/* binding */ MicrophoneManager),\n/* harmony export */   MicrophoneManagerState: () => (/* binding */ MicrophoneManagerState),\n/* harmony export */   OwnCapability: () => (/* binding */ OwnCapability),\n/* harmony export */   RecordSettingsRequestModeEnum: () => (/* binding */ RecordSettingsRequestModeEnum),\n/* harmony export */   RecordSettingsRequestQualityEnum: () => (/* binding */ RecordSettingsRequestQualityEnum),\n/* harmony export */   RxUtils: () => (/* binding */ rxUtils),\n/* harmony export */   ScreenShareManager: () => (/* binding */ ScreenShareManager),\n/* harmony export */   ScreenShareState: () => (/* binding */ ScreenShareState),\n/* harmony export */   SfuEvents: () => (/* binding */ events),\n/* harmony export */   SfuModels: () => (/* binding */ models),\n/* harmony export */   SpeakerManager: () => (/* binding */ SpeakerManager),\n/* harmony export */   SpeakerState: () => (/* binding */ SpeakerState),\n/* harmony export */   StreamSfuClient: () => (/* binding */ StreamSfuClient),\n/* harmony export */   StreamVideoClient: () => (/* binding */ StreamVideoClient),\n/* harmony export */   StreamVideoReadOnlyStateStore: () => (/* binding */ StreamVideoReadOnlyStateStore),\n/* harmony export */   StreamVideoServerClient: () => (/* binding */ StreamVideoServerClient),\n/* harmony export */   StreamVideoWriteableStateStore: () => (/* binding */ StreamVideoWriteableStateStore),\n/* harmony export */   TranscriptionSettingsModeEnum: () => (/* binding */ TranscriptionSettingsModeEnum),\n/* harmony export */   TranscriptionSettingsRequestModeEnum: () => (/* binding */ TranscriptionSettingsRequestModeEnum),\n/* harmony export */   VideoSettingsCameraFacingEnum: () => (/* binding */ VideoSettingsCameraFacingEnum),\n/* harmony export */   VideoSettingsRequestCameraFacingEnum: () => (/* binding */ VideoSettingsRequestCameraFacingEnum),\n/* harmony export */   ViewportTracker: () => (/* binding */ ViewportTracker),\n/* harmony export */   VisibilityState: () => (/* binding */ VisibilityState),\n/* harmony export */   checkIfAudioOutputChangeSupported: () => (/* binding */ checkIfAudioOutputChangeSupported),\n/* harmony export */   combineComparators: () => (/* binding */ combineComparators),\n/* harmony export */   conditional: () => (/* binding */ conditional),\n/* harmony export */   createSoundDetector: () => (/* binding */ createSoundDetector),\n/* harmony export */   defaultSortPreset: () => (/* binding */ defaultSortPreset),\n/* harmony export */   descending: () => (/* binding */ descending),\n/* harmony export */   deviceIds$: () => (/* binding */ deviceIds$),\n/* harmony export */   disposeOfMediaStream: () => (/* binding */ disposeOfMediaStream),\n/* harmony export */   dominantSpeaker: () => (/* binding */ dominantSpeaker),\n/* harmony export */   getAudioDevices: () => (/* binding */ getAudioDevices),\n/* harmony export */   getAudioOutputDevices: () => (/* binding */ getAudioOutputDevices),\n/* harmony export */   getAudioStream: () => (/* binding */ getAudioStream),\n/* harmony export */   getClientDetails: () => (/* binding */ getClientDetails),\n/* harmony export */   getDeviceInfo: () => (/* binding */ getDeviceInfo),\n/* harmony export */   getLogger: () => (/* binding */ getLogger),\n/* harmony export */   getOSInfo: () => (/* binding */ getOSInfo),\n/* harmony export */   getScreenShareStream: () => (/* binding */ getScreenShareStream),\n/* harmony export */   getSdkInfo: () => (/* binding */ getSdkInfo),\n/* harmony export */   getVideoDevices: () => (/* binding */ getVideoDevices),\n/* harmony export */   getVideoStream: () => (/* binding */ getVideoStream),\n/* harmony export */   getWebRTCInfo: () => (/* binding */ getWebRTCInfo),\n/* harmony export */   livestreamOrAudioRoomSortPreset: () => (/* binding */ livestreamOrAudioRoomSortPreset),\n/* harmony export */   logLevels: () => (/* binding */ logLevels),\n/* harmony export */   logToConsole: () => (/* binding */ logToConsole),\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   noopComparator: () => (/* binding */ noopComparator),\n/* harmony export */   paginatedLayoutSortPreset: () => (/* binding */ paginatedLayoutSortPreset),\n/* harmony export */   pinned: () => (/* binding */ pinned),\n/* harmony export */   publishingAudio: () => (/* binding */ publishingAudio),\n/* harmony export */   publishingVideo: () => (/* binding */ publishingVideo),\n/* harmony export */   reactionType: () => (/* binding */ reactionType),\n/* harmony export */   role: () => (/* binding */ role),\n/* harmony export */   screenSharing: () => (/* binding */ screenSharing),\n/* harmony export */   setDeviceInfo: () => (/* binding */ setDeviceInfo),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),\n/* harmony export */   setLogger: () => (/* binding */ setLogger),\n/* harmony export */   setOSInfo: () => (/* binding */ setOSInfo),\n/* harmony export */   setSdkInfo: () => (/* binding */ setSdkInfo),\n/* harmony export */   setWebRTCInfo: () => (/* binding */ setWebRTCInfo),\n/* harmony export */   speakerLayoutSortPreset: () => (/* binding */ speakerLayoutSortPreset),\n/* harmony export */   speaking: () => (/* binding */ speaking)\n/* harmony export */ });\n/* harmony import */ var webrtc_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webrtc-adapter */ \"(ssr)/./node_modules/webrtc-adapter/src/js/adapter_core.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/message-type.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/json-typings.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/reflection-merge-partial.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/binary-format-contract.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/pb-long.js\");\n/* harmony import */ var _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @protobuf-ts/runtime-rpc */ \"(ssr)/./node_modules/@protobuf-ts/runtime-rpc/build/es2015/service-type.js\");\n/* harmony import */ var _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @protobuf-ts/runtime-rpc */ \"(ssr)/./node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-interceptor.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/index.js\");\n/* harmony import */ var _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @protobuf-ts/twirp-transport */ \"(ssr)/./node_modules/@protobuf-ts/twirp-transport/build/es2015/twirp-transport.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/ReplaySubject.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/map.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/distinctUntilKeyChanged.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/concatMap.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/from.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/merge.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/pairwise.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/of.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/filter.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/debounce.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Observable,ReplaySubject,combineLatest,concatMap,debounce,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,filter,from,map,merge,of,pairwise,shareReplay,takeWhile,timer!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/timer.js\");\n/* harmony import */ var sdp_transform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sdp-transform */ \"(ssr)/./node_modules/sdp-transform/lib/index.js\");\n/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ua-parser-js */ \"(ssr)/./node_modules/ua-parser-js/src/ua-parser.js\");\n/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(ua_parser_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! isomorphic-ws */ \"(ssr)/./node_modules/isomorphic-ws/node.js\");\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(isomorphic_ws__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jsonwebtoken */ \"(ssr)/./node_modules/jsonwebtoken/index.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var base64_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! base64-js */ \"(ssr)/./node_modules/base64-js/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @export\n */ const AudioSettingsDefaultDeviceEnum = {\n    SPEAKER: \"speaker\",\n    EARPIECE: \"earpiece\"\n};\n/**\n * @export\n */ const AudioSettingsRequestDefaultDeviceEnum = {\n    SPEAKER: \"speaker\",\n    EARPIECE: \"earpiece\"\n};\n/**\n * @export\n */ const CreateDeviceRequestPushProviderEnum = {\n    FIREBASE: \"firebase\",\n    APN: \"apn\",\n    HUAWEI: \"huawei\",\n    XIAOMI: \"xiaomi\"\n};\n/**\n * @export\n */ const LayoutSettingsNameEnum = {\n    SPOTLIGHT: \"spotlight\",\n    GRID: \"grid\",\n    SINGLE_PARTICIPANT: \"single-participant\",\n    MOBILE: \"mobile\",\n    CUSTOM: \"custom\"\n};\n/**\n * @export\n */ const LayoutSettingsRequestNameEnum = {\n    SPOTLIGHT: \"spotlight\",\n    GRID: \"grid\",\n    SINGLE_PARTICIPANT: \"single-participant\",\n    MOBILE: \"mobile\",\n    CUSTOM: \"custom\"\n};\n/**\n * All possibility of string to use\n * @export\n */ const OwnCapability = {\n    BLOCK_USERS: \"block-users\",\n    CREATE_CALL: \"create-call\",\n    CREATE_REACTION: \"create-reaction\",\n    END_CALL: \"end-call\",\n    JOIN_BACKSTAGE: \"join-backstage\",\n    JOIN_CALL: \"join-call\",\n    JOIN_ENDED_CALL: \"join-ended-call\",\n    MUTE_USERS: \"mute-users\",\n    PIN_FOR_EVERYONE: \"pin-for-everyone\",\n    READ_CALL: \"read-call\",\n    REMOVE_CALL_MEMBER: \"remove-call-member\",\n    SCREENSHARE: \"screenshare\",\n    SEND_AUDIO: \"send-audio\",\n    SEND_VIDEO: \"send-video\",\n    START_BROADCAST_CALL: \"start-broadcast-call\",\n    START_RECORD_CALL: \"start-record-call\",\n    START_TRANSCRIPTION_CALL: \"start-transcription-call\",\n    STOP_BROADCAST_CALL: \"stop-broadcast-call\",\n    STOP_RECORD_CALL: \"stop-record-call\",\n    STOP_TRANSCRIPTION_CALL: \"stop-transcription-call\",\n    UPDATE_CALL: \"update-call\",\n    UPDATE_CALL_MEMBER: \"update-call-member\",\n    UPDATE_CALL_PERMISSIONS: \"update-call-permissions\",\n    UPDATE_CALL_SETTINGS: \"update-call-settings\"\n};\n/**\n * @export\n */ const RecordSettingsRequestModeEnum = {\n    AVAILABLE: \"available\",\n    DISABLED: \"disabled\",\n    AUTO_ON: \"auto-on\"\n};\n/**\n * @export\n */ const RecordSettingsRequestQualityEnum = {\n    _360P: \"360p\",\n    _480P: \"480p\",\n    _720P: \"720p\",\n    _1080P: \"1080p\",\n    _1440P: \"1440p\"\n};\n/**\n * @export\n */ const TranscriptionSettingsModeEnum = {\n    AVAILABLE: \"available\",\n    DISABLED: \"disabled\",\n    AUTO_ON: \"auto-on\"\n};\n/**\n * @export\n */ const TranscriptionSettingsRequestModeEnum = {\n    AVAILABLE: \"available\",\n    DISABLED: \"disabled\",\n    AUTO_ON: \"auto-on\"\n};\n/**\n * @export\n */ const VideoSettingsCameraFacingEnum = {\n    FRONT: \"front\",\n    BACK: \"back\",\n    EXTERNAL: \"external\"\n};\n/**\n * @export\n */ const VideoSettingsRequestCameraFacingEnum = {\n    FRONT: \"front\",\n    BACK: \"back\",\n    EXTERNAL: \"external\"\n};\nclass ErrorFromResponse extends Error {\n}\n/**\n * `NullValue` is a singleton enumeration to represent the null value for the\n * `Value` type union.\n *\n *  The JSON representation for `NullValue` is JSON `null`.\n *\n * @generated from protobuf enum google.protobuf.NullValue\n */ var NullValue;\n(function(NullValue) {\n    /**\n     * Null value.\n     *\n     * @generated from protobuf enum value: NULL_VALUE = 0;\n     */ NullValue[NullValue[\"NULL_VALUE\"] = 0] = \"NULL_VALUE\";\n})(NullValue || (NullValue = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass Struct$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"google.protobuf.Struct\", [\n            {\n                no: 1,\n                name: \"fields\",\n                kind: \"map\",\n                K: 9 /*ScalarType.STRING*/ ,\n                V: {\n                    kind: \"message\",\n                    T: ()=>Value\n                }\n            }\n        ]);\n    }\n    /**\n     * Encode `Struct` to JSON object.\n     */ internalJsonWrite(message, options) {\n        let json = {};\n        for (let [k, v] of Object.entries(message.fields)){\n            json[k] = Value.toJson(v);\n        }\n        return json;\n    }\n    /**\n     * Decode `Struct` from JSON object.\n     */ internalJsonRead(json, options, target) {\n        if (!(0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.isJsonObject)(json)) throw new globalThis.Error(\"Unable to parse message \" + this.typeName + \" from JSON \" + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.typeofJsonValue)(json) + \".\");\n        if (!target) target = this.create();\n        for (let [k, v] of globalThis.Object.entries(json)){\n            target.fields[k] = Value.fromJson(v);\n        }\n        return target;\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.fields = {};\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* map<string, google.protobuf.Value> fields */ 1:\n                    this.binaryReadMap1(message.fields, reader, options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    binaryReadMap1(map, reader, options) {\n        let len = reader.uint32(), end = reader.pos + len, key, val;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case 1:\n                    key = reader.string();\n                    break;\n                case 2:\n                    val = Value.internalBinaryRead(reader, reader.uint32(), options);\n                    break;\n                default:\n                    throw new globalThis.Error(\"unknown map entry field for field google.protobuf.Struct.fields\");\n            }\n        }\n        map[key ?? \"\"] = val ?? Value.create();\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* map<string, google.protobuf.Value> fields = 1; */ for (let k of globalThis.Object.keys(message.fields)){\n            writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork().tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(k);\n            writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork();\n            Value.internalBinaryWrite(message.fields[k], writer, options);\n            writer.join().join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Struct\n */ const Struct = new Struct$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Value$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"google.protobuf.Value\", [\n            {\n                no: 1,\n                name: \"null_value\",\n                kind: \"enum\",\n                oneof: \"kind\",\n                T: ()=>[\n                        \"google.protobuf.NullValue\",\n                        NullValue\n                    ]\n            },\n            {\n                no: 2,\n                name: \"number_value\",\n                kind: \"scalar\",\n                oneof: \"kind\",\n                T: 1 /*ScalarType.DOUBLE*/ \n            },\n            {\n                no: 3,\n                name: \"string_value\",\n                kind: \"scalar\",\n                oneof: \"kind\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"bool_value\",\n                kind: \"scalar\",\n                oneof: \"kind\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 5,\n                name: \"struct_value\",\n                kind: \"message\",\n                oneof: \"kind\",\n                T: ()=>Struct\n            },\n            {\n                no: 6,\n                name: \"list_value\",\n                kind: \"message\",\n                oneof: \"kind\",\n                T: ()=>ListValue\n            }\n        ]);\n    }\n    /**\n     * Encode `Value` to JSON value.\n     */ internalJsonWrite(message, options) {\n        if (message.kind.oneofKind === undefined) throw new globalThis.Error();\n        switch(message.kind.oneofKind){\n            case undefined:\n                throw new globalThis.Error();\n            case \"boolValue\":\n                return message.kind.boolValue;\n            case \"nullValue\":\n                return null;\n            case \"numberValue\":\n                let numberValue = message.kind.numberValue;\n                if (typeof numberValue == \"number\" && !Number.isFinite(numberValue)) throw new globalThis.Error();\n                return numberValue;\n            case \"stringValue\":\n                return message.kind.stringValue;\n            case \"listValue\":\n                let listValueField = this.fields.find((f)=>f.no === 6);\n                if (listValueField?.kind !== \"message\") throw new globalThis.Error();\n                return listValueField.T().toJson(message.kind.listValue);\n            case \"structValue\":\n                let structValueField = this.fields.find((f)=>f.no === 5);\n                if (structValueField?.kind !== \"message\") throw new globalThis.Error();\n                return structValueField.T().toJson(message.kind.structValue);\n        }\n    }\n    /**\n     * Decode `Value` from JSON value.\n     */ internalJsonRead(json, options, target) {\n        if (!target) target = this.create();\n        switch(typeof json){\n            case \"number\":\n                target.kind = {\n                    oneofKind: \"numberValue\",\n                    numberValue: json\n                };\n                break;\n            case \"string\":\n                target.kind = {\n                    oneofKind: \"stringValue\",\n                    stringValue: json\n                };\n                break;\n            case \"boolean\":\n                target.kind = {\n                    oneofKind: \"boolValue\",\n                    boolValue: json\n                };\n                break;\n            case \"object\":\n                if (json === null) {\n                    target.kind = {\n                        oneofKind: \"nullValue\",\n                        nullValue: NullValue.NULL_VALUE\n                    };\n                } else if (globalThis.Array.isArray(json)) {\n                    target.kind = {\n                        oneofKind: \"listValue\",\n                        listValue: ListValue.fromJson(json)\n                    };\n                } else {\n                    target.kind = {\n                        oneofKind: \"structValue\",\n                        structValue: Struct.fromJson(json)\n                    };\n                }\n                break;\n            default:\n                throw new globalThis.Error(\"Unable to parse \" + this.typeName + \" from JSON \" + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.typeofJsonValue)(json));\n        }\n        return target;\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.kind = {\n            oneofKind: undefined\n        };\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* google.protobuf.NullValue null_value */ 1:\n                    message.kind = {\n                        oneofKind: \"nullValue\",\n                        nullValue: reader.int32()\n                    };\n                    break;\n                case /* double number_value */ 2:\n                    message.kind = {\n                        oneofKind: \"numberValue\",\n                        numberValue: reader.double()\n                    };\n                    break;\n                case /* string string_value */ 3:\n                    message.kind = {\n                        oneofKind: \"stringValue\",\n                        stringValue: reader.string()\n                    };\n                    break;\n                case /* bool bool_value */ 4:\n                    message.kind = {\n                        oneofKind: \"boolValue\",\n                        boolValue: reader.bool()\n                    };\n                    break;\n                case /* google.protobuf.Struct struct_value */ 5:\n                    message.kind = {\n                        oneofKind: \"structValue\",\n                        structValue: Struct.internalBinaryRead(reader, reader.uint32(), options, message.kind.structValue)\n                    };\n                    break;\n                case /* google.protobuf.ListValue list_value */ 6:\n                    message.kind = {\n                        oneofKind: \"listValue\",\n                        listValue: ListValue.internalBinaryRead(reader, reader.uint32(), options, message.kind.listValue)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* google.protobuf.NullValue null_value = 1; */ if (message.kind.oneofKind === \"nullValue\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.kind.nullValue);\n        /* double number_value = 2; */ if (message.kind.oneofKind === \"numberValue\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Bit64).double(message.kind.numberValue);\n        /* string string_value = 3; */ if (message.kind.oneofKind === \"stringValue\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.kind.stringValue);\n        /* bool bool_value = 4; */ if (message.kind.oneofKind === \"boolValue\") writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.kind.boolValue);\n        /* google.protobuf.Struct struct_value = 5; */ if (message.kind.oneofKind === \"structValue\") Struct.internalBinaryWrite(message.kind.structValue, writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* google.protobuf.ListValue list_value = 6; */ if (message.kind.oneofKind === \"listValue\") ListValue.internalBinaryWrite(message.kind.listValue, writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Value\n */ const Value = new Value$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ListValue$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"google.protobuf.ListValue\", [\n            {\n                no: 1,\n                name: \"values\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Value\n            }\n        ]);\n    }\n    /**\n     * Encode `ListValue` to JSON array.\n     */ internalJsonWrite(message, options) {\n        return message.values.map((v)=>Value.toJson(v));\n    }\n    /**\n     * Decode `ListValue` from JSON array.\n     */ internalJsonRead(json, options, target) {\n        if (!globalThis.Array.isArray(json)) throw new globalThis.Error(\"Unable to parse \" + this.typeName + \" from JSON \" + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.typeofJsonValue)(json));\n        if (!target) target = this.create();\n        let values = json.map((v)=>Value.fromJson(v));\n        target.values.push(...values);\n        return target;\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.values = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated google.protobuf.Value values */ 1:\n                    message.values.push(Value.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated google.protobuf.Value values = 1; */ for(let i = 0; i < message.values.length; i++)Value.internalBinaryWrite(message.values[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.ListValue\n */ const ListValue = new ListValue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Timestamp$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"google.protobuf.Timestamp\", [\n            {\n                no: 1,\n                name: \"seconds\",\n                kind: \"scalar\",\n                T: 3 /*ScalarType.INT64*/ \n            },\n            {\n                no: 2,\n                name: \"nanos\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n    /**\n     * Creates a new `Timestamp` for the current time.\n     */ now() {\n        const msg = this.create();\n        const ms = Date.now();\n        msg.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_13__.PbLong.from(Math.floor(ms / 1000)).toString();\n        msg.nanos = ms % 1000 * 1000000;\n        return msg;\n    }\n    /**\n     * Converts a `Timestamp` to a JavaScript Date.\n     */ toDate(message) {\n        return new Date(_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_13__.PbLong.from(message.seconds).toNumber() * 1000 + Math.ceil(message.nanos / 1000000));\n    }\n    /**\n     * Converts a JavaScript Date to a `Timestamp`.\n     */ fromDate(date) {\n        const msg = this.create();\n        const ms = date.getTime();\n        msg.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_13__.PbLong.from(Math.floor(ms / 1000)).toString();\n        msg.nanos = ms % 1000 * 1000000;\n        return msg;\n    }\n    /**\n     * In JSON format, the `Timestamp` type is encoded as a string\n     * in the RFC 3339 format.\n     */ internalJsonWrite(message, options) {\n        let ms = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_13__.PbLong.from(message.seconds).toNumber() * 1000;\n        if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) throw new Error(\"Unable to encode Timestamp to JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\");\n        if (message.nanos < 0) throw new Error(\"Unable to encode invalid Timestamp to JSON. Nanos must not be negative.\");\n        let z = \"Z\";\n        if (message.nanos > 0) {\n            let nanosStr = (message.nanos + 1000000000).toString().substring(1);\n            if (nanosStr.substring(3) === \"000000\") z = \".\" + nanosStr.substring(0, 3) + \"Z\";\n            else if (nanosStr.substring(6) === \"000\") z = \".\" + nanosStr.substring(0, 6) + \"Z\";\n            else z = \".\" + nanosStr + \"Z\";\n        }\n        return new Date(ms).toISOString().replace(\".000Z\", z);\n    }\n    /**\n     * In JSON format, the `Timestamp` type is encoded as a string\n     * in the RFC 3339 format.\n     */ internalJsonRead(json, options, target) {\n        if (typeof json !== \"string\") throw new Error(\"Unable to parse Timestamp from JSON \" + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_10__.typeofJsonValue)(json) + \".\");\n        let matches = json.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);\n        if (!matches) throw new Error(\"Unable to parse Timestamp from JSON. Invalid format.\");\n        let ms = Date.parse(matches[1] + \"-\" + matches[2] + \"-\" + matches[3] + \"T\" + matches[4] + \":\" + matches[5] + \":\" + matches[6] + (matches[8] ? matches[8] : \"Z\"));\n        if (Number.isNaN(ms)) throw new Error(\"Unable to parse Timestamp from JSON. Invalid value.\");\n        if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) throw new globalThis.Error(\"Unable to parse Timestamp from JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\");\n        if (!target) target = this.create();\n        target.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_13__.PbLong.from(ms / 1000).toString();\n        target.nanos = 0;\n        if (matches[7]) target.nanos = parseInt(\"1\" + matches[7] + \"0\".repeat(9 - matches[7].length)) - 1000000000;\n        return target;\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.seconds = \"0\";\n        message.nanos = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* int64 seconds */ 1:\n                    message.seconds = reader.int64().toString();\n                    break;\n                case /* int32 nanos */ 2:\n                    message.nanos = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* int64 seconds = 1; */ if (message.seconds !== \"0\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int64(message.seconds);\n        /* int32 nanos = 2; */ if (message.nanos !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.nanos);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Timestamp\n */ const Timestamp = new Timestamp$Type();\n/**\n * @generated from protobuf enum stream.video.sfu.models.PeerType\n */ var PeerType;\n(function(PeerType) {\n    /**\n     * todo fix me (marcelo)\n     *\n     * @generated from protobuf enum value: PEER_TYPE_PUBLISHER_UNSPECIFIED = 0;\n     */ PeerType[PeerType[\"PUBLISHER_UNSPECIFIED\"] = 0] = \"PUBLISHER_UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: PEER_TYPE_SUBSCRIBER = 1;\n     */ PeerType[PeerType[\"SUBSCRIBER\"] = 1] = \"SUBSCRIBER\";\n})(PeerType || (PeerType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.ConnectionQuality\n */ var ConnectionQuality;\n(function(ConnectionQuality) {\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_UNSPECIFIED = 0;\n     */ ConnectionQuality[ConnectionQuality[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_POOR = 1;\n     */ ConnectionQuality[ConnectionQuality[\"POOR\"] = 1] = \"POOR\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_GOOD = 2;\n     */ ConnectionQuality[ConnectionQuality[\"GOOD\"] = 2] = \"GOOD\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_EXCELLENT = 3;\n     */ ConnectionQuality[ConnectionQuality[\"EXCELLENT\"] = 3] = \"EXCELLENT\";\n})(ConnectionQuality || (ConnectionQuality = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.VideoQuality\n */ var VideoQuality;\n(function(VideoQuality) {\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_LOW_UNSPECIFIED = 0;\n     */ VideoQuality[VideoQuality[\"LOW_UNSPECIFIED\"] = 0] = \"LOW_UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_MID = 1;\n     */ VideoQuality[VideoQuality[\"MID\"] = 1] = \"MID\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_HIGH = 2;\n     */ VideoQuality[VideoQuality[\"HIGH\"] = 2] = \"HIGH\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_OFF = 3;\n     */ VideoQuality[VideoQuality[\"OFF\"] = 3] = \"OFF\";\n})(VideoQuality || (VideoQuality = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackType\n */ var TrackType;\n(function(TrackType) {\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_UNSPECIFIED = 0;\n     */ TrackType[TrackType[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_AUDIO = 1;\n     */ TrackType[TrackType[\"AUDIO\"] = 1] = \"AUDIO\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_VIDEO = 2;\n     */ TrackType[TrackType[\"VIDEO\"] = 2] = \"VIDEO\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE = 3;\n     */ TrackType[TrackType[\"SCREEN_SHARE\"] = 3] = \"SCREEN_SHARE\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE_AUDIO = 4;\n     */ TrackType[TrackType[\"SCREEN_SHARE_AUDIO\"] = 4] = \"SCREEN_SHARE_AUDIO\";\n})(TrackType || (TrackType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.ErrorCode\n */ var ErrorCode;\n(function(ErrorCode) {\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_UNSPECIFIED = 0;\n     */ ErrorCode[ErrorCode[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_NOT_FOUND = 100;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_NOT_FOUND\"] = 100] = \"PUBLISH_TRACK_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACKS_MISMATCH = 101;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACKS_MISMATCH\"] = 101] = \"PUBLISH_TRACKS_MISMATCH\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_OUT_OF_ORDER = 102;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_OUT_OF_ORDER\"] = 102] = \"PUBLISH_TRACK_OUT_OF_ORDER\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND = 103;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND\"] = 103] = \"PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_LIVE_ENDED = 104;\n     */ ErrorCode[ErrorCode[\"LIVE_ENDED\"] = 104] = \"LIVE_ENDED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_NOT_FOUND = 200;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_NOT_FOUND\"] = 200] = \"PARTICIPANT_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING_OUT = 201;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATING_OUT\"] = 201] = \"PARTICIPANT_MIGRATING_OUT\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATION_FAILED = 202;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATION_FAILED\"] = 202] = \"PARTICIPANT_MIGRATION_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING = 203;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATING\"] = 203] = \"PARTICIPANT_MIGRATING\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_RECONNECT_FAILED = 204;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_RECONNECT_FAILED\"] = 204] = \"PARTICIPANT_RECONNECT_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MEDIA_TRANSPORT_FAILURE = 205;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MEDIA_TRANSPORT_FAILURE\"] = 205] = \"PARTICIPANT_MEDIA_TRANSPORT_FAILURE\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_CALL_NOT_FOUND = 300;\n     */ ErrorCode[ErrorCode[\"CALL_NOT_FOUND\"] = 300] = \"CALL_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_REQUEST_VALIDATION_FAILED = 400;\n     */ ErrorCode[ErrorCode[\"REQUEST_VALIDATION_FAILED\"] = 400] = \"REQUEST_VALIDATION_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_UNAUTHENTICATED = 401;\n     */ ErrorCode[ErrorCode[\"UNAUTHENTICATED\"] = 401] = \"UNAUTHENTICATED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PERMISSION_DENIED = 403;\n     */ ErrorCode[ErrorCode[\"PERMISSION_DENIED\"] = 403] = \"PERMISSION_DENIED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_TOO_MANY_REQUESTS = 429;\n     */ ErrorCode[ErrorCode[\"TOO_MANY_REQUESTS\"] = 429] = \"TOO_MANY_REQUESTS\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_INTERNAL_SERVER_ERROR = 500;\n     */ ErrorCode[ErrorCode[\"INTERNAL_SERVER_ERROR\"] = 500] = \"INTERNAL_SERVER_ERROR\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_SFU_SHUTTING_DOWN = 600;\n     */ ErrorCode[ErrorCode[\"SFU_SHUTTING_DOWN\"] = 600] = \"SFU_SHUTTING_DOWN\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_SFU_FULL = 700;\n     */ ErrorCode[ErrorCode[\"SFU_FULL\"] = 700] = \"SFU_FULL\";\n})(ErrorCode || (ErrorCode = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.SdkType\n */ var SdkType;\n(function(SdkType) {\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_UNSPECIFIED = 0;\n     */ SdkType[SdkType[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_REACT = 1;\n     */ SdkType[SdkType[\"REACT\"] = 1] = \"REACT\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_ANGULAR = 2;\n     */ SdkType[SdkType[\"ANGULAR\"] = 2] = \"ANGULAR\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_ANDROID = 3;\n     */ SdkType[SdkType[\"ANDROID\"] = 3] = \"ANDROID\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_IOS = 4;\n     */ SdkType[SdkType[\"IOS\"] = 4] = \"IOS\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_FLUTTER = 5;\n     */ SdkType[SdkType[\"FLUTTER\"] = 5] = \"FLUTTER\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_REACT_NATIVE = 6;\n     */ SdkType[SdkType[\"REACT_NATIVE\"] = 6] = \"REACT_NATIVE\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_UNITY = 7;\n     */ SdkType[SdkType[\"UNITY\"] = 7] = \"UNITY\";\n})(SdkType || (SdkType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackUnpublishReason\n */ var TrackUnpublishReason;\n(function(TrackUnpublishReason) {\n    /**\n     * Default value which is used when the specific reason\n     * for muting the track is not known.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_UNSPECIFIED = 0;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * Represents user muting their tracks.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_USER_MUTED = 1;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"USER_MUTED\"] = 1] = \"USER_MUTED\";\n    /**\n     * Represents muting the track because the permission to\n     * publish the track has been revoked.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_PERMISSION_REVOKED = 2;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"PERMISSION_REVOKED\"] = 2] = \"PERMISSION_REVOKED\";\n    /**\n     * Represents muting the track due to moderation actions.\n     * This is different from permission revoked because the\n     * participant can unmute themselves here whereas in case\n     * of \"permission revoke\" it is not possible until the\n     * call permissions are updated.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_MODERATION = 3;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"MODERATION\"] = 3] = \"MODERATION\";\n})(TrackUnpublishReason || (TrackUnpublishReason = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.GoAwayReason\n */ var GoAwayReason;\n(function(GoAwayReason) {\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_UNSPECIFIED = 0;\n     */ GoAwayReason[GoAwayReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_SHUTTING_DOWN = 1;\n     */ GoAwayReason[GoAwayReason[\"SHUTTING_DOWN\"] = 1] = \"SHUTTING_DOWN\";\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_REBALANCE = 2;\n     */ GoAwayReason[GoAwayReason[\"REBALANCE\"] = 2] = \"REBALANCE\";\n})(GoAwayReason || (GoAwayReason = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallState$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.CallState\", [\n            {\n                no: 1,\n                name: \"participants\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Participant\n            },\n            {\n                no: 2,\n                name: \"started_at\",\n                kind: \"message\",\n                T: ()=>Timestamp\n            },\n            {\n                no: 3,\n                name: \"participant_count\",\n                kind: \"message\",\n                T: ()=>ParticipantCount\n            },\n            {\n                no: 4,\n                name: \"pins\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Pin\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.participants = [];\n        message.pins = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated stream.video.sfu.models.Participant participants */ 1:\n                    message.participants.push(Participant.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* google.protobuf.Timestamp started_at */ 2:\n                    message.startedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startedAt);\n                    break;\n                case /* stream.video.sfu.models.ParticipantCount participant_count */ 3:\n                    message.participantCount = ParticipantCount.internalBinaryRead(reader, reader.uint32(), options, message.participantCount);\n                    break;\n                case /* repeated stream.video.sfu.models.Pin pins */ 4:\n                    message.pins.push(Pin.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated stream.video.sfu.models.Participant participants = 1; */ for(let i = 0; i < message.participants.length; i++)Participant.internalBinaryWrite(message.participants[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* google.protobuf.Timestamp started_at = 2; */ if (message.startedAt) Timestamp.internalBinaryWrite(message.startedAt, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.ParticipantCount participant_count = 3; */ if (message.participantCount) ParticipantCount.internalBinaryWrite(message.participantCount, writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* repeated stream.video.sfu.models.Pin pins = 4; */ for(let i = 0; i < message.pins.length; i++)Pin.internalBinaryWrite(message.pins[i], writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallState\n */ const CallState$1 = new CallState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantCount$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.ParticipantCount\", [\n            {\n                no: 1,\n                name: \"total\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 2,\n                name: \"anonymous\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.total = 0;\n        message.anonymous = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* uint32 total */ 1:\n                    message.total = reader.uint32();\n                    break;\n                case /* uint32 anonymous */ 2:\n                    message.anonymous = reader.uint32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* uint32 total = 1; */ if (message.total !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.total);\n        /* uint32 anonymous = 2; */ if (message.anonymous !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.anonymous);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ParticipantCount\n */ const ParticipantCount = new ParticipantCount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Pin$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Pin\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Pin\n */ const Pin = new Pin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Participant$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Participant\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"published_tracks\",\n                kind: \"enum\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 4,\n                name: \"joined_at\",\n                kind: \"message\",\n                T: ()=>Timestamp\n            },\n            {\n                no: 5,\n                name: \"track_lookup_prefix\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 6,\n                name: \"connection_quality\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.ConnectionQuality\",\n                        ConnectionQuality,\n                        \"CONNECTION_QUALITY_\"\n                    ]\n            },\n            {\n                no: 7,\n                name: \"is_speaking\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 8,\n                name: \"is_dominant_speaker\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 9,\n                name: \"audio_level\",\n                kind: \"scalar\",\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 10,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 11,\n                name: \"image\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 12,\n                name: \"custom\",\n                kind: \"message\",\n                T: ()=>Struct\n            },\n            {\n                no: 13,\n                name: \"roles\",\n                kind: \"scalar\",\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.publishedTracks = [];\n        message.trackLookupPrefix = \"\";\n        message.connectionQuality = 0;\n        message.isSpeaking = false;\n        message.isDominantSpeaker = false;\n        message.audioLevel = 0;\n        message.name = \"\";\n        message.image = \"\";\n        message.roles = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* repeated stream.video.sfu.models.TrackType published_tracks */ 3:\n                    if (wireType === _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited) for(let e = reader.int32() + reader.pos; reader.pos < e;)message.publishedTracks.push(reader.int32());\n                    else message.publishedTracks.push(reader.int32());\n                    break;\n                case /* google.protobuf.Timestamp joined_at */ 4:\n                    message.joinedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.joinedAt);\n                    break;\n                case /* string track_lookup_prefix */ 5:\n                    message.trackLookupPrefix = reader.string();\n                    break;\n                case /* stream.video.sfu.models.ConnectionQuality connection_quality */ 6:\n                    message.connectionQuality = reader.int32();\n                    break;\n                case /* bool is_speaking */ 7:\n                    message.isSpeaking = reader.bool();\n                    break;\n                case /* bool is_dominant_speaker */ 8:\n                    message.isDominantSpeaker = reader.bool();\n                    break;\n                case /* float audio_level */ 9:\n                    message.audioLevel = reader.float();\n                    break;\n                case /* string name */ 10:\n                    message.name = reader.string();\n                    break;\n                case /* string image */ 11:\n                    message.image = reader.string();\n                    break;\n                case /* google.protobuf.Struct custom */ 12:\n                    message.custom = Struct.internalBinaryRead(reader, reader.uint32(), options, message.custom);\n                    break;\n                case /* repeated string roles */ 13:\n                    message.roles.push(reader.string());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* repeated stream.video.sfu.models.TrackType published_tracks = 3; */ if (message.publishedTracks.length) {\n            writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork();\n            for(let i = 0; i < message.publishedTracks.length; i++)writer.int32(message.publishedTracks[i]);\n            writer.join();\n        }\n        /* google.protobuf.Timestamp joined_at = 4; */ if (message.joinedAt) Timestamp.internalBinaryWrite(message.joinedAt, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* string track_lookup_prefix = 5; */ if (message.trackLookupPrefix !== \"\") writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.trackLookupPrefix);\n        /* stream.video.sfu.models.ConnectionQuality connection_quality = 6; */ if (message.connectionQuality !== 0) writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.connectionQuality);\n        /* bool is_speaking = 7; */ if (message.isSpeaking !== false) writer.tag(7, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.isSpeaking);\n        /* bool is_dominant_speaker = 8; */ if (message.isDominantSpeaker !== false) writer.tag(8, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.isDominantSpeaker);\n        /* float audio_level = 9; */ if (message.audioLevel !== 0) writer.tag(9, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Bit32).float(message.audioLevel);\n        /* string name = 10; */ if (message.name !== \"\") writer.tag(10, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.name);\n        /* string image = 11; */ if (message.image !== \"\") writer.tag(11, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.image);\n        /* google.protobuf.Struct custom = 12; */ if (message.custom) Struct.internalBinaryWrite(message.custom, writer.tag(12, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* repeated string roles = 13; */ for(let i = 0; i < message.roles.length; i++)writer.tag(13, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.roles[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Participant\n */ const Participant = new Participant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StreamQuality$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.StreamQuality\", [\n            {\n                no: 1,\n                name: \"video_quality\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.VideoQuality\",\n                        VideoQuality,\n                        \"VIDEO_QUALITY_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.videoQuality = 0;\n        message.userId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.VideoQuality video_quality */ 1:\n                    message.videoQuality = reader.int32();\n                    break;\n                case /* string user_id */ 2:\n                    message.userId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.VideoQuality video_quality = 1; */ if (message.videoQuality !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.videoQuality);\n        /* string user_id = 2; */ if (message.userId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.StreamQuality\n */ const StreamQuality = new StreamQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoDimension$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.VideoDimension\", [\n            {\n                no: 1,\n                name: \"width\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 2,\n                name: \"height\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.width = 0;\n        message.height = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* uint32 width */ 1:\n                    message.width = reader.uint32();\n                    break;\n                case /* uint32 height */ 2:\n                    message.height = reader.uint32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* uint32 width = 1; */ if (message.width !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.width);\n        /* uint32 height = 2; */ if (message.height !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.height);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoDimension\n */ const VideoDimension = new VideoDimension$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.VideoLayer\", [\n            {\n                no: 1,\n                name: \"rid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"video_dimension\",\n                kind: \"message\",\n                T: ()=>VideoDimension\n            },\n            {\n                no: 4,\n                name: \"bitrate\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 5,\n                name: \"fps\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 6,\n                name: \"quality\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.VideoQuality\",\n                        VideoQuality,\n                        \"VIDEO_QUALITY_\"\n                    ]\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.rid = \"\";\n        message.bitrate = 0;\n        message.fps = 0;\n        message.quality = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string rid */ 1:\n                    message.rid = reader.string();\n                    break;\n                case /* stream.video.sfu.models.VideoDimension video_dimension */ 2:\n                    message.videoDimension = VideoDimension.internalBinaryRead(reader, reader.uint32(), options, message.videoDimension);\n                    break;\n                case /* uint32 bitrate */ 4:\n                    message.bitrate = reader.uint32();\n                    break;\n                case /* uint32 fps */ 5:\n                    message.fps = reader.uint32();\n                    break;\n                case /* stream.video.sfu.models.VideoQuality quality */ 6:\n                    message.quality = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string rid = 1; */ if (message.rid !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.rid);\n        /* stream.video.sfu.models.VideoDimension video_dimension = 2; */ if (message.videoDimension) VideoDimension.internalBinaryWrite(message.videoDimension, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* uint32 bitrate = 4; */ if (message.bitrate !== 0) writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.bitrate);\n        /* uint32 fps = 5; */ if (message.fps !== 0) writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.fps);\n        /* stream.video.sfu.models.VideoQuality quality = 6; */ if (message.quality !== 0) writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.quality);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoLayer\n */ const VideoLayer = new VideoLayer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Codec$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Codec\", [\n            {\n                no: 1,\n                name: \"payload_type\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 2,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"fmtp_line\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"clock_rate\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 5,\n                name: \"encoding_parameters\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 6,\n                name: \"feedbacks\",\n                kind: \"scalar\",\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.payloadType = 0;\n        message.name = \"\";\n        message.fmtpLine = \"\";\n        message.clockRate = 0;\n        message.encodingParameters = \"\";\n        message.feedbacks = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* uint32 payload_type */ 1:\n                    message.payloadType = reader.uint32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* string fmtp_line */ 3:\n                    message.fmtpLine = reader.string();\n                    break;\n                case /* uint32 clock_rate */ 4:\n                    message.clockRate = reader.uint32();\n                    break;\n                case /* string encoding_parameters */ 5:\n                    message.encodingParameters = reader.string();\n                    break;\n                case /* repeated string feedbacks */ 6:\n                    message.feedbacks.push(reader.string());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* uint32 payload_type = 1; */ if (message.payloadType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.payloadType);\n        /* string name = 2; */ if (message.name !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.name);\n        /* string fmtp_line = 3; */ if (message.fmtpLine !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.fmtpLine);\n        /* uint32 clock_rate = 4; */ if (message.clockRate !== 0) writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.clockRate);\n        /* string encoding_parameters = 5; */ if (message.encodingParameters !== \"\") writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.encodingParameters);\n        /* repeated string feedbacks = 6; */ for(let i = 0; i < message.feedbacks.length; i++)writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.feedbacks[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Codec\n */ const Codec = new Codec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nlet ICETrickle$Type$1 = class ICETrickle$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.ICETrickle\", [\n            {\n                no: 1,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"ice_candidate\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.peerType = 0;\n        message.iceCandidate = \"\";\n        message.sessionId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.PeerType peer_type */ 1:\n                    message.peerType = reader.int32();\n                    break;\n                case /* string ice_candidate */ 2:\n                    message.iceCandidate = reader.string();\n                    break;\n                case /* string session_id */ 3:\n                    message.sessionId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.PeerType peer_type = 1; */ if (message.peerType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.peerType);\n        /* string ice_candidate = 2; */ if (message.iceCandidate !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.iceCandidate);\n        /* string session_id = 3; */ if (message.sessionId !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n};\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ICETrickle\n */ const ICETrickle$1 = new ICETrickle$Type$1();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackInfo$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.TrackInfo\", [\n            {\n                no: 1,\n                name: \"track_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"track_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 5,\n                name: \"layers\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>VideoLayer\n            },\n            {\n                no: 6,\n                name: \"mid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 7,\n                name: \"dtx\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 8,\n                name: \"stereo\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 9,\n                name: \"red\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.trackId = \"\";\n        message.trackType = 0;\n        message.layers = [];\n        message.mid = \"\";\n        message.dtx = false;\n        message.stereo = false;\n        message.red = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string track_id */ 1:\n                    message.trackId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.TrackType track_type */ 2:\n                    message.trackType = reader.int32();\n                    break;\n                case /* repeated stream.video.sfu.models.VideoLayer layers */ 5:\n                    message.layers.push(VideoLayer.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* string mid */ 6:\n                    message.mid = reader.string();\n                    break;\n                case /* bool dtx */ 7:\n                    message.dtx = reader.bool();\n                    break;\n                case /* bool stereo */ 8:\n                    message.stereo = reader.bool();\n                    break;\n                case /* bool red */ 9:\n                    message.red = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string track_id = 1; */ if (message.trackId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.trackId);\n        /* stream.video.sfu.models.TrackType track_type = 2; */ if (message.trackType !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.trackType);\n        /* repeated stream.video.sfu.models.VideoLayer layers = 5; */ for(let i = 0; i < message.layers.length; i++)VideoLayer.internalBinaryWrite(message.layers[i], writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* string mid = 6; */ if (message.mid !== \"\") writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.mid);\n        /* bool dtx = 7; */ if (message.dtx !== false) writer.tag(7, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.dtx);\n        /* bool stereo = 8; */ if (message.stereo !== false) writer.tag(8, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.stereo);\n        /* bool red = 9; */ if (message.red !== false) writer.tag(9, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.red);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.TrackInfo\n */ const TrackInfo = new TrackInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Call$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Call\", [\n            {\n                no: 1,\n                name: \"type\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"created_by_user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"host_user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 5,\n                name: \"custom\",\n                kind: \"message\",\n                T: ()=>Struct\n            },\n            {\n                no: 6,\n                name: \"created_at\",\n                kind: \"message\",\n                T: ()=>Timestamp\n            },\n            {\n                no: 7,\n                name: \"updated_at\",\n                kind: \"message\",\n                T: ()=>Timestamp\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.type = \"\";\n        message.id = \"\";\n        message.createdByUserId = \"\";\n        message.hostUserId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string type */ 1:\n                    message.type = reader.string();\n                    break;\n                case /* string id */ 2:\n                    message.id = reader.string();\n                    break;\n                case /* string created_by_user_id */ 3:\n                    message.createdByUserId = reader.string();\n                    break;\n                case /* string host_user_id */ 4:\n                    message.hostUserId = reader.string();\n                    break;\n                case /* google.protobuf.Struct custom */ 5:\n                    message.custom = Struct.internalBinaryRead(reader, reader.uint32(), options, message.custom);\n                    break;\n                case /* google.protobuf.Timestamp created_at */ 6:\n                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);\n                    break;\n                case /* google.protobuf.Timestamp updated_at */ 7:\n                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string type = 1; */ if (message.type !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.type);\n        /* string id = 2; */ if (message.id !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.id);\n        /* string created_by_user_id = 3; */ if (message.createdByUserId !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.createdByUserId);\n        /* string host_user_id = 4; */ if (message.hostUserId !== \"\") writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.hostUserId);\n        /* google.protobuf.Struct custom = 5; */ if (message.custom) Struct.internalBinaryWrite(message.custom, writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* google.protobuf.Timestamp created_at = 6; */ if (message.createdAt) Timestamp.internalBinaryWrite(message.createdAt, writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* google.protobuf.Timestamp updated_at = 7; */ if (message.updatedAt) Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(7, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Call\n */ const Call$1 = new Call$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nlet Error$Type$1 = class Error$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Error\", [\n            {\n                no: 1,\n                name: \"code\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.ErrorCode\",\n                        ErrorCode,\n                        \"ERROR_CODE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"message\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"should_retry\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.code = 0;\n        message.message = \"\";\n        message.shouldRetry = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.ErrorCode code */ 1:\n                    message.code = reader.int32();\n                    break;\n                case /* string message */ 2:\n                    message.message = reader.string();\n                    break;\n                case /* bool should_retry */ 3:\n                    message.shouldRetry = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.ErrorCode code = 1; */ if (message.code !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.code);\n        /* string message = 2; */ if (message.message !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.message);\n        /* bool should_retry = 3; */ if (message.shouldRetry !== false) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.shouldRetry);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n};\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Error\n */ const Error$2 = new Error$Type$1();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ClientDetails$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.ClientDetails\", [\n            {\n                no: 1,\n                name: \"sdk\",\n                kind: \"message\",\n                T: ()=>Sdk\n            },\n            {\n                no: 2,\n                name: \"os\",\n                kind: \"message\",\n                T: ()=>OS\n            },\n            {\n                no: 3,\n                name: \"browser\",\n                kind: \"message\",\n                T: ()=>Browser\n            },\n            {\n                no: 4,\n                name: \"device\",\n                kind: \"message\",\n                T: ()=>Device\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Sdk sdk */ 1:\n                    message.sdk = Sdk.internalBinaryRead(reader, reader.uint32(), options, message.sdk);\n                    break;\n                case /* stream.video.sfu.models.OS os */ 2:\n                    message.os = OS.internalBinaryRead(reader, reader.uint32(), options, message.os);\n                    break;\n                case /* stream.video.sfu.models.Browser browser */ 3:\n                    message.browser = Browser.internalBinaryRead(reader, reader.uint32(), options, message.browser);\n                    break;\n                case /* stream.video.sfu.models.Device device */ 4:\n                    message.device = Device.internalBinaryRead(reader, reader.uint32(), options, message.device);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Sdk sdk = 1; */ if (message.sdk) Sdk.internalBinaryWrite(message.sdk, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.OS os = 2; */ if (message.os) OS.internalBinaryWrite(message.os, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.Browser browser = 3; */ if (message.browser) Browser.internalBinaryWrite(message.browser, writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.Device device = 4; */ if (message.device) Device.internalBinaryWrite(message.device, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ClientDetails\n */ const ClientDetails = new ClientDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Sdk$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Sdk\", [\n            {\n                no: 1,\n                name: \"type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.SdkType\",\n                        SdkType,\n                        \"SDK_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"major\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"minor\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"patch\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.type = 0;\n        message.major = \"\";\n        message.minor = \"\";\n        message.patch = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.SdkType type */ 1:\n                    message.type = reader.int32();\n                    break;\n                case /* string major */ 2:\n                    message.major = reader.string();\n                    break;\n                case /* string minor */ 3:\n                    message.minor = reader.string();\n                    break;\n                case /* string patch */ 4:\n                    message.patch = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.SdkType type = 1; */ if (message.type !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.type);\n        /* string major = 2; */ if (message.major !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.major);\n        /* string minor = 3; */ if (message.minor !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.minor);\n        /* string patch = 4; */ if (message.patch !== \"\") writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.patch);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Sdk\n */ const Sdk = new Sdk$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass OS$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.OS\", [\n            {\n                no: 1,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"architecture\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.name = \"\";\n        message.version = \"\";\n        message.architecture = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* string version */ 2:\n                    message.version = reader.string();\n                    break;\n                case /* string architecture */ 3:\n                    message.architecture = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string name = 1; */ if (message.name !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.name);\n        /* string version = 2; */ if (message.version !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.version);\n        /* string architecture = 3; */ if (message.architecture !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.architecture);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.OS\n */ const OS = new OS$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Browser$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Browser\", [\n            {\n                no: 1,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.name = \"\";\n        message.version = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* string version */ 2:\n                    message.version = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string name = 1; */ if (message.name !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.name);\n        /* string version = 2; */ if (message.version !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.version);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Browser\n */ const Browser = new Browser$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Device$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.Device\", [\n            {\n                no: 1,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.name = \"\";\n        message.version = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* string version */ 2:\n                    message.version = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string name = 1; */ if (message.name !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.name);\n        /* string version = 2; */ if (message.version !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.version);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Device\n */ const Device = new Device$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrants$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.models.CallGrants\", [\n            {\n                no: 1,\n                name: \"can_publish_audio\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 2,\n                name: \"can_publish_video\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 3,\n                name: \"can_screenshare\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.canPublishAudio = false;\n        message.canPublishVideo = false;\n        message.canScreenshare = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* bool can_publish_audio */ 1:\n                    message.canPublishAudio = reader.bool();\n                    break;\n                case /* bool can_publish_video */ 2:\n                    message.canPublishVideo = reader.bool();\n                    break;\n                case /* bool can_screenshare */ 3:\n                    message.canScreenshare = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* bool can_publish_audio = 1; */ if (message.canPublishAudio !== false) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.canPublishAudio);\n        /* bool can_publish_video = 2; */ if (message.canPublishVideo !== false) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.canPublishVideo);\n        /* bool can_screenshare = 3; */ if (message.canScreenshare !== false) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.canScreenshare);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallGrants\n */ const CallGrants = new CallGrants$Type();\nvar models = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Browser: Browser,\n    Call: Call$1,\n    CallGrants: CallGrants,\n    CallState: CallState$1,\n    ClientDetails: ClientDetails,\n    Codec: Codec,\n    get ConnectionQuality () {\n        return ConnectionQuality;\n    },\n    Device: Device,\n    Error: Error$2,\n    get ErrorCode () {\n        return ErrorCode;\n    },\n    get GoAwayReason () {\n        return GoAwayReason;\n    },\n    ICETrickle: ICETrickle$1,\n    OS: OS,\n    Participant: Participant,\n    ParticipantCount: ParticipantCount,\n    get PeerType () {\n        return PeerType;\n    },\n    Pin: Pin,\n    Sdk: Sdk,\n    get SdkType () {\n        return SdkType;\n    },\n    StreamQuality: StreamQuality,\n    TrackInfo: TrackInfo,\n    get TrackType () {\n        return TrackType;\n    },\n    get TrackUnpublishReason () {\n        return TrackUnpublishReason;\n    },\n    VideoDimension: VideoDimension,\n    VideoLayer: VideoLayer,\n    get VideoQuality () {\n        return VideoQuality;\n    }\n});\n/* eslint-disable */ // @generated by protobuf-ts 2.9.3 with parameter long_type_string,client_generic,server_none,eslint_disable\n// @generated from protobuf file \"video/sfu/signal_rpc/signal.proto\" (package \"stream.video.sfu.signal\", syntax proto3)\n// tslint:disable\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SendStatsRequest\", [\n            {\n                no: 1,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"subscriber_stats\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"publisher_stats\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"webrtc_version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 5,\n                name: \"sdk\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 6,\n                name: \"sdk_version\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sessionId = \"\";\n        message.subscriberStats = \"\";\n        message.publisherStats = \"\";\n        message.webrtcVersion = \"\";\n        message.sdk = \"\";\n        message.sdkVersion = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string session_id */ 1:\n                    message.sessionId = reader.string();\n                    break;\n                case /* string subscriber_stats */ 2:\n                    message.subscriberStats = reader.string();\n                    break;\n                case /* string publisher_stats */ 3:\n                    message.publisherStats = reader.string();\n                    break;\n                case /* string webrtc_version */ 4:\n                    message.webrtcVersion = reader.string();\n                    break;\n                case /* string sdk */ 5:\n                    message.sdk = reader.string();\n                    break;\n                case /* string sdk_version */ 6:\n                    message.sdkVersion = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string session_id = 1; */ if (message.sessionId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* string subscriber_stats = 2; */ if (message.subscriberStats !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.subscriberStats);\n        /* string publisher_stats = 3; */ if (message.publisherStats !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.publisherStats);\n        /* string webrtc_version = 4; */ if (message.webrtcVersion !== \"\") writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.webrtcVersion);\n        /* string sdk = 5; */ if (message.sdk !== \"\") writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sdk);\n        /* string sdk_version = 6; */ if (message.sdkVersion !== \"\") writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sdkVersion);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsRequest\n */ const SendStatsRequest = new SendStatsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SendStatsResponse\", [\n            {\n                no: 1,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 1:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 1; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsResponse\n */ const SendStatsResponse = new SendStatsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.ICERestartRequest\", [\n            {\n                no: 1,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sessionId = \"\";\n        message.peerType = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string session_id */ 1:\n                    message.sessionId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.PeerType peer_type */ 2:\n                    message.peerType = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string session_id = 1; */ if (message.sessionId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* stream.video.sfu.models.PeerType peer_type = 2; */ if (message.peerType !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.peerType);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartRequest\n */ const ICERestartRequest = new ICERestartRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.ICERestartResponse\", [\n            {\n                no: 1,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 1:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 1; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartResponse\n */ const ICERestartResponse = new ICERestartResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.UpdateMuteStatesRequest\", [\n            {\n                no: 1,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"mute_states\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackMuteState\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sessionId = \"\";\n        message.muteStates = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string session_id */ 1:\n                    message.sessionId = reader.string();\n                    break;\n                case /* repeated stream.video.sfu.signal.TrackMuteState mute_states */ 3:\n                    message.muteStates.push(TrackMuteState.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string session_id = 1; */ if (message.sessionId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* repeated stream.video.sfu.signal.TrackMuteState mute_states = 3; */ for(let i = 0; i < message.muteStates.length; i++)TrackMuteState.internalBinaryWrite(message.muteStates[i], writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesRequest\n */ const UpdateMuteStatesRequest = new UpdateMuteStatesRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.UpdateMuteStatesResponse\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesResponse\n */ const UpdateMuteStatesResponse = new UpdateMuteStatesResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackMuteState$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.TrackMuteState\", [\n            {\n                no: 1,\n                name: \"track_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"muted\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.trackType = 0;\n        message.muted = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.TrackType track_type */ 1:\n                    message.trackType = reader.int32();\n                    break;\n                case /* bool muted */ 2:\n                    message.muted = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.TrackType track_type = 1; */ if (message.trackType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.trackType);\n        /* bool muted = 2; */ if (message.muted !== false) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.muted);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackMuteState\n */ const TrackMuteState = new TrackMuteState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioMuteChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.AudioMuteChanged\", [\n            {\n                no: 1,\n                name: \"muted\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.muted = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* bool muted */ 1:\n                    message.muted = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* bool muted = 1; */ if (message.muted !== false) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.muted);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.AudioMuteChanged\n */ new AudioMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoMuteChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.VideoMuteChanged\", [\n            {\n                no: 2,\n                name: \"muted\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.muted = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* bool muted */ 2:\n                    message.muted = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* bool muted = 2; */ if (message.muted !== false) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.muted);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.VideoMuteChanged\n */ new VideoMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.UpdateSubscriptionsRequest\", [\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"tracks\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackSubscriptionDetails\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sessionId = \"\";\n        message.tracks = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* repeated stream.video.sfu.signal.TrackSubscriptionDetails tracks */ 3:\n                    message.tracks.push(TrackSubscriptionDetails.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* repeated stream.video.sfu.signal.TrackSubscriptionDetails tracks = 3; */ for(let i = 0; i < message.tracks.length; i++)TrackSubscriptionDetails.internalBinaryWrite(message.tracks[i], writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsRequest\n */ const UpdateSubscriptionsRequest = new UpdateSubscriptionsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.UpdateSubscriptionsResponse\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsResponse\n */ const UpdateSubscriptionsResponse = new UpdateSubscriptionsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackSubscriptionDetails$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.TrackSubscriptionDetails\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"track_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 4,\n                name: \"dimension\",\n                kind: \"message\",\n                T: ()=>VideoDimension\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.trackType = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.TrackType track_type */ 3:\n                    message.trackType = reader.int32();\n                    break;\n                case /* stream.video.sfu.models.VideoDimension dimension */ 4:\n                    message.dimension = VideoDimension.internalBinaryRead(reader, reader.uint32(), options, message.dimension);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* stream.video.sfu.models.TrackType track_type = 3; */ if (message.trackType !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.trackType);\n        /* stream.video.sfu.models.VideoDimension dimension = 4; */ if (message.dimension) VideoDimension.internalBinaryWrite(message.dimension, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackSubscriptionDetails\n */ const TrackSubscriptionDetails = new TrackSubscriptionDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SendAnswerRequest\", [\n            {\n                no: 1,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.peerType = 0;\n        message.sdp = \"\";\n        message.sessionId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.PeerType peer_type */ 1:\n                    message.peerType = reader.int32();\n                    break;\n                case /* string sdp */ 2:\n                    message.sdp = reader.string();\n                    break;\n                case /* string session_id */ 3:\n                    message.sessionId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.PeerType peer_type = 1; */ if (message.peerType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.peerType);\n        /* string sdp = 2; */ if (message.sdp !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sdp);\n        /* string session_id = 3; */ if (message.sessionId !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerRequest\n */ const SendAnswerRequest = new SendAnswerRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SendAnswerResponse\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerResponse\n */ const SendAnswerResponse = new SendAnswerResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickleResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.ICETrickleResponse\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICETrickleResponse\n */ const ICETrickleResponse = new ICETrickleResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SetPublisherRequest\", [\n            {\n                no: 1,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"tracks\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackInfo\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sdp = \"\";\n        message.sessionId = \"\";\n        message.tracks = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string sdp */ 1:\n                    message.sdp = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* repeated stream.video.sfu.models.TrackInfo tracks */ 3:\n                    message.tracks.push(TrackInfo.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string sdp = 1; */ if (message.sdp !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sdp);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* repeated stream.video.sfu.models.TrackInfo tracks = 3; */ for(let i = 0; i < message.tracks.length; i++)TrackInfo.internalBinaryWrite(message.tracks[i], writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherRequest\n */ const SetPublisherRequest = new SetPublisherRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.signal.SetPublisherResponse\", [\n            {\n                no: 1,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"ice_restart\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sdp = \"\";\n        message.sessionId = \"\";\n        message.iceRestart = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string sdp */ 1:\n                    message.sdp = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* bool ice_restart */ 3:\n                    message.iceRestart = reader.bool();\n                    break;\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string sdp = 1; */ if (message.sdp !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sdp);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* bool ice_restart = 3; */ if (message.iceRestart !== false) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.iceRestart);\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherResponse\n */ const SetPublisherResponse = new SetPublisherResponse$Type();\n/**\n * @generated ServiceType for protobuf service stream.video.sfu.signal.SignalServer\n */ const SignalServer = new _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_14__.ServiceType(\"stream.video.sfu.signal.SignalServer\", [\n    {\n        name: \"SetPublisher\",\n        options: {},\n        I: SetPublisherRequest,\n        O: SetPublisherResponse\n    },\n    {\n        name: \"SendAnswer\",\n        options: {},\n        I: SendAnswerRequest,\n        O: SendAnswerResponse\n    },\n    {\n        name: \"IceTrickle\",\n        options: {},\n        I: ICETrickle$1,\n        O: ICETrickleResponse\n    },\n    {\n        name: \"UpdateSubscriptions\",\n        options: {},\n        I: UpdateSubscriptionsRequest,\n        O: UpdateSubscriptionsResponse\n    },\n    {\n        name: \"UpdateMuteStates\",\n        options: {},\n        I: UpdateMuteStatesRequest,\n        O: UpdateMuteStatesResponse\n    },\n    {\n        name: \"IceRestart\",\n        options: {},\n        I: ICERestartRequest,\n        O: ICERestartResponse\n    },\n    {\n        name: \"SendStats\",\n        options: {},\n        I: SendStatsRequest,\n        O: SendStatsResponse\n    }\n]);\n/**\n * @generated from protobuf enum stream.video.sfu.event.VideoLayerSetting.Priority\n */ var VideoLayerSetting_Priority;\n(function(VideoLayerSetting_Priority) {\n    /**\n     * @generated from protobuf enum value: PRIORITY_HIGH_UNSPECIFIED = 0;\n     */ VideoLayerSetting_Priority[VideoLayerSetting_Priority[\"HIGH_UNSPECIFIED\"] = 0] = \"HIGH_UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: PRIORITY_LOW = 1;\n     */ VideoLayerSetting_Priority[VideoLayerSetting_Priority[\"LOW\"] = 1] = \"LOW\";\n    /**\n     * @generated from protobuf enum value: PRIORITY_MEDIUM = 2;\n     */ VideoLayerSetting_Priority[VideoLayerSetting_Priority[\"MEDIUM\"] = 2] = \"MEDIUM\";\n    /**\n     * @generated from protobuf enum value: PRIORITY_VERY_LOW = 3;\n     */ VideoLayerSetting_Priority[VideoLayerSetting_Priority[\"VERY_LOW\"] = 3] = \"VERY_LOW\";\n})(VideoLayerSetting_Priority || (VideoLayerSetting_Priority = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuEvent$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.SfuEvent\", [\n            {\n                no: 1,\n                name: \"subscriber_offer\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>SubscriberOffer\n            },\n            {\n                no: 2,\n                name: \"publisher_answer\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>PublisherAnswer\n            },\n            {\n                no: 3,\n                name: \"connection_quality_changed\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ConnectionQualityChanged\n            },\n            {\n                no: 4,\n                name: \"audio_level_changed\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>AudioLevelChanged\n            },\n            {\n                no: 5,\n                name: \"ice_trickle\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ICETrickle$1\n            },\n            {\n                no: 6,\n                name: \"change_publish_quality\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ChangePublishQuality\n            },\n            {\n                no: 10,\n                name: \"participant_joined\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ParticipantJoined\n            },\n            {\n                no: 11,\n                name: \"participant_left\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ParticipantLeft\n            },\n            {\n                no: 12,\n                name: \"dominant_speaker_changed\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>DominantSpeakerChanged\n            },\n            {\n                no: 13,\n                name: \"join_response\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>JoinResponse\n            },\n            {\n                no: 14,\n                name: \"health_check_response\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>HealthCheckResponse\n            },\n            {\n                no: 16,\n                name: \"track_published\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>TrackPublished\n            },\n            {\n                no: 17,\n                name: \"track_unpublished\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>TrackUnpublished\n            },\n            {\n                no: 18,\n                name: \"error\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>Error$1\n            },\n            {\n                no: 19,\n                name: \"call_grants_updated\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>CallGrantsUpdated\n            },\n            {\n                no: 20,\n                name: \"go_away\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>GoAway\n            },\n            {\n                no: 21,\n                name: \"ice_restart\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>ICERestart\n            },\n            {\n                no: 22,\n                name: \"pins_updated\",\n                kind: \"message\",\n                oneof: \"eventPayload\",\n                T: ()=>PinsChanged\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.eventPayload = {\n            oneofKind: undefined\n        };\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.event.SubscriberOffer subscriber_offer */ 1:\n                    message.eventPayload = {\n                        oneofKind: \"subscriberOffer\",\n                        subscriberOffer: SubscriberOffer.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.subscriberOffer)\n                    };\n                    break;\n                case /* stream.video.sfu.event.PublisherAnswer publisher_answer */ 2:\n                    message.eventPayload = {\n                        oneofKind: \"publisherAnswer\",\n                        publisherAnswer: PublisherAnswer.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.publisherAnswer)\n                    };\n                    break;\n                case /* stream.video.sfu.event.ConnectionQualityChanged connection_quality_changed */ 3:\n                    message.eventPayload = {\n                        oneofKind: \"connectionQualityChanged\",\n                        connectionQualityChanged: ConnectionQualityChanged.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.connectionQualityChanged)\n                    };\n                    break;\n                case /* stream.video.sfu.event.AudioLevelChanged audio_level_changed */ 4:\n                    message.eventPayload = {\n                        oneofKind: \"audioLevelChanged\",\n                        audioLevelChanged: AudioLevelChanged.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.audioLevelChanged)\n                    };\n                    break;\n                case /* stream.video.sfu.models.ICETrickle ice_trickle */ 5:\n                    message.eventPayload = {\n                        oneofKind: \"iceTrickle\",\n                        iceTrickle: ICETrickle$1.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.iceTrickle)\n                    };\n                    break;\n                case /* stream.video.sfu.event.ChangePublishQuality change_publish_quality */ 6:\n                    message.eventPayload = {\n                        oneofKind: \"changePublishQuality\",\n                        changePublishQuality: ChangePublishQuality.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.changePublishQuality)\n                    };\n                    break;\n                case /* stream.video.sfu.event.ParticipantJoined participant_joined */ 10:\n                    message.eventPayload = {\n                        oneofKind: \"participantJoined\",\n                        participantJoined: ParticipantJoined.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.participantJoined)\n                    };\n                    break;\n                case /* stream.video.sfu.event.ParticipantLeft participant_left */ 11:\n                    message.eventPayload = {\n                        oneofKind: \"participantLeft\",\n                        participantLeft: ParticipantLeft.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.participantLeft)\n                    };\n                    break;\n                case /* stream.video.sfu.event.DominantSpeakerChanged dominant_speaker_changed */ 12:\n                    message.eventPayload = {\n                        oneofKind: \"dominantSpeakerChanged\",\n                        dominantSpeakerChanged: DominantSpeakerChanged.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.dominantSpeakerChanged)\n                    };\n                    break;\n                case /* stream.video.sfu.event.JoinResponse join_response */ 13:\n                    message.eventPayload = {\n                        oneofKind: \"joinResponse\",\n                        joinResponse: JoinResponse.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.joinResponse)\n                    };\n                    break;\n                case /* stream.video.sfu.event.HealthCheckResponse health_check_response */ 14:\n                    message.eventPayload = {\n                        oneofKind: \"healthCheckResponse\",\n                        healthCheckResponse: HealthCheckResponse.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.healthCheckResponse)\n                    };\n                    break;\n                case /* stream.video.sfu.event.TrackPublished track_published */ 16:\n                    message.eventPayload = {\n                        oneofKind: \"trackPublished\",\n                        trackPublished: TrackPublished.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.trackPublished)\n                    };\n                    break;\n                case /* stream.video.sfu.event.TrackUnpublished track_unpublished */ 17:\n                    message.eventPayload = {\n                        oneofKind: \"trackUnpublished\",\n                        trackUnpublished: TrackUnpublished.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.trackUnpublished)\n                    };\n                    break;\n                case /* stream.video.sfu.event.Error error */ 18:\n                    message.eventPayload = {\n                        oneofKind: \"error\",\n                        error: Error$1.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.error)\n                    };\n                    break;\n                case /* stream.video.sfu.event.CallGrantsUpdated call_grants_updated */ 19:\n                    message.eventPayload = {\n                        oneofKind: \"callGrantsUpdated\",\n                        callGrantsUpdated: CallGrantsUpdated.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.callGrantsUpdated)\n                    };\n                    break;\n                case /* stream.video.sfu.event.GoAway go_away */ 20:\n                    message.eventPayload = {\n                        oneofKind: \"goAway\",\n                        goAway: GoAway.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.goAway)\n                    };\n                    break;\n                case /* stream.video.sfu.event.ICERestart ice_restart */ 21:\n                    message.eventPayload = {\n                        oneofKind: \"iceRestart\",\n                        iceRestart: ICERestart.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.iceRestart)\n                    };\n                    break;\n                case /* stream.video.sfu.event.PinsChanged pins_updated */ 22:\n                    message.eventPayload = {\n                        oneofKind: \"pinsUpdated\",\n                        pinsUpdated: PinsChanged.internalBinaryRead(reader, reader.uint32(), options, message.eventPayload.pinsUpdated)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.event.SubscriberOffer subscriber_offer = 1; */ if (message.eventPayload.oneofKind === \"subscriberOffer\") SubscriberOffer.internalBinaryWrite(message.eventPayload.subscriberOffer, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.PublisherAnswer publisher_answer = 2; */ if (message.eventPayload.oneofKind === \"publisherAnswer\") PublisherAnswer.internalBinaryWrite(message.eventPayload.publisherAnswer, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.ConnectionQualityChanged connection_quality_changed = 3; */ if (message.eventPayload.oneofKind === \"connectionQualityChanged\") ConnectionQualityChanged.internalBinaryWrite(message.eventPayload.connectionQualityChanged, writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.AudioLevelChanged audio_level_changed = 4; */ if (message.eventPayload.oneofKind === \"audioLevelChanged\") AudioLevelChanged.internalBinaryWrite(message.eventPayload.audioLevelChanged, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.ICETrickle ice_trickle = 5; */ if (message.eventPayload.oneofKind === \"iceTrickle\") ICETrickle$1.internalBinaryWrite(message.eventPayload.iceTrickle, writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.ChangePublishQuality change_publish_quality = 6; */ if (message.eventPayload.oneofKind === \"changePublishQuality\") ChangePublishQuality.internalBinaryWrite(message.eventPayload.changePublishQuality, writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.ParticipantJoined participant_joined = 10; */ if (message.eventPayload.oneofKind === \"participantJoined\") ParticipantJoined.internalBinaryWrite(message.eventPayload.participantJoined, writer.tag(10, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.ParticipantLeft participant_left = 11; */ if (message.eventPayload.oneofKind === \"participantLeft\") ParticipantLeft.internalBinaryWrite(message.eventPayload.participantLeft, writer.tag(11, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.DominantSpeakerChanged dominant_speaker_changed = 12; */ if (message.eventPayload.oneofKind === \"dominantSpeakerChanged\") DominantSpeakerChanged.internalBinaryWrite(message.eventPayload.dominantSpeakerChanged, writer.tag(12, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.JoinResponse join_response = 13; */ if (message.eventPayload.oneofKind === \"joinResponse\") JoinResponse.internalBinaryWrite(message.eventPayload.joinResponse, writer.tag(13, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.HealthCheckResponse health_check_response = 14; */ if (message.eventPayload.oneofKind === \"healthCheckResponse\") HealthCheckResponse.internalBinaryWrite(message.eventPayload.healthCheckResponse, writer.tag(14, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.TrackPublished track_published = 16; */ if (message.eventPayload.oneofKind === \"trackPublished\") TrackPublished.internalBinaryWrite(message.eventPayload.trackPublished, writer.tag(16, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.TrackUnpublished track_unpublished = 17; */ if (message.eventPayload.oneofKind === \"trackUnpublished\") TrackUnpublished.internalBinaryWrite(message.eventPayload.trackUnpublished, writer.tag(17, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.Error error = 18; */ if (message.eventPayload.oneofKind === \"error\") Error$1.internalBinaryWrite(message.eventPayload.error, writer.tag(18, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.CallGrantsUpdated call_grants_updated = 19; */ if (message.eventPayload.oneofKind === \"callGrantsUpdated\") CallGrantsUpdated.internalBinaryWrite(message.eventPayload.callGrantsUpdated, writer.tag(19, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.GoAway go_away = 20; */ if (message.eventPayload.oneofKind === \"goAway\") GoAway.internalBinaryWrite(message.eventPayload.goAway, writer.tag(20, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.ICERestart ice_restart = 21; */ if (message.eventPayload.oneofKind === \"iceRestart\") ICERestart.internalBinaryWrite(message.eventPayload.iceRestart, writer.tag(21, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.PinsChanged pins_updated = 22; */ if (message.eventPayload.oneofKind === \"pinsUpdated\") PinsChanged.internalBinaryWrite(message.eventPayload.pinsUpdated, writer.tag(22, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuEvent\n */ const SfuEvent = new SfuEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PinsChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.PinsChanged\", [\n            {\n                no: 1,\n                name: \"pins\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Pin\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.pins = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated stream.video.sfu.models.Pin pins */ 1:\n                    message.pins.push(Pin.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated stream.video.sfu.models.Pin pins = 1; */ for(let i = 0; i < message.pins.length; i++)Pin.internalBinaryWrite(message.pins[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PinsChanged\n */ const PinsChanged = new PinsChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Error$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.Error\", [\n            {\n                no: 4,\n                name: \"error\",\n                kind: \"message\",\n                T: ()=>Error$2\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.Error error */ 4:\n                    message.error = Error$2.internalBinaryRead(reader, reader.uint32(), options, message.error);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.Error error = 4; */ if (message.error) Error$2.internalBinaryWrite(message.error, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Error\n */ const Error$1 = new Error$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickle$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ICETrickle\", [\n            {\n                no: 1,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            },\n            {\n                no: 2,\n                name: \"ice_candidate\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.peerType = 0;\n        message.iceCandidate = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.PeerType peer_type */ 1:\n                    message.peerType = reader.int32();\n                    break;\n                case /* string ice_candidate */ 2:\n                    message.iceCandidate = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.PeerType peer_type = 1; */ if (message.peerType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.peerType);\n        /* string ice_candidate = 2; */ if (message.iceCandidate !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.iceCandidate);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICETrickle\n */ const ICETrickle = new ICETrickle$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestart$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ICERestart\", [\n            {\n                no: 1,\n                name: \"peer_type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.PeerType\",\n                        PeerType,\n                        \"PEER_TYPE_\"\n                    ]\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.peerType = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.PeerType peer_type */ 1:\n                    message.peerType = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.PeerType peer_type = 1; */ if (message.peerType !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.peerType);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICERestart\n */ const ICERestart = new ICERestart$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.SfuRequest\", [\n            {\n                no: 1,\n                name: \"join_request\",\n                kind: \"message\",\n                oneof: \"requestPayload\",\n                T: ()=>JoinRequest\n            },\n            {\n                no: 2,\n                name: \"health_check_request\",\n                kind: \"message\",\n                oneof: \"requestPayload\",\n                T: ()=>HealthCheckRequest\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.requestPayload = {\n            oneofKind: undefined\n        };\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.event.JoinRequest join_request */ 1:\n                    message.requestPayload = {\n                        oneofKind: \"joinRequest\",\n                        joinRequest: JoinRequest.internalBinaryRead(reader, reader.uint32(), options, message.requestPayload.joinRequest)\n                    };\n                    break;\n                case /* stream.video.sfu.event.HealthCheckRequest health_check_request */ 2:\n                    message.requestPayload = {\n                        oneofKind: \"healthCheckRequest\",\n                        healthCheckRequest: HealthCheckRequest.internalBinaryRead(reader, reader.uint32(), options, message.requestPayload.healthCheckRequest)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.event.JoinRequest join_request = 1; */ if (message.requestPayload.oneofKind === \"joinRequest\") JoinRequest.internalBinaryWrite(message.requestPayload.joinRequest, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.HealthCheckRequest health_check_request = 2; */ if (message.requestPayload.oneofKind === \"healthCheckRequest\") HealthCheckRequest.internalBinaryWrite(message.requestPayload.healthCheckRequest, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuRequest\n */ const SfuRequest = new SfuRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.HealthCheckRequest\", []);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message, writer, options) {\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckRequest\n */ const HealthCheckRequest = new HealthCheckRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.HealthCheckResponse\", [\n            {\n                no: 1,\n                name: \"participant_count\",\n                kind: \"message\",\n                T: ()=>ParticipantCount\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.ParticipantCount participant_count */ 1:\n                    message.participantCount = ParticipantCount.internalBinaryRead(reader, reader.uint32(), options, message.participantCount);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.ParticipantCount participant_count = 1; */ if (message.participantCount) ParticipantCount.internalBinaryWrite(message.participantCount, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckResponse\n */ const HealthCheckResponse = new HealthCheckResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackPublished$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.TrackPublished\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 4,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.type = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.TrackType type */ 3:\n                    message.type = reader.int32();\n                    break;\n                case /* stream.video.sfu.models.Participant participant */ 4:\n                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* stream.video.sfu.models.TrackType type = 3; */ if (message.type !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.type);\n        /* stream.video.sfu.models.Participant participant = 4; */ if (message.participant) Participant.internalBinaryWrite(message.participant, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackPublished\n */ const TrackPublished = new TrackPublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackUnpublished$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.TrackUnpublished\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"type\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackType\",\n                        TrackType,\n                        \"TRACK_TYPE_\"\n                    ]\n            },\n            {\n                no: 4,\n                name: \"cause\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.TrackUnpublishReason\",\n                        TrackUnpublishReason,\n                        \"TRACK_UNPUBLISH_REASON_\"\n                    ]\n            },\n            {\n                no: 5,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.type = 0;\n        message.cause = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.TrackType type */ 3:\n                    message.type = reader.int32();\n                    break;\n                case /* stream.video.sfu.models.TrackUnpublishReason cause */ 4:\n                    message.cause = reader.int32();\n                    break;\n                case /* stream.video.sfu.models.Participant participant */ 5:\n                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* stream.video.sfu.models.TrackType type = 3; */ if (message.type !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.type);\n        /* stream.video.sfu.models.TrackUnpublishReason cause = 4; */ if (message.cause !== 0) writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.cause);\n        /* stream.video.sfu.models.Participant participant = 5; */ if (message.participant) Participant.internalBinaryWrite(message.participant, writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackUnpublished\n */ const TrackUnpublished = new TrackUnpublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.JoinRequest\", [\n            {\n                no: 1,\n                name: \"token\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"subscriber_sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"client_details\",\n                kind: \"message\",\n                T: ()=>ClientDetails\n            },\n            {\n                no: 5,\n                name: \"migration\",\n                kind: \"message\",\n                T: ()=>Migration\n            },\n            {\n                no: 6,\n                name: \"fast_reconnect\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.token = \"\";\n        message.sessionId = \"\";\n        message.subscriberSdp = \"\";\n        message.fastReconnect = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string token */ 1:\n                    message.token = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* string subscriber_sdp */ 3:\n                    message.subscriberSdp = reader.string();\n                    break;\n                case /* stream.video.sfu.models.ClientDetails client_details */ 4:\n                    message.clientDetails = ClientDetails.internalBinaryRead(reader, reader.uint32(), options, message.clientDetails);\n                    break;\n                case /* stream.video.sfu.event.Migration migration */ 5:\n                    message.migration = Migration.internalBinaryRead(reader, reader.uint32(), options, message.migration);\n                    break;\n                case /* bool fast_reconnect */ 6:\n                    message.fastReconnect = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string token = 1; */ if (message.token !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.token);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* string subscriber_sdp = 3; */ if (message.subscriberSdp !== \"\") writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.subscriberSdp);\n        /* stream.video.sfu.models.ClientDetails client_details = 4; */ if (message.clientDetails) ClientDetails.internalBinaryWrite(message.clientDetails, writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.event.Migration migration = 5; */ if (message.migration) Migration.internalBinaryWrite(message.migration, writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* bool fast_reconnect = 6; */ if (message.fastReconnect !== false) writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.fastReconnect);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinRequest\n */ const JoinRequest = new JoinRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Migration$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.Migration\", [\n            {\n                no: 1,\n                name: \"from_sfu_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"announced_tracks\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackInfo\n            },\n            {\n                no: 3,\n                name: \"subscriptions\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackSubscriptionDetails\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.fromSfuId = \"\";\n        message.announcedTracks = [];\n        message.subscriptions = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string from_sfu_id */ 1:\n                    message.fromSfuId = reader.string();\n                    break;\n                case /* repeated stream.video.sfu.models.TrackInfo announced_tracks */ 2:\n                    message.announcedTracks.push(TrackInfo.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated stream.video.sfu.signal.TrackSubscriptionDetails subscriptions */ 3:\n                    message.subscriptions.push(TrackSubscriptionDetails.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string from_sfu_id = 1; */ if (message.fromSfuId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.fromSfuId);\n        /* repeated stream.video.sfu.models.TrackInfo announced_tracks = 2; */ for(let i = 0; i < message.announcedTracks.length; i++)TrackInfo.internalBinaryWrite(message.announcedTracks[i], writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* repeated stream.video.sfu.signal.TrackSubscriptionDetails subscriptions = 3; */ for(let i = 0; i < message.subscriptions.length; i++)TrackSubscriptionDetails.internalBinaryWrite(message.subscriptions[i], writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Migration\n */ const Migration = new Migration$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.JoinResponse\", [\n            {\n                no: 1,\n                name: \"call_state\",\n                kind: \"message\",\n                T: ()=>CallState$1\n            },\n            {\n                no: 2,\n                name: \"reconnected\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.reconnected = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.CallState call_state */ 1:\n                    message.callState = CallState$1.internalBinaryRead(reader, reader.uint32(), options, message.callState);\n                    break;\n                case /* bool reconnected */ 2:\n                    message.reconnected = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.CallState call_state = 1; */ if (message.callState) CallState$1.internalBinaryWrite(message.callState, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* bool reconnected = 2; */ if (message.reconnected !== false) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.reconnected);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinResponse\n */ const JoinResponse = new JoinResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantJoined$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ParticipantJoined\", [\n            {\n                no: 1,\n                name: \"call_cid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.callCid = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string call_cid */ 1:\n                    message.callCid = reader.string();\n                    break;\n                case /* stream.video.sfu.models.Participant participant */ 2:\n                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string call_cid = 1; */ if (message.callCid !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.callCid);\n        /* stream.video.sfu.models.Participant participant = 2; */ if (message.participant) Participant.internalBinaryWrite(message.participant, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantJoined\n */ const ParticipantJoined = new ParticipantJoined$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantLeft$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ParticipantLeft\", [\n            {\n                no: 1,\n                name: \"call_cid\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"participant\",\n                kind: \"message\",\n                T: ()=>Participant\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.callCid = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string call_cid */ 1:\n                    message.callCid = reader.string();\n                    break;\n                case /* stream.video.sfu.models.Participant participant */ 2:\n                    message.participant = Participant.internalBinaryRead(reader, reader.uint32(), options, message.participant);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string call_cid = 1; */ if (message.callCid !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.callCid);\n        /* stream.video.sfu.models.Participant participant = 2; */ if (message.participant) Participant.internalBinaryWrite(message.participant, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantLeft\n */ const ParticipantLeft = new ParticipantLeft$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscriberOffer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.SubscriberOffer\", [\n            {\n                no: 1,\n                name: \"ice_restart\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 2,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.iceRestart = false;\n        message.sdp = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* bool ice_restart */ 1:\n                    message.iceRestart = reader.bool();\n                    break;\n                case /* string sdp */ 2:\n                    message.sdp = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* bool ice_restart = 1; */ if (message.iceRestart !== false) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.iceRestart);\n        /* string sdp = 2; */ if (message.sdp !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sdp);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SubscriberOffer\n */ const SubscriberOffer = new SubscriberOffer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PublisherAnswer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.PublisherAnswer\", [\n            {\n                no: 1,\n                name: \"sdp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.sdp = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string sdp */ 1:\n                    message.sdp = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string sdp = 1; */ if (message.sdp !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sdp);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PublisherAnswer\n */ const PublisherAnswer = new PublisherAnswer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ConnectionQualityChanged\", [\n            {\n                no: 1,\n                name: \"connection_quality_updates\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>ConnectionQualityInfo\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.connectionQualityUpdates = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated stream.video.sfu.event.ConnectionQualityInfo connection_quality_updates */ 1:\n                    message.connectionQualityUpdates.push(ConnectionQualityInfo.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated stream.video.sfu.event.ConnectionQualityInfo connection_quality_updates = 1; */ for(let i = 0; i < message.connectionQualityUpdates.length; i++)ConnectionQualityInfo.internalBinaryWrite(message.connectionQualityUpdates[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityChanged\n */ const ConnectionQualityChanged = new ConnectionQualityChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityInfo$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ConnectionQualityInfo\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"connection_quality\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.ConnectionQuality\",\n                        ConnectionQuality,\n                        \"CONNECTION_QUALITY_\"\n                    ]\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.connectionQuality = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* stream.video.sfu.models.ConnectionQuality connection_quality */ 3:\n                    message.connectionQuality = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* stream.video.sfu.models.ConnectionQuality connection_quality = 3; */ if (message.connectionQuality !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.connectionQuality);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityInfo\n */ const ConnectionQualityInfo = new ConnectionQualityInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DominantSpeakerChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.DominantSpeakerChanged\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.DominantSpeakerChanged\n */ const DominantSpeakerChanged = new DominantSpeakerChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevel$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.AudioLevel\", [\n            {\n                no: 1,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"session_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"level\",\n                kind: \"scalar\",\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 4,\n                name: \"is_speaking\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.userId = \"\";\n        message.sessionId = \"\";\n        message.level = 0;\n        message.isSpeaking = false;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string user_id */ 1:\n                    message.userId = reader.string();\n                    break;\n                case /* string session_id */ 2:\n                    message.sessionId = reader.string();\n                    break;\n                case /* float level */ 3:\n                    message.level = reader.float();\n                    break;\n                case /* bool is_speaking */ 4:\n                    message.isSpeaking = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string user_id = 1; */ if (message.userId !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.userId);\n        /* string session_id = 2; */ if (message.sessionId !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.sessionId);\n        /* float level = 3; */ if (message.level !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Bit32).float(message.level);\n        /* bool is_speaking = 4; */ if (message.isSpeaking !== false) writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.isSpeaking);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevel\n */ const AudioLevel = new AudioLevel$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevelChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.AudioLevelChanged\", [\n            {\n                no: 1,\n                name: \"audio_levels\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>AudioLevel\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.audioLevels = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated stream.video.sfu.event.AudioLevel audio_levels */ 1:\n                    message.audioLevels.push(AudioLevel.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated stream.video.sfu.event.AudioLevel audio_levels = 1; */ for(let i = 0; i < message.audioLevels.length; i++)AudioLevel.internalBinaryWrite(message.audioLevels[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevelChanged\n */ const AudioLevelChanged = new AudioLevelChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioMediaRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.AudioMediaRequest\", [\n            {\n                no: 1,\n                name: \"channel_count\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.channelCount = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* int32 channel_count */ 1:\n                    message.channelCount = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* int32 channel_count = 1; */ if (message.channelCount !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.channelCount);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioMediaRequest\n */ const AudioMediaRequest = new AudioMediaRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioSender$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.AudioSender\", [\n            {\n                no: 1,\n                name: \"media_request\",\n                kind: \"message\",\n                T: ()=>AudioMediaRequest\n            },\n            {\n                no: 2,\n                name: \"codec\",\n                kind: \"message\",\n                T: ()=>Codec\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.event.AudioMediaRequest media_request */ 1:\n                    message.mediaRequest = AudioMediaRequest.internalBinaryRead(reader, reader.uint32(), options, message.mediaRequest);\n                    break;\n                case /* stream.video.sfu.models.Codec codec */ 2:\n                    message.codec = Codec.internalBinaryRead(reader, reader.uint32(), options, message.codec);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.event.AudioMediaRequest media_request = 1; */ if (message.mediaRequest) AudioMediaRequest.internalBinaryWrite(message.mediaRequest, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.Codec codec = 2; */ if (message.codec) Codec.internalBinaryWrite(message.codec, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioSender\n */ const AudioSender = new AudioSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoMediaRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.VideoMediaRequest\", [\n            {\n                no: 1,\n                name: \"ideal_height\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 2,\n                name: \"ideal_width\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 3,\n                name: \"ideal_frame_rate\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.idealHeight = 0;\n        message.idealWidth = 0;\n        message.idealFrameRate = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* int32 ideal_height */ 1:\n                    message.idealHeight = reader.int32();\n                    break;\n                case /* int32 ideal_width */ 2:\n                    message.idealWidth = reader.int32();\n                    break;\n                case /* int32 ideal_frame_rate */ 3:\n                    message.idealFrameRate = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* int32 ideal_height = 1; */ if (message.idealHeight !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.idealHeight);\n        /* int32 ideal_width = 2; */ if (message.idealWidth !== 0) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.idealWidth);\n        /* int32 ideal_frame_rate = 3; */ if (message.idealFrameRate !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.idealFrameRate);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoMediaRequest\n */ const VideoMediaRequest = new VideoMediaRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayerSetting$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.VideoLayerSetting\", [\n            {\n                no: 1,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: \"active\",\n                kind: \"scalar\",\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 3,\n                name: \"max_bitrate\",\n                kind: \"scalar\",\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 4,\n                name: \"scale_resolution_down_by\",\n                kind: \"scalar\",\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 5,\n                name: \"priority\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.event.VideoLayerSetting.Priority\",\n                        VideoLayerSetting_Priority,\n                        \"PRIORITY_\"\n                    ]\n            },\n            {\n                no: 6,\n                name: \"codec\",\n                kind: \"message\",\n                T: ()=>Codec\n            },\n            {\n                no: 7,\n                name: \"max_framerate\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.name = \"\";\n        message.active = false;\n        message.maxBitrate = 0;\n        message.scaleResolutionDownBy = 0;\n        message.priority = 0;\n        message.maxFramerate = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* bool active */ 2:\n                    message.active = reader.bool();\n                    break;\n                case /* int32 max_bitrate */ 3:\n                    message.maxBitrate = reader.int32();\n                    break;\n                case /* float scale_resolution_down_by */ 4:\n                    message.scaleResolutionDownBy = reader.float();\n                    break;\n                case /* stream.video.sfu.event.VideoLayerSetting.Priority priority */ 5:\n                    message.priority = reader.int32();\n                    break;\n                case /* stream.video.sfu.models.Codec codec */ 6:\n                    message.codec = Codec.internalBinaryRead(reader, reader.uint32(), options, message.codec);\n                    break;\n                case /* uint32 max_framerate */ 7:\n                    message.maxFramerate = reader.uint32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string name = 1; */ if (message.name !== \"\") writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.name);\n        /* bool active = 2; */ if (message.active !== false) writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).bool(message.active);\n        /* int32 max_bitrate = 3; */ if (message.maxBitrate !== 0) writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.maxBitrate);\n        /* float scale_resolution_down_by = 4; */ if (message.scaleResolutionDownBy !== 0) writer.tag(4, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Bit32).float(message.scaleResolutionDownBy);\n        /* stream.video.sfu.event.VideoLayerSetting.Priority priority = 5; */ if (message.priority !== 0) writer.tag(5, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.priority);\n        /* stream.video.sfu.models.Codec codec = 6; */ if (message.codec) Codec.internalBinaryWrite(message.codec, writer.tag(6, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* uint32 max_framerate = 7; */ if (message.maxFramerate !== 0) writer.tag(7, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).uint32(message.maxFramerate);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoLayerSetting\n */ const VideoLayerSetting = new VideoLayerSetting$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoSender$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.VideoSender\", [\n            {\n                no: 1,\n                name: \"media_request\",\n                kind: \"message\",\n                T: ()=>VideoMediaRequest\n            },\n            {\n                no: 2,\n                name: \"codec\",\n                kind: \"message\",\n                T: ()=>Codec\n            },\n            {\n                no: 3,\n                name: \"layers\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>VideoLayerSetting\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.layers = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.event.VideoMediaRequest media_request */ 1:\n                    message.mediaRequest = VideoMediaRequest.internalBinaryRead(reader, reader.uint32(), options, message.mediaRequest);\n                    break;\n                case /* stream.video.sfu.models.Codec codec */ 2:\n                    message.codec = Codec.internalBinaryRead(reader, reader.uint32(), options, message.codec);\n                    break;\n                case /* repeated stream.video.sfu.event.VideoLayerSetting layers */ 3:\n                    message.layers.push(VideoLayerSetting.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.event.VideoMediaRequest media_request = 1; */ if (message.mediaRequest) VideoMediaRequest.internalBinaryWrite(message.mediaRequest, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* stream.video.sfu.models.Codec codec = 2; */ if (message.codec) Codec.internalBinaryWrite(message.codec, writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* repeated stream.video.sfu.event.VideoLayerSetting layers = 3; */ for(let i = 0; i < message.layers.length; i++)VideoLayerSetting.internalBinaryWrite(message.layers[i], writer.tag(3, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoSender\n */ const VideoSender = new VideoSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangePublishQuality$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.ChangePublishQuality\", [\n            {\n                no: 1,\n                name: \"audio_senders\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>AudioSender\n            },\n            {\n                no: 2,\n                name: \"video_senders\",\n                kind: \"message\",\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>VideoSender\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.audioSenders = [];\n        message.videoSenders = [];\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* repeated stream.video.sfu.event.AudioSender audio_senders */ 1:\n                    message.audioSenders.push(AudioSender.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated stream.video.sfu.event.VideoSender video_senders */ 2:\n                    message.videoSenders.push(VideoSender.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* repeated stream.video.sfu.event.AudioSender audio_senders = 1; */ for(let i = 0; i < message.audioSenders.length; i++)AudioSender.internalBinaryWrite(message.audioSenders[i], writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* repeated stream.video.sfu.event.VideoSender video_senders = 2; */ for(let i = 0; i < message.videoSenders.length; i++)VideoSender.internalBinaryWrite(message.videoSenders[i], writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishQuality\n */ const ChangePublishQuality = new ChangePublishQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrantsUpdated$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.CallGrantsUpdated\", [\n            {\n                no: 1,\n                name: \"current_grants\",\n                kind: \"message\",\n                T: ()=>CallGrants\n            },\n            {\n                no: 2,\n                name: \"message\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.message = \"\";\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.CallGrants current_grants */ 1:\n                    message.currentGrants = CallGrants.internalBinaryRead(reader, reader.uint32(), options, message.currentGrants);\n                    break;\n                case /* string message */ 2:\n                    message.message = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.CallGrants current_grants = 1; */ if (message.currentGrants) CallGrants.internalBinaryWrite(message.currentGrants, writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).fork(), options).join();\n        /* string message = 2; */ if (message.message !== \"\") writer.tag(2, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.LengthDelimited).string(message.message);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.CallGrantsUpdated\n */ const CallGrantsUpdated = new CallGrantsUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GoAway$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_9__.MessageType {\n    constructor(){\n        super(\"stream.video.sfu.event.GoAway\", [\n            {\n                no: 1,\n                name: \"reason\",\n                kind: \"enum\",\n                T: ()=>[\n                        \"stream.video.sfu.models.GoAwayReason\",\n                        GoAwayReason,\n                        \"GO_AWAY_REASON_\"\n                    ]\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.reason = 0;\n        if (value !== undefined) (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_11__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* stream.video.sfu.models.GoAwayReason reason */ 1:\n                    message.reason = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* stream.video.sfu.models.GoAwayReason reason = 1; */ if (message.reason !== 0) writer.tag(1, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.WireType.Varint).int32(message.reason);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_12__.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.GoAway\n */ const GoAway = new GoAway$Type();\nvar events = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    AudioLevel: AudioLevel,\n    AudioLevelChanged: AudioLevelChanged,\n    AudioMediaRequest: AudioMediaRequest,\n    AudioSender: AudioSender,\n    CallGrantsUpdated: CallGrantsUpdated,\n    ChangePublishQuality: ChangePublishQuality,\n    ConnectionQualityChanged: ConnectionQualityChanged,\n    ConnectionQualityInfo: ConnectionQualityInfo,\n    DominantSpeakerChanged: DominantSpeakerChanged,\n    Error: Error$1,\n    GoAway: GoAway,\n    HealthCheckRequest: HealthCheckRequest,\n    HealthCheckResponse: HealthCheckResponse,\n    ICERestart: ICERestart,\n    ICETrickle: ICETrickle,\n    JoinRequest: JoinRequest,\n    JoinResponse: JoinResponse,\n    Migration: Migration,\n    ParticipantJoined: ParticipantJoined,\n    ParticipantLeft: ParticipantLeft,\n    PinsChanged: PinsChanged,\n    PublisherAnswer: PublisherAnswer,\n    SfuEvent: SfuEvent,\n    SfuRequest: SfuRequest,\n    SubscriberOffer: SubscriberOffer,\n    TrackPublished: TrackPublished,\n    TrackUnpublished: TrackUnpublished,\n    VideoLayerSetting: VideoLayerSetting,\n    get VideoLayerSetting_Priority () {\n        return VideoLayerSetting_Priority;\n    },\n    VideoMediaRequest: VideoMediaRequest,\n    VideoSender: VideoSender\n});\nvar VisibilityState;\n(function(VisibilityState) {\n    VisibilityState[\"UNKNOWN\"] = \"UNKNOWN\";\n    VisibilityState[\"VISIBLE\"] = \"VISIBLE\";\n    VisibilityState[\"INVISIBLE\"] = \"INVISIBLE\";\n})(VisibilityState || (VisibilityState = {}));\nvar DebounceType;\n(function(DebounceType) {\n    DebounceType[DebounceType[\"IMMEDIATE\"] = 20] = \"IMMEDIATE\";\n    DebounceType[DebounceType[\"FAST\"] = 100] = \"FAST\";\n    DebounceType[DebounceType[\"MEDIUM\"] = 600] = \"MEDIUM\";\n    DebounceType[DebounceType[\"SLOW\"] = 1200] = \"SLOW\";\n})(DebounceType || (DebounceType = {}));\n/**\n * @generated from protobuf service stream.video.sfu.signal.SignalServer\n */ class SignalServerClient {\n    constructor(_transport){\n        this._transport = _transport;\n        this.typeName = SignalServer.typeName;\n        this.methods = SignalServer.methods;\n        this.options = SignalServer.options;\n    }\n    /**\n     * SetPublisher sends the WebRTC offer for the peer connection used to publish A/V\n     *\n     * @generated from protobuf rpc: SetPublisher(stream.video.sfu.signal.SetPublisherRequest) returns (stream.video.sfu.signal.SetPublisherResponse);\n     */ setPublisher(input, options) {\n        const method = this.methods[0], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_15__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * answer is sent by the client to the SFU after receiving a subscriber_offer.\n     *\n     * @generated from protobuf rpc: SendAnswer(stream.video.sfu.signal.SendAnswerRequest) returns (stream.video.sfu.signal.SendAnswerResponse);\n     */ sendAnswer(input, options) {\n        const method = this.methods[1], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_15__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * SendICECandidate sends an ICE candidate to the client\n     *\n     * @generated from protobuf rpc: IceTrickle(stream.video.sfu.models.ICETrickle) returns (stream.video.sfu.signal.ICETrickleResponse);\n     */ iceTrickle(input, options) {\n        const method = this.methods[2], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_15__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * UpdateSubscribers is used to notify the SFU about the list of video subscriptions\n     * TODO: sync subscriptions based on this + update tracks using the dimension info sent by the user\n     *\n     * @generated from protobuf rpc: UpdateSubscriptions(stream.video.sfu.signal.UpdateSubscriptionsRequest) returns (stream.video.sfu.signal.UpdateSubscriptionsResponse);\n     */ updateSubscriptions(input, options) {\n        const method = this.methods[3], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_15__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: UpdateMuteStates(stream.video.sfu.signal.UpdateMuteStatesRequest) returns (stream.video.sfu.signal.UpdateMuteStatesResponse);\n     */ updateMuteStates(input, options) {\n        const method = this.methods[4], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_15__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: IceRestart(stream.video.sfu.signal.ICERestartRequest) returns (stream.video.sfu.signal.ICERestartResponse);\n     */ iceRestart(input, options) {\n        const method = this.methods[5], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_15__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: SendStats(stream.video.sfu.signal.SendStatsRequest) returns (stream.video.sfu.signal.SendStatsResponse);\n     */ sendStats(input, options) {\n        const method = this.methods[6], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_15__.stackIntercept)(\"unary\", this._transport, method, opt, input);\n    }\n}\nconst defaultOptions = {\n    baseUrl: \"\",\n    sendJson: true,\n    timeout: 5 * 1000,\n    jsonOptions: {\n        ignoreUnknownFields: true\n    }\n};\nconst withHeaders = (headers)=>{\n    return {\n        interceptUnary (next, method, input, options) {\n            options.meta = {\n                ...options.meta,\n                ...headers\n            };\n            return next(method, input, options);\n        }\n    };\n};\n/**\n * Creates new SignalServerClient instance.\n *\n * @param options the twirp options.\n */ const createSignalClient = (options)=>{\n    const transport = new _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_16__.TwirpFetchTransport({\n        ...defaultOptions,\n        ...options\n    });\n    return new SignalServerClient(transport);\n};\n/**\n * Checks whether we are using React Native\n */ const isReactNative = ()=>{\n    if (typeof navigator === \"undefined\") return false;\n    return navigator.product?.toLowerCase() === \"reactnative\";\n};\n// log levels, sorted by verbosity\nconst logLevels = Object.freeze({\n    trace: 0,\n    debug: 1,\n    info: 2,\n    warn: 3,\n    error: 4\n});\nlet logger$4;\nlet level = \"info\";\nconst logToConsole = (logLevel, message, ...args)=>{\n    let logMethod;\n    switch(logLevel){\n        case \"error\":\n            logMethod = console.error;\n            break;\n        case \"warn\":\n            if (isReactNative()) {\n                message = `WARN: ${message}`;\n                logMethod = console.info;\n                break;\n            }\n            logMethod = console.warn;\n            break;\n        case \"info\":\n            logMethod = console.info;\n            break;\n        case \"trace\":\n            logMethod = console.trace;\n            break;\n        default:\n            logMethod = console.log;\n            break;\n    }\n    logMethod(message, ...args);\n};\nconst setLogger = (l, lvl)=>{\n    logger$4 = l;\n    if (lvl) {\n        setLogLevel(lvl);\n    }\n};\nconst setLogLevel = (l)=>{\n    level = l;\n};\nconst getLogger = (withTags)=>{\n    const loggerMethod = logger$4 || logToConsole;\n    const tags = (withTags || []).join(\":\");\n    const result = (logLevel, message, ...args)=>{\n        if (logLevels[logLevel] >= logLevels[level]) {\n            loggerMethod(logLevel, `[${tags}]: ${message}`, ...args);\n        }\n    };\n    return result;\n};\nconst getPreferredCodecs = (kind, preferredCodec, codecToRemove)=>{\n    const logger = getLogger([\n        \"codecs\"\n    ]);\n    if (!(\"getCapabilities\" in RTCRtpSender)) {\n        logger?.(\"warn\", \"RTCRtpSender.getCapabilities is not supported\");\n        return;\n    }\n    const cap = RTCRtpSender.getCapabilities(kind);\n    if (!cap) return;\n    const matched = [];\n    const partialMatched = [];\n    const unmatched = [];\n    cap.codecs.forEach((c)=>{\n        const codec = c.mimeType.toLowerCase();\n        logger?.(\"debug\", `Found supported codec: ${codec}`);\n        const shouldRemoveCodec = codecToRemove && codec === `${kind}/${codecToRemove.toLowerCase()}`;\n        if (shouldRemoveCodec) return;\n        const matchesCodec = codec === `${kind}/${preferredCodec.toLowerCase()}`;\n        if (!matchesCodec) {\n            unmatched.push(c);\n            return;\n        }\n        // for h264 codecs that have sdpFmtpLine available, use only if the\n        // profile-level-id is 42e01f for cross-browser compatibility\n        if (codec === \"h264\") {\n            if (c.sdpFmtpLine && c.sdpFmtpLine.includes(\"profile-level-id=42e01f\")) {\n                matched.push(c);\n            } else {\n                partialMatched.push(c);\n            }\n            return;\n        }\n        matched.push(c);\n    });\n    const result = [\n        ...matched,\n        ...partialMatched,\n        ...unmatched\n    ];\n    logger?.(\"info\", `Preffered codecs: `, result);\n    return result;\n};\nconst getGenericSdp = async (direction)=>{\n    const tempPc = new RTCPeerConnection();\n    tempPc.addTransceiver(\"video\", {\n        direction\n    });\n    tempPc.addTransceiver(\"audio\", {\n        direction\n    });\n    const offer = await tempPc.createOffer();\n    let sdp = offer.sdp ?? \"\";\n    tempPc.getTransceivers().forEach((t)=>{\n        t.stop();\n    });\n    tempPc.close();\n    return sdp;\n};\nconst sfuEventKinds = {\n    subscriberOffer: undefined,\n    publisherAnswer: undefined,\n    connectionQualityChanged: undefined,\n    audioLevelChanged: undefined,\n    iceTrickle: undefined,\n    changePublishQuality: undefined,\n    participantJoined: undefined,\n    participantLeft: undefined,\n    dominantSpeakerChanged: undefined,\n    joinResponse: undefined,\n    healthCheckResponse: undefined,\n    trackPublished: undefined,\n    trackUnpublished: undefined,\n    error: undefined,\n    callGrantsUpdated: undefined,\n    goAway: undefined,\n    iceRestart: undefined,\n    pinsUpdated: undefined\n};\nconst isSfuEvent = (eventName)=>{\n    return Object.prototype.hasOwnProperty.call(sfuEventKinds, eventName);\n};\nclass Dispatcher {\n    constructor(){\n        this.logger = getLogger([\n            \"Dispatcher\"\n        ]);\n        this.subscribers = {};\n        this.dispatch = (message)=>{\n            const eventKind = message.eventPayload.oneofKind;\n            if (!eventKind) return;\n            const payload = message.eventPayload[eventKind];\n            this.logger(\"debug\", `Dispatching ${eventKind}`, payload);\n            const listeners = this.subscribers[eventKind];\n            if (!listeners) return;\n            for (const fn of listeners){\n                try {\n                    fn(payload);\n                } catch (e) {\n                    this.logger(\"warn\", \"Listener failed with error\", e);\n                }\n            }\n        };\n        this.on = (eventName, fn)=>{\n            var _a;\n            ((_a = this.subscribers)[eventName] ?? (_a[eventName] = [])).push(fn);\n            return ()=>{\n                this.off(eventName, fn);\n            };\n        };\n        this.off = (eventName, fn)=>{\n            this.subscribers[eventName] = (this.subscribers[eventName] || []).filter((f)=>f !== fn);\n        };\n        this.offAll = (eventName)=>{\n            if (eventName) {\n                this.subscribers[eventName] = [];\n            } else {\n                this.subscribers = {};\n            }\n        };\n    }\n}\n/**\n * A buffer for ICE Candidates. Used for ICE Trickle:\n * - https://bloggeek.me/webrtcglossary/trickle-ice/\n */ class IceTrickleBuffer {\n    constructor(){\n        this.subscriberCandidates = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.ReplaySubject();\n        this.publisherCandidates = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_17__.ReplaySubject();\n        this.logger = getLogger([\n            \"sfu-client\"\n        ]);\n        this.push = (iceTrickle)=>{\n            if (iceTrickle.peerType === PeerType.SUBSCRIBER) {\n                this.subscriberCandidates.next(iceTrickle);\n            } else if (iceTrickle.peerType === PeerType.PUBLISHER_UNSPECIFIED) {\n                this.publisherCandidates.next(iceTrickle);\n            } else {\n                this.logger(\"warn\", `ICETrickle, Unknown peer type`, iceTrickle);\n            }\n        };\n    }\n}\nfunction getIceCandidate(candidate) {\n    if (!candidate.usernameFragment) {\n        // react-native-webrtc doesn't include usernameFragment in the candidate\n        const splittedCandidate = candidate.candidate.split(\" \");\n        const ufragIndex = splittedCandidate.findIndex((s)=>s === \"ufrag\") + 1;\n        const usernameFragment = splittedCandidate[ufragIndex];\n        return JSON.stringify({\n            ...candidate,\n            usernameFragment\n        });\n    } else {\n        return JSON.stringify(candidate.toJSON());\n    }\n}\nlet sdkInfo;\nlet osInfo;\nlet deviceInfo;\nlet webRtcInfo;\nconst setSdkInfo = (info)=>{\n    sdkInfo = info;\n};\nconst getSdkInfo = ()=>{\n    return sdkInfo;\n};\nconst setOSInfo = (info)=>{\n    osInfo = info;\n};\nconst getOSInfo = ()=>{\n    return osInfo;\n};\nconst setDeviceInfo = (info)=>{\n    deviceInfo = info;\n};\nconst getDeviceInfo = ()=>{\n    return deviceInfo;\n};\nconst getWebRTCInfo = ()=>{\n    return webRtcInfo;\n};\nconst setWebRTCInfo = (info)=>{\n    webRtcInfo = info;\n};\nconst getClientDetails = ()=>{\n    if (isReactNative()) {\n        // Since RN doesn't support web, sharing browser info is not required\n        return {\n            sdk: getSdkInfo(),\n            os: getOSInfo(),\n            device: getDeviceInfo()\n        };\n    }\n    const userAgent = new ua_parser_js__WEBPACK_IMPORTED_MODULE_3__.UAParser(navigator.userAgent);\n    const { browser, os, device, cpu } = userAgent.getResult();\n    return {\n        sdk: getSdkInfo(),\n        browser: {\n            name: browser.name || navigator.userAgent,\n            version: browser.version || \"\"\n        },\n        os: {\n            name: os.name || \"\",\n            version: os.version || \"\",\n            architecture: cpu.architecture || \"\"\n        },\n        device: {\n            name: [\n                device.vendor,\n                device.model,\n                device.type\n            ].filter(Boolean).join(\" \"),\n            version: \"\"\n        }\n    };\n};\nconst DEFAULT_BITRATE = 1250000;\nconst defaultTargetResolution = {\n    bitrate: DEFAULT_BITRATE,\n    width: 1280,\n    height: 720\n};\n/**\n * Determines the most optimal video layers for simulcasting\n * for the given track.\n *\n * @param videoTrack the video track to find optimal layers for.\n * @param targetResolution the expected target resolution.\n */ const findOptimalVideoLayers = (videoTrack, targetResolution = defaultTargetResolution)=>{\n    const optimalVideoLayers = [];\n    const settings = videoTrack.getSettings();\n    const { width: w = 0, height: h = 0 } = settings;\n    const isRNIos = isReactNative() && getOSInfo()?.name.toLowerCase() === \"ios\";\n    const maxBitrate = getComputedMaxBitrate(targetResolution, w, h);\n    let downscaleFactor = 1;\n    [\n        \"f\",\n        \"h\",\n        \"q\"\n    ].forEach((rid)=>{\n        // Reversing the order [f, h, q] to [q, h, f] as Chrome uses encoding index\n        // when deciding which layer to disable when CPU or bandwidth is constrained.\n        // Encodings should be ordered in increasing spatial resolution order.\n        optimalVideoLayers.unshift({\n            active: true,\n            rid,\n            width: Math.round(w / downscaleFactor),\n            height: Math.round(h / downscaleFactor),\n            maxBitrate: Math.round(maxBitrate / downscaleFactor),\n            scaleResolutionDownBy: downscaleFactor,\n            // Simulcast on iOS React-Native requires all encodings to share the same framerate\n            maxFramerate: {\n                f: 30,\n                h: isRNIos ? 30 : 25,\n                q: isRNIos ? 30 : 20\n            }[rid]\n        });\n        downscaleFactor *= 2;\n    });\n    // for simplicity, we start with all layers enabled, then this function\n    // will clear/reassign the layers that are not needed\n    return withSimulcastConstraints(settings, optimalVideoLayers);\n};\n/**\n * Computes the maximum bitrate for a given resolution.\n * If the current resolution is lower than the target resolution,\n * we want to proportionally reduce the target bitrate.\n * If the current resolution is higher than the target resolution,\n * we want to use the target bitrate.\n *\n * @param targetResolution the target resolution.\n * @param currentWidth the current width of the track.\n * @param currentHeight the current height of the track.\n */ const getComputedMaxBitrate = (targetResolution, currentWidth, currentHeight)=>{\n    // if the current resolution is lower than the target resolution,\n    // we want to proportionally reduce the target bitrate\n    const { width: targetWidth, height: targetHeight } = targetResolution;\n    if (currentWidth < targetWidth || currentHeight < targetHeight) {\n        const currentPixels = currentWidth * currentHeight;\n        const targetPixels = targetWidth * targetHeight;\n        const reductionFactor = currentPixels / targetPixels;\n        return Math.round(targetResolution.bitrate * reductionFactor);\n    }\n    return targetResolution.bitrate;\n};\n/**\n * Browsers have different simulcast constraints for different video resolutions.\n *\n * This function modifies the provided list of video layers according to the\n * current implementation of simulcast constraints in the Chromium based browsers.\n *\n * https://chromium.googlesource.com/external/webrtc/+/refs/heads/main/media/engine/simulcast.cc#90\n */ const withSimulcastConstraints = (settings, optimalVideoLayers)=>{\n    let layers;\n    const size = Math.max(settings.width || 0, settings.height || 0);\n    if (size <= 320) {\n        // provide only one layer 320x240 (q), the one with the highest quality\n        layers = optimalVideoLayers.filter((layer)=>layer.rid === \"f\");\n    } else if (size <= 640) {\n        // provide two layers, 160x120 (q) and 640x480 (h)\n        layers = optimalVideoLayers.filter((layer)=>layer.rid !== \"h\");\n    } else {\n        // provide three layers for sizes > 640x480\n        layers = optimalVideoLayers;\n    }\n    const ridMapping = [\n        \"q\",\n        \"h\",\n        \"f\"\n    ];\n    return layers.map((layer, index)=>({\n            ...layer,\n            rid: ridMapping[index]\n        }));\n};\nconst findOptimalScreenSharingLayers = (videoTrack, preferences)=>{\n    const settings = videoTrack.getSettings();\n    return [\n        {\n            active: true,\n            rid: \"q\",\n            width: settings.width || 0,\n            height: settings.height || 0,\n            scaleResolutionDownBy: 1,\n            maxBitrate: preferences?.maxBitrate ?? 3000000,\n            maxFramerate: preferences?.maxFramerate ?? 30\n        }\n    ];\n};\nconst trackTypeToParticipantStreamKey = (trackType)=>{\n    switch(trackType){\n        case TrackType.SCREEN_SHARE:\n            return \"screenShareStream\";\n        case TrackType.SCREEN_SHARE_AUDIO:\n            return \"screenShareAudioStream\";\n        case TrackType.VIDEO:\n            return \"videoStream\";\n        case TrackType.AUDIO:\n            return \"audioStream\";\n        case TrackType.UNSPECIFIED:\n            throw new Error(\"Track type is unspecified\");\n        default:\n            const exhaustiveTrackTypeCheck = trackType;\n            throw new Error(`Unknown track type: ${exhaustiveTrackTypeCheck}`);\n    }\n};\nconst muteTypeToTrackType = (muteType)=>{\n    switch(muteType){\n        case \"audio\":\n            return TrackType.AUDIO;\n        case \"video\":\n            return TrackType.VIDEO;\n        case \"screenshare\":\n            return TrackType.SCREEN_SHARE;\n        case \"screenshare_audio\":\n            return TrackType.SCREEN_SHARE_AUDIO;\n        default:\n            const exhaustiveMuteTypeCheck = muteType;\n            throw new Error(`Unknown mute type: ${exhaustiveMuteTypeCheck}`);\n    }\n};\n/**\n * Checks if the provided update is a function patch.\n *\n * @param update the value to check.\n */ const isFunctionPatch = (update)=>typeof update === \"function\";\n/**\n * Gets the current value of an observable, or undefined if the observable has\n * not emitted a value yet.\n *\n * @param observable$ the observable to get the value from.\n */ const getCurrentValue = (observable$)=>{\n    let value;\n    let err = undefined;\n    (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.combineLatest)([\n        observable$\n    ]).subscribe({\n        next: ([v])=>{\n            value = v;\n        },\n        error: (e)=>{\n            err = e;\n        }\n    }).unsubscribe();\n    if (err) throw err;\n    return value;\n};\n/**\n * Updates the value of the provided Subject.\n * An `update` can either be a new value or a function which takes\n * the current value and returns a new value.\n *\n * @param subject the subject to update.\n * @param update the update to apply to the subject.\n * @return the updated value.\n */ const setCurrentValue = (subject, update)=>{\n    const next = isFunctionPatch(update) ? update(getCurrentValue(subject)) : update;\n    subject.next(next);\n    return next;\n};\n/**\n * Creates a subscription and returns a function to unsubscribe.\n *\n * @param observable the observable to subscribe to.\n * @param handler the handler to call when the observable emits a value.\n */ const createSubscription = (observable, handler)=>{\n    const subscription = observable.subscribe(handler);\n    return ()=>{\n        subscription.unsubscribe();\n    };\n};\nvar rxUtils = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    createSubscription: createSubscription,\n    getCurrentValue: getCurrentValue,\n    setCurrentValue: setCurrentValue\n});\n/**\n * Creates a new combined {@link Comparator<T>} which sorts items by the given comparators.\n * The comparators are applied in the order they are given (left -> right).\n *\n * @param comparators the comparators to use for sorting.\n * @returns a combined {@link Comparator<T>}.\n */ const combineComparators = (...comparators)=>{\n    return (a, b)=>{\n        for (const comparator of comparators){\n            const result = comparator(a, b);\n            if (result !== 0) return result;\n        }\n        return 0;\n    };\n};\n/**\n * Creates a new comparator which sorts items in descending order.\n *\n * @example\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const byValueDesc = descending(byValue);\n *\n * @param comparator the comparator to wrap.\n */ const descending = (comparator)=>{\n    return (a, b)=>comparator(b, a);\n};\n/**\n * Creates a new comparator which conditionally applies the given comparator.\n *\n * @example\n * const shouldSortByValue = (a, b) => a % 2 === 0; // return false to turn it off\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const comparator = conditional(shouldSortByValue)(byValue);\n *\n * @param predicate the predicate to use for determining whether to apply the comparator.\n */ const conditional = (predicate)=>{\n    return (comparator)=>{\n        return (a, b)=>{\n            if (!predicate(a, b)) return 0;\n            return comparator(a, b);\n        };\n    };\n};\n/**\n * A no-op comparator which always returns 0.\n */ const noopComparator = ()=>{\n    return ()=>0;\n};\n/**\n * A comparator which sorts participants by the fact that they are the dominant speaker or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const dominantSpeaker = (a, b)=>{\n    if (a.isDominantSpeaker && !b.isDominantSpeaker) return -1;\n    if (!a.isDominantSpeaker && b.isDominantSpeaker) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by the fact that they are speaking or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const speaking = (a, b)=>{\n    if (a.isSpeaking && !b.isSpeaking) return -1;\n    if (!a.isSpeaking && b.isSpeaking) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by screen sharing status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const screenSharing = (a, b)=>{\n    if (hasScreenShare(a) && !hasScreenShare(b)) return -1;\n    if (!hasScreenShare(a) && hasScreenShare(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by video status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const publishingVideo = (a, b)=>{\n    if (hasVideo(a) && !hasVideo(b)) return -1;\n    if (!hasVideo(a) && hasVideo(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by audio status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const publishingAudio = (a, b)=>{\n    if (hasAudio(a) && !hasAudio(b)) return -1;\n    if (!hasAudio(a) && hasAudio(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which prioritizes participants who are pinned.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const pinned = (a, b)=>{\n    if (a.pin && b.pin) {\n        if (!a.pin.isLocalPin && b.pin.isLocalPin) return -1;\n        if (a.pin.isLocalPin && !b.pin.isLocalPin) return 1;\n        if (a.pin.pinnedAt > b.pin.pinnedAt) return -1;\n        if (a.pin.pinnedAt < b.pin.pinnedAt) return 1;\n    }\n    if (a.pin && !b.pin) return -1;\n    if (!a.pin && b.pin) return 1;\n    return 0;\n};\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific reaction.\n *\n * @param type the reaction type.\n */ const reactionType = (type)=>{\n    return (a, b)=>{\n        if (a.reaction?.type === type && b.reaction?.type !== type) return -1;\n        if (a.reaction?.type !== type && b.reaction?.type === type) return 1;\n        return 0;\n    };\n};\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific role.\n *\n * @param roles the roles to prioritize.\n */ const role = (...roles)=>(a, b)=>{\n        if (hasAnyRole(a, roles) && !hasAnyRole(b, roles)) return -1;\n        if (!hasAnyRole(a, roles) && hasAnyRole(b, roles)) return 1;\n        return 0;\n    };\n/**\n * A comparator which sorts participants by name.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const name = (a, b)=>{\n    if (a.name < b.name) return -1;\n    if (a.name > b.name) return 1;\n    return 0;\n};\nconst hasAnyRole = (p, roles)=>(p.roles || []).some((r)=>roles.includes(r));\nconst hasScreenShare = (p)=>p.publishedTracks.includes(TrackType.SCREEN_SHARE);\nconst hasVideo = (p)=>p.publishedTracks.includes(TrackType.VIDEO);\nconst hasAudio = (p)=>p.publishedTracks.includes(TrackType.AUDIO);\n// a comparator decorator which applies the decorated comparator only if the\n// participant is invisible.\n// This ensures stable sorting when all participants are visible.\nconst ifInvisibleBy = conditional((a, b)=>a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE);\n/**\n * A comparator that applies the decorated comparator when a participant is\n * either invisible or its visibility state isn't known.\n * For visible participants, it ensures stable sorting.\n */ const ifInvisibleOrUnknownBy = conditional((a, b)=>a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || a.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN || b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || b.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN);\n/**\n * The default sorting preset.\n */ const defaultSortPreset = combineComparators(pinned, screenSharing, ifInvisibleBy(combineComparators(dominantSpeaker, speaking, reactionType(\"raised-hand\"), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for speaker layout.\n */ const speakerLayoutSortPreset = combineComparators(pinned, screenSharing, dominantSpeaker, ifInvisibleBy(combineComparators(speaking, reactionType(\"raised-hand\"), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for layouts that don't render all participants but\n * instead, render them in pages.\n */ const paginatedLayoutSortPreset = combineComparators(pinned, ifInvisibleOrUnknownBy(combineComparators(dominantSpeaker, speaking, reactionType(\"raised-hand\"), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for livestreams and audio rooms.\n */ const livestreamOrAudioRoomSortPreset = combineComparators(ifInvisibleBy(combineComparators(dominantSpeaker, speaking, reactionType(\"raised-hand\"), publishingVideo, publishingAudio)), role(\"admin\", \"host\", \"speaker\"));\n/**\n * Represents the state of the current call.\n */ var CallingState;\n(function(CallingState) {\n    /**\n     * The call is in an unknown state.\n     */ CallingState[\"UNKNOWN\"] = \"unknown\";\n    /**\n     * The call is in an idle state.\n     */ CallingState[\"IDLE\"] = \"idle\";\n    /**\n     * The call is in the process of ringing.\n     * (User hasn't accepted nor rejected the call yet.)\n     */ CallingState[\"RINGING\"] = \"ringing\";\n    /**\n     * The call is in the process of joining.\n     */ CallingState[\"JOINING\"] = \"joining\";\n    /**\n     * The call is currently active.\n     */ CallingState[\"JOINED\"] = \"joined\";\n    /**\n     * The call has been left.\n     */ CallingState[\"LEFT\"] = \"left\";\n    /**\n     * The call is in the process of reconnecting.\n     */ CallingState[\"RECONNECTING\"] = \"reconnecting\";\n    /**\n     * The call is in the process of migrating from one node to another.\n     */ CallingState[\"MIGRATING\"] = \"migrating\";\n    /**\n     * The call has failed to reconnect.\n     */ CallingState[\"RECONNECTING_FAILED\"] = \"reconnecting-failed\";\n    /**\n     * The call is in offline mode.\n     */ CallingState[\"OFFLINE\"] = \"offline\";\n})(CallingState || (CallingState = {}));\n/**\n * Returns the default egress object - when no egress data is available.\n */ const defaultEgress = {\n    broadcasting: false,\n    hls: {\n        playlist_url: \"\"\n    },\n    rtmps: []\n};\n/**\n * Holds the state of the current call.\n * @react You don't have to use this class directly, as we are exposing the state through Hooks.\n */ class CallState {\n    /**\n     * Creates a new instance of the CallState class.\n     *\n     */ constructor(){\n        this.backstageSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(true);\n        this.blockedUserIdsSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject([]);\n        this.createdAtSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(new Date());\n        this.endedAtSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        this.startsAtSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        this.updatedAtSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(new Date());\n        this.createdBySubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        this.customSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject({});\n        this.egressSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        this.ingressSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        this.recordingSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(false);\n        this.sessionSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        this.settingsSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        this.transcribingSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(false);\n        this.endedBySubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        this.thumbnailsSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        this.membersSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject([]);\n        this.ownCapabilitiesSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject([]);\n        this.callingStateSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(CallingState.UNKNOWN);\n        this.startedAtSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        this.participantCountSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(0);\n        this.anonymousParticipantCountSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(0);\n        this.participantsSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject([]);\n        this.callStatsReportSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        /**\n         * A list of comparators that are used to sort the participants.\n         *\n         * @private\n         */ this.sortParticipantsBy = defaultSortPreset;\n        /**\n         * Sets the list of criteria that are used to sort the participants.\n         * To disable sorting, you can pass `noopComparator()`.\n         *\n         * @param comparator the comparator to use to sort the participants.\n         */ this.setSortParticipantsBy = (comparator)=>{\n            this.sortParticipantsBy = comparator;\n            // trigger re-sorting of participants\n            this.setCurrentValue(this.participantsSubject, (ps)=>ps);\n        };\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @internal\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n        /**\n         * Sets the number of participants in the current call.\n         *\n         * @internal\n         * @param count the number of participants.\n         */ this.setParticipantCount = (count)=>{\n            return this.setCurrentValue(this.participantCountSubject, count);\n        };\n        /**\n         * Sets the time the call session actually started.\n         *\n         * @internal\n         * @param startedAt the time the call session actually started.\n         */ this.setStartedAt = (startedAt)=>{\n            return this.setCurrentValue(this.startedAtSubject, startedAt);\n        };\n        /**\n         * Sets the number of anonymous participants in the current call.\n         *\n         * @internal\n         * @param count the number of anonymous participants.\n         */ this.setAnonymousParticipantCount = (count)=>{\n            return this.setCurrentValue(this.anonymousParticipantCountSubject, count);\n        };\n        /**\n         * Sets the list of participants in the current call.\n         *\n         * @internal\n         *\n         * @param participants the list of participants.\n         */ this.setParticipants = (participants)=>{\n            return this.setCurrentValue(this.participantsSubject, participants);\n        };\n        /**\n         * Sets the calling state.\n         *\n         * @internal\n         * @param state the new calling state.\n         */ this.setCallingState = (state)=>{\n            return this.setCurrentValue(this.callingStateSubject, state);\n        };\n        /**\n         * Sets the call stats report.\n         *\n         * @internal\n         * @param report the report to set.\n         */ this.setCallStatsReport = (report)=>{\n            return this.setCurrentValue(this.callStatsReportSubject, report);\n        };\n        /**\n         * Sets the members of the current call.\n         *\n         * @internal\n         * @param members the members to set.\n         */ this.setMembers = (members)=>{\n            this.setCurrentValue(this.membersSubject, members);\n        };\n        /**\n         * Sets the own capabilities.\n         *\n         * @internal\n         * @param capabilities the capabilities to set.\n         */ this.setOwnCapabilities = (capabilities)=>{\n            return this.setCurrentValue(this.ownCapabilitiesSubject, capabilities);\n        };\n        /**\n         * Will try to find the participant with the given sessionId in the current call.\n         *\n         * @param sessionId the sessionId of the participant to find.\n         * @returns the participant with the given sessionId or undefined if not found.\n         */ this.findParticipantBySessionId = (sessionId)=>{\n            return this.participants.find((p)=>p.sessionId === sessionId);\n        };\n        /**\n         * Returns a new lookup table of participants indexed by their session ID.\n         */ this.getParticipantLookupBySessionId = ()=>{\n            return this.participants.reduce((lookupTable, participant)=>{\n                lookupTable[participant.sessionId] = participant;\n                return lookupTable;\n            }, {});\n        };\n        /**\n         * Updates a participant in the current call identified by the given `sessionId`.\n         * If the participant can't be found, this operation is no-op.\n         *\n         * @internal\n         *\n         * @param sessionId the session ID of the participant to update.\n         * @param patch the patch to apply to the participant.\n         * @returns the updated participant or `undefined` if the participant couldn't be found.\n         */ this.updateParticipant = (sessionId, patch)=>{\n            const participant = this.findParticipantBySessionId(sessionId);\n            if (!participant) {\n                this.logger(\"warn\", `Participant with sessionId ${sessionId} not found`);\n                return;\n            }\n            const thePatch = typeof patch === \"function\" ? patch(participant) : patch;\n            const updatedParticipant = {\n                // FIXME OL: this is not a deep merge, we might want to revisit this\n                ...participant,\n                ...thePatch\n            };\n            return this.setParticipants((participants)=>participants.map((p)=>p.sessionId === sessionId ? updatedParticipant : p));\n        };\n        /**\n         * Updates a participant in the current call identified by the given `sessionId`.\n         * If a participant with matching `sessionId` can't be found, the provided\n         * `participant` is added to the list of participants.\n         *\n         * @param sessionId the session ID of the participant to update.\n         * @param participant the participant to update or add.\n         */ this.updateOrAddParticipant = (sessionId, participant)=>{\n            if (!this.findParticipantBySessionId(sessionId)) {\n                return this.setParticipants((participants)=>[\n                        ...participants,\n                        participant\n                    ]);\n            }\n            return this.setParticipants((participants)=>participants.map((p)=>{\n                    if (p.sessionId === sessionId) {\n                        return {\n                            ...p,\n                            ...participant\n                        };\n                    }\n                    return p;\n                }));\n        };\n        /**\n         * Updates all participants in the current call whose session ID is in the given `sessionIds`.\n         * If no patches are provided, this operation is no-op.\n         *\n         * @internal\n         *\n         * @param patch the patch to apply to the participants.\n         * @returns all participants, with all patch applied.\n         */ this.updateParticipants = (patch)=>{\n            if (Object.keys(patch).length === 0) return;\n            return this.setParticipants((participants)=>participants.map((p)=>{\n                    const thePatch = patch[p.sessionId];\n                    if (thePatch) {\n                        return {\n                            ...p,\n                            ...thePatch\n                        };\n                    }\n                    return p;\n                }));\n        };\n        /**\n         * Updates the call state with the data received from the server.\n         *\n         * @internal\n         *\n         * @param event the video event that our backend sent us.\n         */ this.updateFromEvent = (event)=>{\n            const update = this.eventHandlers[event.type];\n            if (update) {\n                update(event);\n            }\n        };\n        /**\n         * Updates the participant pinned state with server side pinning data.\n         *\n         * @param pins the latest pins from the server.\n         */ this.setServerSidePins = (pins)=>{\n            const pinsLookup = pins.reduce((lookup, pin)=>{\n                lookup[pin.sessionId] = Date.now();\n                return lookup;\n            }, {});\n            return this.setParticipants((participants)=>participants.map((participant)=>{\n                    const serverSidePinnedAt = pinsLookup[participant.sessionId];\n                    // the participant is newly pinned\n                    if (serverSidePinnedAt) {\n                        return {\n                            ...participant,\n                            pin: {\n                                isLocalPin: false,\n                                pinnedAt: serverSidePinnedAt\n                            }\n                        };\n                    }\n                    // the participant is no longer pinned server side\n                    // we need to reset the pin\n                    if (participant.pin && !participant.pin.isLocalPin) {\n                        return {\n                            ...participant,\n                            pin: undefined\n                        };\n                    }\n                    // no changes to be applied\n                    return participant;\n                }));\n        };\n        /**\n         * Updates the call state with the data received from the server.\n         *\n         * @internal\n         *\n         * @param call the call response from the server.\n         */ this.updateFromCallResponse = (call)=>{\n            this.setCurrentValue(this.backstageSubject, call.backstage);\n            this.setCurrentValue(this.blockedUserIdsSubject, call.blocked_user_ids);\n            this.setCurrentValue(this.createdAtSubject, new Date(call.created_at));\n            this.setCurrentValue(this.updatedAtSubject, new Date(call.updated_at));\n            this.setCurrentValue(this.startsAtSubject, call.starts_at ? new Date(call.starts_at) : undefined);\n            this.setCurrentValue(this.endedAtSubject, call.ended_at ? new Date(call.ended_at) : undefined);\n            this.setCurrentValue(this.createdBySubject, call.created_by);\n            this.setCurrentValue(this.customSubject, call.custom);\n            this.setCurrentValue(this.egressSubject, call.egress);\n            this.setCurrentValue(this.ingressSubject, call.ingress);\n            this.setCurrentValue(this.recordingSubject, call.recording);\n            this.setCurrentValue(this.sessionSubject, call.session);\n            this.setCurrentValue(this.settingsSubject, call.settings);\n            this.setCurrentValue(this.transcribingSubject, call.transcribing);\n            this.setCurrentValue(this.thumbnailsSubject, call.thumbnails);\n        };\n        this.updateFromMemberRemoved = (event)=>{\n            this.setCurrentValue(this.membersSubject, (members)=>members.filter((m)=>event.members.indexOf(m.user_id) === -1));\n        };\n        this.updateFromMemberAdded = (event)=>{\n            this.setCurrentValue(this.membersSubject, (members)=>[\n                    ...members,\n                    ...event.members\n                ]);\n        };\n        this.updateFromHLSBroadcastStopped = ()=>{\n            this.setCurrentValue(this.egressSubject, (egress = defaultEgress)=>({\n                    ...egress,\n                    broadcasting: false\n                }));\n        };\n        this.updateFromHLSBroadcastingFailed = ()=>{\n            this.setCurrentValue(this.egressSubject, (egress = defaultEgress)=>({\n                    ...egress,\n                    broadcasting: false\n                }));\n        };\n        this.updateFromHLSBroadcastStarted = (event)=>{\n            this.setCurrentValue(this.egressSubject, (egress = defaultEgress)=>({\n                    ...egress,\n                    broadcasting: true,\n                    hls: {\n                        ...egress.hls,\n                        playlist_url: event.hls_playlist_url\n                    }\n                }));\n        };\n        this.updateFromSessionParticipantLeft = (event)=>{\n            this.setCurrentValue(this.sessionSubject, (session)=>{\n                if (!session) {\n                    this.logger(\"warn\", `Received call.session_participant_left event but no session is available.`, event);\n                    return session;\n                }\n                const { participants, participants_count_by_role } = session;\n                const { user, user_session_id } = event.participant;\n                return {\n                    ...session,\n                    participants: participants.filter((p)=>p.user_session_id !== user_session_id),\n                    participants_count_by_role: {\n                        ...participants_count_by_role,\n                        [user.role]: Math.max(0, (participants_count_by_role[user.role] || 0) - 1)\n                    }\n                };\n            });\n        };\n        this.updateFromSessionParticipantJoined = (event)=>{\n            this.setCurrentValue(this.sessionSubject, (session)=>{\n                if (!session) {\n                    this.logger(\"warn\", `Received call.session_participant_joined event but no session is available.`, event);\n                    return session;\n                }\n                const { participants, participants_count_by_role } = session;\n                const { user, user_session_id } = event.participant;\n                // It could happen that the backend delivers the same participant more than once.\n                // Once with the call.session_started event and once again with the\n                // call.session_participant_joined event. In this case,\n                // we should update the existing participant and prevent duplicating it.\n                let shouldInsertParticipant = true;\n                const updatedParticipants = participants.map((p)=>{\n                    if (p.user_session_id === user_session_id) {\n                        shouldInsertParticipant = false;\n                        return event.participant;\n                    }\n                    return p;\n                });\n                if (shouldInsertParticipant) {\n                    // this is a new array, we can safely push the new participant\n                    updatedParticipants.push(event.participant);\n                }\n                // If we are updating an existing participant, we don't want to increment\n                // the participant_by_role count.\n                const increment = shouldInsertParticipant ? 1 : 0;\n                return {\n                    ...session,\n                    participants: updatedParticipants,\n                    participants_count_by_role: {\n                        ...participants_count_by_role,\n                        [user.role]: (participants_count_by_role[user.role] || 0) + increment\n                    }\n                };\n            });\n        };\n        this.updateMembers = (event)=>{\n            this.setCurrentValue(this.membersSubject, (members)=>members.map((member)=>{\n                    const memberUpdate = event.members.find((m)=>m.user_id === member.user_id);\n                    return memberUpdate ? memberUpdate : member;\n                }));\n        };\n        this.updateParticipantReaction = (event)=>{\n            const { user, custom, type, emoji_code } = event.reaction;\n            this.setParticipants((participants)=>{\n                return participants.map((p)=>{\n                    // skip if the reaction is not for this participant\n                    if (p.userId !== user.id) return p;\n                    // update the participant with the new reaction\n                    return {\n                        ...p,\n                        reaction: {\n                            type,\n                            emoji_code,\n                            custom\n                        }\n                    };\n                });\n            });\n        };\n        this.unblockUser = (event)=>{\n            this.setCurrentValue(this.blockedUserIdsSubject, (current)=>{\n                if (!current) return current;\n                return current.filter((id)=>id !== event.user.id);\n            });\n        };\n        this.blockUser = (event)=>{\n            this.setCurrentValue(this.blockedUserIdsSubject, (current)=>[\n                    ...current || [],\n                    event.user.id\n                ]);\n        };\n        this.updateOwnCapabilities = (event)=>{\n            if (event.user.id === this.localParticipant?.userId) {\n                this.setCurrentValue(this.ownCapabilitiesSubject, event.own_capabilities);\n            }\n        };\n        this.logger = getLogger([\n            \"CallState\"\n        ]);\n        this.participants$ = this.participantsSubject.asObservable().pipe(// maintain stable-sort by mutating the participants stored\n        // in the original subject\n        (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.map)((ps)=>ps.sort(this.sortParticipantsBy)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.localParticipant$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.map)((participants)=>participants.find((p)=>p.isLocalParticipant)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.remoteParticipants$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.map)((participants)=>participants.filter((p)=>!p.isLocalParticipant)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.pinnedParticipants$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.map)((participants)=>participants.filter((p)=>!!p.pin)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.dominantSpeaker$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.map)((participants)=>participants.find((p)=>p.isDominantSpeaker)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.hasOngoingScreenShare$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.map)((participants)=>participants.some((p)=>p.publishedTracks.includes(TrackType.SCREEN_SHARE))), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.startedAt$ = this.startedAtSubject.asObservable();\n        this.participantCount$ = this.participantCountSubject.asObservable();\n        this.anonymousParticipantCount$ = this.anonymousParticipantCountSubject.asObservable();\n        this.callStatsReport$ = this.callStatsReportSubject.asObservable();\n        this.members$ = this.membersSubject.asObservable();\n        this.ownCapabilities$ = this.ownCapabilitiesSubject.asObservable();\n        this.callingState$ = this.callingStateSubject.asObservable();\n        this.backstage$ = this.backstageSubject.asObservable();\n        this.blockedUserIds$ = this.blockedUserIdsSubject.asObservable();\n        this.createdAt$ = this.createdAtSubject.asObservable();\n        this.endedAt$ = this.endedAtSubject.asObservable();\n        this.startsAt$ = this.startsAtSubject.asObservable();\n        this.updatedAt$ = this.updatedAtSubject.asObservable();\n        this.createdBy$ = this.createdBySubject.asObservable();\n        this.custom$ = this.customSubject.asObservable();\n        this.egress$ = this.egressSubject.asObservable();\n        this.ingress$ = this.ingressSubject.asObservable();\n        this.recording$ = this.recordingSubject.asObservable();\n        this.session$ = this.sessionSubject.asObservable();\n        this.settings$ = this.settingsSubject.asObservable();\n        this.transcribing$ = this.transcribingSubject.asObservable();\n        this.endedBy$ = this.endedBySubject.asObservable();\n        this.thumbnails$ = this.thumbnailsSubject.asObservable();\n        this.eventHandlers = {\n            // these events are not updating the call state:\n            \"call.permission_request\": undefined,\n            \"call.recording_failed\": undefined,\n            \"call.recording_ready\": undefined,\n            \"call.user_muted\": undefined,\n            \"connection.error\": undefined,\n            \"connection.ok\": undefined,\n            \"health.check\": undefined,\n            custom: undefined,\n            // events that update call state:\n            \"call.accepted\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.blocked_user\": this.blockUser,\n            \"call.created\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.ended\": (e)=>{\n                this.updateFromCallResponse(e.call);\n                this.setCurrentValue(this.endedBySubject, e.user);\n            },\n            \"call.hls_broadcasting_failed\": this.updateFromHLSBroadcastingFailed,\n            \"call.hls_broadcasting_started\": this.updateFromHLSBroadcastStarted,\n            \"call.hls_broadcasting_stopped\": this.updateFromHLSBroadcastStopped,\n            \"call.live_started\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.member_added\": this.updateFromMemberAdded,\n            \"call.member_removed\": this.updateFromMemberRemoved,\n            \"call.member_updated_permission\": this.updateMembers,\n            \"call.member_updated\": this.updateMembers,\n            \"call.notification\": (e)=>{\n                this.updateFromCallResponse(e.call);\n                this.setMembers(e.members);\n            },\n            \"call.permissions_updated\": this.updateOwnCapabilities,\n            \"call.reaction_new\": this.updateParticipantReaction,\n            \"call.recording_started\": ()=>this.setCurrentValue(this.recordingSubject, true),\n            \"call.recording_stopped\": ()=>this.setCurrentValue(this.recordingSubject, false),\n            \"call.rejected\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.ring\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.session_ended\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.session_participant_joined\": this.updateFromSessionParticipantJoined,\n            \"call.session_participant_left\": this.updateFromSessionParticipantLeft,\n            \"call.session_started\": (e)=>this.updateFromCallResponse(e.call),\n            \"call.unblocked_user\": this.unblockUser,\n            \"call.updated\": (e)=>this.updateFromCallResponse(e.call)\n        };\n    }\n    /**\n     * The server-side counted number of participants connected to the current call.\n     * This number includes the anonymous participants as well.\n     */ get participantCount() {\n        return this.getCurrentValue(this.participantCount$);\n    }\n    /**\n     * The time the call session actually started.\n     * Useful for displaying the call duration.\n     */ get startedAt() {\n        return this.getCurrentValue(this.startedAt$);\n    }\n    /**\n     * The server-side counted number of anonymous participants connected to the current call.\n     * This number includes the anonymous participants as well.\n     */ get anonymousParticipantCount() {\n        return this.getCurrentValue(this.anonymousParticipantCount$);\n    }\n    /**\n     * The list of participants in the current call.\n     */ get participants() {\n        return this.getCurrentValue(this.participants$);\n    }\n    /**\n     * The local participant in the current call.\n     */ get localParticipant() {\n        return this.getCurrentValue(this.localParticipant$);\n    }\n    /**\n     * The list of remote participants in the current call.\n     */ get remoteParticipants() {\n        return this.getCurrentValue(this.remoteParticipants$);\n    }\n    /**\n     * The dominant speaker in the current call.\n     */ get dominantSpeaker() {\n        return this.getCurrentValue(this.dominantSpeaker$);\n    }\n    /**\n     * The list of pinned participants in the current call.\n     */ get pinnedParticipants() {\n        return this.getCurrentValue(this.pinnedParticipants$);\n    }\n    /**\n     * Tell if there is an ongoing screen share in this call.\n     */ get hasOngoingScreenShare() {\n        return this.getCurrentValue(this.hasOngoingScreenShare$);\n    }\n    /**\n     * The calling state.\n     */ get callingState() {\n        return this.getCurrentValue(this.callingState$);\n    }\n    /**\n     * The call stats report.\n     */ get callStatsReport() {\n        return this.getCurrentValue(this.callStatsReport$);\n    }\n    /**\n     * The members of the current call.\n     */ get members() {\n        return this.getCurrentValue(this.members$);\n    }\n    /**\n     * The capabilities of the current user for the current call.\n     */ get ownCapabilities() {\n        return this.getCurrentValue(this.ownCapabilities$);\n    }\n    /**\n     * The backstage state.\n     */ get backstage() {\n        return this.getCurrentValue(this.backstage$);\n    }\n    /**\n     * Will provide the list of blocked user IDs.\n     */ get blockedUserIds() {\n        return this.getCurrentValue(this.blockedUserIds$);\n    }\n    /**\n     * Will provide the time when this call has been created.\n     */ get createdAt() {\n        return this.getCurrentValue(this.createdAt$);\n    }\n    /**\n     * Will provide the time when this call has been ended.\n     */ get endedAt() {\n        return this.getCurrentValue(this.endedAt$);\n    }\n    /**\n     * Will provide the time when this call has been scheduled to start.\n     */ get startsAt() {\n        return this.getCurrentValue(this.startsAt$);\n    }\n    /**\n     * Will provide the time when this call has been updated.\n     */ get updatedAt() {\n        return this.getCurrentValue(this.updatedAt$);\n    }\n    /**\n     * Will provide the user who created this call.\n     */ get createdBy() {\n        return this.getCurrentValue(this.createdBy$);\n    }\n    /**\n     * Will provide the custom data of this call.\n     */ get custom() {\n        return this.getCurrentValue(this.custom$);\n    }\n    /**\n     * Will provide the egress data of this call.\n     */ get egress() {\n        return this.getCurrentValue(this.egress$);\n    }\n    /**\n     * Will provide the ingress data of this call.\n     */ get ingress() {\n        return this.getCurrentValue(this.ingress$);\n    }\n    /**\n     * Will provide the recording state of this call.\n     */ get recording() {\n        return this.getCurrentValue(this.recording$);\n    }\n    /**\n     * Will provide the session data of this call.\n     */ get session() {\n        return this.getCurrentValue(this.session$);\n    }\n    /**\n     * Will provide the settings of this call.\n     */ get settings() {\n        return this.getCurrentValue(this.settings$);\n    }\n    /**\n     * Will provide the transcribing state of this call.\n     */ get transcribing() {\n        return this.getCurrentValue(this.transcribing$);\n    }\n    /**\n     * Will provide the user who ended this call.\n     */ get endedBy() {\n        return this.getCurrentValue(this.endedBy$);\n    }\n    /**\n     * Will provide the thumbnails of this call, if enabled in the call settings.\n     */ get thumbnails() {\n        return this.getCurrentValue(this.thumbnails$);\n    }\n}\nclass StreamVideoWriteableStateStore {\n    constructor(){\n        /**\n         * A store keeping data of a successfully connected user over WS to the coordinator server.\n         */ this.connectedUserSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        /**\n         * A list of {@link Call} objects created/tracked by this client.\n         */ this.callsSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject([]);\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n        /**\n         * Sets the currently connected user.\n         *\n         * @internal\n         * @param user the user to set as connected.\n         */ this.setConnectedUser = (user)=>{\n            return this.setCurrentValue(this.connectedUserSubject, user);\n        };\n        /**\n         * Sets the list of {@link Call} objects created/tracked by this client.\n         * @param calls\n         */ this.setCalls = (calls)=>{\n            return this.setCurrentValue(this.callsSubject, calls);\n        };\n        /**\n         * Adds a {@link Call} object to the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param call the call to add.\n         */ this.registerCall = (call)=>{\n            if (!this.calls.find((c)=>c.cid === call.cid)) {\n                this.setCalls((calls)=>[\n                        ...calls,\n                        call\n                    ]);\n            }\n        };\n        /**\n         * Removes a {@link Call} object from the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param call the call to remove\n         */ this.unregisterCall = (call)=>{\n            return this.setCalls((calls)=>calls.filter((c)=>c !== call));\n        };\n        /**\n         * Finds a {@link Call} object in the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param type the type of call to find.\n         * @param id the id of the call to find.\n         */ this.findCall = (type, id)=>{\n            return this.calls.find((c)=>c.type === type && c.id === id);\n        };\n        this.connectedUserSubject.subscribe(async (user)=>{\n            // leave all calls when the user disconnects.\n            if (!user) {\n                const logger = getLogger([\n                    \"client-state\"\n                ]);\n                for (const call of this.calls){\n                    if (call.state.callingState === CallingState.LEFT) continue;\n                    logger(\"info\", `User disconnected, leaving call: ${call.cid}`);\n                    await call.leave({\n                        reason: \"client.disconnectUser() called\"\n                    }).catch((err)=>{\n                        logger(\"error\", `Error leaving call: ${call.cid}`, err);\n                    });\n                }\n            }\n        });\n    }\n    /**\n     * The currently connected user.\n     */ get connectedUser() {\n        return this.getCurrentValue(this.connectedUserSubject);\n    }\n    /**\n     * A list of {@link Call} objects created/tracked by this client.\n     */ get calls() {\n        return this.getCurrentValue(this.callsSubject);\n    }\n}\n/**\n * A reactive store that exposes state variables in a reactive manner.\n * You can subscribe to changes of the different state variables.\n * This central store contains all the state variables related to [`StreamVideoClient`](./StreamVideClient.md) and [`Call`](./Call.md).\n */ class StreamVideoReadOnlyStateStore {\n    constructor(store){\n        /**\n         * This method allows you the get the current value of a state variable.\n         *\n         * @param observable the observable to get the current value of.\n         * @returns the current value of the observable.\n         */ this.getCurrentValue = getCurrentValue;\n        // convert and expose subjects as observables\n        this.connectedUser$ = store.connectedUserSubject.asObservable();\n        this.calls$ = store.callsSubject.asObservable();\n    }\n    /**\n     * The current user connected over WS to the backend.\n     */ get connectedUser() {\n        return getCurrentValue(this.connectedUser$);\n    }\n    /**\n     * A list of {@link Call} objects created/tracked by this client.\n     */ get calls() {\n        return getCurrentValue(this.calls$);\n    }\n}\nconst getRtpMap = (line)=>{\n    // Example: a=rtpmap:110 opus/48000/2\n    const rtpRegex = /^a=rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/;\n    // The first captured group is the payload type number, the second captured group is the encoding name, the third captured group is the clock rate, and the fourth captured group is any additional parameters.\n    const rtpMatch = rtpRegex.exec(line);\n    if (rtpMatch) {\n        return {\n            original: rtpMatch[0],\n            payload: rtpMatch[1],\n            codec: rtpMatch[2]\n        };\n    }\n};\nconst getFmtp = (line)=>{\n    // Example: a=fmtp:111 minptime=10; useinbandfec=1\n    const fmtpRegex = /^a=fmtp:(\\d*) (.*)/;\n    const fmtpMatch = fmtpRegex.exec(line);\n    // The first captured group is the payload type number, the second captured group is any additional parameters.\n    if (fmtpMatch) {\n        return {\n            original: fmtpMatch[0],\n            payload: fmtpMatch[1],\n            config: fmtpMatch[2]\n        };\n    }\n};\n/**\n * gets the media section for the specified media type.\n * The media section contains the media type, port, codec, and payload type.\n * Example: m=video 9 UDP/TLS/RTP/SAVPF 100 101 96 97 35 36 102 125 127\n */ const getMedia = (line, mediaType)=>{\n    const regex = new RegExp(`(m=${mediaType} \\\\d+ [\\\\w/]+) ([\\\\d\\\\s]+)`);\n    const match = regex.exec(line);\n    if (match) {\n        return {\n            original: match[0],\n            mediaWithPorts: match[1],\n            codecOrder: match[2]\n        };\n    }\n};\nconst getMediaSection = (sdp, mediaType)=>{\n    let media;\n    const rtpMap = [];\n    const fmtp = [];\n    let isTheRequiredMediaSection = false;\n    sdp.split(/(\\r\\n|\\r|\\n)/).forEach((line)=>{\n        const isValidLine = /^([a-z])=(.*)/.test(line);\n        if (!isValidLine) return;\n        /*\n          NOTE: according to https://www.rfc-editor.org/rfc/rfc8866.pdf\n          Each media description starts with an \"m=\" line and continues to the next media description or the end of the whole session description, whichever comes first\n        */ const type = line[0];\n        if (type === \"m\") {\n            const _media = getMedia(line, mediaType);\n            isTheRequiredMediaSection = !!_media;\n            if (_media) {\n                media = _media;\n            }\n        } else if (isTheRequiredMediaSection && type === \"a\") {\n            const rtpMapLine = getRtpMap(line);\n            const fmtpLine = getFmtp(line);\n            if (rtpMapLine) {\n                rtpMap.push(rtpMapLine);\n            } else if (fmtpLine) {\n                fmtp.push(fmtpLine);\n            }\n        }\n    });\n    if (media) {\n        return {\n            media,\n            rtpMap,\n            fmtp\n        };\n    }\n};\n/**\n * Gets the fmtp line corresponding to opus\n */ const getOpusFmtp = (sdp)=>{\n    const section = getMediaSection(sdp, \"audio\");\n    const rtpMap = section?.rtpMap.find((r)=>r.codec.toLowerCase() === \"opus\");\n    const codecId = rtpMap?.payload;\n    if (codecId) {\n        return section?.fmtp.find((f)=>f.payload === codecId);\n    }\n};\n/**\n * Returns an SDP with DTX enabled or disabled.\n */ const toggleDtx = (sdp, enable)=>{\n    const opusFmtp = getOpusFmtp(sdp);\n    if (opusFmtp) {\n        const matchDtx = /usedtx=(\\d)/.exec(opusFmtp.config);\n        const requiredDtxConfig = `usedtx=${enable ? \"1\" : \"0\"}`;\n        if (matchDtx) {\n            const newFmtp = opusFmtp.original.replace(/usedtx=(\\d)/, requiredDtxConfig);\n            return sdp.replace(opusFmtp.original, newFmtp);\n        } else {\n            const newFmtp = `${opusFmtp.original};${requiredDtxConfig}`;\n            return sdp.replace(opusFmtp.original, newFmtp);\n        }\n    }\n    return sdp;\n};\n/**\n * Enables high-quality audio through SDP munging for the given trackMid.\n *\n * @param sdp the SDP to munge.\n * @param trackMid the trackMid.\n * @param maxBitrate the max bitrate to set.\n */ const enableHighQualityAudio = (sdp, trackMid, maxBitrate = 510000)=>{\n    maxBitrate = Math.max(Math.min(maxBitrate, 510000), 96000);\n    const parsedSdp = sdp_transform__WEBPACK_IMPORTED_MODULE_2__.parse(sdp);\n    const audioMedia = parsedSdp.media.find((m)=>m.type === \"audio\" && String(m.mid) === trackMid);\n    if (!audioMedia) return sdp;\n    const opusRtp = audioMedia.rtp.find((r)=>r.codec === \"opus\");\n    if (!opusRtp) return sdp;\n    const opusFmtp = audioMedia.fmtp.find((f)=>f.payload === opusRtp.payload);\n    if (!opusFmtp) return sdp;\n    // enable stereo, if not already enabled\n    if (opusFmtp.config.match(/stereo=(\\d)/)) {\n        opusFmtp.config = opusFmtp.config.replace(/stereo=(\\d)/, \"stereo=1\");\n    } else {\n        opusFmtp.config = `${opusFmtp.config};stereo=1`;\n    }\n    // set maxaveragebitrate, to the given value\n    if (opusFmtp.config.match(/maxaveragebitrate=(\\d*)/)) {\n        opusFmtp.config = opusFmtp.config.replace(/maxaveragebitrate=(\\d*)/, `maxaveragebitrate=${maxBitrate}`);\n    } else {\n        opusFmtp.config = `${opusFmtp.config};maxaveragebitrate=${maxBitrate}`;\n    }\n    return sdp_transform__WEBPACK_IMPORTED_MODULE_2__.write(parsedSdp);\n};\nconst logger$3 = getLogger([\n    \"Publisher\"\n]);\n/**\n * The `Publisher` is responsible for publishing/unpublishing media streams to/from the SFU\n * @internal\n */ class Publisher {\n    /**\n     * Returns the current connection configuration.\n     *\n     * @internal\n     */ get connectionConfiguration() {\n        if (this.pc.getConfiguration) return this.pc.getConfiguration();\n        return this._connectionConfiguration;\n    }\n    /**\n     * Constructs a new `Publisher` instance.\n     *\n     * @param connectionConfig the connection configuration to use.\n     * @param sfuClient the SFU client to use.\n     * @param state the call state to use.\n     * @param dispatcher the dispatcher to use.\n     * @param isDtxEnabled whether DTX is enabled.\n     * @param isRedEnabled whether RED is enabled.\n     * @param iceRestartDelay the delay in milliseconds to wait before restarting ICE once connection goes to `disconnected` state.\n     */ constructor({ connectionConfig, sfuClient, dispatcher, state, isDtxEnabled, isRedEnabled, iceRestartDelay = 2500 }){\n        this.transceiverRegistry = {\n            [TrackType.AUDIO]: undefined,\n            [TrackType.VIDEO]: undefined,\n            [TrackType.SCREEN_SHARE]: undefined,\n            [TrackType.SCREEN_SHARE_AUDIO]: undefined,\n            [TrackType.UNSPECIFIED]: undefined\n        };\n        this.publishOptionsPerTrackType = new Map();\n        /**\n         * An array maintaining the order how transceivers were added to the peer connection.\n         * This is needed because some browsers (Firefox) don't reliably report\n         * trackId and `mid` parameters.\n         *\n         * @private\n         */ this.transceiverInitOrder = [];\n        this.trackKindMapping = {\n            [TrackType.AUDIO]: \"audio\",\n            [TrackType.VIDEO]: \"video\",\n            [TrackType.SCREEN_SHARE]: \"video\",\n            [TrackType.SCREEN_SHARE_AUDIO]: \"audio\",\n            [TrackType.UNSPECIFIED]: undefined\n        };\n        this.trackLayersCache = {\n            [TrackType.AUDIO]: undefined,\n            [TrackType.VIDEO]: undefined,\n            [TrackType.SCREEN_SHARE]: undefined,\n            [TrackType.SCREEN_SHARE_AUDIO]: undefined,\n            [TrackType.UNSPECIFIED]: undefined\n        };\n        this.isIceRestarting = false;\n        this.createPeerConnection = (connectionConfig)=>{\n            const pc = new RTCPeerConnection(connectionConfig);\n            this._connectionConfiguration = connectionConfig;\n            pc.addEventListener(\"icecandidate\", this.onIceCandidate);\n            pc.addEventListener(\"negotiationneeded\", this.onNegotiationNeeded);\n            pc.addEventListener(\"icecandidateerror\", this.onIceCandidateError);\n            pc.addEventListener(\"iceconnectionstatechange\", this.onIceConnectionStateChange);\n            pc.addEventListener(\"icegatheringstatechange\", this.onIceGatheringStateChange);\n            pc.addEventListener(\"signalingstatechange\", this.onSignalingStateChange);\n            return pc;\n        };\n        /**\n         * Closes the publisher PeerConnection and cleans up the resources.\n         */ this.close = ({ stopTracks = true } = {})=>{\n            if (stopTracks) {\n                this.stopPublishing();\n                Object.keys(this.transceiverRegistry).forEach((trackType)=>{\n                    // @ts-ignore\n                    this.transceiverRegistry[trackType] = undefined;\n                });\n                Object.keys(this.trackLayersCache).forEach((trackType)=>{\n                    // @ts-ignore\n                    this.trackLayersCache[trackType] = undefined;\n                });\n            }\n            clearTimeout(this.iceRestartTimeout);\n            this.unsubscribeOnIceRestart();\n            this.pc.removeEventListener(\"negotiationneeded\", this.onNegotiationNeeded);\n            this.pc.close();\n        };\n        /**\n         * Starts publishing the given track of the given media stream.\n         *\n         * Consecutive calls to this method will replace the stream.\n         * The previous stream will be stopped.\n         *\n         * @param mediaStream the media stream to publish.\n         * @param track the track to publish.\n         * @param trackType the track type to publish.\n         * @param opts the optional publish options to use.\n         */ this.publishStream = async (mediaStream, track, trackType, opts = {})=>{\n            if (track.readyState === \"ended\") {\n                throw new Error(`Can't publish a track that has ended already.`);\n            }\n            let transceiver = this.pc.getTransceivers().find((t)=>t === this.transceiverRegistry[trackType] && t.sender.track && t.sender.track?.kind === this.trackKindMapping[trackType]);\n            /**\n             * An event handler which listens for the 'ended' event on the track.\n             * Once the track has ended, it will notify the SFU and update the state.\n             */ const handleTrackEnded = async ()=>{\n                logger$3(\"info\", `Track ${TrackType[trackType]} has ended, notifying the SFU`);\n                await this.notifyTrackMuteStateChanged(mediaStream, trackType, true);\n                // clean-up, this event listener needs to run only once.\n                track.removeEventListener(\"ended\", handleTrackEnded);\n            };\n            if (!transceiver) {\n                const { settings } = this.state;\n                const targetResolution = settings?.video.target_resolution;\n                const videoEncodings = trackType === TrackType.VIDEO ? findOptimalVideoLayers(track, targetResolution) : trackType === TrackType.SCREEN_SHARE ? findOptimalScreenSharingLayers(track, opts.screenShareSettings) : undefined;\n                let preferredCodec = opts.preferredCodec;\n                if (!preferredCodec && trackType === TrackType.VIDEO) {\n                    if (isReactNative()) {\n                        const osName = getOSInfo()?.name.toLowerCase();\n                        if (osName === \"ipados\") {\n                            // in ipads it was noticed that if vp8 codec is used\n                            // then the bytes sent is 0 in the outbound-rtp\n                            // so we are forcing h264 codec for ipads\n                            preferredCodec = \"H264\";\n                        } else if (osName === \"android\") {\n                            preferredCodec = \"VP8\";\n                        }\n                    }\n                }\n                const codecPreferences = this.getCodecPreferences(trackType, preferredCodec);\n                // listen for 'ended' event on the track as it might be ended abruptly\n                // by an external factor as permission revokes, device disconnected, etc.\n                // keep in mind that `track.stop()` doesn't trigger this event.\n                track.addEventListener(\"ended\", handleTrackEnded);\n                if (!track.enabled) {\n                    track.enabled = true;\n                }\n                transceiver = this.pc.addTransceiver(track, {\n                    direction: \"sendonly\",\n                    streams: trackType === TrackType.VIDEO || trackType === TrackType.SCREEN_SHARE ? [\n                        mediaStream\n                    ] : undefined,\n                    sendEncodings: videoEncodings\n                });\n                logger$3(\"debug\", `Added ${TrackType[trackType]} transceiver`);\n                this.transceiverInitOrder.push(trackType);\n                this.transceiverRegistry[trackType] = transceiver;\n                this.publishOptionsPerTrackType.set(trackType, opts);\n                if (\"setCodecPreferences\" in transceiver && codecPreferences) {\n                    logger$3(\"info\", `Setting ${TrackType[trackType]} codec preferences`, codecPreferences);\n                    transceiver.setCodecPreferences(codecPreferences);\n                }\n            } else {\n                const previousTrack = transceiver.sender.track;\n                // don't stop the track if we are re-publishing the same track\n                if (previousTrack && previousTrack !== track) {\n                    previousTrack.stop();\n                    previousTrack.removeEventListener(\"ended\", handleTrackEnded);\n                    track.addEventListener(\"ended\", handleTrackEnded);\n                }\n                if (!track.enabled) {\n                    track.enabled = true;\n                }\n                await transceiver.sender.replaceTrack(track);\n            }\n            await this.notifyTrackMuteStateChanged(mediaStream, trackType, false);\n        };\n        /**\n         * Stops publishing the given track type to the SFU, if it is currently being published.\n         * Underlying track will be stopped and removed from the publisher.\n         * @param trackType the track type to unpublish.\n         * @param stopTrack specifies whether track should be stopped or just disabled\n         */ this.unpublishStream = async (trackType, stopTrack)=>{\n            const transceiver = this.pc.getTransceivers().find((t)=>t === this.transceiverRegistry[trackType] && t.sender.track);\n            if (transceiver && transceiver.sender.track && (stopTrack ? transceiver.sender.track.readyState === \"live\" : transceiver.sender.track.enabled)) {\n                stopTrack ? transceiver.sender.track.stop() : transceiver.sender.track.enabled = false;\n                // We don't need to notify SFU if unpublishing in response to remote soft mute\n                if (this.state.localParticipant?.publishedTracks.includes(trackType)) {\n                    await this.notifyTrackMuteStateChanged(undefined, trackType, true);\n                }\n            }\n        };\n        /**\n         * Returns true if the given track type is currently being published to the SFU.\n         *\n         * @param trackType the track type to check.\n         */ this.isPublishing = (trackType)=>{\n            const transceiverForTrackType = this.transceiverRegistry[trackType];\n            if (transceiverForTrackType && transceiverForTrackType.sender) {\n                const sender = transceiverForTrackType.sender;\n                return !!sender.track && sender.track.readyState === \"live\" && sender.track.enabled;\n            }\n            return false;\n        };\n        /**\n         * Returns true if the given track type is currently live\n         *\n         * @param trackType the track type to check.\n         */ this.isLive = (trackType)=>{\n            const transceiverForTrackType = this.transceiverRegistry[trackType];\n            if (transceiverForTrackType && transceiverForTrackType.sender) {\n                const sender = transceiverForTrackType.sender;\n                return !!sender.track && sender.track.readyState === \"live\";\n            }\n            return false;\n        };\n        this.notifyTrackMuteStateChanged = async (mediaStream, trackType, isMuted)=>{\n            await this.sfuClient.updateMuteState(trackType, isMuted);\n            const audioOrVideoOrScreenShareStream = trackTypeToParticipantStreamKey(trackType);\n            if (isMuted) {\n                this.state.updateParticipant(this.sfuClient.sessionId, (p)=>({\n                        publishedTracks: p.publishedTracks.filter((t)=>t !== trackType),\n                        [audioOrVideoOrScreenShareStream]: undefined\n                    }));\n            } else {\n                this.state.updateParticipant(this.sfuClient.sessionId, (p)=>{\n                    return {\n                        publishedTracks: p.publishedTracks.includes(trackType) ? p.publishedTracks : [\n                            ...p.publishedTracks,\n                            trackType\n                        ],\n                        [audioOrVideoOrScreenShareStream]: mediaStream\n                    };\n                });\n            }\n        };\n        /**\n         * Stops publishing all tracks and stop all tracks.\n         */ this.stopPublishing = ()=>{\n            logger$3(\"debug\", \"Stopping publishing all tracks\");\n            this.pc.getSenders().forEach((s)=>{\n                s.track?.stop();\n                if (this.pc.signalingState !== \"closed\") {\n                    this.pc.removeTrack(s);\n                }\n            });\n        };\n        this.updateVideoPublishQuality = async (enabledLayers)=>{\n            logger$3(\"info\", \"Update publish quality, requested layers by SFU:\", enabledLayers);\n            const videoSender = this.transceiverRegistry[TrackType.VIDEO]?.sender;\n            if (!videoSender) {\n                logger$3(\"warn\", \"Update publish quality, no video sender found.\");\n                return;\n            }\n            const params = videoSender.getParameters();\n            if (params.encodings.length === 0) {\n                logger$3(\"warn\", \"Update publish quality, No suitable video encoding quality found\");\n                return;\n            }\n            let changed = false;\n            let enabledRids = enabledLayers.filter((ly)=>ly.active).map((ly)=>ly.name);\n            params.encodings.forEach((enc)=>{\n                // flip 'active' flag only when necessary\n                const shouldEnable = enabledRids.includes(enc.rid);\n                if (shouldEnable !== enc.active) {\n                    enc.active = shouldEnable;\n                    changed = true;\n                }\n                if (shouldEnable) {\n                    let layer = enabledLayers.find((vls)=>vls.name === enc.rid);\n                    if (layer !== undefined) {\n                        if (layer.scaleResolutionDownBy >= 1 && layer.scaleResolutionDownBy !== enc.scaleResolutionDownBy) {\n                            logger$3(\"debug\", \"[dynascale]: setting scaleResolutionDownBy from server\", \"layer\", layer.name, \"scale-resolution-down-by\", layer.scaleResolutionDownBy);\n                            enc.scaleResolutionDownBy = layer.scaleResolutionDownBy;\n                            changed = true;\n                        }\n                        if (layer.maxBitrate > 0 && layer.maxBitrate !== enc.maxBitrate) {\n                            logger$3(\"debug\", \"[dynascale] setting max-bitrate from the server\", \"layer\", layer.name, \"max-bitrate\", layer.maxBitrate);\n                            enc.maxBitrate = layer.maxBitrate;\n                            changed = true;\n                        }\n                        if (layer.maxFramerate > 0 && layer.maxFramerate !== enc.maxFramerate) {\n                            logger$3(\"debug\", \"[dynascale]: setting maxFramerate from server\", \"layer\", layer.name, \"max-framerate\", layer.maxFramerate);\n                            enc.maxFramerate = layer.maxFramerate;\n                            changed = true;\n                        }\n                    }\n                }\n            });\n            const activeLayers = params.encodings.filter((e)=>e.active);\n            if (changed) {\n                await videoSender.setParameters(params);\n                logger$3(\"info\", `Update publish quality, enabled rids: `, activeLayers);\n            } else {\n                logger$3(\"info\", `Update publish quality, no change: `, activeLayers);\n            }\n        };\n        /**\n         * Returns the result of the `RTCPeerConnection.getStats()` method\n         * @param selector\n         * @returns\n         */ this.getStats = (selector)=>{\n            return this.pc.getStats(selector);\n        };\n        this.getCodecPreferences = (trackType, preferredCodec)=>{\n            if (trackType === TrackType.VIDEO) {\n                return getPreferredCodecs(\"video\", preferredCodec || \"vp8\");\n            }\n            if (trackType === TrackType.AUDIO) {\n                const defaultAudioCodec = this.isRedEnabled ? \"red\" : \"opus\";\n                const codecToRemove = !this.isRedEnabled ? \"red\" : undefined;\n                return getPreferredCodecs(\"audio\", preferredCodec ?? defaultAudioCodec, codecToRemove);\n            }\n        };\n        this.onIceCandidate = async (e)=>{\n            const { candidate } = e;\n            if (!candidate) {\n                logger$3(\"debug\", \"null ice candidate\");\n                return;\n            }\n            await this.sfuClient.iceTrickle({\n                iceCandidate: getIceCandidate(candidate),\n                peerType: PeerType.PUBLISHER_UNSPECIFIED\n            });\n        };\n        /**\n         * Sets the SFU client to use.\n         *\n         * @param sfuClient the SFU client to use.\n         */ this.setSfuClient = (sfuClient)=>{\n            this.sfuClient = sfuClient;\n        };\n        /**\n         * Performs a migration of this publisher instance to a new SFU.\n         *\n         * Initiates a new `iceRestart` offer/answer exchange with the new SFU.\n         *\n         * @param sfuClient the new SFU client to migrate to.\n         * @param connectionConfig the new connection configuration to use.\n         */ this.migrateTo = async (sfuClient, connectionConfig)=>{\n            this.sfuClient = sfuClient;\n            this.pc.setConfiguration(connectionConfig);\n            this._connectionConfiguration = connectionConfig;\n            const shouldRestartIce = this.pc.iceConnectionState === \"connected\";\n            if (shouldRestartIce) {\n                // negotiate only if there are tracks to publish\n                await this.negotiate({\n                    iceRestart: true\n                });\n            }\n        };\n        /**\n         * Restarts the ICE connection and renegotiates with the SFU.\n         */ this.restartIce = async ()=>{\n            logger$3(\"debug\", \"Restarting ICE connection\");\n            const signalingState = this.pc.signalingState;\n            if (this.isIceRestarting || signalingState === \"have-local-offer\") {\n                logger$3(\"debug\", \"ICE restart is already in progress\");\n                return;\n            }\n            await this.negotiate({\n                iceRestart: true\n            });\n        };\n        this.onNegotiationNeeded = async ()=>{\n            await this.negotiate();\n        };\n        /**\n         * Initiates a new offer/answer exchange with the currently connected SFU.\n         *\n         * @param options the optional offer options to use.\n         */ this.negotiate = async (options)=>{\n            this.isIceRestarting = options?.iceRestart ?? false;\n            const offer = await this.pc.createOffer(options);\n            let sdp = this.mungeCodecs(offer.sdp);\n            if (sdp && this.isPublishing(TrackType.SCREEN_SHARE_AUDIO)) {\n                const transceiver = this.transceiverRegistry[TrackType.SCREEN_SHARE_AUDIO];\n                if (transceiver && transceiver.sender.track) {\n                    const mid = transceiver.mid ?? this.extractMid(sdp, transceiver.sender.track, TrackType.SCREEN_SHARE_AUDIO);\n                    sdp = enableHighQualityAudio(sdp, mid);\n                }\n            }\n            // set the munged SDP back to the offer\n            offer.sdp = sdp;\n            const trackInfos = this.getCurrentTrackInfos(offer.sdp);\n            if (trackInfos.length === 0) {\n                throw new Error(`Can't initiate negotiation without announcing any tracks`);\n            }\n            await this.pc.setLocalDescription(offer);\n            const { response } = await this.sfuClient.setPublisher({\n                sdp: offer.sdp || \"\",\n                tracks: trackInfos\n            });\n            try {\n                await this.pc.setRemoteDescription({\n                    type: \"answer\",\n                    sdp: response.sdp\n                });\n            } catch (e) {\n                logger$3(\"error\", `setRemoteDescription error`, {\n                    sdp: response.sdp,\n                    error: e\n                });\n            }\n            this.isIceRestarting = false;\n            this.sfuClient.iceTrickleBuffer.publisherCandidates.subscribe(async (candidate)=>{\n                try {\n                    const iceCandidate = JSON.parse(candidate.iceCandidate);\n                    await this.pc.addIceCandidate(iceCandidate);\n                } catch (e) {\n                    logger$3(\"warn\", `ICE candidate error`, [\n                        e,\n                        candidate\n                    ]);\n                }\n            });\n        };\n        this.mungeCodecs = (sdp)=>{\n            if (sdp) {\n                sdp = toggleDtx(sdp, this.isDtxEnabled);\n            }\n            return sdp;\n        };\n        this.extractMid = (sdp, track, trackType)=>{\n            if (!sdp) {\n                logger$3(\"warn\", \"No SDP found. Returning empty mid\");\n                return \"\";\n            }\n            logger$3(\"debug\", `No 'mid' found for track. Trying to find it from the Offer SDP`);\n            const parsedSdp = sdp_transform__WEBPACK_IMPORTED_MODULE_2__.parse(sdp);\n            const media = parsedSdp.media.find((m)=>{\n                return m.type === track.kind && // if `msid` is not present, we assume that the track is the first one\n                (m.msid?.includes(track.id) ?? true);\n            });\n            if (typeof media?.mid === \"undefined\") {\n                logger$3(\"debug\", `No mid found in SDP for track type ${track.kind} and id ${track.id}. Attempting to find a heuristic mid`);\n                const heuristicMid = this.transceiverInitOrder.indexOf(trackType);\n                if (heuristicMid !== -1) {\n                    return String(heuristicMid);\n                }\n                logger$3(\"debug\", \"No heuristic mid found. Returning empty mid\");\n                return \"\";\n            }\n            return String(media.mid);\n        };\n        this.getCurrentTrackInfos = (sdp)=>{\n            sdp = sdp || this.pc.localDescription?.sdp;\n            const { settings } = this.state;\n            const targetResolution = settings?.video.target_resolution;\n            return this.pc.getTransceivers().filter((t)=>t.direction === \"sendonly\" && t.sender.track).map((transceiver)=>{\n                const trackType = Number(Object.keys(this.transceiverRegistry).find((key)=>this.transceiverRegistry[key] === transceiver));\n                const track = transceiver.sender.track;\n                let optimalLayers;\n                if (track.readyState === \"live\") {\n                    const publishOpts = this.publishOptionsPerTrackType.get(trackType);\n                    optimalLayers = trackType === TrackType.VIDEO ? findOptimalVideoLayers(track, targetResolution) : trackType === TrackType.SCREEN_SHARE ? findOptimalScreenSharingLayers(track, publishOpts?.screenShareSettings) : [];\n                    this.trackLayersCache[trackType] = optimalLayers;\n                } else {\n                    // we report the last known optimal layers for ended tracks\n                    optimalLayers = this.trackLayersCache[trackType] || [];\n                    logger$3(\"debug\", `Track ${TrackType[trackType]} is ended. Announcing last known optimal layers`, optimalLayers);\n                }\n                const layers = optimalLayers.map((optimalLayer)=>({\n                        rid: optimalLayer.rid || \"\",\n                        bitrate: optimalLayer.maxBitrate || 0,\n                        fps: optimalLayer.maxFramerate || 0,\n                        quality: this.ridToVideoQuality(optimalLayer.rid || \"\"),\n                        videoDimension: {\n                            width: optimalLayer.width,\n                            height: optimalLayer.height\n                        }\n                    }));\n                const isAudioTrack = [\n                    TrackType.AUDIO,\n                    TrackType.SCREEN_SHARE_AUDIO\n                ].includes(trackType);\n                const trackSettings = track.getSettings();\n                const isStereo = isAudioTrack && trackSettings.channelCount === 2;\n                return {\n                    trackId: track.id,\n                    layers: layers,\n                    trackType,\n                    mid: transceiver.mid ?? this.extractMid(sdp, track, trackType),\n                    stereo: isStereo,\n                    dtx: isAudioTrack && this.isDtxEnabled,\n                    red: isAudioTrack && this.isRedEnabled\n                };\n            });\n        };\n        this.onIceCandidateError = (e)=>{\n            const errorMessage = e instanceof RTCPeerConnectionIceErrorEvent && `${e.errorCode}: ${e.errorText}`;\n            const iceState = this.pc.iceConnectionState;\n            const logLevel = iceState === \"connected\" || iceState === \"checking\" ? \"debug\" : \"warn\";\n            logger$3(logLevel, `ICE Candidate error`, errorMessage);\n        };\n        this.onIceConnectionStateChange = ()=>{\n            const state = this.pc.iceConnectionState;\n            logger$3(\"debug\", `ICE Connection state changed to`, state);\n            const hasNetworkConnection = this.state.callingState !== CallingState.OFFLINE;\n            if (state === \"failed\") {\n                logger$3(\"warn\", `Attempting to restart ICE`);\n                this.restartIce().catch((e)=>{\n                    logger$3(\"error\", `ICE restart error`, e);\n                });\n            } else if (state === \"disconnected\" && hasNetworkConnection) {\n                // when in `disconnected` state, the browser may recover automatically,\n                // hence, we delay the ICE restart\n                logger$3(\"warn\", `Scheduling ICE restart in ${this.iceRestartDelay} ms.`);\n                this.iceRestartTimeout = setTimeout(()=>{\n                    // check if the state is still `disconnected` or `failed`\n                    // as the connection may have recovered (or failed) in the meantime\n                    if (this.pc.iceConnectionState === \"disconnected\" || this.pc.iceConnectionState === \"failed\") {\n                        this.restartIce().catch((e)=>{\n                            logger$3(\"error\", `ICE restart error`, e);\n                        });\n                    } else {\n                        logger$3(\"debug\", `Scheduled ICE restart: connection recovered, canceled.`);\n                    }\n                }, this.iceRestartDelay);\n            }\n        };\n        this.onIceGatheringStateChange = ()=>{\n            logger$3(\"debug\", `ICE Gathering State`, this.pc.iceGatheringState);\n        };\n        this.onSignalingStateChange = ()=>{\n            logger$3(\"debug\", `Signaling state changed`, this.pc.signalingState);\n        };\n        this.ridToVideoQuality = (rid)=>{\n            return rid === \"q\" ? VideoQuality.LOW_UNSPECIFIED : rid === \"h\" ? VideoQuality.MID : VideoQuality.HIGH; // default to HIGH\n        };\n        this.pc = this.createPeerConnection(connectionConfig);\n        this.sfuClient = sfuClient;\n        this.state = state;\n        this.isDtxEnabled = isDtxEnabled;\n        this.isRedEnabled = isRedEnabled;\n        this.iceRestartDelay = iceRestartDelay;\n        this.unsubscribeOnIceRestart = dispatcher.on(\"iceRestart\", async (iceRestart)=>{\n            if (iceRestart.peerType !== PeerType.PUBLISHER_UNSPECIFIED) return;\n            await this.restartIce();\n        });\n    }\n}\nconst logger$2 = getLogger([\n    \"Subscriber\"\n]);\n/**\n * A wrapper around the `RTCPeerConnection` that handles the incoming\n * media streams from the SFU.\n */ class Subscriber {\n    /**\n     * Returns the current connection configuration.\n     *\n     * @internal\n     */ get connectionConfiguration() {\n        if (this.pc.getConfiguration) return this.pc.getConfiguration();\n        return this._connectionConfiguration;\n    }\n    /**\n     * Constructs a new `Subscriber` instance.\n     *\n     * @param sfuClient the SFU client to use.\n     * @param dispatcher the dispatcher to use.\n     * @param state the state of the call.\n     * @param connectionConfig the connection configuration to use.\n     * @param iceRestartDelay the delay in milliseconds to wait before restarting ICE when connection goes to `disconnected` state.\n     */ constructor({ sfuClient, dispatcher, state, connectionConfig, iceRestartDelay = 2500 }){\n        this.isIceRestarting = false;\n        /**\n         * Creates a new `RTCPeerConnection` instance with the given configuration.\n         *\n         * @param connectionConfig the connection configuration to use.\n         */ this.createPeerConnection = (connectionConfig)=>{\n            const pc = new RTCPeerConnection(connectionConfig);\n            this._connectionConfiguration = connectionConfig;\n            pc.addEventListener(\"icecandidate\", this.onIceCandidate);\n            pc.addEventListener(\"track\", this.handleOnTrack);\n            pc.addEventListener(\"icecandidateerror\", this.onIceCandidateError);\n            pc.addEventListener(\"iceconnectionstatechange\", this.onIceConnectionStateChange);\n            pc.addEventListener(\"icegatheringstatechange\", this.onIceGatheringStateChange);\n            return pc;\n        };\n        /**\n         * Closes the `RTCPeerConnection` and unsubscribes from the dispatcher.\n         */ this.close = ()=>{\n            clearTimeout(this.iceRestartTimeout);\n            this.unregisterOnSubscriberOffer();\n            this.unregisterOnIceRestart();\n            this.pc.close();\n        };\n        /**\n         * Returns the result of the `RTCPeerConnection.getStats()` method\n         * @param selector\n         * @returns\n         */ this.getStats = (selector)=>{\n            return this.pc.getStats(selector);\n        };\n        /**\n         * Sets the SFU client to use.\n         *\n         * @param sfuClient the SFU client to use.\n         */ this.setSfuClient = (sfuClient)=>{\n            this.sfuClient = sfuClient;\n        };\n        /**\n         * Migrates the subscriber to a new SFU client.\n         *\n         * @param sfuClient the new SFU client to migrate to.\n         * @param connectionConfig the new connection configuration to use.\n         */ this.migrateTo = (sfuClient, connectionConfig)=>{\n            this.setSfuClient(sfuClient);\n            // when migrating, we want to keep the previous subscriber open\n            // until the new one is connected\n            const previousPC = this.pc;\n            // we keep a record of previously available video tracks\n            // so that we can monitor when they become available on the new\n            // subscriber and close the previous one.\n            const trackIdsToMigrate = new Set();\n            previousPC.getReceivers().forEach((r)=>{\n                if (r.track.kind === \"video\") {\n                    trackIdsToMigrate.add(r.track.id);\n                }\n            });\n            // set up a new subscriber peer connection, configured to connect\n            // to the new SFU node\n            const pc = this.createPeerConnection(connectionConfig);\n            let migrationTimeoutId;\n            const cleanupMigration = ()=>{\n                previousPC.close();\n                clearTimeout(migrationTimeoutId);\n            };\n            // When migrating, we want to keep track of the video tracks\n            // that are migrating to the new subscriber.\n            // Once all of them are available, we can close the previous subscriber.\n            const handleTrackMigration = (e)=>{\n                logger$2(\"debug\", `[Migration]: Migrated track: ${e.track.id}, ${e.track.kind}`);\n                trackIdsToMigrate.delete(e.track.id);\n                if (trackIdsToMigrate.size === 0) {\n                    logger$2(\"debug\", `[Migration]: Migration complete`);\n                    pc.removeEventListener(\"track\", handleTrackMigration);\n                    cleanupMigration();\n                }\n            };\n            // When migrating, we want to keep track of the connection state\n            // of the new subscriber.\n            // Once it is connected, we give it a 2-second grace period to receive\n            // all the video tracks that are migrating from the previous subscriber.\n            // After this threshold, we abruptly close the previous subscriber.\n            const handleConnectionStateChange = ()=>{\n                if (pc.connectionState === \"connected\") {\n                    migrationTimeoutId = setTimeout(()=>{\n                        pc.removeEventListener(\"track\", handleTrackMigration);\n                        cleanupMigration();\n                    }, 2000);\n                    pc.removeEventListener(\"connectionstatechange\", handleConnectionStateChange);\n                }\n            };\n            pc.addEventListener(\"track\", handleTrackMigration);\n            pc.addEventListener(\"connectionstatechange\", handleConnectionStateChange);\n            // replace the PeerConnection instance\n            this.pc = pc;\n        };\n        /**\n         * Restarts the ICE connection and renegotiates with the SFU.\n         */ this.restartIce = async ()=>{\n            logger$2(\"debug\", \"Restarting ICE connection\");\n            if (this.pc.signalingState === \"have-remote-offer\") {\n                logger$2(\"debug\", \"ICE restart is already in progress\");\n                return;\n            }\n            const previousIsIceRestarting = this.isIceRestarting;\n            try {\n                this.isIceRestarting = true;\n                await this.sfuClient.iceRestart({\n                    peerType: PeerType.SUBSCRIBER\n                });\n            } catch (e) {\n                // restore the previous state, as our intent for restarting ICE failed\n                this.isIceRestarting = previousIsIceRestarting;\n                throw e;\n            }\n        };\n        this.handleOnTrack = (e)=>{\n            const [primaryStream] = e.streams;\n            // example: `e3f6aaf8-b03d-4911-be36-83f47d37a76a:TRACK_TYPE_VIDEO`\n            const [trackId, trackType] = primaryStream.id.split(\":\");\n            const participantToUpdate = this.state.participants.find((p)=>p.trackLookupPrefix === trackId);\n            logger$2(\"debug\", `[onTrack]: Got remote ${trackType} track for userId: ${participantToUpdate?.userId}`, e.track.id, e.track);\n            if (!participantToUpdate) {\n                logger$2(\"error\", `[onTrack]: Received track for unknown participant: ${trackId}`, e);\n                return;\n            }\n            e.track.addEventListener(\"mute\", ()=>{\n                logger$2(\"info\", `[onTrack]: Track muted: ${participantToUpdate.userId} ${trackType}:${trackId}`);\n            });\n            e.track.addEventListener(\"unmute\", ()=>{\n                logger$2(\"info\", `[onTrack]: Track unmuted: ${participantToUpdate.userId} ${trackType}:${trackId}`);\n            });\n            e.track.addEventListener(\"ended\", ()=>{\n                logger$2(\"info\", `[onTrack]: Track ended: ${participantToUpdate.userId} ${trackType}:${trackId}`);\n            });\n            const streamKindProp = {\n                TRACK_TYPE_AUDIO: \"audioStream\",\n                TRACK_TYPE_VIDEO: \"videoStream\",\n                TRACK_TYPE_SCREEN_SHARE: \"screenShareStream\",\n                TRACK_TYPE_SCREEN_SHARE_AUDIO: \"screenShareAudioStream\"\n            }[trackType];\n            if (!streamKindProp) {\n                logger$2(\"error\", `Unknown track type: ${trackType}`);\n                return;\n            }\n            const previousStream = participantToUpdate[streamKindProp];\n            if (previousStream) {\n                logger$2(\"info\", `[onTrack]: Cleaning up previous remote ${e.track.kind} tracks for userId: ${participantToUpdate.userId}`);\n                previousStream.getTracks().forEach((t)=>{\n                    t.stop();\n                    previousStream.removeTrack(t);\n                });\n            }\n            this.state.updateParticipant(participantToUpdate.sessionId, {\n                [streamKindProp]: primaryStream\n            });\n        };\n        this.onIceCandidate = async (e)=>{\n            const { candidate } = e;\n            if (!candidate) {\n                logger$2(\"debug\", \"null ice candidate\");\n                return;\n            }\n            await this.sfuClient.iceTrickle({\n                iceCandidate: getIceCandidate(candidate),\n                peerType: PeerType.SUBSCRIBER\n            });\n        };\n        this.negotiate = async (subscriberOffer)=>{\n            logger$2(\"info\", `Received subscriberOffer`, subscriberOffer);\n            await this.pc.setRemoteDescription({\n                type: \"offer\",\n                sdp: subscriberOffer.sdp\n            });\n            this.sfuClient.iceTrickleBuffer.subscriberCandidates.subscribe(async (candidate)=>{\n                try {\n                    const iceCandidate = JSON.parse(candidate.iceCandidate);\n                    await this.pc.addIceCandidate(iceCandidate);\n                } catch (e) {\n                    logger$2(\"warn\", `ICE candidate error`, [\n                        e,\n                        candidate\n                    ]);\n                }\n            });\n            const answer = await this.pc.createAnswer();\n            await this.pc.setLocalDescription(answer);\n            await this.sfuClient.sendAnswer({\n                peerType: PeerType.SUBSCRIBER,\n                sdp: answer.sdp || \"\"\n            });\n            this.isIceRestarting = false;\n        };\n        this.onIceConnectionStateChange = ()=>{\n            const state = this.pc.iceConnectionState;\n            logger$2(\"debug\", `ICE connection state changed`, state);\n            // do nothing when ICE is restarting\n            if (this.isIceRestarting) return;\n            const hasNetworkConnection = this.state.callingState !== CallingState.OFFLINE;\n            if (state === \"failed\") {\n                logger$2(\"warn\", `Attempting to restart ICE`);\n                this.restartIce().catch((e)=>{\n                    logger$2(\"error\", `ICE restart failed`, e);\n                });\n            } else if (state === \"disconnected\" && hasNetworkConnection) {\n                // when in `disconnected` state, the browser may recover automatically,\n                // hence, we delay the ICE restart\n                logger$2(\"warn\", `Scheduling ICE restart in ${this.iceRestartDelay} ms.`);\n                this.iceRestartTimeout = setTimeout(()=>{\n                    // check if the state is still `disconnected` or `failed`\n                    // as the connection may have recovered (or failed) in the meantime\n                    if (this.pc.iceConnectionState === \"disconnected\" || this.pc.iceConnectionState === \"failed\") {\n                        this.restartIce().catch((e)=>{\n                            logger$2(\"error\", `ICE restart failed`, e);\n                        });\n                    } else {\n                        logger$2(\"debug\", `Scheduled ICE restart: connection recovered, canceled.`);\n                    }\n                }, 5000);\n            }\n        };\n        this.onIceGatheringStateChange = ()=>{\n            logger$2(\"debug\", `ICE gathering state changed`, this.pc.iceGatheringState);\n        };\n        this.onIceCandidateError = (e)=>{\n            const errorMessage = e instanceof RTCPeerConnectionIceErrorEvent && `${e.errorCode}: ${e.errorText}`;\n            const iceState = this.pc.iceConnectionState;\n            const logLevel = iceState === \"connected\" || iceState === \"checking\" ? \"debug\" : \"warn\";\n            logger$2(logLevel, `ICE Candidate error`, errorMessage);\n        };\n        this.sfuClient = sfuClient;\n        this.state = state;\n        this.iceRestartDelay = iceRestartDelay;\n        this.pc = this.createPeerConnection(connectionConfig);\n        this.unregisterOnSubscriberOffer = dispatcher.on(\"subscriberOffer\", async (subscriberOffer)=>{\n            await this.negotiate(subscriberOffer);\n        });\n        this.unregisterOnIceRestart = dispatcher.on(\"iceRestart\", async (iceRestart)=>{\n            if (iceRestart.peerType !== PeerType.SUBSCRIBER) return;\n            await this.restartIce();\n        });\n    }\n}\nconst createWebSocketSignalChannel = (opts)=>{\n    const logger = getLogger([\n        \"sfu-client\"\n    ]);\n    const { endpoint, onMessage } = opts;\n    const ws = new (isomorphic_ws__WEBPACK_IMPORTED_MODULE_4___default())(endpoint);\n    ws.binaryType = \"arraybuffer\"; // do we need this?\n    ws.addEventListener(\"error\", (e)=>{\n        logger(\"error\", \"Signaling WS channel error\", e);\n    });\n    ws.addEventListener(\"close\", (e)=>{\n        logger(\"info\", \"Signaling WS channel is closed\", e);\n    });\n    ws.addEventListener(\"open\", (e)=>{\n        logger(\"info\", \"Signaling WS channel is open\", e);\n    });\n    ws.addEventListener(\"message\", (e)=>{\n        try {\n            const message = e.data instanceof ArrayBuffer ? SfuEvent.fromBinary(new Uint8Array(e.data)) : SfuEvent.fromJsonString(e.data.toString());\n            onMessage(message);\n        } catch (err) {\n            logger(\"error\", \"Failed to decode a message. Check whether the Proto models match.\", {\n                event: e,\n                error: err\n            });\n        }\n    });\n    return ws;\n};\nconst sleep = (m)=>new Promise((r)=>setTimeout(r, m));\nfunction isFunction(value) {\n    return value && (Object.prototype.toString.call(value) === \"[object Function]\" || \"function\" === typeof value || value instanceof Function);\n}\n/**\n * A map of known error codes.\n */ const KnownCodes = {\n    TOKEN_EXPIRED: 40,\n    WS_CLOSED_SUCCESS: 1000,\n    WS_CLOSED_ABRUPTLY: 1006,\n    WS_POLICY_VIOLATION: 1008\n};\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */ function retryInterval(numberOfFailures) {\n    // try to reconnect in 0.25-5 seconds (random to spread out the load from failures)\n    const max = Math.min(500 + numberOfFailures * 2000, 5000);\n    const min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 5000);\n    return Math.floor(Math.random() * (max - min) + min);\n}\nfunction randomId() {\n    return generateUUIDv4();\n}\nfunction hex(bytes) {\n    let s = \"\";\n    for(let i = 0; i < bytes.length; i++){\n        s += bytes[i].toString(16).padStart(2, \"0\");\n    }\n    return s;\n}\n// https://tools.ietf.org/html/rfc4122\nfunction generateUUIDv4() {\n    const bytes = getRandomBytes(16);\n    bytes[6] = bytes[6] & 0x0f | 0x40; // version\n    bytes[8] = bytes[8] & 0xbf | 0x80; // variant\n    return hex(bytes.subarray(0, 4)) + \"-\" + hex(bytes.subarray(4, 6)) + \"-\" + hex(bytes.subarray(6, 8)) + \"-\" + hex(bytes.subarray(8, 10)) + \"-\" + hex(bytes.subarray(10, 16));\n}\nfunction getRandomValuesWithMathRandom(bytes) {\n    const max = Math.pow(2, 8 * bytes.byteLength / bytes.length);\n    for(let i = 0; i < bytes.length; i++){\n        bytes[i] = Math.random() * max;\n    }\n}\nconst getRandomValues = (()=>{\n    if (typeof crypto !== \"undefined\" && typeof crypto?.getRandomValues !== \"undefined\") {\n        return crypto.getRandomValues.bind(crypto);\n    } else if (typeof msCrypto !== \"undefined\") {\n        return msCrypto.getRandomValues.bind(msCrypto);\n    } else {\n        return getRandomValuesWithMathRandom;\n    }\n})();\nfunction getRandomBytes(length) {\n    const bytes = new Uint8Array(length);\n    getRandomValues(bytes);\n    return bytes;\n}\nfunction convertErrorToJson(err) {\n    const jsonObj = {};\n    if (!err) return jsonObj;\n    try {\n        Object.getOwnPropertyNames(err).forEach((key)=>{\n            jsonObj[key] = Object.getOwnPropertyDescriptor(err, key);\n        });\n    } catch (_) {\n        return {\n            error: \"failed to serialize the error\"\n        };\n    }\n    return jsonObj;\n}\n/**\n * isOnline safely return the navigator.online value for browser env\n * if navigator is not in global object, it always return true\n */ function isOnline(logger) {\n    const nav = typeof navigator !== \"undefined\" ? navigator :  false ? 0 : undefined;\n    if (!nav) {\n        logger(\"warn\", \"isOnline failed to access window.navigator and assume browser is online\");\n        return true;\n    }\n    // RN navigator has undefined for onLine\n    if (typeof nav.onLine !== \"boolean\") {\n        return true;\n    }\n    return nav.onLine;\n}\n/**\n * listenForConnectionChanges - Adds an event listener fired on browser going online or offline\n */ function addConnectionEventListeners(cb) {\n    if (false) {}\n}\nfunction removeConnectionEventListeners(cb) {\n    if (false) {}\n}\n/**\n * The client used for exchanging information with the SFU.\n */ class StreamSfuClient {\n    /**\n     * Constructs a new SFU client.\n     *\n     * @param dispatcher the event dispatcher to use.\n     * @param sfuServer the SFU server to connect to.\n     * @param token the JWT token to use for authentication.\n     * @param sessionId the `sessionId` of the currently connected participant.\n     */ constructor({ dispatcher, sfuServer, token, sessionId }){\n        /**\n         * A buffer for ICE Candidates that are received before\n         * the PeerConnections are ready to handle them.\n         */ this.iceTrickleBuffer = new IceTrickleBuffer();\n        /**\n         * A flag indicating whether the client is currently migrating away\n         * from this SFU.\n         */ this.isMigratingAway = false;\n        /**\n         * A flag indicating that the client connection is broken for the current\n         * client and that a fast-reconnect with a new client should be attempted.\n         */ this.isFastReconnecting = false;\n        this.pingIntervalInMs = 10 * 1000;\n        this.unhealthyTimeoutInMs = this.pingIntervalInMs + 5 * 1000;\n        this.close = (code, reason)=>{\n            this.logger(\"debug\", `Closing SFU WS connection: ${code} - ${reason}`);\n            if (this.signalWs.readyState !== this.signalWs.CLOSED) {\n                this.signalWs.close(code, `js-client: ${reason}`);\n            }\n            this.unsubscribeIceTrickle();\n            clearInterval(this.keepAliveInterval);\n            clearTimeout(this.connectionCheckTimeout);\n        };\n        this.updateSubscriptions = async (subscriptions)=>{\n            return retryable(()=>this.rpc.updateSubscriptions({\n                    sessionId: this.sessionId,\n                    tracks: subscriptions\n                }), this.logger);\n        };\n        this.setPublisher = async (data)=>{\n            return retryable(()=>this.rpc.setPublisher({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.sendAnswer = async (data)=>{\n            return retryable(()=>this.rpc.sendAnswer({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.iceTrickle = async (data)=>{\n            return retryable(()=>this.rpc.iceTrickle({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.iceRestart = async (data)=>{\n            return retryable(()=>this.rpc.iceRestart({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.updateMuteState = async (trackType, muted)=>{\n            return this.updateMuteStates({\n                muteStates: [\n                    {\n                        trackType,\n                        muted\n                    }\n                ]\n            });\n        };\n        this.updateMuteStates = async (data)=>{\n            return retryable(()=>this.rpc.updateMuteStates({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.sendStats = async (stats)=>{\n            return retryable(()=>this.rpc.sendStats({\n                    ...stats,\n                    sessionId: this.sessionId\n                }), this.logger);\n        };\n        this.join = async (data)=>{\n            const joinRequest = JoinRequest.create({\n                ...data,\n                sessionId: this.sessionId,\n                token: this.token\n            });\n            return this.send(SfuRequest.create({\n                requestPayload: {\n                    oneofKind: \"joinRequest\",\n                    joinRequest\n                }\n            }));\n        };\n        this.send = async (message)=>{\n            return this.signalReady.then((signal)=>{\n                if (signal.readyState !== signal.OPEN) return;\n                this.logger(\"debug\", `Sending message to: ${this.edgeName}`, SfuRequest.toJson(message));\n                signal.send(SfuRequest.toBinary(message));\n            });\n        };\n        this.keepAlive = ()=>{\n            clearInterval(this.keepAliveInterval);\n            this.keepAliveInterval = setInterval(()=>{\n                this.logger(\"trace\", \"Sending healthCheckRequest to SFU\");\n                const message = SfuRequest.create({\n                    requestPayload: {\n                        oneofKind: \"healthCheckRequest\",\n                        healthCheckRequest: {}\n                    }\n                });\n                this.send(message).catch((e)=>{\n                    this.logger(\"error\", \"Error sending healthCheckRequest to SFU\", e);\n                });\n            }, this.pingIntervalInMs);\n        };\n        this.scheduleConnectionCheck = ()=>{\n            clearTimeout(this.connectionCheckTimeout);\n            this.connectionCheckTimeout = setTimeout(()=>{\n                if (this.lastMessageTimestamp) {\n                    const timeSinceLastMessage = new Date().getTime() - this.lastMessageTimestamp.getTime();\n                    if (timeSinceLastMessage > this.unhealthyTimeoutInMs) {\n                        this.close(StreamSfuClient.ERROR_CONNECTION_UNHEALTHY, `SFU connection unhealthy. Didn't receive any message for ${this.unhealthyTimeoutInMs}ms`);\n                    }\n                }\n            }, this.unhealthyTimeoutInMs);\n        };\n        this.sessionId = sessionId || generateUUIDv4();\n        this.sfuServer = sfuServer;\n        this.edgeName = sfuServer.edge_name;\n        this.token = token;\n        this.logger = getLogger([\n            \"sfu-client\"\n        ]);\n        const logInterceptor = {\n            interceptUnary: (next, method, input, options)=>{\n                this.logger(\"trace\", `Calling SFU RPC method ${method.name}`, {\n                    input,\n                    options\n                });\n                return next(method, input, options);\n            }\n        };\n        this.rpc = createSignalClient({\n            baseUrl: sfuServer.url,\n            interceptors: [\n                withHeaders({\n                    Authorization: `Bearer ${token}`\n                }),\n                logInterceptor\n            ]\n        });\n        // Special handling for the ICETrickle kind of events.\n        // These events might be triggered by the SFU before the initial RTC\n        // connection is established. In that case, those events (ICE candidates)\n        // need to be buffered and later added to the appropriate PeerConnection\n        // once the remoteDescription is known and set.\n        this.unsubscribeIceTrickle = dispatcher.on(\"iceTrickle\", (iceTrickle)=>{\n            this.iceTrickleBuffer.push(iceTrickle);\n        });\n        this.signalWs = createWebSocketSignalChannel({\n            endpoint: sfuServer.ws_endpoint,\n            onMessage: (message)=>{\n                this.lastMessageTimestamp = new Date();\n                this.scheduleConnectionCheck();\n                dispatcher.dispatch(message);\n            }\n        });\n        this.signalReady = new Promise((resolve)=>{\n            const onOpen = ()=>{\n                this.signalWs.removeEventListener(\"open\", onOpen);\n                this.keepAlive();\n                resolve(this.signalWs);\n            };\n            this.signalWs.addEventListener(\"open\", onOpen);\n        });\n    }\n}\n/**\n * The normal closure code. Used for controlled shutdowns.\n */ StreamSfuClient.NORMAL_CLOSURE = 1000;\n/**\n * The error code used when the SFU connection is unhealthy.\n * Usually, this means that no message has been received from the SFU for\n * a certain amount of time (`connectionCheckTimeout`).\n */ StreamSfuClient.ERROR_CONNECTION_UNHEALTHY = 4001;\n/**\n * The error code used when the SFU connection is broken.\n * Usually, this means that the WS connection has been closed unexpectedly.\n * This error code is used to announce a fast-reconnect.\n */ StreamSfuClient.ERROR_CONNECTION_BROKEN = 4002; // used in fast-reconnects\nconst MAX_RETRIES = 5;\n/**\n * Creates a closure which wraps the given RPC call and retries invoking\n * the RPC until it succeeds or the maximum number of retries is reached.\n *\n * Between each retry, there would be a random delay in order to avoid\n * request bursts towards the SFU.\n *\n * @param rpc the closure around the RPC call to execute.\n * @param logger a logger instance to use.\n * @param <I> the type of the request object.\n * @param <O> the type of the response object.\n */ const retryable = async (rpc, logger)=>{\n    let retryAttempt = 0;\n    let rpcCallResult;\n    do {\n        // don't delay the first invocation\n        if (retryAttempt > 0) {\n            await sleep(retryInterval(retryAttempt));\n        }\n        rpcCallResult = await rpc();\n        logger(\"trace\", `SFU RPC response received for ${rpcCallResult.method.name}`, rpcCallResult);\n        // if the RPC call failed, log the error and retry\n        if (rpcCallResult.response.error) {\n            logger(\"error\", `SFU RPC Error (${rpcCallResult.method.name}):`, rpcCallResult.response.error);\n        }\n        retryAttempt++;\n    }while (rpcCallResult.response.error?.shouldRetry && retryAttempt < MAX_RETRIES);\n    if (rpcCallResult.response.error) {\n        throw rpcCallResult.response.error;\n    }\n    return rpcCallResult;\n};\n/**\n * Event handler that watched the delivery of `call.accepted`.\n * Once the event is received, the call is joined.\n */ const watchCallAccepted = (call)=>{\n    return async function onCallAccepted(event) {\n        // We want to discard the event if it's from the current user\n        if (event.user.id === call.currentUserId) return;\n        const { state } = call;\n        if (event.call.created_by.id === call.currentUserId && state.callingState === CallingState.RINGING) {\n            await call.join();\n        }\n    };\n};\n/**\n * Event handler that watches delivery of `call.rejected` Websocket event.\n * Once the event is received, the call is left.\n */ const watchCallRejected = (call)=>{\n    return async function onCallRejected(event) {\n        // We want to discard the event if it's from the current user\n        if (event.user.id === call.currentUserId) return;\n        const { call: eventCall } = event;\n        const { session: callSession } = eventCall;\n        if (!callSession) {\n            call.logger(\"warn\", \"No call session provided. Ignoring call.rejected event.\", event);\n            return;\n        }\n        const rejectedBy = callSession.rejected_by;\n        const { members, callingState } = call.state;\n        if (callingState !== CallingState.RINGING) {\n            call.logger(\"info\", \"Call is not in ringing mode (it is either accepted or rejected already). Ignoring call.rejected event.\", event);\n            return;\n        }\n        if (call.isCreatedByMe) {\n            const everyoneElseRejected = members.filter((m)=>m.user_id !== call.currentUserId).every((m)=>rejectedBy[m.user_id]);\n            if (everyoneElseRejected) {\n                call.logger(\"info\", \"everyone rejected, leaving the call\");\n                await call.leave({\n                    reason: \"ring: everyone rejected\"\n                });\n            }\n        } else {\n            if (rejectedBy[eventCall.created_by.id]) {\n                call.logger(\"info\", \"call creator rejected, leaving call\");\n                await call.leave({\n                    reason: \"ring: creator rejected\"\n                });\n            }\n        }\n    };\n};\n/**\n * Event handler that watches the delivery of `call.ended` Websocket event.\n */ const watchCallEnded = (call)=>{\n    return async function onCallEnded() {\n        const { callingState } = call.state;\n        if (callingState === CallingState.RINGING || callingState === CallingState.JOINED || callingState === CallingState.JOINING) {\n            await call.leave({\n                reason: \"call.ended event received\"\n            });\n        }\n    };\n};\n/**\n * Event handler that watches for `callGrantsUpdated` events.\n *\n * @param state the call state to update.\n */ const watchCallGrantsUpdated = (state)=>{\n    return function onCallGrantsUpdated(event) {\n        const { currentGrants } = event;\n        if (currentGrants) {\n            const { canPublishAudio, canPublishVideo, canScreenshare } = currentGrants;\n            const update = {\n                [OwnCapability.SEND_AUDIO]: canPublishAudio,\n                [OwnCapability.SEND_VIDEO]: canPublishVideo,\n                [OwnCapability.SCREENSHARE]: canScreenshare\n            };\n            const nextCapabilities = state.ownCapabilities.filter((capability)=>update[capability] !== false);\n            Object.entries(update).forEach(([capability, value])=>{\n                if (value && !nextCapabilities.includes(capability)) {\n                    nextCapabilities.push(capability);\n                }\n            });\n            state.setOwnCapabilities(nextCapabilities);\n        }\n    };\n};\nconst logger$1 = getLogger([\n    \"events\"\n]);\n/**\n * An event responder which handles the `changePublishQuality` event.\n */ const watchChangePublishQuality = (dispatcher, call)=>{\n    return dispatcher.on(\"changePublishQuality\", (e)=>{\n        const { videoSenders } = e;\n        videoSenders.forEach((videoSender)=>{\n            const { layers } = videoSender;\n            call.updatePublishQuality(layers.filter((l)=>l.active));\n        });\n    });\n};\nconst watchConnectionQualityChanged = (dispatcher, state)=>{\n    return dispatcher.on(\"connectionQualityChanged\", (e)=>{\n        const { connectionQualityUpdates } = e;\n        if (!connectionQualityUpdates) return;\n        state.updateParticipants(connectionQualityUpdates.reduce((patches, update)=>{\n            const { sessionId, connectionQuality } = update;\n            patches[sessionId] = {\n                connectionQuality\n            };\n            return patches;\n        }, {}));\n    });\n};\n/**\n * Updates the approximate number of participants in the call by peeking at the\n * health check events that our SFU sends.\n */ const watchParticipantCountChanged = (dispatcher, state)=>{\n    return dispatcher.on(\"healthCheckResponse\", (e)=>{\n        const { participantCount } = e;\n        if (participantCount) {\n            state.setParticipantCount(participantCount.total);\n            state.setAnonymousParticipantCount(participantCount.anonymous);\n        }\n    });\n};\nconst watchLiveEnded = (dispatcher, call)=>{\n    return dispatcher.on(\"error\", (e)=>{\n        if (e.error && e.error.code !== ErrorCode.LIVE_ENDED) return;\n        if (!call.permissionsContext.hasPermission(OwnCapability.JOIN_BACKSTAGE)) {\n            call.leave({\n                reason: \"live ended\"\n            }).catch((err)=>{\n                logger$1(\"error\", \"Failed to leave call after live ended\", err);\n            });\n        }\n    });\n};\n/**\n * Watches and logs the errors reported by the currently connected SFU.\n */ const watchSfuErrorReports = (dispatcher)=>{\n    return dispatcher.on(\"error\", (e)=>{\n        if (!e.error) return;\n        const { error } = e;\n        logger$1(\"error\", \"SFU reported error\", {\n            code: ErrorCode[error.code],\n            message: error.message,\n            shouldRetry: error.shouldRetry\n        });\n    });\n};\n/**\n * Watches for `pinsUpdated` events and updates the pinned state of participants\n * in the call.\n */ const watchPinsUpdated = (state)=>{\n    return function onPinsUpdated(e) {\n        const { pins } = e;\n        state.setServerSidePins(pins);\n    };\n};\n/**\n * An event handler that handles soft mutes.\n *\n * @param call the call.\n */ const handleRemoteSoftMute = (call)=>{\n    return call.on(\"trackUnpublished\", async (event)=>{\n        const { cause, type, sessionId } = event;\n        const { localParticipant } = call.state;\n        if (cause === TrackUnpublishReason.MODERATION && sessionId === localParticipant?.sessionId) {\n            const logger = call.logger;\n            logger(\"info\", `Local participant's ${TrackType[type]} track is muted remotely`);\n            try {\n                if (type === TrackType.VIDEO) {\n                    await call.camera.disable();\n                } else if (type === TrackType.AUDIO) {\n                    await call.microphone.disable();\n                } else {\n                    logger(\"warn\", \"Unsupported track type to soft mute\", TrackType[type]);\n                }\n                if (call.publisher?.isPublishing(type)) {\n                    await call.stopPublish(type);\n                }\n            } catch (error) {\n                logger(\"error\", \"Failed to stop publishing\", error);\n            }\n        }\n    });\n};\n/**\n * An event responder which handles the `participantJoined` event.\n */ const watchParticipantJoined = (state)=>{\n    return function onParticipantJoined(e) {\n        const { participant } = e;\n        if (!participant) return;\n        // `state.updateOrAddParticipant` acts as a safeguard against\n        // potential duplicate events from the SFU.\n        //\n        // Although the SFU should not send duplicate events, we have seen\n        // some race conditions in the past during the `join-flow` where\n        // the SFU would send participant info as part of the `join`\n        // response and then follow up with a `participantJoined` event for\n        // already announced participants.\n        state.updateOrAddParticipant(participant.sessionId, Object.assign(participant, {\n            viewportVisibilityState: {\n                videoTrack: VisibilityState.UNKNOWN,\n                screenShareTrack: VisibilityState.UNKNOWN\n            }\n        }));\n    };\n};\n/**\n * An event responder which handles the `participantLeft` event.\n */ const watchParticipantLeft = (state)=>{\n    return function onParticipantLeft(e) {\n        const { participant } = e;\n        if (!participant) return;\n        state.setParticipants((participants)=>participants.filter((p)=>p.sessionId !== participant.sessionId));\n    };\n};\n/**\n * An event responder which handles the `trackPublished` event.\n * The SFU will send this event when a participant publishes a track.\n */ const watchTrackPublished = (state)=>{\n    return function onTrackPublished(e) {\n        const { type, sessionId, participant } = e;\n        // An optimization for large calls.\n        // After a certain threshold, the SFU would stop emitting `participantJoined`\n        // events, and instead, it would only provide the participant's information\n        // once they start publishing a track.\n        if (participant) {\n            state.updateOrAddParticipant(sessionId, participant);\n        } else {\n            state.updateParticipant(sessionId, (p)=>({\n                    publishedTracks: [\n                        ...p.publishedTracks,\n                        type\n                    ].filter(unique)\n                }));\n        }\n    };\n};\n/**\n * An event responder which handles the `trackUnpublished` event.\n * The SFU will send this event when a participant unpublishes a track.\n */ const watchTrackUnpublished = (state)=>{\n    return function onTrackUnpublished(e) {\n        const { type, sessionId, participant } = e;\n        // An optimization for large calls. See `watchTrackPublished`.\n        if (participant) {\n            state.updateOrAddParticipant(sessionId, participant);\n        } else {\n            state.updateParticipant(sessionId, (p)=>({\n                    publishedTracks: p.publishedTracks.filter((t)=>t !== type)\n                }));\n        }\n    };\n};\nconst unique = (v, i, arr)=>arr.indexOf(v) === i;\n/**\n * Watches for `dominantSpeakerChanged` events.\n */ const watchDominantSpeakerChanged = (dispatcher, state)=>{\n    return dispatcher.on(\"dominantSpeakerChanged\", (e)=>{\n        const { sessionId } = e;\n        if (sessionId === state.dominantSpeaker?.sessionId) return;\n        state.setParticipants((participants)=>participants.map((participant)=>{\n                // mark the new dominant speaker\n                if (participant.sessionId === sessionId) {\n                    return {\n                        ...participant,\n                        isDominantSpeaker: true\n                    };\n                }\n                // unmark the old dominant speaker\n                if (participant.isDominantSpeaker) {\n                    return {\n                        ...participant,\n                        isDominantSpeaker: false\n                    };\n                }\n                return participant; // no change\n            }));\n    });\n};\n/**\n * Watches for `audioLevelChanged` events.\n */ const watchAudioLevelChanged = (dispatcher, state)=>{\n    return dispatcher.on(\"audioLevelChanged\", (e)=>{\n        const { audioLevels } = e;\n        state.updateParticipants(audioLevels.reduce((patches, current)=>{\n            patches[current.sessionId] = {\n                audioLevel: current.level,\n                isSpeaking: current.isSpeaking\n            };\n            return patches;\n        }, {}));\n    });\n};\n/**\n * Registers the default event handlers for a call during its lifecycle.\n *\n * @param call the call to register event handlers for.\n * @param state the call state.\n * @param dispatcher the dispatcher.\n */ const registerEventHandlers = (call, state, dispatcher)=>{\n    const eventHandlers = [\n        call.on(\"call.ended\", watchCallEnded(call)),\n        watchLiveEnded(dispatcher, call),\n        watchSfuErrorReports(dispatcher),\n        watchChangePublishQuality(dispatcher, call),\n        watchConnectionQualityChanged(dispatcher, state),\n        watchParticipantCountChanged(dispatcher, state),\n        call.on(\"participantJoined\", watchParticipantJoined(state)),\n        call.on(\"participantLeft\", watchParticipantLeft(state)),\n        call.on(\"trackPublished\", watchTrackPublished(state)),\n        call.on(\"trackUnpublished\", watchTrackUnpublished(state)),\n        watchAudioLevelChanged(dispatcher, state),\n        watchDominantSpeakerChanged(dispatcher, state),\n        call.on(\"callGrantsUpdated\", watchCallGrantsUpdated(state)),\n        call.on(\"pinsUpdated\", watchPinsUpdated(state)),\n        handleRemoteSoftMute(call)\n    ];\n    if (call.ringing) {\n        // these events are only relevant when the call is ringing\n        eventHandlers.push(registerRingingCallEventHandlers(call));\n    }\n    return ()=>{\n        eventHandlers.forEach((unsubscribe)=>unsubscribe());\n    };\n};\n/**\n * Registers event handlers for a call that is of ringing type.\n *\n * @param call the call to register event handlers for.\n */ const registerRingingCallEventHandlers = (call)=>{\n    const coordinatorRingEvents = {\n        \"call.accepted\": watchCallAccepted(call),\n        \"call.rejected\": watchCallRejected(call)\n    };\n    const eventHandlers = Object.keys(coordinatorRingEvents).map((event)=>{\n        const eventName = event;\n        return call.on(eventName, coordinatorRingEvents[eventName]);\n    });\n    return ()=>{\n        eventHandlers.forEach((unsubscribe)=>unsubscribe());\n    };\n};\n/**\n * Collects all necessary information to join a call, talks to the coordinator\n * and returns the necessary information to join the call.\n *\n * @param httpClient the http client to use.\n * @param type the type of the call.\n * @param id the id of the call.\n * @param data the data for the call.\n */ const join = async (httpClient, type, id, data)=>{\n    const { call, credentials, members, own_capabilities, stats_options } = await doJoin(httpClient, type, id, data);\n    return {\n        connectionConfig: toRtcConfiguration(credentials.ice_servers),\n        sfuServer: credentials.server,\n        token: credentials.token,\n        metadata: call,\n        members,\n        ownCapabilities: own_capabilities,\n        statsOptions: stats_options\n    };\n};\nconst doJoin = async (httpClient, type, id, data)=>{\n    const location = await httpClient.getLocationHint();\n    const request = {\n        ...data,\n        location\n    };\n    return httpClient.post(`/call/${type}/${id}/join`, request);\n};\nconst toRtcConfiguration = (config)=>{\n    if (!config || config.length === 0) return undefined;\n    const rtcConfig = {\n        iceServers: config.map((ice)=>({\n                urls: ice.urls,\n                username: ice.username,\n                credential: ice.password\n            }))\n    };\n    return rtcConfig;\n};\n/**\n * Flatten the stats report into an array of stats objects.\n *\n * @param report the report to flatten.\n */ const flatten$1 = (report)=>{\n    const stats = [];\n    report.forEach((s)=>{\n        stats.push(s);\n    });\n    return stats;\n};\n/**\n * Creates a new StatsReporter instance that collects metrics about the ongoing call and reports them to the state store\n */ const createStatsReporter = ({ subscriber, publisher, state, pollingIntervalInMs = 2000 })=>{\n    const logger = getLogger([\n        \"stats\"\n    ]);\n    const getRawStatsForTrack = async (kind, selector)=>{\n        if (kind === \"subscriber\" && subscriber) {\n            return subscriber.getStats(selector);\n        } else if (kind === \"publisher\" && publisher) {\n            return publisher.getStats(selector);\n        } else {\n            logger(\"warn\", `Can't retrieve RTC stats for ${kind}`);\n            return undefined;\n        }\n    };\n    const getStatsForStream = async (kind, mediaStream)=>{\n        const pc = kind === \"subscriber\" ? subscriber : publisher;\n        const statsForStream = [];\n        for (let track of mediaStream.getTracks()){\n            const report = await pc.getStats(track);\n            const stats = transform(report, {\n                // @ts-ignore\n                trackKind: track.kind,\n                kind\n            });\n            statsForStream.push(stats);\n        }\n        return statsForStream;\n    };\n    const startReportingStatsFor = (sessionId)=>{\n        sessionIdsToTrack.add(sessionId);\n        void run();\n    };\n    const stopReportingStatsFor = (sessionId)=>{\n        sessionIdsToTrack.delete(sessionId);\n        void run();\n    };\n    const sessionIdsToTrack = new Set();\n    /**\n     * The main stats reporting loop.\n     */ const run = async ()=>{\n        const participantStats = {};\n        const sessionIds = new Set(sessionIdsToTrack);\n        if (sessionIds.size > 0) {\n            for (let participant of state.participants){\n                if (!sessionIds.has(participant.sessionId)) continue;\n                const kind = participant.isLocalParticipant ? \"publisher\" : \"subscriber\";\n                try {\n                    const mergedStream = new MediaStream([\n                        ...participant.videoStream?.getVideoTracks() || [],\n                        ...participant.audioStream?.getAudioTracks() || []\n                    ]);\n                    participantStats[participant.sessionId] = await getStatsForStream(kind, mergedStream);\n                    mergedStream.getTracks().forEach((t)=>{\n                        mergedStream.removeTrack(t);\n                    });\n                } catch (e) {\n                    logger(\"error\", `Failed to collect stats for ${kind} if ${participant.userId}`, e);\n                }\n            }\n        }\n        const [subscriberStats, publisherStats] = await Promise.all([\n            subscriber.getStats().then((report)=>transform(report, {\n                    kind: \"subscriber\",\n                    trackKind: \"video\"\n                })).then(aggregate),\n            publisher.getStats().then((report)=>transform(report, {\n                    kind: \"publisher\",\n                    trackKind: \"video\"\n                })).then(aggregate)\n        ]);\n        const [subscriberRawStats, publisherRawStats] = await Promise.all([\n            getRawStatsForTrack(\"subscriber\"),\n            getRawStatsForTrack(\"publisher\")\n        ]);\n        state.setCallStatsReport({\n            datacenter: publisher.sfuClient.edgeName,\n            publisherStats,\n            subscriberStats,\n            subscriberRawStats,\n            publisherRawStats,\n            participants: participantStats,\n            timestamp: Date.now()\n        });\n    };\n    let timeoutId;\n    if (pollingIntervalInMs > 0) {\n        const loop = async ()=>{\n            await run().catch((e)=>{\n                logger(\"debug\", \"Failed to collect stats\", e);\n            });\n            timeoutId = setTimeout(loop, pollingIntervalInMs);\n        };\n        void loop();\n    }\n    const stop = ()=>{\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n    };\n    return {\n        getRawStatsForTrack,\n        getStatsForStream,\n        startReportingStatsFor,\n        stopReportingStatsFor,\n        stop\n    };\n};\n/**\n * Transforms raw RTC stats into a slimmer and uniform across browsers format.\n *\n * @param report the report to transform.\n * @param opts the transform options.\n */ const transform = (report, opts)=>{\n    const { trackKind, kind } = opts;\n    const direction = kind === \"subscriber\" ? \"inbound-rtp\" : \"outbound-rtp\";\n    const stats = flatten$1(report);\n    const streams = stats.filter((stat)=>stat.type === direction && stat.kind === trackKind).map((stat)=>{\n        const rtcStreamStats = stat;\n        const codec = stats.find((s)=>s.type === \"codec\" && s.id === rtcStreamStats.codecId); // FIXME OL: incorrect type!\n        const transport = stats.find((s)=>s.type === \"transport\" && s.id === rtcStreamStats.transportId);\n        let roundTripTime;\n        if (transport && transport.dtlsState === \"connected\") {\n            const candidatePair = stats.find((s)=>s.type === \"candidate-pair\" && s.id === transport.selectedCandidatePairId);\n            roundTripTime = candidatePair?.currentRoundTripTime;\n        }\n        return {\n            bytesSent: rtcStreamStats.bytesSent,\n            bytesReceived: rtcStreamStats.bytesReceived,\n            codec: codec?.mimeType,\n            currentRoundTripTime: roundTripTime,\n            frameHeight: rtcStreamStats.frameHeight,\n            frameWidth: rtcStreamStats.frameWidth,\n            framesPerSecond: rtcStreamStats.framesPerSecond,\n            jitter: rtcStreamStats.jitter,\n            kind: rtcStreamStats.kind,\n            // @ts-ignore: available in Chrome only, TS doesn't recognize this\n            qualityLimitationReason: rtcStreamStats.qualityLimitationReason,\n            rid: rtcStreamStats.rid,\n            ssrc: rtcStreamStats.ssrc\n        };\n    });\n    return {\n        rawStats: report,\n        streams,\n        timestamp: Date.now()\n    };\n};\n/**\n * Aggregates generic stats.\n *\n * @param stats the stats to aggregate.\n */ const aggregate = (stats)=>{\n    const aggregatedStats = {\n        rawReport: stats,\n        totalBytesSent: 0,\n        totalBytesReceived: 0,\n        averageJitterInMs: 0,\n        averageRoundTripTimeInMs: 0,\n        qualityLimitationReasons: \"none\",\n        highestFrameWidth: 0,\n        highestFrameHeight: 0,\n        highestFramesPerSecond: 0,\n        timestamp: Date.now()\n    };\n    let maxArea = -1;\n    const area = (w, h)=>w * h;\n    const qualityLimitationReasons = new Set();\n    const streams = stats.streams;\n    const report = streams.reduce((acc, stream)=>{\n        acc.totalBytesSent += stream.bytesSent || 0;\n        acc.totalBytesReceived += stream.bytesReceived || 0;\n        acc.averageJitterInMs += stream.jitter || 0;\n        acc.averageRoundTripTimeInMs += stream.currentRoundTripTime || 0;\n        // naive calculation of the highest resolution\n        const streamArea = area(stream.frameWidth || 0, stream.frameHeight || 0);\n        if (streamArea > maxArea) {\n            acc.highestFrameWidth = stream.frameWidth || 0;\n            acc.highestFrameHeight = stream.frameHeight || 0;\n            acc.highestFramesPerSecond = stream.framesPerSecond || 0;\n            maxArea = streamArea;\n        }\n        qualityLimitationReasons.add(stream.qualityLimitationReason || \"\");\n        return acc;\n    }, aggregatedStats);\n    if (streams.length > 0) {\n        report.averageJitterInMs = Math.round(report.averageJitterInMs / streams.length * 1000);\n        report.averageRoundTripTimeInMs = Math.round(report.averageRoundTripTimeInMs / streams.length * 1000);\n    }\n    const qualityLimitationReason = [\n        qualityLimitationReasons.has(\"cpu\") && \"cpu\",\n        qualityLimitationReasons.has(\"bandwidth\") && \"bandwidth\",\n        qualityLimitationReasons.has(\"other\") && \"other\"\n    ].filter(Boolean).join(\", \");\n    if (qualityLimitationReason) {\n        report.qualityLimitationReasons = qualityLimitationReason;\n    }\n    return report;\n};\nclass SfuStatsReporter {\n    constructor(sfuClient, { options, clientDetails, subscriber, publisher }){\n        this.logger = getLogger([\n            \"SfuStatsReporter\"\n        ]);\n        this.run = async ()=>{\n            const [subscriberStats, publisherStats] = await Promise.all([\n                this.subscriber.getStats().then(flatten$1).then(JSON.stringify),\n                this.publisher.getStats().then(flatten$1).then(JSON.stringify)\n            ]);\n            await this.sfuClient.sendStats({\n                sdk: this.sdkName,\n                sdkVersion: this.sdkVersion,\n                webrtcVersion: this.webRTCVersion,\n                subscriberStats,\n                publisherStats\n            });\n        };\n        this.start = ()=>{\n            if (this.options.reporting_interval_ms <= 0) return;\n            this.intervalId = setInterval(()=>{\n                this.run().catch((err)=>{\n                    this.logger(\"warn\", \"Failed to report stats\", err);\n                });\n            }, this.options.reporting_interval_ms);\n        };\n        this.stop = ()=>{\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n        };\n        this.sfuClient = sfuClient;\n        this.options = options;\n        this.subscriber = subscriber;\n        this.publisher = publisher;\n        const webRTCInfo = getWebRTCInfo();\n        const { sdk, browser } = clientDetails;\n        this.sdkName = sdk && sdk.type === SdkType.REACT ? \"stream-react\" : sdk && sdk.type === SdkType.REACT_NATIVE ? \"stream-react-native\" : \"stream-js\";\n        this.sdkVersion = sdk ? `${sdk.major}.${sdk.minor}.${sdk.patch}` : \"0.0.0-development\";\n        // The WebRTC version if passed from the SDK, it is taken else the browser info is sent.\n        this.webRTCVersion = webRTCInfo?.version || `${browser?.name || \"\"}-${browser?.version || \"\"}` || \"N/A\";\n    }\n}\nconst DEFAULT_THRESHOLD = 0.35;\nclass ViewportTracker {\n    constructor(){\n        /**\n         * @private\n         */ this.elementHandlerMap = new Map();\n        /**\n         * @private\n         */ this.observer = null;\n        // in React children render before viewport is set, add\n        // them to the queue and observe them once the observer is ready\n        /**\n         * @private\n         */ this.queueSet = new Set();\n        /**\n         * Method to set scrollable viewport as root for the IntersectionObserver, returns\n         * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n         *\n         * @param viewportElement\n         * @param options\n         * @returns Unobserve\n         */ this.setViewport = (viewportElement, options)=>{\n            const cleanup = ()=>{\n                this.observer?.disconnect();\n                this.observer = null;\n                this.elementHandlerMap.clear();\n            };\n            this.observer = new IntersectionObserver((entries)=>{\n                entries.forEach((entry)=>{\n                    const handler = this.elementHandlerMap.get(entry.target);\n                    handler?.(entry);\n                });\n            }, {\n                root: viewportElement,\n                ...options,\n                threshold: options?.threshold ?? DEFAULT_THRESHOLD\n            });\n            if (this.queueSet.size) {\n                this.queueSet.forEach(([queueElement, queueHandler])=>{\n                    // check if element which requested observation is\n                    // a child of a viewport element, skip if isn't\n                    if (!viewportElement.contains(queueElement)) return;\n                    this.observer.observe(queueElement);\n                    this.elementHandlerMap.set(queueElement, queueHandler);\n                });\n                this.queueSet.clear();\n            }\n            return cleanup;\n        };\n        /**\n         * Method to set element to observe and handler to be triggered whenever IntersectionObserver\n         * detects a possible change in element's visibility within specified viewport, returns\n         * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n         *\n         * @param element\n         * @param handler\n         * @returns Unobserve\n         */ this.observe = (element, handler)=>{\n            const queueItem = [\n                element,\n                handler\n            ];\n            const cleanup = ()=>{\n                this.elementHandlerMap.delete(element);\n                this.observer?.unobserve(element);\n                this.queueSet.delete(queueItem);\n            };\n            if (this.elementHandlerMap.has(element)) return cleanup;\n            if (!this.observer) {\n                this.queueSet.add(queueItem);\n                return cleanup;\n            }\n            if (this.observer.root.contains(element)) {\n                this.elementHandlerMap.set(element, handler);\n                this.observer.observe(element);\n            }\n            return cleanup;\n        };\n    }\n}\n/**\n * Checks whether the current browser is Safari.\n */ const isSafari = ()=>{\n    if (typeof navigator === \"undefined\") return false;\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent || \"\");\n};\n/**\n * Checks whether the current browser is Firefox.\n */ const isFirefox = ()=>{\n    if (typeof navigator === \"undefined\") return false;\n    return navigator.userAgent?.includes(\"Firefox\");\n};\n/**\n * Checks whether the current browser is Google Chrome.\n */ const isChrome = ()=>{\n    if (typeof navigator === \"undefined\") return false;\n    return navigator.userAgent?.includes(\"Chrome\");\n};\nvar browsers = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    isChrome: isChrome,\n    isFirefox: isFirefox,\n    isSafari: isSafari\n});\nconst DEFAULT_VIEWPORT_VISIBILITY_STATE = {\n    videoTrack: VisibilityState.UNKNOWN,\n    screenShareTrack: VisibilityState.UNKNOWN\n};\n/**\n * A manager class that handles dynascale related tasks like:\n *\n * - binding video elements to session ids\n * - binding audio elements to session ids\n * - tracking element visibility\n * - updating subscriptions based on viewport visibility\n * - updating subscriptions based on video element dimensions\n * - updating subscriptions based on published tracks\n */ class DynascaleManager {\n    /**\n     * Creates a new DynascaleManager instance.\n     *\n     * @param call the call to manage.\n     */ constructor(call){\n        /**\n         * The viewport tracker instance.\n         */ this.viewportTracker = new ViewportTracker();\n        this.logger = getLogger([\n            \"DynascaleManager\"\n        ]);\n        /**\n         * Will begin tracking the given element for visibility changes within the\n         * configured viewport element (`call.setViewport`).\n         *\n         * @param element the element to track.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         * @returns Untrack.\n         */ this.trackElementVisibility = (element, sessionId, trackType)=>{\n            const cleanup = this.viewportTracker.observe(element, (entry)=>{\n                this.call.state.updateParticipant(sessionId, (participant)=>{\n                    const previousVisibilityState = participant.viewportVisibilityState ?? DEFAULT_VIEWPORT_VISIBILITY_STATE;\n                    // observer triggers when the element is \"moved\" to be a fullscreen element\n                    // keep it VISIBLE if that happens to prevent fullscreen with placeholder\n                    const isVisible = entry.isIntersecting || document.fullscreenElement === element ? VisibilityState.VISIBLE : VisibilityState.INVISIBLE;\n                    return {\n                        ...participant,\n                        viewportVisibilityState: {\n                            ...previousVisibilityState,\n                            [trackType]: isVisible\n                        }\n                    };\n                });\n            });\n            return ()=>{\n                cleanup();\n                // reset visibility state to UNKNOWN upon cleanup\n                // so that the layouts that are not actively observed\n                // can still function normally (runtime layout switching)\n                this.call.state.updateParticipant(sessionId, (participant)=>{\n                    const previousVisibilityState = participant.viewportVisibilityState ?? DEFAULT_VIEWPORT_VISIBILITY_STATE;\n                    return {\n                        ...participant,\n                        viewportVisibilityState: {\n                            ...previousVisibilityState,\n                            [trackType]: VisibilityState.UNKNOWN\n                        }\n                    };\n                });\n            };\n        };\n        /**\n         * Sets the viewport element to track bound video elements for visibility.\n         *\n         * @param element the viewport element.\n         */ this.setViewport = (element)=>{\n            return this.viewportTracker.setViewport(element);\n        };\n        /**\n         * Binds a DOM <video> element to the given session id.\n         * This method will make sure that the video element will play\n         * the correct video stream for the given session id.\n         *\n         * Under the hood, it would also keep track of the video element dimensions\n         * and update the subscription accordingly in order to optimize the bandwidth.\n         *\n         * If a \"viewport\" is configured, the video element will be automatically\n         * tracked for visibility and the subscription will be updated accordingly.\n         *\n         * @param videoElement the video element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         */ this.bindVideoElement = (videoElement, sessionId, trackType)=>{\n            const boundParticipant = this.call.state.findParticipantBySessionId(sessionId);\n            if (!boundParticipant) return;\n            const requestTrackWithDimensions = (debounceType, dimension)=>{\n                if (dimension && (dimension.width === 0 || dimension.height === 0)) {\n                    // ignore 0x0 dimensions. this can happen when the video element\n                    // is not visible (e.g., has display: none).\n                    // we treat this as \"unsubscription\" as we don't want to keep\n                    // consuming bandwidth for a video that is not visible on the screen.\n                    this.logger(\"debug\", `Ignoring 0x0 dimension`, boundParticipant);\n                    dimension = undefined;\n                }\n                this.call.updateSubscriptionsPartial(trackType, {\n                    [sessionId]: {\n                        dimension\n                    }\n                }, debounceType);\n            };\n            const participant$ = this.call.state.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.map)((participants)=>participants.find((participant)=>participant.sessionId === sessionId)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_23__.takeWhile)((participant)=>!!participant), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.shareReplay)({\n                bufferSize: 1,\n                refCount: true\n            }));\n            /**\n             * Since the video elements are now being removed from the DOM (React SDK) upon\n             * visibility change, this subscription is not in use an stays here only for the\n             * plain JS integrations where integrators might choose not to remove the video\n             * elements from the DOM.\n             */ // keep copy for resize observer handler\n            let viewportVisibilityState;\n            const viewportVisibilityStateSubscription = boundParticipant.isLocalParticipant ? null : participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.map)((p)=>p.viewportVisibilityState?.[trackType]), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilChanged)()).subscribe((nextViewportVisibilityState)=>{\n                // skip initial trigger\n                if (!viewportVisibilityState) {\n                    viewportVisibilityState = nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n                    return;\n                }\n                viewportVisibilityState = nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n                if (nextViewportVisibilityState === VisibilityState.INVISIBLE) {\n                    return requestTrackWithDimensions(DebounceType.MEDIUM, undefined);\n                }\n                requestTrackWithDimensions(DebounceType.MEDIUM, {\n                    width: videoElement.clientWidth,\n                    height: videoElement.clientHeight\n                });\n            });\n            let lastDimensions;\n            const resizeObserver = boundParticipant.isLocalParticipant ? null : new ResizeObserver(()=>{\n                const currentDimensions = `${videoElement.clientWidth},${videoElement.clientHeight}`;\n                // skip initial trigger\n                if (!lastDimensions) {\n                    lastDimensions = currentDimensions;\n                    return;\n                }\n                if (lastDimensions === currentDimensions || viewportVisibilityState === VisibilityState.INVISIBLE) {\n                    return;\n                }\n                requestTrackWithDimensions(DebounceType.SLOW, {\n                    width: videoElement.clientWidth,\n                    height: videoElement.clientHeight\n                });\n                lastDimensions = currentDimensions;\n            });\n            resizeObserver?.observe(videoElement);\n            // element renders and gets bound - track subscription gets\n            // triggered first other ones get skipped on initial subscriptions\n            const publishedTracksSubscription = boundParticipant.isLocalParticipant ? null : participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_24__.distinctUntilKeyChanged)(\"publishedTracks\"), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.map)((p)=>p.publishedTracks.includes(trackType === \"videoTrack\" ? TrackType.VIDEO : TrackType.SCREEN_SHARE)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilChanged)()).subscribe((isPublishing)=>{\n                if (isPublishing) {\n                    // the participant just started to publish a track\n                    requestTrackWithDimensions(DebounceType.FAST, {\n                        width: videoElement.clientWidth,\n                        height: videoElement.clientHeight\n                    });\n                } else {\n                    // the participant just stopped publishing a track\n                    requestTrackWithDimensions(DebounceType.FAST, undefined);\n                }\n            });\n            videoElement.autoplay = true;\n            videoElement.playsInline = true;\n            // explicitly marking the element as muted will allow autoplay to work\n            // without prior user interaction:\n            // https://developer.mozilla.org/en-US/docs/Web/Media/Autoplay_guide\n            videoElement.muted = true;\n            const streamSubscription = participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_24__.distinctUntilKeyChanged)(trackType === \"videoTrack\" ? \"videoStream\" : \"screenShareStream\")).subscribe((p)=>{\n                const source = trackType === \"videoTrack\" ? p.videoStream : p.screenShareStream;\n                if (videoElement.srcObject === source) return;\n                videoElement.srcObject = source ?? null;\n                if (isSafari() || isFirefox()) {\n                    setTimeout(()=>{\n                        videoElement.srcObject = source ?? null;\n                        videoElement.play().catch((e)=>{\n                            this.logger(\"warn\", `Failed to play stream`, e);\n                        });\n                    // we add extra delay until we attempt to force-play\n                    // the participant's media stream in Firefox and Safari,\n                    // as they seem to have some timing issues\n                    }, 25);\n                }\n            });\n            return ()=>{\n                requestTrackWithDimensions(DebounceType.FAST, undefined);\n                viewportVisibilityStateSubscription?.unsubscribe();\n                publishedTracksSubscription?.unsubscribe();\n                streamSubscription.unsubscribe();\n                resizeObserver?.disconnect();\n            };\n        };\n        /**\n         * Binds a DOM <audio> element to the given session id.\n         *\n         * This method will make sure that the audio element will\n         * play the correct audio stream for the given session id.\n         *\n         * @param audioElement the audio element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of audio.\n         * @returns a cleanup function that will unbind the audio element.\n         */ this.bindAudioElement = (audioElement, sessionId, trackType)=>{\n            const participant = this.call.state.findParticipantBySessionId(sessionId);\n            if (!participant || participant.isLocalParticipant) return;\n            const participant$ = this.call.state.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.map)((participants)=>participants.find((p)=>p.sessionId === sessionId)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_23__.takeWhile)((p)=>!!p), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.shareReplay)({\n                bufferSize: 1,\n                refCount: true\n            }));\n            const updateMediaStreamSubscription = participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_24__.distinctUntilKeyChanged)(trackType === \"screenShareAudioTrack\" ? \"screenShareAudioStream\" : \"audioStream\")).subscribe((p)=>{\n                const source = trackType === \"screenShareAudioTrack\" ? p.screenShareAudioStream : p.audioStream;\n                if (audioElement.srcObject === source) return;\n                setTimeout(()=>{\n                    audioElement.srcObject = source ?? null;\n                    if (audioElement.srcObject) {\n                        audioElement.play().catch((e)=>{\n                            this.logger(\"warn\", `Failed to play stream`, e);\n                        });\n                        // audio output device shall be set after the audio element is played\n                        // otherwise, the browser will not pick it up, and will always\n                        // play audio through the system's default device\n                        const { selectedDevice } = this.call.speaker.state;\n                        if (selectedDevice && \"setSinkId\" in audioElement) {\n                            // @ts-expect-error setSinkId is not yet in the lib\n                            audioElement.setSinkId(selectedDevice);\n                        }\n                    }\n                });\n            });\n            const sinkIdSubscription = !(\"setSinkId\" in audioElement) ? null : this.call.speaker.state.selectedDevice$.subscribe((deviceId)=>{\n                if (deviceId) {\n                    // @ts-expect-error setSinkId is not yet in the lib\n                    audioElement.setSinkId(deviceId);\n                }\n            });\n            const volumeSubscription = (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.combineLatest)([\n                this.call.speaker.state.volume$,\n                participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_24__.distinctUntilKeyChanged)(\"audioVolume\"))\n            ]).subscribe(([volume, p])=>{\n                audioElement.volume = p.audioVolume ?? volume;\n            });\n            audioElement.autoplay = true;\n            return ()=>{\n                sinkIdSubscription?.unsubscribe();\n                volumeSubscription.unsubscribe();\n                updateMediaStreamSubscription.unsubscribe();\n            };\n        };\n        this.call = call;\n    }\n}\n/**\n * Stores the permissions for the current user and exposes\n * a few helper methods which make it easier to work with permissions.\n *\n * This is an internal class meant to be used in combination with\n * a {@link Call} instance.\n *\n * @internal\n */ class PermissionsContext {\n    constructor(){\n        this.permissions = [];\n        /**\n         * Sets the permissions for the current user.\n         *\n         * @param permissions the permissions to set.\n         */ this.setPermissions = (permissions)=>{\n            this.permissions = permissions || [];\n        };\n        /**\n         * Sets the settings for the bound call.\n         * @param settings\n         */ this.setCallSettings = (settings)=>{\n            this.settings = settings;\n        };\n        /**\n         * Checks if the current user has a specific permission.\n         *\n         * @param permission the permission to check for.\n         */ this.hasPermission = (permission)=>{\n            return this.permissions.includes(permission);\n        };\n        /**\n         * Checks if the current user can request a specific permission\n         * within the call.\n         *\n         * @param permission the permission to check for.\n         * @param settings the call settings to check against (optional).\n         */ this.canRequest = (permission, settings = this.settings)=>{\n            if (!settings) return false;\n            const { audio, video, screensharing } = settings;\n            switch(permission){\n                case OwnCapability.SEND_AUDIO:\n                    return audio.access_request_enabled;\n                case OwnCapability.SEND_VIDEO:\n                    return video.access_request_enabled;\n                case OwnCapability.SCREENSHARE:\n                    return screensharing.access_request_enabled;\n                default:\n                    return false;\n            }\n        };\n    }\n}\n/**\n * Represents a call type.\n */ class CallType {\n    /**\n     * Constructs a new CallType.\n     *\n     * @param name the name of the call type.\n     * @param options the options for the call type.\n     */ constructor(name, options = {\n        sortParticipantsBy: defaultSortPreset\n    }){\n        this.name = name;\n        this.options = options;\n    }\n}\n/**\n * A registry of {@link CallType}s.\n * You can register and unregister call types.\n */ class CallTypesRegistry {\n    /**\n     * Constructs a new CallTypesRegistry.\n     *\n     * @param callTypes the initial call types to register.\n     */ constructor(callTypes){\n        /**\n         * Registers a new call type.\n         *\n         * @param callType the call type to register.\n         */ this.register = (callType)=>{\n            this.callTypes[callType.name] = callType;\n        };\n        /**\n         * Unregisters a call type.\n         *\n         * @param name the name of the call type to unregister.\n         */ this.unregister = (name)=>{\n            delete this.callTypes[name];\n        };\n        /**\n         * Gets a call type by name.\n         *\n         * @param name the name of the call type to get.\n         */ this.get = (name)=>{\n            if (!this.callTypes[name]) {\n                this.register(new CallType(name));\n            }\n            return this.callTypes[name];\n        };\n        this.callTypes = callTypes.reduce((acc, callType)=>{\n            acc[callType.name] = callType;\n            return acc;\n        }, {});\n    }\n}\n/**\n * The default call types registry.\n * You can use this instance to dynamically register and unregister call types.\n */ const CallTypes = new CallTypesRegistry([\n    new CallType(\"default\", {\n        sortParticipantsBy: defaultSortPreset\n    }),\n    new CallType(\"development\", {\n        sortParticipantsBy: defaultSortPreset\n    }),\n    new CallType(\"livestream\", {\n        sortParticipantsBy: livestreamOrAudioRoomSortPreset\n    }),\n    new CallType(\"audio_room\", {\n        sortParticipantsBy: livestreamOrAudioRoomSortPreset\n    })\n]);\n/**\n * Returns an Observable that emits the list of available devices\n * that meet the given constraints.\n *\n * @param constraints the constraints to use when requesting the devices.\n * @param kind the kind of devices to enumerate.\n */ const getDevices = (constraints, kind)=>{\n    return new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_25__.Observable((subscriber)=>{\n        const enumerate = async ()=>{\n            let devices = await navigator.mediaDevices.enumerateDevices();\n            // some browsers report empty device labels (Firefox).\n            // in that case, we need to request permissions (via getUserMedia)\n            // to be able to get the device labels\n            const needsGetUserMedia = devices.some((device)=>device.kind === kind && device.label === \"\");\n            if (needsGetUserMedia) {\n                let mediaStream;\n                try {\n                    mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\n                    devices = await navigator.mediaDevices.enumerateDevices();\n                } finally{\n                    if (mediaStream) disposeOfMediaStream(mediaStream);\n                }\n            }\n            return devices;\n        };\n        enumerate().then((devices)=>{\n            // notify subscribers and complete\n            subscriber.next(devices);\n            subscriber.complete();\n        }).catch((error)=>{\n            const logger = getLogger([\n                \"devices\"\n            ]);\n            logger(\"error\", \"Failed to enumerate devices\", error);\n            subscriber.error(error);\n        });\n    });\n};\n/**\n * [Tells if the browser supports audio output change on 'audio' elements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId).\n *\n *  */ const checkIfAudioOutputChangeSupported = ()=>{\n    if (typeof document === \"undefined\") return false;\n    const element = document.createElement(\"audio\");\n    return \"setSinkId\" in element;\n};\n/**\n * The default constraints used to request audio devices.\n */ const audioDeviceConstraints = {\n    audio: {\n        autoGainControl: true,\n        noiseSuppression: true,\n        echoCancellation: true\n    }\n};\n/**\n * The default constraints used to request video devices.\n */ const videoDeviceConstraints = {\n    video: {\n        width: 1280,\n        height: 720\n    }\n};\n/**\n * Creates a memoized observable instance\n * that will be created only once and shared between all callers.\n *\n * @param create a function that creates an Observable.\n */ const memoizedObservable = (create)=>{\n    let memoized;\n    return ()=>{\n        if (!memoized) memoized = create();\n        return memoized;\n    };\n};\nconst getDeviceChangeObserver = memoizedObservable(()=>{\n    // Audio and video devices are requested in two separate requests.\n    // That way, users will be presented with two separate prompts\n    // -> they can give access to just camera, or just microphone\n    return new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_25__.Observable((subscriber)=>{\n        // 'addEventListener' is not available in React Native\n        if (!navigator.mediaDevices.addEventListener) return;\n        const notify = ()=>subscriber.next();\n        navigator.mediaDevices.addEventListener(\"devicechange\", notify);\n        return ()=>{\n            navigator.mediaDevices.removeEventListener(\"devicechange\", notify);\n        };\n    }).pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_26__.debounceTime)(500), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_27__.concatMap)(()=>(0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_28__.from)(navigator.mediaDevices.enumerateDevices())), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.shareReplay)(1));\n});\nconst getAudioDevicesObserver = memoizedObservable(()=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_29__.merge)(getDevices(audioDeviceConstraints, \"audioinput\"), getDeviceChangeObserver()).pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.shareReplay)(1));\n});\nconst getAudioOutputDevicesObserver = memoizedObservable(()=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_29__.merge)(getDevices(audioDeviceConstraints, \"audiooutput\"), getDeviceChangeObserver()).pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.shareReplay)(1));\n});\nconst getVideoDevicesObserver = memoizedObservable(()=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_29__.merge)(getDevices(videoDeviceConstraints, \"videoinput\"), getDeviceChangeObserver()).pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.shareReplay)(1));\n});\n/**\n * Prompts the user for a permission to use audio devices (if not already granted) and lists the available 'audioinput' devices, if devices are added/removed the list is updated.\n */ const getAudioDevices = ()=>{\n    return getAudioDevicesObserver().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.map)((values)=>values.filter((d)=>d.kind === \"audioinput\")));\n};\n/**\n * Prompts the user for a permission to use video devices (if not already granted) and lists the available 'videoinput' devices, if devices are added/removed the list is updated.\n */ const getVideoDevices = ()=>{\n    return getVideoDevicesObserver().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.map)((values)=>values.filter((d)=>d.kind === \"videoinput\")));\n};\n/**\n * Prompts the user for a permission to use audio devices (if not already granted) and lists the available 'audiooutput' devices, if devices are added/removed the list is updated. Selecting 'audiooutput' device only makes sense if [the browser has support for changing audio output on 'audio' elements](#checkifaudiooutputchangesupported)\n */ const getAudioOutputDevices = ()=>{\n    return getAudioOutputDevicesObserver().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.map)((values)=>values.filter((d)=>d.kind === \"audiooutput\")));\n};\nconst getStream = async (constraints)=>{\n    try {\n        return await navigator.mediaDevices.getUserMedia(constraints);\n    } catch (e) {\n        getLogger([\n            \"devices\"\n        ])(\"error\", `Failed get user media`, {\n            error: e,\n            constraints: constraints\n        });\n        throw e;\n    }\n};\n/**\n * Returns an audio media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n * @param trackConstraints the constraints to use when requesting the stream.\n * @returns the new `MediaStream` fulfilling the given constraints.\n */ const getAudioStream = async (trackConstraints)=>{\n    const constraints = {\n        audio: {\n            ...audioDeviceConstraints.audio,\n            ...trackConstraints\n        }\n    };\n    return getStream(constraints);\n};\n/**\n * Returns a video media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n * @param trackConstraints the constraints to use when requesting the stream.\n * @returns a new `MediaStream` fulfilling the given constraints.\n */ const getVideoStream = async (trackConstraints)=>{\n    const constraints = {\n        video: {\n            ...videoDeviceConstraints.video,\n            ...trackConstraints\n        }\n    };\n    return getStream(constraints);\n};\n/**\n * Prompts the user for a permission to share a screen.\n * If the user grants the permission, a screen sharing stream is returned. Throws otherwise.\n *\n * The callers of this API are responsible to handle the possible errors.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n *\n * @param options any additional options to pass to the [`getDisplayMedia`](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia) API.\n */ const getScreenShareStream = async (options)=>{\n    try {\n        return await navigator.mediaDevices.getDisplayMedia({\n            video: true,\n            audio: {\n                channelCount: {\n                    ideal: 2\n                },\n                echoCancellation: false,\n                autoGainControl: false,\n                noiseSuppression: false\n            },\n            // @ts-expect-error - not present in types yet\n            systemAudio: \"include\",\n            ...options\n        });\n    } catch (e) {\n        getLogger([\n            \"devices\"\n        ])(\"error\", \"Failed to get screen share stream\", e);\n        throw e;\n    }\n};\nconst deviceIds$ = typeof navigator !== \"undefined\" && typeof navigator.mediaDevices !== \"undefined\" ? memoizedObservable(()=>(0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_29__.merge)((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_28__.from)(navigator.mediaDevices.enumerateDevices()), getDeviceChangeObserver()).pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.shareReplay)(1)))() : undefined;\n/**\n * Deactivates MediaStream (stops and removes tracks) to be later garbage collected\n *\n * @param stream MediaStream\n * @returns void\n */ const disposeOfMediaStream = (stream)=>{\n    if (!stream.active) return;\n    stream.getTracks().forEach((track)=>{\n        track.stop();\n        stream.removeTrack(track);\n    });\n    // @ts-expect-error release() is present in react-native-webrtc and must be called to dispose the stream\n    if (typeof stream.release === \"function\") {\n        // @ts-expect-error\n        stream.release();\n    }\n};\nclass InputMediaDeviceManager {\n    constructor(call, state, trackType){\n        this.call = call;\n        this.state = state;\n        this.trackType = trackType;\n        /**\n         * if true, stops the media stream when call is left\n         */ this.stopOnLeave = true;\n        this.subscriptions = [];\n        this.isTrackStoppedDueToTrackEnd = false;\n        this.removeSubscriptions = ()=>{\n            this.subscriptions.forEach((s)=>s.unsubscribe());\n        };\n        this.logger = getLogger([\n            `${TrackType[trackType].toLowerCase()} manager`\n        ]);\n        if (deviceIds$ && !isReactNative() && (this.trackType === TrackType.AUDIO || this.trackType === TrackType.VIDEO)) {\n            this.handleDisconnectedOrReplacedDevices();\n        }\n    }\n    /**\n     * Lists the available audio/video devices\n     *\n     * Note: It prompts the user for a permission to use devices (if not already granted)\n     *\n     * @returns an Observable that will be updated if a device is connected or disconnected\n     */ listDevices() {\n        return this.getDevices();\n    }\n    /**\n     * Starts stream.\n     */ async enable() {\n        if (this.state.status === \"enabled\") return;\n        this.enablePromise = this.unmuteStream();\n        try {\n            await this.enablePromise;\n            this.state.setStatus(\"enabled\");\n            this.enablePromise = undefined;\n        } catch (error) {\n            this.enablePromise = undefined;\n            throw error;\n        }\n    }\n    /**\n     * Stops or pauses the stream based on state.disableMode\n     * @param {boolean} [forceStop=false] when true, stops the tracks regardless of the state.disableMode\n     */ async disable(forceStop = false) {\n        this.state.prevStatus = this.state.status;\n        if (!forceStop && this.state.status === \"disabled\") return;\n        const stopTracks = forceStop || this.state.disableMode === \"stop-tracks\";\n        this.disablePromise = this.muteStream(stopTracks);\n        try {\n            await this.disablePromise;\n            this.state.setStatus(\"disabled\");\n            this.disablePromise = undefined;\n        } catch (error) {\n            this.disablePromise = undefined;\n            throw error;\n        }\n    }\n    /**\n     * If status was previously enabled, it will re-enable the device.\n     */ async resume() {\n        if (this.state.prevStatus === \"enabled\" && this.state.status === \"disabled\") {\n            await this.enable();\n        }\n    }\n    /**\n     * If the current device status is disabled, it will enable the device,\n     * else it will disable it.\n     */ async toggle() {\n        if (this.state.status === \"enabled\") {\n            return this.disable();\n        } else {\n            return this.enable();\n        }\n    }\n    /**\n     * Will set the default constraints for the device.\n     *\n     * @param constraints the constraints to set.\n     */ setDefaultConstraints(constraints) {\n        this.state.setDefaultConstraints(constraints);\n    }\n    /**\n     * Selects a device.\n     *\n     * Note: This method is not supported in React Native\n     * @param deviceId the device id to select.\n     */ async select(deviceId) {\n        if (isReactNative()) {\n            throw new Error(\"This method is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for reference.\");\n        }\n        if (deviceId === this.state.selectedDevice) {\n            return;\n        }\n        this.state.setDevice(deviceId);\n        await this.applySettingsToStream();\n    }\n    async applySettingsToStream() {\n        if (this.state.status === \"enabled\") {\n            await this.muteStream();\n            await this.unmuteStream();\n        }\n    }\n    getTracks() {\n        return this.state.mediaStream?.getTracks() ?? [];\n    }\n    async muteStream(stopTracks = true) {\n        if (!this.state.mediaStream) return;\n        this.logger(\"debug\", `${stopTracks ? \"Stopping\" : \"Disabling\"} stream`);\n        if (this.call.state.callingState === CallingState.JOINED) {\n            await this.stopPublishStream(stopTracks);\n        }\n        this.muteLocalStream(stopTracks);\n        const allEnded = this.getTracks().every((t)=>t.readyState === \"ended\");\n        if (allEnded) {\n            if (this.state.mediaStream && // @ts-expect-error release() is present in react-native-webrtc\n            typeof this.state.mediaStream.release === \"function\") {\n                // @ts-expect-error called to dispose the stream in RN\n                this.state.mediaStream.release();\n            }\n            this.state.setMediaStream(undefined);\n        }\n    }\n    muteTracks() {\n        this.getTracks().forEach((track)=>{\n            if (track.enabled) track.enabled = false;\n        });\n    }\n    unmuteTracks() {\n        this.getTracks().forEach((track)=>{\n            if (!track.enabled) track.enabled = true;\n        });\n    }\n    stopTracks() {\n        this.getTracks().forEach((track)=>{\n            if (track.readyState === \"live\") track.stop();\n        });\n    }\n    muteLocalStream(stopTracks) {\n        if (!this.state.mediaStream) {\n            return;\n        }\n        if (stopTracks) {\n            this.stopTracks();\n        } else {\n            this.muteTracks();\n        }\n    }\n    async unmuteStream() {\n        this.logger(\"debug\", \"Starting stream\");\n        let stream;\n        if (this.state.mediaStream && this.getTracks().every((t)=>t.readyState === \"live\")) {\n            stream = this.state.mediaStream;\n            this.unmuteTracks();\n        } else {\n            const defaultConstraints = this.state.defaultConstraints;\n            const constraints = {\n                ...defaultConstraints,\n                deviceId: this.state.selectedDevice\n            };\n            stream = await this.getStream(constraints);\n        }\n        if (this.call.state.callingState === CallingState.JOINED) {\n            await this.publishStream(stream);\n        }\n        if (this.state.mediaStream !== stream) {\n            this.state.setMediaStream(stream);\n            this.getTracks().forEach((track)=>{\n                track.addEventListener(\"ended\", async ()=>{\n                    if (this.enablePromise) {\n                        await this.enablePromise;\n                    }\n                    if (this.disablePromise) {\n                        await this.disablePromise;\n                    }\n                    if (this.state.status === \"enabled\") {\n                        this.isTrackStoppedDueToTrackEnd = true;\n                        setTimeout(()=>{\n                            this.isTrackStoppedDueToTrackEnd = false;\n                        }, 2000);\n                        await this.disable();\n                    }\n                });\n            });\n        }\n    }\n    get mediaDeviceKind() {\n        if (this.trackType === TrackType.AUDIO) {\n            return \"audioinput\";\n        }\n        if (this.trackType === TrackType.VIDEO) {\n            return \"videoinput\";\n        }\n        return \"\";\n    }\n    handleDisconnectedOrReplacedDevices() {\n        this.subscriptions.push((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.combineLatest)([\n            deviceIds$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_30__.pairwise)()),\n            this.state.selectedDevice$\n        ]).subscribe(async ([[prevDevices, currentDevices], deviceId])=>{\n            if (!deviceId) {\n                return;\n            }\n            if (this.enablePromise) {\n                await this.enablePromise;\n            }\n            if (this.disablePromise) {\n                await this.disablePromise;\n            }\n            let isDeviceDisconnected = false;\n            let isDeviceReplaced = false;\n            const currentDevice = this.findDeviceInList(currentDevices, deviceId);\n            const prevDevice = this.findDeviceInList(prevDevices, deviceId);\n            if (!currentDevice && prevDevice) {\n                isDeviceDisconnected = true;\n            } else if (currentDevice && prevDevice && currentDevice.deviceId === prevDevice.deviceId && currentDevice.groupId !== prevDevice.groupId) {\n                isDeviceReplaced = true;\n            }\n            if (isDeviceDisconnected) {\n                await this.disable();\n                this.select(undefined);\n            }\n            if (isDeviceReplaced) {\n                if (this.isTrackStoppedDueToTrackEnd && this.state.status === \"disabled\") {\n                    await this.enable();\n                    this.isTrackStoppedDueToTrackEnd = false;\n                } else {\n                    await this.applySettingsToStream();\n                }\n            }\n        }));\n    }\n    findDeviceInList(devices, deviceId) {\n        return devices.find((d)=>d.deviceId === deviceId && d.kind === this.mediaDeviceKind);\n    }\n}\nclass InputMediaDeviceManagerState {\n    /**\n     * Constructs new InputMediaDeviceManagerState instance.\n     *\n     * @param disableMode the disable mode to use.\n     * @param permissionName the permission name to use for querying.\n     * `undefined` means no permission is required.\n     */ constructor(disableMode = \"stop-tracks\", permissionName = undefined){\n        this.disableMode = disableMode;\n        this.permissionName = permissionName;\n        this.statusSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        this.mediaStreamSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        this.selectedDeviceSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        this.defaultConstraintsSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        /**\n         * An Observable that emits the current media stream, or `undefined` if the device is currently disabled.\n         *\n         */ this.mediaStream$ = this.mediaStreamSubject.asObservable();\n        /**\n         * An Observable that emits the currently selected device\n         */ this.selectedDevice$ = this.selectedDeviceSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilChanged)());\n        /**\n         * An Observable that emits the device status\n         */ this.status$ = this.statusSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilChanged)());\n        /**\n         * The default constraints for the device.\n         */ this.defaultConstraints$ = this.defaultConstraintsSubject.asObservable();\n        /**\n         * An observable that will emit `true` if browser/system permission\n         * is granted, `false` otherwise.\n         */ this.hasBrowserPermission$ = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_25__.Observable((subscriber)=>{\n            const notifyGranted = ()=>subscriber.next(true);\n            const permissionsAPIAvailable = !!navigator?.permissions?.query;\n            if (isReactNative() || !this.permissionName || !permissionsAPIAvailable) {\n                getLogger([\n                    \"devices\"\n                ])(\"warn\", `Permissions can't be queried. Assuming granted.`);\n                return notifyGranted();\n            }\n            let permissionState;\n            const notify = ()=>{\n                subscriber.next(// In some browsers, the 'change' event doesn't reliably emit and hence,\n                // permissionState stays in 'prompt' state forever.\n                // Typically, this happens when a user grants one-time permission.\n                // Instead of checking if a permission is granted, we check if it isn't denied\n                permissionState.state !== \"denied\");\n            };\n            navigator.permissions.query({\n                name: this.permissionName\n            }).then((permissionStatus)=>{\n                permissionState = permissionStatus;\n                permissionState.addEventListener(\"change\", notify);\n                notify();\n            }).catch(()=>{\n                // permission doesn't exist or can't be queried -> assume it's granted\n                // an example would be Firefox,\n                // where neither camera microphone permission can be queried\n                notifyGranted();\n            });\n            return ()=>{\n                permissionState?.removeEventListener(\"change\", notify);\n            };\n        }).pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_21__.shareReplay)(1));\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @internal\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n    }\n    /**\n     * The device status\n     */ get status() {\n        return this.getCurrentValue(this.status$);\n    }\n    /**\n     * The currently selected device\n     */ get selectedDevice() {\n        return this.getCurrentValue(this.selectedDevice$);\n    }\n    /**\n     * The current media stream, or `undefined` if the device is currently disabled.\n     */ get mediaStream() {\n        return this.getCurrentValue(this.mediaStream$);\n    }\n    /**\n     * @internal\n     * @param status\n     */ setStatus(status) {\n        this.setCurrentValue(this.statusSubject, status);\n    }\n    /**\n     * @internal\n     * @param stream the stream to set.\n     */ setMediaStream(stream) {\n        this.setCurrentValue(this.mediaStreamSubject, stream);\n        if (stream) {\n            this.setDevice(this.getDeviceIdFromStream(stream));\n        }\n    }\n    /**\n     * @internal\n     * @param deviceId the device id to set.\n     */ setDevice(deviceId) {\n        this.setCurrentValue(this.selectedDeviceSubject, deviceId);\n    }\n    /**\n     * Gets the default constraints for the device.\n     */ get defaultConstraints() {\n        return this.getCurrentValue(this.defaultConstraints$);\n    }\n    /**\n     * Sets the default constraints for the device.\n     *\n     * @internal\n     * @param constraints the constraints to set.\n     */ setDefaultConstraints(constraints) {\n        this.setCurrentValue(this.defaultConstraintsSubject, constraints);\n    }\n}\nclass CameraManagerState extends InputMediaDeviceManagerState {\n    constructor(){\n        super(\"stop-tracks\", // `camera` is not in the W3C standard yet,\n        // but it's supported by Chrome and Safari.\n        \"camera\");\n        this.directionSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        this.direction$ = this.directionSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilChanged)());\n    }\n    /**\n     * The preferred camera direction\n     * front - means the camera facing the user\n     * back - means the camera facing the environment\n     */ get direction() {\n        return this.getCurrentValue(this.direction$);\n    }\n    /**\n     * @internal\n     */ setDirection(direction) {\n        this.setCurrentValue(this.directionSubject, direction);\n    }\n    /**\n     * @internal\n     */ setMediaStream(stream) {\n        super.setMediaStream(stream);\n        if (stream) {\n            // RN getSettings() doesn't return facingMode, so we don't verify camera direction\n            const direction = isReactNative() ? this.direction : stream.getVideoTracks()[0]?.getSettings().facingMode === \"environment\" ? \"back\" : \"front\";\n            this.setDirection(direction);\n        }\n    }\n    getDeviceIdFromStream(stream) {\n        return stream.getVideoTracks()[0]?.getSettings().deviceId;\n    }\n}\nclass CameraManager extends InputMediaDeviceManager {\n    constructor(call){\n        super(call, new CameraManagerState(), TrackType.VIDEO);\n        this.targetResolution = {\n            width: 1280,\n            height: 720\n        };\n    }\n    /**\n     * Select the camera direction.\n     *\n     * @param direction the direction of the camera to select.\n     */ async selectDirection(direction) {\n        this.state.setDirection(direction);\n        // Providing both device id and direction doesn't work, so we deselect the device\n        this.state.setDevice(undefined);\n        await this.applySettingsToStream();\n    }\n    /**\n     * Flips the camera direction: if it's front it will change to back, if it's back, it will change to front.\n     *\n     * Note: if there is no available camera with the desired direction, this method will do nothing.\n     * @returns\n     */ async flip() {\n        const newDirection = this.state.direction === \"front\" ? \"back\" : \"front\";\n        await this.selectDirection(newDirection);\n    }\n    /**\n     * @internal\n     */ async selectTargetResolution(resolution) {\n        this.targetResolution.height = resolution.height;\n        this.targetResolution.width = resolution.width;\n        if (this.enablePromise) {\n            try {\n                await this.enablePromise;\n            } catch (error) {\n                // couldn't enable device, target resolution will be applied the next time user attempts to start the device\n                this.logger(\"warn\", \"could not apply target resolution\", error);\n            }\n        }\n        if (this.state.status === \"enabled\") {\n            const { width, height } = this.state.mediaStream.getVideoTracks()[0]?.getSettings();\n            if (width !== this.targetResolution.width || height !== this.targetResolution.height) {\n                await this.applySettingsToStream();\n                this.logger(\"debug\", `${width}x${height} target resolution applied to media stream`);\n            }\n        }\n    }\n    /**\n     * Sets the preferred codec for encoding the video.\n     *\n     * @internal internal use only, not part of the public API.\n     * @param codec the codec to use for encoding the video.\n     */ setPreferredCodec(codec) {\n        this.preferredCodec = codec;\n    }\n    getDevices() {\n        return getVideoDevices();\n    }\n    getStream(constraints) {\n        constraints.width = this.targetResolution.width;\n        constraints.height = this.targetResolution.height;\n        // We can't set both device id and facing mode\n        // Device id has higher priority\n        if (!constraints.deviceId && this.state.direction) {\n            constraints.facingMode = this.state.direction === \"front\" ? \"user\" : \"environment\";\n        }\n        return getVideoStream(constraints);\n    }\n    publishStream(stream) {\n        return this.call.publishVideoStream(stream, {\n            preferredCodec: this.preferredCodec\n        });\n    }\n    stopPublishStream(stopTracks) {\n        return this.call.stopPublish(TrackType.VIDEO, stopTracks);\n    }\n}\nclass MicrophoneManagerState extends InputMediaDeviceManagerState {\n    constructor(){\n        super(\"disable-tracks\", // `microphone` is not in the W3C standard yet,\n        // but it's supported by Chrome and Safari.\n        \"microphone\");\n        this.speakingWhileMutedSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(false);\n        this.speakingWhileMuted$ = this.speakingWhileMutedSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilChanged)());\n    }\n    /**\n     * `true` if the user's microphone is muted but they'are speaking.\n     *\n     * This feature is not available in the React Native SDK.\n     */ get speakingWhileMuted() {\n        return this.getCurrentValue(this.speakingWhileMuted$);\n    }\n    /**\n     * @internal\n     */ setSpeakingWhileMuted(isSpeaking) {\n        this.setCurrentValue(this.speakingWhileMutedSubject, isSpeaking);\n    }\n    getDeviceIdFromStream(stream) {\n        return stream.getAudioTracks()[0]?.getSettings().deviceId;\n    }\n}\nconst DETECTION_FREQUENCY_IN_MS = 500;\nconst AUDIO_LEVEL_THRESHOLD$1 = 150;\nconst FFT_SIZE = 128;\n/**\n * Creates a new sound detector.\n *\n * @param audioStream the audio stream to observe. Depending on the provided configuration, this stream might be destroyed when the sound detector is stopped.\n * @param onSoundDetectedStateChanged a callback which is called when the sound state changes.\n * @param options custom options for the sound detector.\n * @returns a clean-up function which once invoked stops the sound detector.\n */ const createSoundDetector = (audioStream, onSoundDetectedStateChanged, options = {})=>{\n    const { detectionFrequencyInMs = DETECTION_FREQUENCY_IN_MS, audioLevelThreshold = AUDIO_LEVEL_THRESHOLD$1, fftSize = FFT_SIZE, destroyStreamOnStop = true } = options;\n    const audioContext = new AudioContext();\n    const analyser = audioContext.createAnalyser();\n    analyser.fftSize = fftSize;\n    const microphone = audioContext.createMediaStreamSource(audioStream);\n    microphone.connect(analyser);\n    const intervalId = setInterval(()=>{\n        const data = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(data);\n        const isSoundDetected = data.some((value)=>value >= audioLevelThreshold);\n        const averagedDataValue = data.reduce((pv, cv)=>pv + cv, 0) / data.length;\n        const percentage = averagedDataValue > audioLevelThreshold ? 100 : Math.round(averagedDataValue / audioLevelThreshold * 100);\n        // When the track is disabled, it takes time for the buffer to empty\n        // This check will ensure that we don't send anything if the track is disabled\n        if (audioStream.getAudioTracks()[0]?.enabled) {\n            onSoundDetectedStateChanged({\n                isSoundDetected,\n                audioLevel: percentage\n            });\n        } else {\n            onSoundDetectedStateChanged({\n                isSoundDetected: false,\n                audioLevel: 0\n            });\n        }\n    }, detectionFrequencyInMs);\n    return async function stop() {\n        clearInterval(intervalId);\n        // clean-up the AudioContext elements\n        microphone.disconnect();\n        analyser.disconnect();\n        await audioContext.close();\n        // stop the stream\n        if (destroyStreamOnStop) {\n            audioStream.getTracks().forEach((track)=>{\n                track.stop();\n                audioStream.removeTrack(track);\n            });\n        }\n    };\n};\n/**\n * Flatten the stats report into an array of stats objects.\n *\n * @param report the report to flatten.\n */ const flatten = (report)=>{\n    const stats = [];\n    report.forEach((s)=>{\n        stats.push(s);\n    });\n    return stats;\n};\nconst AUDIO_LEVEL_THRESHOLD = 0.2;\nclass RNSpeechDetector {\n    constructor(){\n        this.pc1 = new RTCPeerConnection({});\n        this.pc2 = new RTCPeerConnection({});\n    }\n    /**\n     * Starts the speech detection.\n     */ async start() {\n        try {\n            const audioStream = await navigator.mediaDevices.getUserMedia({\n                audio: true\n            });\n            this.pc1.addEventListener(\"icecandidate\", async (e)=>{\n                await this.pc2.addIceCandidate(e.candidate);\n            });\n            this.pc2.addEventListener(\"icecandidate\", async (e)=>{\n                await this.pc1.addIceCandidate(e.candidate);\n            });\n            audioStream.getTracks().forEach((track)=>this.pc1.addTrack(track, audioStream));\n            const offer = await this.pc1.createOffer({});\n            await this.pc2.setRemoteDescription(offer);\n            await this.pc1.setLocalDescription(offer);\n            const answer = await this.pc2.createAnswer();\n            await this.pc1.setRemoteDescription(answer);\n            await this.pc2.setLocalDescription(answer);\n            const audioTracks = audioStream.getAudioTracks();\n            // We need to mute the audio track for this temporary stream, or else you will hear yourself twice while in the call.\n            audioTracks.forEach((track)=>track.enabled = false);\n        } catch (error) {\n            console.error(\"Error connecting and negotiating between PeerConnections:\", error);\n        }\n    }\n    /**\n     * Stops the speech detection and releases all allocated resources.\n     */ stop() {\n        this.pc1.close();\n        this.pc2.close();\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n        }\n    }\n    /**\n     * Public method that detects the audio levels and returns the status.\n     */ onSpeakingDetectedStateChange(onSoundDetectedStateChanged) {\n        this.intervalId = setInterval(async ()=>{\n            const stats = await this.pc1.getStats();\n            const report = flatten(stats);\n            // Audio levels are present inside stats of type `media-source` and of kind `audio`\n            const audioMediaSourceStats = report.find((stat)=>stat.type === \"media-source\" && stat.kind === \"audio\");\n            if (audioMediaSourceStats) {\n                const { audioLevel } = audioMediaSourceStats;\n                if (audioLevel) {\n                    if (audioLevel >= AUDIO_LEVEL_THRESHOLD) {\n                        onSoundDetectedStateChanged({\n                            isSoundDetected: true,\n                            audioLevel\n                        });\n                    } else {\n                        onSoundDetectedStateChanged({\n                            isSoundDetected: false,\n                            audioLevel: 0\n                        });\n                    }\n                }\n            }\n        }, 1000);\n        return ()=>{\n            clearInterval(this.intervalId);\n        };\n    }\n}\nclass MicrophoneManager extends InputMediaDeviceManager {\n    constructor(call){\n        super(call, new MicrophoneManagerState(), TrackType.AUDIO);\n        (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.combineLatest)([\n            this.call.state.callingState$,\n            this.call.state.ownCapabilities$,\n            this.state.selectedDevice$,\n            this.state.status$\n        ]).subscribe(async ([callingState, ownCapabilities, deviceId, status])=>{\n            if (callingState !== CallingState.JOINED) {\n                if (callingState === CallingState.LEFT) {\n                    await this.stopSpeakingWhileMutedDetection();\n                }\n                return;\n            }\n            if (ownCapabilities.includes(OwnCapability.SEND_AUDIO)) {\n                if (status === \"disabled\") {\n                    await this.startSpeakingWhileMutedDetection(deviceId);\n                } else {\n                    await this.stopSpeakingWhileMutedDetection();\n                }\n            } else {\n                await this.stopSpeakingWhileMutedDetection();\n            }\n        });\n    }\n    getDevices() {\n        return getAudioDevices();\n    }\n    getStream(constraints) {\n        return getAudioStream(constraints);\n    }\n    publishStream(stream) {\n        return this.call.publishAudioStream(stream);\n    }\n    stopPublishStream(stopTracks) {\n        return this.call.stopPublish(TrackType.AUDIO, stopTracks);\n    }\n    async startSpeakingWhileMutedDetection(deviceId) {\n        await this.stopSpeakingWhileMutedDetection();\n        if (isReactNative()) {\n            this.rnSpeechDetector = new RNSpeechDetector();\n            await this.rnSpeechDetector.start();\n            const unsubscribe = this.rnSpeechDetector?.onSpeakingDetectedStateChange((event)=>{\n                this.state.setSpeakingWhileMuted(event.isSoundDetected);\n            });\n            this.soundDetectorCleanup = ()=>{\n                unsubscribe();\n                this.rnSpeechDetector?.stop();\n                this.rnSpeechDetector = undefined;\n            };\n        } else {\n            // Need to start a new stream that's not connected to publisher\n            const stream = await this.getStream({\n                deviceId\n            });\n            this.soundDetectorCleanup = createSoundDetector(stream, (event)=>{\n                this.state.setSpeakingWhileMuted(event.isSoundDetected);\n            });\n        }\n    }\n    async stopSpeakingWhileMutedDetection() {\n        if (!this.soundDetectorCleanup) {\n            return;\n        }\n        this.state.setSpeakingWhileMuted(false);\n        try {\n            await this.soundDetectorCleanup();\n        } finally{\n            this.soundDetectorCleanup = undefined;\n        }\n    }\n}\nclass ScreenShareState extends InputMediaDeviceManagerState {\n    constructor(){\n        super(...arguments);\n        this.audioEnabledSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(true);\n        this.settingsSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(undefined);\n        /**\n         * An Observable that emits the current screen share audio status.\n         */ this.audioEnabled$ = this.audioEnabledSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilChanged)());\n        /**\n         * An Observable that emits the current screen share settings.\n         */ this.settings$ = this.settingsSubject.asObservable();\n        /**\n         * @internal\n         */ this.getDeviceIdFromStream = (stream)=>{\n            const [track] = stream.getTracks();\n            return track?.getSettings().deviceId;\n        };\n    }\n    /**\n     * The current screen share audio status.\n     */ get audioEnabled() {\n        return this.getCurrentValue(this.audioEnabled$);\n    }\n    /**\n     * Set the current screen share audio status.\n     */ setAudioEnabled(isEnabled) {\n        this.setCurrentValue(this.audioEnabledSubject, isEnabled);\n    }\n    /**\n     * The current screen share settings.\n     */ get settings() {\n        return this.getCurrentValue(this.settings$);\n    }\n    /**\n     * Set the current screen share settings.\n     *\n     * @param settings the screen share settings to set.\n     */ setSettings(settings) {\n        this.setCurrentValue(this.settingsSubject, settings);\n    }\n}\nclass ScreenShareManager extends InputMediaDeviceManager {\n    constructor(call){\n        super(call, new ScreenShareState(), TrackType.SCREEN_SHARE);\n    }\n    /**\n     * Will enable screen share audio options on supported platforms.\n     *\n     * Note: for ongoing screen share, audio won't be enabled until you\n     * re-publish the screen share stream.\n     */ enableScreenShareAudio() {\n        this.state.setAudioEnabled(true);\n    }\n    /**\n     * Will disable screen share audio options on supported platforms.\n     */ async disableScreenShareAudio() {\n        this.state.setAudioEnabled(false);\n        if (this.call.publisher?.isPublishing(TrackType.SCREEN_SHARE_AUDIO)) {\n            await this.call.stopPublish(TrackType.SCREEN_SHARE_AUDIO, true);\n        }\n    }\n    /**\n     * Returns the current screen share settings.\n     */ getSettings() {\n        return this.state.settings;\n    }\n    /**\n     * Sets the current screen share settings.\n     *\n     * @param settings the settings to set.\n     */ setSettings(settings) {\n        this.state.setSettings(settings);\n    }\n    getDevices() {\n        return (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_31__.of)([]); // there are no devices to be listed for Screen Share\n    }\n    getStream(constraints) {\n        if (!this.state.audioEnabled) {\n            constraints.audio = false;\n        }\n        return getScreenShareStream(constraints);\n    }\n    publishStream(stream) {\n        return this.call.publishScreenShareStream(stream, {\n            screenShareSettings: this.state.settings\n        });\n    }\n    async stopPublishStream(stopTracks) {\n        await this.call.stopPublish(TrackType.SCREEN_SHARE, stopTracks);\n        await this.call.stopPublish(TrackType.SCREEN_SHARE_AUDIO, stopTracks);\n    }\n    /**\n     * Overrides the default `select` method to throw an error.\n     *\n     * @param deviceId ignored.\n     */ async select(deviceId) {\n        throw new Error(\"This method is not supported in for Screen Share\");\n    }\n}\nclass SpeakerState {\n    constructor(){\n        this.selectedDeviceSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(\"\");\n        this.volumeSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(1);\n        /**\n         * [Tells if the browser supports audio output change on 'audio' elements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId).\n         */ this.isDeviceSelectionSupported = checkIfAudioOutputChangeSupported();\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @internal\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n        this.selectedDevice$ = this.selectedDeviceSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilChanged)());\n        this.volume$ = this.volumeSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_22__.distinctUntilChanged)());\n    }\n    /**\n     * The currently selected device\n     *\n     * Note: this feature is not supported in React Native\n     */ get selectedDevice() {\n        return this.getCurrentValue(this.selectedDevice$);\n    }\n    /**\n     * The currently selected volume\n     *\n     * Note: this feature is not supported in React Native\n     */ get volume() {\n        return this.getCurrentValue(this.volume$);\n    }\n    /**\n     * @internal\n     * @param deviceId\n     */ setDevice(deviceId) {\n        this.setCurrentValue(this.selectedDeviceSubject, deviceId);\n    }\n    /**\n     * @internal\n     * @param volume\n     */ setVolume(volume) {\n        this.setCurrentValue(this.volumeSubject, volume);\n    }\n}\nclass SpeakerManager {\n    constructor(call){\n        this.state = new SpeakerState();\n        this.subscriptions = [];\n        this.removeSubscriptions = ()=>{\n            this.subscriptions.forEach((s)=>s.unsubscribe());\n        };\n        this.call = call;\n        if (deviceIds$ && !isReactNative()) {\n            this.subscriptions.push((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_18__.combineLatest)([\n                deviceIds$,\n                this.state.selectedDevice$\n            ]).subscribe(([devices, deviceId])=>{\n                if (!deviceId) {\n                    return;\n                }\n                const device = devices.find((d)=>d.deviceId === deviceId && d.kind === \"audiooutput\");\n                if (!device) {\n                    this.select(\"\");\n                }\n            }));\n        }\n    }\n    /**\n     * Lists the available audio output devices\n     *\n     * Note: It prompts the user for a permission to use devices (if not already granted)\n     * Note: This method is not supported in React Native\n     *\n     * @returns an Observable that will be updated if a device is connected or disconnected\n     */ listDevices() {\n        if (isReactNative()) {\n            throw new Error(\"This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details\");\n        }\n        return getAudioOutputDevices();\n    }\n    /**\n     * Select a device.\n     *\n     * Note: This method is not supported in React Native\n     *\n     * @param deviceId empty string means the system default\n     */ select(deviceId) {\n        if (isReactNative()) {\n            throw new Error(\"This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details\");\n        }\n        this.state.setDevice(deviceId);\n    }\n    /**\n     * Set the volume of the audio elements\n     * @param volume a number between 0 and 1.\n     *\n     * Note: This method is not supported in React Native\n     */ setVolume(volume) {\n        if (isReactNative()) {\n            throw new Error(\"This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details\");\n        }\n        if (volume && (volume < 0 || volume > 1)) {\n            throw new Error(\"Volume must be between 0 and 1\");\n        }\n        this.state.setVolume(volume);\n    }\n    /**\n     * Set the volume of a participant.\n     *\n     * Note: This method is not supported in React Native.\n     *\n     * @param sessionId the participant's session id.\n     * @param volume a number between 0 and 1. Set it to `undefined` to use the default volume.\n     */ setParticipantVolume(sessionId, volume) {\n        if (isReactNative()) {\n            throw new Error(\"This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details\");\n        }\n        if (volume && (volume < 0 || volume > 1)) {\n            throw new Error(\"Volume must be between 0 and 1, or undefined\");\n        }\n        this.call.state.updateParticipant(sessionId, {\n            audioVolume: volume\n        });\n    }\n}\n/**\n * An object representation of a `Call`.\n */ class Call {\n    /**\n     * Constructs a new `Call` instance.\n     *\n     * NOTE: Don't call the constructor directly, instead\n     * Use the [`StreamVideoClient.call`](./StreamVideoClient.md/#call)\n     * method to construct a `Call` instance.\n     */ constructor({ type, id, streamClient, members, ownCapabilities, sortParticipantsBy, clientStore, ringing = false, watching = false }){\n        /**\n         * The state of this call.\n         */ this.state = new CallState();\n        /**\n         * The DynascaleManager instance.\n         */ this.dynascaleManager = new DynascaleManager(this);\n        /**\n         * The permissions context of this call.\n         */ this.permissionsContext = new PermissionsContext();\n        /**\n         * The event dispatcher instance dedicated to this Call instance.\n         * @private\n         */ this.dispatcher = new Dispatcher();\n        this.trackSubscriptionsSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject({\n            type: DebounceType.MEDIUM,\n            data: []\n        });\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 10;\n        /**\n         * A list hooks/functions to invoke when the call is left.\n         * A typical use case is to clean up some global event handlers.\n         * @private\n         */ this.leaveCallHooks = new Set();\n        this.streamClientEventHandlers = new Map();\n        /**\n         * You can subscribe to WebSocket events provided by the API. To remove a subscription, call the `off` method.\n         * Please note that subscribing to WebSocket events is an advanced use-case.\n         * For most use-cases, it should be enough to watch for state changes.\n         *\n         * @param eventName the event name.\n         * @param fn the event handler.\n         */ this.on = (eventName, fn)=>{\n            if (isSfuEvent(eventName)) {\n                return this.dispatcher.on(eventName, fn);\n            }\n            const offHandler = this.streamClient.on(eventName, (e)=>{\n                const event = e;\n                if (event.call_cid && event.call_cid === this.cid) {\n                    fn(event);\n                }\n            });\n            // keep the 'off' reference returned by the stream client\n            this.streamClientEventHandlers.set(fn, offHandler);\n            return ()=>{\n                this.off(eventName, fn);\n            };\n        };\n        /**\n         * Remove subscription for WebSocket events that were created by the `on` method.\n         *\n         * @param eventName the event name.\n         * @param fn the event handler.\n         */ this.off = (eventName, fn)=>{\n            if (isSfuEvent(eventName)) {\n                return this.dispatcher.off(eventName, fn);\n            }\n            // unsubscribe from the stream client event by using the 'off' reference\n            const registeredOffHandler = this.streamClientEventHandlers.get(fn);\n            if (registeredOffHandler) {\n                registeredOffHandler();\n            }\n        };\n        /**\n         * Leave the call and stop the media streams that were published by the call.\n         */ this.leave = async ({ reject = false, reason = \"user is leaving the call\" } = {})=>{\n            const callingState = this.state.callingState;\n            if (callingState === CallingState.LEFT) {\n                throw new Error(\"Cannot leave call that has already been left.\");\n            }\n            if (callingState === CallingState.JOINING) {\n                await this.assertCallJoined();\n            }\n            if (this.ringing) {\n                // I'm the one who started the call, so I should cancel it.\n                const hasOtherParticipants = this.state.remoteParticipants.length > 0;\n                if (this.isCreatedByMe && !hasOtherParticipants) {\n                    // Signals other users that I have cancelled my call to them\n                    // before they accepted it.\n                    await this.reject();\n                } else if (reject && callingState === CallingState.RINGING) {\n                    // Signals other users that I have rejected the incoming call.\n                    await this.reject();\n                }\n            }\n            this.statsReporter?.stop();\n            this.statsReporter = undefined;\n            this.sfuStatsReporter?.stop();\n            this.sfuStatsReporter = undefined;\n            this.subscriber?.close();\n            this.subscriber = undefined;\n            this.publisher?.close();\n            this.publisher = undefined;\n            this.sfuClient?.close(StreamSfuClient.NORMAL_CLOSURE, reason);\n            this.sfuClient = undefined;\n            this.dispatcher.offAll();\n            this.state.setCallingState(CallingState.LEFT);\n            // Call all leave call hooks, e.g. to clean up global event handlers\n            this.leaveCallHooks.forEach((hook)=>hook());\n            this.clientStore.unregisterCall(this);\n            this.camera.removeSubscriptions();\n            this.microphone.removeSubscriptions();\n            this.screenShare.removeSubscriptions();\n            this.speaker.removeSubscriptions();\n            const stopOnLeavePromises = [];\n            if (this.camera.stopOnLeave) {\n                stopOnLeavePromises.push(this.camera.disable(true));\n            }\n            if (this.microphone.stopOnLeave) {\n                stopOnLeavePromises.push(this.microphone.disable(true));\n            }\n            if (this.screenShare.stopOnLeave) {\n                stopOnLeavePromises.push(this.screenShare.disable(true));\n            }\n            await Promise.all(stopOnLeavePromises);\n        };\n        /**\n         * Loads the information about the call.\n         *\n         * @param params.ring if set to true, a `call.ring` event will be sent to the call members.\n         * @param params.notify if set to true, a `call.notification` event will be sent to the call members.\n         * @param params.members_limit the total number of members to return as part of the response.\n         */ this.get = async (params)=>{\n            const response = await this.streamClient.get(this.streamClientBasePath, params);\n            if (params?.ring && !this.ringing) {\n                this.ringingSubject.next(true);\n            }\n            this.state.updateFromCallResponse(response.call);\n            this.state.setMembers(response.members);\n            this.state.setOwnCapabilities(response.own_capabilities);\n            if (this.streamClient._hasConnectionID()) {\n                this.watching = true;\n                this.clientStore.registerCall(this);\n            }\n            this.applyDeviceConfig();\n            return response;\n        };\n        /**\n         * Loads the information about the call and creates it if it doesn't exist.\n         *\n         * @param data the data to create the call with.\n         */ this.getOrCreate = async (data)=>{\n            const response = await this.streamClient.post(this.streamClientBasePath, data);\n            if (data?.ring && !this.ringing) {\n                this.ringingSubject.next(true);\n            }\n            this.state.updateFromCallResponse(response.call);\n            this.state.setMembers(response.members);\n            this.state.setOwnCapabilities(response.own_capabilities);\n            if (this.streamClient._hasConnectionID()) {\n                this.watching = true;\n                this.clientStore.registerCall(this);\n            }\n            this.applyDeviceConfig();\n            return response;\n        };\n        /**\n         * Creates a call\n         *\n         * @param data the data to create the call with.\n         */ this.create = async (data)=>{\n            return this.getOrCreate(data);\n        };\n        /**\n         * A shortcut for {@link Call.get} with `ring` parameter set to `true`.\n         * Will send a `call.ring` event to the call members.\n         */ this.ring = async ()=>{\n            return await this.get({\n                ring: true\n            });\n        };\n        /**\n         * A shortcut for {@link Call.get} with `notify` parameter set to `true`.\n         * Will send a `call.notification` event to the call members.\n         */ this.notify = async ()=>{\n            return await this.get({\n                notify: true\n            });\n        };\n        /**\n         * Marks the incoming call as accepted.\n         *\n         * This method should be used only for \"ringing\" call flows.\n         * {@link Call.join} invokes this method automatically for you when joining a call.\n         * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n         */ this.accept = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/accept`);\n        };\n        /**\n         * Marks the incoming call as rejected.\n         *\n         * This method should be used only for \"ringing\" call flows.\n         * {@link Call.leave} invokes this method automatically for you when you leave or reject this call.\n         * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n         */ this.reject = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/reject`);\n        };\n        /**\n         * Will start to watch for call related WebSocket events and initiate a call session with the server.\n         *\n         * @returns a promise which resolves once the call join-flow has finished.\n         */ this.join = async (data)=>{\n            const callingState = this.state.callingState;\n            if ([\n                CallingState.JOINED,\n                CallingState.JOINING\n            ].includes(callingState)) {\n                this.logger(\"warn\", \"Join method called twice, you should only call this once\");\n                throw new Error(`Illegal State: Already joined.`);\n            }\n            if (callingState === CallingState.LEFT) {\n                throw new Error(\"Illegal State: Cannot join already left call. Create a new Call instance to join a call.\");\n            }\n            const isMigrating = callingState === CallingState.MIGRATING;\n            const isReconnecting = callingState === CallingState.RECONNECTING;\n            this.state.setCallingState(CallingState.JOINING);\n            this.logger(\"debug\", \"Starting join flow\");\n            if (data?.ring && !this.ringing) {\n                this.ringingSubject.next(true);\n            }\n            if (this.ringing && !this.isCreatedByMe) {\n                // signals other users that I have accepted the incoming call.\n                await this.accept();\n            }\n            let sfuServer;\n            let sfuToken;\n            let connectionConfig;\n            let statsOptions;\n            try {\n                if (this.sfuClient?.isFastReconnecting) {\n                    // use previous SFU configuration and values\n                    connectionConfig = this.publisher?.connectionConfiguration;\n                    sfuServer = this.sfuClient.sfuServer;\n                    sfuToken = this.sfuClient.token;\n                    statsOptions = this.sfuStatsReporter?.options;\n                } else {\n                    // full join flow - let the Coordinator pick a new SFU for us\n                    const call = await join(this.streamClient, this.type, this.id, data);\n                    this.state.updateFromCallResponse(call.metadata);\n                    this.state.setMembers(call.members);\n                    this.state.setOwnCapabilities(call.ownCapabilities);\n                    connectionConfig = call.connectionConfig;\n                    sfuServer = call.sfuServer;\n                    sfuToken = call.token;\n                    statsOptions = call.statsOptions;\n                }\n                if (this.streamClient._hasConnectionID()) {\n                    this.watching = true;\n                    this.clientStore.registerCall(this);\n                }\n            } catch (error) {\n                // restore the previous call state if the join-flow fails\n                this.state.setCallingState(callingState);\n                throw error;\n            }\n            const previousSfuClient = this.sfuClient;\n            const sfuClient = this.sfuClient = new StreamSfuClient({\n                dispatcher: this.dispatcher,\n                sfuServer,\n                token: sfuToken,\n                sessionId: previousSfuClient?.sessionId\n            });\n            /**\n             * A closure which hides away the re-connection logic.\n             */ const reconnect = async (strategy, reason)=>{\n                const currentState = this.state.callingState;\n                if (currentState === CallingState.MIGRATING || currentState === CallingState.RECONNECTING) {\n                    // prevent parallel reconnection attempts\n                    return;\n                }\n                this.reconnectAttempts++;\n                this.state.setCallingState(strategy === \"migrate\" ? CallingState.MIGRATING : CallingState.RECONNECTING);\n                if (strategy === \"migrate\") {\n                    this.logger(\"debug\", `[Migration]: migrating call ${this.cid} away from ${sfuServer.edge_name}`);\n                    sfuClient.isMigratingAway = true;\n                } else {\n                    this.logger(\"debug\", `[Rejoin]: ${strategy} rejoin call ${this.cid} (${this.reconnectAttempts})...`);\n                }\n                // take a snapshot of the current \"local participant\" state\n                // we'll need it for restoring the previous publishing state later\n                const localParticipant = this.state.localParticipant;\n                if (strategy === \"fast\") {\n                    sfuClient.close(StreamSfuClient.ERROR_CONNECTION_BROKEN, `attempting fast reconnect: ${reason}`);\n                } else if (strategy === \"full\") {\n                    // in migration or recovery scenarios, we don't want to\n                    // wait before attempting to reconnect to an SFU server\n                    await sleep(retryInterval(this.reconnectAttempts));\n                    // in full-reconnect, we need to dispose all Peer Connections\n                    this.subscriber?.close();\n                    this.subscriber = undefined;\n                    this.publisher?.close({\n                        stopTracks: false\n                    });\n                    this.publisher = undefined;\n                    this.statsReporter?.stop();\n                    this.statsReporter = undefined;\n                    this.sfuStatsReporter?.stop();\n                    this.sfuStatsReporter = undefined;\n                    // clean up current connection\n                    sfuClient.close(StreamSfuClient.NORMAL_CLOSURE, `attempting full reconnect: ${reason}`);\n                }\n                await this.join({\n                    ...data,\n                    ...strategy === \"migrate\" && {\n                        migrating_from: sfuServer.edge_name\n                    }\n                });\n                // clean up previous connection\n                if (strategy === \"migrate\") {\n                    sfuClient.close(StreamSfuClient.NORMAL_CLOSURE, \"attempting migration\");\n                }\n                this.logger(\"info\", `[Rejoin]: Attempt ${this.reconnectAttempts} successful!`);\n                // we shouldn't be republishing the streams if we're migrating\n                // as the underlying peer connection will take care of it as part\n                // of the ice-restart process\n                if (localParticipant && strategy === \"full\") {\n                    const { audioStream, videoStream, screenShareStream, screenShareAudioStream } = localParticipant;\n                    let screenShare;\n                    if (screenShareStream || screenShareAudioStream) {\n                        screenShare = new MediaStream();\n                        screenShareStream?.getVideoTracks().forEach((track)=>{\n                            screenShare?.addTrack(track);\n                        });\n                        screenShareAudioStream?.getAudioTracks().forEach((track)=>{\n                            screenShare?.addTrack(track);\n                        });\n                    }\n                    // restore previous publishing state\n                    if (audioStream) await this.publishAudioStream(audioStream);\n                    if (videoStream) {\n                        await this.publishVideoStream(videoStream, {\n                            preferredCodec: this.camera.preferredCodec\n                        });\n                    }\n                    if (screenShare) await this.publishScreenShareStream(screenShare);\n                    this.logger(\"info\", `[Rejoin]: State restored. Attempt: ${this.reconnectAttempts}`);\n                }\n            };\n            // reconnect if the connection was closed unexpectedly. example:\n            // - SFU crash or restart\n            // - network change\n            sfuClient.signalReady.then(()=>{\n                // register a handler for the \"goAway\" event\n                const unregisterGoAway = this.dispatcher.on(\"goAway\", (event)=>{\n                    const { reason } = event;\n                    this.logger(\"info\", `[Migration]: Going away from SFU... Reason: ${GoAwayReason[reason]}`);\n                    reconnect(\"migrate\", GoAwayReason[reason]).catch((err)=>{\n                        this.logger(\"warn\", `[Migration]: Failed to migrate to another SFU.`, err);\n                    });\n                });\n                sfuClient.signalWs.addEventListener(\"close\", (e)=>{\n                    // unregister the \"goAway\" handler, as we won't need it anymore for this connection.\n                    // the upcoming re-join will register a new handler anyway\n                    unregisterGoAway();\n                    // do nothing if the connection was closed on purpose\n                    if (e.code === StreamSfuClient.NORMAL_CLOSURE) return;\n                    // do nothing if the connection was closed because of a policy violation\n                    // e.g., the user has been blocked by an admin or moderator\n                    if (e.code === KnownCodes.WS_POLICY_VIOLATION) return;\n                    // When the SFU is being shut down, it sends a goAway message.\n                    // While we migrate to another SFU, we might have the WS connection\n                    // to the old SFU closed abruptly. In this case, we don't want\n                    // to reconnect to the old SFU, but rather to the new one.\n                    const isMigratingAway = e.code === KnownCodes.WS_CLOSED_ABRUPTLY && sfuClient.isMigratingAway;\n                    const isFastReconnecting = e.code === KnownCodes.WS_CLOSED_ABRUPTLY && sfuClient.isFastReconnecting;\n                    if (isMigratingAway || isFastReconnecting) return;\n                    // do nothing if the connection was closed because of a fast reconnect\n                    if (e.code === StreamSfuClient.ERROR_CONNECTION_BROKEN) return;\n                    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n                        sfuClient.isFastReconnecting = this.reconnectAttempts === 0;\n                        const strategy = sfuClient.isFastReconnecting ? \"fast\" : \"full\";\n                        reconnect(strategy, `SFU closed the WS with code: ${e.code}`).catch((err)=>{\n                            this.logger(\"error\", `[Rejoin]: ${strategy} rejoin failed for ${this.reconnectAttempts} times. Giving up.`, err);\n                            this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n                        });\n                    } else {\n                        this.logger(\"error\", \"[Rejoin]: Reconnect attempts exceeded. Giving up...\");\n                        this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n                    }\n                });\n            });\n            // handlers for connection online/offline events\n            const unsubscribeOnlineEvent = this.streamClient.on(\"connection.changed\", async (e)=>{\n                if (e.type !== \"connection.changed\") return;\n                if (!e.online) return;\n                unsubscribeOnlineEvent();\n                const currentCallingState = this.state.callingState;\n                const shouldReconnect = currentCallingState === CallingState.OFFLINE || currentCallingState === CallingState.RECONNECTING_FAILED;\n                if (!shouldReconnect) return;\n                this.logger(\"info\", \"[Rejoin]: Going online...\");\n                let isFirstReconnectAttempt = true;\n                do {\n                    try {\n                        sfuClient.isFastReconnecting = isFirstReconnectAttempt;\n                        await reconnect(isFirstReconnectAttempt ? \"fast\" : \"full\", \"Network: online\");\n                        return; // break the loop if rejoin is successful\n                    } catch (err) {\n                        this.logger(\"error\", `[Rejoin][Network]: Rejoin failed for attempt ${this.reconnectAttempts}`, err);\n                    }\n                    // wait for a bit before trying to reconnect again\n                    await sleep(retryInterval(this.reconnectAttempts));\n                    isFirstReconnectAttempt = false;\n                }while (this.reconnectAttempts < this.maxReconnectAttempts);\n                // if we're here, it means that we've exhausted all the reconnect attempts\n                this.logger(\"error\", `[Rejoin][Network]: Rejoin failed. Giving up.`);\n                this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n            });\n            const unsubscribeOfflineEvent = this.streamClient.on(\"connection.changed\", (e)=>{\n                if (e.type !== \"connection.changed\") return;\n                if (e.online) return;\n                unsubscribeOfflineEvent();\n                this.state.setCallingState(CallingState.OFFLINE);\n            });\n            this.leaveCallHooks.add(()=>{\n                unsubscribeOnlineEvent();\n                unsubscribeOfflineEvent();\n            });\n            if (!this.subscriber) {\n                this.subscriber = new Subscriber({\n                    sfuClient,\n                    dispatcher: this.dispatcher,\n                    state: this.state,\n                    connectionConfig\n                });\n            }\n            if (!this.publisher) {\n                const audioSettings = this.state.settings?.audio;\n                const isDtxEnabled = !!audioSettings?.opus_dtx_enabled;\n                const isRedEnabled = !!audioSettings?.redundant_coding_enabled;\n                this.publisher = new Publisher({\n                    sfuClient,\n                    dispatcher: this.dispatcher,\n                    state: this.state,\n                    connectionConfig,\n                    isDtxEnabled,\n                    isRedEnabled\n                });\n            }\n            if (!this.statsReporter) {\n                this.statsReporter = createStatsReporter({\n                    subscriber: this.subscriber,\n                    publisher: this.publisher,\n                    state: this.state\n                });\n            }\n            const clientDetails = getClientDetails();\n            if (!this.sfuStatsReporter && statsOptions) {\n                this.sfuStatsReporter = new SfuStatsReporter(sfuClient, {\n                    clientDetails,\n                    options: statsOptions,\n                    subscriber: this.subscriber,\n                    publisher: this.publisher\n                });\n                this.sfuStatsReporter.start();\n            }\n            try {\n                // 1. wait for the signal server to be ready before sending \"joinRequest\"\n                sfuClient.signalReady.catch((err)=>this.logger(\"error\", \"Signal ready failed\", err))// prepare a generic SDP and send it to the SFU.\n                // this is a throw-away SDP that the SFU will use to determine\n                // the capabilities of the client (codec support, etc.)\n                .then(()=>getGenericSdp(\"recvonly\")).then((sdp)=>{\n                    const subscriptions = getCurrentValue(this.trackSubscriptionsSubject);\n                    const migration = isMigrating ? {\n                        fromSfuId: data?.migrating_from || \"\",\n                        subscriptions: subscriptions.data || [],\n                        announcedTracks: this.publisher?.getCurrentTrackInfos() || []\n                    } : undefined;\n                    return sfuClient.join({\n                        subscriberSdp: sdp || \"\",\n                        clientDetails,\n                        migration,\n                        fastReconnect: previousSfuClient?.isFastReconnecting ?? false\n                    });\n                });\n                // 2. in parallel, wait for the SFU to send us the \"joinResponse\"\n                // this will throw an error if the SFU rejects the join request or\n                // fails to respond in time\n                const { callState, reconnected } = await this.waitForJoinResponse();\n                if (isReconnecting) {\n                    this.logger(\"debug\", \"[Rejoin] fast reconnected:\", reconnected);\n                }\n                if (isMigrating) {\n                    await this.subscriber.migrateTo(sfuClient, connectionConfig);\n                    await this.publisher.migrateTo(sfuClient, connectionConfig);\n                } else if (isReconnecting) {\n                    if (reconnected) {\n                        // update the SFU client instance on the subscriber and publisher\n                        this.subscriber.setSfuClient(sfuClient);\n                        this.publisher.setSfuClient(sfuClient);\n                        // and perform a full ICE restart on the publisher\n                        await this.publisher.restartIce();\n                    } else if (previousSfuClient?.isFastReconnecting) {\n                        // reconnection wasn't possible, so we need to do a full rejoin\n                        return await reconnect(\"full\", \"re-attempting\").catch((err)=>{\n                            this.logger(\"error\", `[Rejoin]: Rejoin failed forced full rejoin.`, err);\n                        });\n                    }\n                }\n                const currentParticipants = callState?.participants || [];\n                const participantCount = callState?.participantCount;\n                const startedAt = callState?.startedAt ? Timestamp.toDate(callState.startedAt) : new Date();\n                const pins = callState?.pins ?? [];\n                this.state.setParticipants(()=>{\n                    const participantLookup = this.state.getParticipantLookupBySessionId();\n                    return currentParticipants.map((p)=>{\n                        // We need to preserve the local state of the participant\n                        // (e.g. videoDimension, visibilityState, pinnedAt, etc.)\n                        // as it doesn't exist on the server.\n                        const existingParticipant = participantLookup[p.sessionId];\n                        return Object.assign(p, existingParticipant, {\n                            isLocalParticipant: p.sessionId === sfuClient.sessionId,\n                            viewportVisibilityState: existingParticipant?.viewportVisibilityState ?? {\n                                videoTrack: VisibilityState.UNKNOWN,\n                                screenShareTrack: VisibilityState.UNKNOWN\n                            }\n                        });\n                    });\n                });\n                this.state.setParticipantCount(participantCount?.total || 0);\n                this.state.setAnonymousParticipantCount(participantCount?.anonymous || 0);\n                this.state.setStartedAt(startedAt);\n                this.state.setServerSidePins(pins);\n                this.reconnectAttempts = 0; // reset the reconnect attempts counter\n                this.state.setCallingState(CallingState.JOINED);\n                try {\n                    await this.initCamera({\n                        setStatus: true\n                    });\n                    await this.initMic({\n                        setStatus: true\n                    });\n                } catch (error) {\n                    this.logger(\"warn\", \"Camera and/or mic init failed during join call\", error);\n                }\n                // 3. once we have the \"joinResponse\", and possibly reconciled the local state\n                // we schedule a fast subscription update for all remote participants\n                // that were visible before we reconnected or migrated to a new SFU.\n                const { remoteParticipants } = this.state;\n                if (remoteParticipants.length > 0) {\n                    this.updateSubscriptions(remoteParticipants, DebounceType.FAST);\n                }\n                this.logger(\"info\", `Joined call ${this.cid}`);\n            } catch (err) {\n                // join failed, try to rejoin\n                if (this.reconnectAttempts < this.maxReconnectAttempts) {\n                    this.logger(\"error\", `[Rejoin]: Rejoin ${this.reconnectAttempts} failed.`, err);\n                    await reconnect(\"full\", \"previous attempt failed\");\n                    this.logger(\"info\", `[Rejoin]: Rejoin ${this.reconnectAttempts} successful!`);\n                } else {\n                    this.logger(\"error\", `[Rejoin]: Rejoin failed for ${this.reconnectAttempts} times. Giving up.`);\n                    this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n                    throw new Error(\"Join failed\");\n                }\n            }\n        };\n        this.waitForJoinResponse = (timeout = 5000)=>{\n            return new Promise((resolve, reject)=>{\n                const unsubscribe = this.on(\"joinResponse\", (event)=>{\n                    clearTimeout(timeoutId);\n                    unsubscribe();\n                    resolve(event);\n                });\n                const timeoutId = setTimeout(()=>{\n                    unsubscribe();\n                    reject(new Error('Waiting for \"joinResponse\" has timed out'));\n                }, timeout);\n            });\n        };\n        /**\n         * Starts publishing the given video stream to the call.\n         * The stream will be stopped if the user changes an input device, or if the user leaves the call.\n         *\n         * Consecutive calls to this method will replace the previously published stream.\n         * The previous video stream will be stopped.\n         *\n         * @param videoStream the video stream to publish.\n         * @param opts the options to use when publishing the stream.\n         */ this.publishVideoStream = async (videoStream, opts = {})=>{\n            // we should wait until we get a JoinResponse from the SFU,\n            // otherwise we risk breaking the ICETrickle flow.\n            await this.assertCallJoined();\n            if (!this.publisher) {\n                this.logger(\"error\", \"Trying to publish video before join is completed\");\n                throw new Error(`Call not joined yet.`);\n            }\n            const [videoTrack] = videoStream.getVideoTracks();\n            if (!videoTrack) {\n                this.logger(\"error\", `There is no video track to publish in the stream.`);\n                return;\n            }\n            await this.publisher.publishStream(videoStream, videoTrack, TrackType.VIDEO, opts);\n        };\n        /**\n         * Starts publishing the given audio stream to the call.\n         * The stream will be stopped if the user changes an input device, or if the user leaves the call.\n         *\n         * Consecutive calls to this method will replace the audio stream that is currently being published.\n         * The previous audio stream will be stopped.\n         *\n         * @param audioStream the audio stream to publish.\n         */ this.publishAudioStream = async (audioStream)=>{\n            // we should wait until we get a JoinResponse from the SFU,\n            // otherwise we risk breaking the ICETrickle flow.\n            await this.assertCallJoined();\n            if (!this.publisher) {\n                this.logger(\"error\", \"Trying to publish audio before join is completed\");\n                throw new Error(`Call not joined yet.`);\n            }\n            const [audioTrack] = audioStream.getAudioTracks();\n            if (!audioTrack) {\n                this.logger(\"error\", `There is no audio track in the stream to publish`);\n                return;\n            }\n            await this.publisher.publishStream(audioStream, audioTrack, TrackType.AUDIO);\n        };\n        /**\n         * Starts publishing the given screen-share stream to the call.\n         *\n         * Consecutive calls to this method will replace the previous screen-share stream.\n         * The previous screen-share stream will be stopped.\n         *\n         * @param screenShareStream the screen-share stream to publish.\n         * @param opts the options to use when publishing the stream.\n         */ this.publishScreenShareStream = async (screenShareStream, opts = {})=>{\n            // we should wait until we get a JoinResponse from the SFU,\n            // otherwise we risk breaking the ICETrickle flow.\n            await this.assertCallJoined();\n            if (!this.publisher) {\n                this.logger(\"error\", \"Trying to publish screen share before join is completed\");\n                throw new Error(`Call not joined yet.`);\n            }\n            const [screenShareTrack] = screenShareStream.getVideoTracks();\n            if (!screenShareTrack) {\n                this.logger(\"error\", `There is no video track in the screen share stream to publish`);\n                return;\n            }\n            await this.publisher.publishStream(screenShareStream, screenShareTrack, TrackType.SCREEN_SHARE, opts);\n            const [screenShareAudioTrack] = screenShareStream.getAudioTracks();\n            if (screenShareAudioTrack) {\n                await this.publisher.publishStream(screenShareStream, screenShareAudioTrack, TrackType.SCREEN_SHARE_AUDIO, opts);\n            }\n        };\n        /**\n         * Stops publishing the given track type to the call, if it is currently being published.\n         * Underlying track will be stopped and removed from the publisher.\n         *\n         * @param trackType the track type to stop publishing.\n         * @param stopTrack if `true` the track will be stopped, else it will be just disabled\n         */ this.stopPublish = async (trackType, stopTrack = true)=>{\n            this.logger(\"info\", `stopPublish ${TrackType[trackType]}, stop tracks: ${stopTrack}`);\n            await this.publisher?.unpublishStream(trackType, stopTrack);\n        };\n        /**\n         * Update track subscription configuration for one or more participants.\n         * You have to create a subscription for each participant for all the different kinds of tracks you want to receive.\n         * You can only subscribe for tracks after the participant started publishing the given kind of track.\n         *\n         * @param trackType the kind of subscription to update.\n         * @param changes the list of subscription changes to do.\n         * @param type the debounce type to use for the update.\n         */ this.updateSubscriptionsPartial = (trackType, changes, type = DebounceType.SLOW)=>{\n            if (trackType === \"video\") {\n                this.logger(\"warn\", `updateSubscriptionsPartial: ${trackType} is deprecated. Please switch to 'videoTrack'`);\n                trackType = \"videoTrack\";\n            } else if (trackType === \"screen\") {\n                this.logger(\"warn\", `updateSubscriptionsPartial: ${trackType} is deprecated. Please switch to 'screenShareTrack'`);\n                trackType = \"screenShareTrack\";\n            }\n            const participants = this.state.updateParticipants(Object.entries(changes).reduce((acc, [sessionId, change])=>{\n                if (change.dimension?.height) {\n                    change.dimension.height = Math.ceil(change.dimension.height);\n                }\n                if (change.dimension?.width) {\n                    change.dimension.width = Math.ceil(change.dimension.width);\n                }\n                const prop = trackType === \"videoTrack\" ? \"videoDimension\" : trackType === \"screenShareTrack\" ? \"screenShareDimension\" : undefined;\n                if (prop) {\n                    acc[sessionId] = {\n                        [prop]: change.dimension\n                    };\n                }\n                return acc;\n            }, {}));\n            if (participants) {\n                this.updateSubscriptions(participants, type);\n            }\n        };\n        this.updateSubscriptions = (participants, type = DebounceType.SLOW)=>{\n            const subscriptions = [];\n            for (const p of participants){\n                // we don't want to subscribe to our own tracks\n                if (p.isLocalParticipant) continue;\n                // NOTE: audio tracks don't have to be requested explicitly\n                // as the SFU will implicitly subscribe us to all of them,\n                // once they become available.\n                if (p.videoDimension && p.publishedTracks.includes(TrackType.VIDEO)) {\n                    subscriptions.push({\n                        userId: p.userId,\n                        sessionId: p.sessionId,\n                        trackType: TrackType.VIDEO,\n                        dimension: p.videoDimension\n                    });\n                }\n                if (p.screenShareDimension && p.publishedTracks.includes(TrackType.SCREEN_SHARE)) {\n                    subscriptions.push({\n                        userId: p.userId,\n                        sessionId: p.sessionId,\n                        trackType: TrackType.SCREEN_SHARE,\n                        dimension: p.screenShareDimension\n                    });\n                }\n                if (p.publishedTracks.includes(TrackType.SCREEN_SHARE_AUDIO)) {\n                    subscriptions.push({\n                        userId: p.userId,\n                        sessionId: p.sessionId,\n                        trackType: TrackType.SCREEN_SHARE_AUDIO\n                    });\n                }\n            }\n            // schedule update\n            this.trackSubscriptionsSubject.next({\n                type,\n                data: subscriptions\n            });\n        };\n        /**\n         * Will enhance the reported stats with additional participant-specific information (`callStatsReport$` state [store variable](./StreamVideoClient.md/#readonlystatestore)).\n         * This is usually helpful when detailed stats for a specific participant are needed.\n         *\n         * @param sessionId the sessionId to start reporting for.\n         */ this.startReportingStatsFor = (sessionId)=>{\n            return this.statsReporter?.startReportingStatsFor(sessionId);\n        };\n        /**\n         * Opposite of `startReportingStatsFor`.\n         * Will turn off stats reporting for a specific participant.\n         *\n         * @param sessionId the sessionId to stop reporting for.\n         */ this.stopReportingStatsFor = (sessionId)=>{\n            return this.statsReporter?.stopReportingStatsFor(sessionId);\n        };\n        /**\n         * Resets the last sent reaction for the user holding the given `sessionId`. This is a local action, it won't reset the reaction on the backend.\n         *\n         * @param sessionId the session id.\n         */ this.resetReaction = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                reaction: undefined\n            });\n        };\n        /**\n         * Sets the list of criteria to sort the participants by.\n         *\n         * @param criteria the list of criteria to sort the participants by.\n         */ this.setSortParticipantsBy = (criteria)=>{\n            return this.state.setSortParticipantsBy(criteria);\n        };\n        /**\n         * Updates the list of video layers to publish.\n         *\n         * @internal\n         * @param enabledLayers the list of layers to enable.\n         */ this.updatePublishQuality = async (enabledLayers)=>{\n            return this.publisher?.updateVideoPublishQuality(enabledLayers);\n        };\n        this.assertCallJoined = ()=>{\n            return new Promise((resolve)=>{\n                this.state.callingState$.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_23__.takeWhile)((state)=>state !== CallingState.JOINED, true), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_32__.filter)((s)=>s === CallingState.JOINED)).subscribe(()=>resolve());\n            });\n        };\n        /**\n         * Sends a reaction to the other call participants.\n         *\n         * @param reaction the reaction to send.\n         */ this.sendReaction = async (reaction)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/reaction`, reaction);\n        };\n        /**\n         * Blocks the user with the given `userId`.\n         *\n         * @param userId the id of the user to block.\n         */ this.blockUser = async (userId)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/block`, {\n                user_id: userId\n            });\n        };\n        /**\n         * Unblocks the user with the given `userId`.\n         *\n         * @param userId the id of the user to unblock.\n         */ this.unblockUser = async (userId)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/unblock`, {\n                user_id: userId\n            });\n        };\n        /**\n         * Mutes the current user.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteSelf = (type)=>{\n            const myUserId = this.currentUserId;\n            if (myUserId) {\n                return this.muteUser(myUserId, type);\n            }\n        };\n        /**\n         * Mutes all the other participants.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteOthers = (type)=>{\n            const trackType = muteTypeToTrackType(type);\n            if (!trackType) return;\n            const userIdsToMute = [];\n            for (const participant of this.state.remoteParticipants){\n                if (participant.publishedTracks.includes(trackType)) {\n                    userIdsToMute.push(participant.userId);\n                }\n            }\n            return this.muteUser(userIdsToMute, type);\n        };\n        /**\n         * Mutes the user with the given `userId`.\n         *\n         * @param userId the id of the user to mute.\n         * @param type the type of the mute operation.\n         */ this.muteUser = (userId, type)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mute_users`, {\n                user_ids: Array.isArray(userId) ? userId : [\n                    userId\n                ],\n                [type]: true\n            });\n        };\n        /**\n         * Will mute all users in the call.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteAllUsers = (type)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mute_users`, {\n                mute_all_users: true,\n                [type]: true\n            });\n        };\n        /**\n         * Starts recording the call\n         */ this.startRecording = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/start_recording`, request ? request : {});\n        };\n        /**\n         * Stops recording the call\n         */ this.stopRecording = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_recording`, {});\n        };\n        /**\n         * Sends a `call.permission_request` event to all users connected to the call. The call settings object contains infomration about which permissions can be requested during a call (for example a user might be allowed to request permission to publish audio, but not video).\n         */ this.requestPermissions = async (data)=>{\n            const { permissions } = data;\n            const canRequestPermissions = permissions.every((permission)=>this.permissionsContext.canRequest(permission));\n            if (!canRequestPermissions) {\n                throw new Error(`You are not allowed to request permissions: ${permissions.join(\", \")}`);\n            }\n            return this.streamClient.post(`${this.streamClientBasePath}/request_permission`, data);\n        };\n        /**\n         * Allows you to grant certain permissions to a user in a call.\n         * The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * Supported permissions that can be granted are:\n         * - `send-audio`\n         * - `send-video`\n         * - `screenshare`\n         *\n         * @param userId the id of the user to grant permissions to.\n         * @param permissions the permissions to grant.\n         */ this.grantPermissions = async (userId, permissions)=>{\n            return this.updateUserPermissions({\n                user_id: userId,\n                grant_permissions: permissions\n            });\n        };\n        /**\n         * Allows you to revoke certain permissions from a user in a call.\n         * The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * Supported permissions that can be revoked are:\n         * - `send-audio`\n         * - `send-video`\n         * - `screenshare`\n         *\n         * @param userId the id of the user to revoke permissions from.\n         * @param permissions the permissions to revoke.\n         */ this.revokePermissions = async (userId, permissions)=>{\n            return this.updateUserPermissions({\n                user_id: userId,\n                revoke_permissions: permissions\n            });\n        };\n        /**\n         * Allows you to grant or revoke a specific permission to a user in a call. The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * When revoking a permission, this endpoint will also mute the relevant track from the user. This is similar to muting a user with the difference that the user will not be able to unmute afterwards.\n         *\n         * Supported permissions that can be granted or revoked: `send-audio`, `send-video` and `screenshare`.\n         *\n         * `call.permissions_updated` event is sent to all members of the call.\n         *\n         */ this.updateUserPermissions = async (data)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/user_permissions`, data);\n        };\n        /**\n         * Starts the livestreaming of the call.\n         *\n         * @param data the request data.\n         * @param params the request params.\n         */ this.goLive = async (data = {}, params)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/go_live`, data, params);\n        };\n        /**\n         * Stops the livestreaming of the call.\n         */ this.stopLive = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_live`, {});\n        };\n        /**\n         * Starts the broadcasting of the call.\n         */ this.startHLS = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/start_broadcasting`, {});\n        };\n        /**\n         * Stops the broadcasting of the call.\n         */ this.stopHLS = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_broadcasting`, {});\n        };\n        /**\n         * Updates the call settings or custom data.\n         *\n         * @param updates the updates to apply to the call.\n         */ this.update = async (updates)=>{\n            const response = await this.streamClient.patch(`${this.streamClientBasePath}`, updates);\n            const { call, members, own_capabilities } = response;\n            this.state.updateFromCallResponse(call);\n            this.state.setMembers(members);\n            this.state.setOwnCapabilities(own_capabilities);\n            return response;\n        };\n        /**\n         * Ends the call. Once the call is ended, it cannot be re-joined.\n         */ this.endCall = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mark_ended`);\n        };\n        /**\n         * Pins the given session to the top of the participants list.\n         *\n         * @param sessionId the sessionId to pin.\n         */ this.pin = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                pin: {\n                    isLocalPin: true,\n                    pinnedAt: Date.now()\n                }\n            });\n        };\n        /**\n         * Unpins the given session from the top of the participants list.\n         *\n         * @param sessionId the sessionId to unpin.\n         */ this.unpin = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                pin: undefined\n            });\n        };\n        /**\n         * Pins the given session to the top of the participants list for everyone\n         * in the call.\n         * You can execute this method only if you have the `pin-for-everyone` capability.\n         *\n         * @param request the request object.\n         */ this.pinForEveryone = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/pin`, request);\n        };\n        /**\n         * Unpins the given session from the top of the participants list for everyone\n         * in the call.\n         * You can execute this method only if you have the `pin-for-everyone` capability.\n         *\n         * @param request the request object.\n         */ this.unpinForEveryone = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/unpin`, request);\n        };\n        /**\n         * Query call members with filter query. The result won't be stored in call state.\n         * @param request\n         * @returns\n         */ this.queryMembers = (request)=>{\n            return this.streamClient.post(\"/call/members\", {\n                ...request || {},\n                id: this.id,\n                type: this.type\n            });\n        };\n        /**\n         * Will update the call members.\n         *\n         * @param data the request data.\n         */ this.updateCallMembers = async (data)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/members`, data);\n        };\n        /**\n         * Schedules an auto-drop timeout based on the call settings.\n         * Applicable only for ringing calls.\n         */ this.scheduleAutoDrop = ()=>{\n            clearTimeout(this.dropTimeout);\n            this.leaveCallHooks.add(createSubscription(this.state.settings$, (settings)=>{\n                if (!settings) return;\n                // ignore if the call is not ringing\n                if (this.state.callingState !== CallingState.RINGING) return;\n                const timeoutInMs = settings.ring.auto_cancel_timeout_ms;\n                // 0 means no auto-drop\n                if (timeoutInMs <= 0) return;\n                clearTimeout(this.dropTimeout);\n                this.dropTimeout = setTimeout(()=>{\n                    this.leave({\n                        reason: \"ring: timeout\"\n                    }).catch((err)=>{\n                        this.logger(\"error\", \"Failed to drop call\", err);\n                    });\n                }, timeoutInMs);\n            }));\n        };\n        /**\n         * Retrieves the list of recordings for the current call or call session.\n         *\n         * If `callSessionId` is provided, it will return the recordings for that call session.\n         * Otherwise, all recordings for the current call will be returned.\n         *\n         * @param callSessionId the call session id to retrieve recordings for.\n         */ this.queryRecordings = async (callSessionId)=>{\n            let endpoint = this.streamClientBasePath;\n            if (callSessionId) {\n                endpoint = `${endpoint}/${callSessionId}`;\n            }\n            return this.streamClient.get(`${endpoint}/recordings`);\n        };\n        /**\n         * Retrieve call statistics for a particular call session (historical).\n         * Here `callSessionID` is mandatory.\n         *\n         * @param callSessionID the call session ID to retrieve statistics for.\n         * @returns The call stats.\n         */ this.getCallStats = async (callSessionID)=>{\n            const endpoint = `${this.streamClientBasePath}/stats/${callSessionID}`;\n            return this.streamClient.get(endpoint);\n        };\n        /**\n         * Sends a custom event to all call participants.\n         *\n         * @param payload the payload to send.\n         */ this.sendCustomEvent = async (payload)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/event`, {\n                custom: payload\n            });\n        };\n        this.applyDeviceConfig = ()=>{\n            this.initCamera({\n                setStatus: false\n            });\n            this.initMic({\n                setStatus: false\n            });\n        };\n        /**\n         * Will begin tracking the given element for visibility changes within the\n         * configured viewport element (`call.setViewport`).\n         *\n         * @param element the element to track.\n         * @param sessionId the session id.\n         * @param trackType the video mode.\n         */ this.trackElementVisibility = (element, sessionId, trackType)=>{\n            return this.dynascaleManager.trackElementVisibility(element, sessionId, trackType);\n        };\n        /**\n         * Sets the viewport element to track bound video elements for visibility.\n         *\n         * @param element the viewport element.\n         */ this.setViewport = (element)=>{\n            return this.dynascaleManager.setViewport(element);\n        };\n        /**\n         * Binds a DOM <video> element to the given session id.\n         * This method will make sure that the video element will play\n         * the correct video stream for the given session id.\n         *\n         * Under the hood, it would also keep track of the video element dimensions\n         * and update the subscription accordingly in order to optimize the bandwidth.\n         *\n         * If a \"viewport\" is configured, the video element will be automatically\n         * tracked for visibility and the subscription will be updated accordingly.\n         *\n         * @param videoElement the video element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         */ this.bindVideoElement = (videoElement, sessionId, trackType)=>{\n            const unbind = this.dynascaleManager.bindVideoElement(videoElement, sessionId, trackType);\n            if (!unbind) return;\n            this.leaveCallHooks.add(unbind);\n            return ()=>{\n                this.leaveCallHooks.delete(unbind);\n                unbind();\n            };\n        };\n        /**\n         * Binds a DOM <audio> element to the given session id.\n         *\n         * This method will make sure that the audio element will\n         * play the correct audio stream for the given session id.\n         *\n         * @param audioElement the audio element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of audio.\n         */ this.bindAudioElement = (audioElement, sessionId, trackType = \"audioTrack\")=>{\n            const unbind = this.dynascaleManager.bindAudioElement(audioElement, sessionId, trackType);\n            if (!unbind) return;\n            this.leaveCallHooks.add(unbind);\n            return ()=>{\n                this.leaveCallHooks.delete(unbind);\n                unbind();\n            };\n        };\n        /**\n         * Binds a DOM <img> element to this call's thumbnail (if enabled in settings).\n         *\n         * @param imageElement the image element to bind to.\n         * @param opts options for the binding.\n         */ this.bindCallThumbnailElement = (imageElement, opts = {})=>{\n            const handleError = ()=>{\n                imageElement.src = opts.fallbackImageSource || \"https://getstream.io/random_svg/?name=x&id=x\";\n            };\n            const unsubscribe = createSubscription(this.state.thumbnails$, (thumbnails)=>{\n                if (!thumbnails) return;\n                imageElement.addEventListener(\"error\", handleError);\n                const thumbnailUrl = new URL(thumbnails.image_url);\n                thumbnailUrl.searchParams.set(\"w\", String(imageElement.clientWidth));\n                thumbnailUrl.searchParams.set(\"h\", String(imageElement.clientHeight));\n                imageElement.src = thumbnailUrl.toString();\n            });\n            return ()=>{\n                unsubscribe();\n                imageElement.removeEventListener(\"error\", handleError);\n            };\n        };\n        this.type = type;\n        this.id = id;\n        this.cid = `${type}:${id}`;\n        this.ringingSubject = new _barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_19__.BehaviorSubject(ringing);\n        this.watching = watching;\n        this.streamClient = streamClient;\n        this.clientStore = clientStore;\n        this.streamClientBasePath = `/call/${this.type}/${this.id}`;\n        this.logger = getLogger([\n            \"Call\"\n        ]);\n        const callTypeConfig = CallTypes.get(type);\n        const participantSorter = sortParticipantsBy || callTypeConfig.options.sortParticipantsBy;\n        if (participantSorter) {\n            this.state.setSortParticipantsBy(participantSorter);\n        }\n        this.state.setMembers(members || []);\n        this.state.setOwnCapabilities(ownCapabilities || []);\n        this.state.setCallingState(ringing ? CallingState.RINGING : CallingState.IDLE);\n        this.on(\"all\", (event)=>{\n            // update state with the latest event data\n            this.state.updateFromEvent(event);\n        });\n        this.leaveCallHooks.add(registerEventHandlers(this, this.state, this.dispatcher));\n        this.registerEffects();\n        this.leaveCallHooks.add(createSubscription(this.trackSubscriptionsSubject.pipe((0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_33__.debounce)((v)=>(0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_34__.timer)(v.type)), (0,_barrel_optimize_names_BehaviorSubject_Observable_ReplaySubject_combineLatest_concatMap_debounce_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_filter_from_map_merge_of_pairwise_shareReplay_takeWhile_timer_rxjs__WEBPACK_IMPORTED_MODULE_20__.map)((v)=>v.data)), (subscriptions)=>this.sfuClient?.updateSubscriptions(subscriptions)));\n        this.camera = new CameraManager(this);\n        this.microphone = new MicrophoneManager(this);\n        this.speaker = new SpeakerManager(this);\n        this.screenShare = new ScreenShareManager(this);\n    }\n    registerEffects() {\n        this.leaveCallHooks.add(// handles updating the permissions context when the settings change.\n        createSubscription(this.state.settings$, (settings)=>{\n            if (!settings) return;\n            this.permissionsContext.setCallSettings(settings);\n        }));\n        this.leaveCallHooks.add(// handle the case when the user permissions are modified.\n        createSubscription(this.state.ownCapabilities$, (ownCapabilities)=>{\n            // update the permission context.\n            this.permissionsContext.setPermissions(ownCapabilities);\n            if (!this.publisher) return;\n            // check if the user still has publishing permissions and stop publishing if not.\n            const permissionToTrackType = {\n                [OwnCapability.SEND_AUDIO]: TrackType.AUDIO,\n                [OwnCapability.SEND_VIDEO]: TrackType.VIDEO,\n                [OwnCapability.SCREENSHARE]: TrackType.SCREEN_SHARE\n            };\n            for (const [permission, trackType] of Object.entries(permissionToTrackType)){\n                const hasPermission = this.permissionsContext.hasPermission(permission);\n                if (!hasPermission && (this.publisher.isPublishing(trackType) || this.publisher.isLive(trackType))) {\n                    // Stop tracks, then notify device manager\n                    this.stopPublish(trackType).catch((err)=>{\n                        this.logger(\"error\", `Error stopping publish ${trackType}`, err);\n                    }).then(()=>{\n                        if (trackType === TrackType.VIDEO && this.camera.state.status === \"enabled\") {\n                            this.camera.disable().catch((err)=>this.logger(\"error\", `Error disabling camera after permission revoked`, err));\n                        }\n                        if (trackType === TrackType.AUDIO && this.microphone.state.status === \"enabled\") {\n                            this.microphone.disable().catch((err)=>this.logger(\"error\", `Error disabling microphone after permission revoked`, err));\n                        }\n                    });\n                }\n            }\n        }));\n        this.leaveCallHooks.add(// handles the case when the user is blocked by the call owner.\n        createSubscription(this.state.blockedUserIds$, async (blockedUserIds)=>{\n            if (!blockedUserIds || blockedUserIds.length === 0) return;\n            const currentUserId = this.currentUserId;\n            if (currentUserId && blockedUserIds.includes(currentUserId)) {\n                this.logger(\"info\", \"Leaving call because of being blocked\");\n                await this.leave({\n                    reason: \"user blocked\"\n                });\n            }\n        }));\n        this.leaveCallHooks.add(// watch for auto drop cancellation\n        createSubscription(this.state.callingState$, (callingState)=>{\n            if (!this.ringing) return;\n            if (callingState === CallingState.JOINED || callingState === CallingState.JOINING || callingState === CallingState.LEFT) {\n                clearTimeout(this.dropTimeout);\n                this.dropTimeout = undefined;\n            }\n        }));\n        this.leaveCallHooks.add(// \"ringing\" mode effects and event handlers\n        createSubscription(this.ringingSubject, (isRinging)=>{\n            if (!isRinging) return;\n            this.scheduleAutoDrop();\n            if (this.state.callingState === CallingState.IDLE) {\n                this.state.setCallingState(CallingState.RINGING);\n            }\n            this.leaveCallHooks.add(registerRingingCallEventHandlers(this));\n        }));\n    }\n    /**\n     * A flag indicating whether the call is \"ringing\" type of call.\n     */ get ringing() {\n        return getCurrentValue(this.ringingSubject);\n    }\n    /**\n     * Retrieves the current user ID.\n     */ get currentUserId() {\n        return this.clientStore.connectedUser?.id;\n    }\n    /**\n     * A flag indicating whether the call was created by the current user.\n     */ get isCreatedByMe() {\n        return this.state.createdBy?.id === this.currentUserId;\n    }\n    async initCamera(options) {\n        // Wait for any in progress camera operation\n        if (this.camera.enablePromise) {\n            await this.camera.enablePromise;\n        }\n        if (this.camera.disablePromise) {\n            await this.camera.disablePromise;\n        }\n        if (this.state.localParticipant?.videoStream || !this.permissionsContext.hasPermission(\"send-video\")) {\n            return;\n        }\n        // Set camera direction if it's not yet set\n        if (!this.camera.state.direction && !this.camera.state.selectedDevice) {\n            let defaultDirection = \"front\";\n            const backendSetting = this.state.settings?.video.camera_facing;\n            if (backendSetting) {\n                defaultDirection = backendSetting === \"front\" ? \"front\" : \"back\";\n            }\n            this.camera.state.setDirection(defaultDirection);\n        }\n        // Set target resolution\n        const targetResolution = this.state.settings?.video.target_resolution;\n        if (targetResolution) {\n            await this.camera.selectTargetResolution(targetResolution);\n        }\n        if (options.setStatus) {\n            // Publish already that was set before we joined\n            if (this.camera.state.status === \"enabled\" && this.camera.state.mediaStream && !this.publisher?.isPublishing(TrackType.VIDEO)) {\n                await this.publishVideoStream(this.camera.state.mediaStream, {\n                    preferredCodec: this.camera.preferredCodec\n                });\n            }\n            // Start camera if backend config specifies, and there is no local setting\n            if (this.camera.state.status === undefined && this.state.settings?.video.camera_default_on) {\n                await this.camera.enable();\n            }\n        }\n    }\n    async initMic(options) {\n        // Wait for any in progress mic operation\n        if (this.microphone.enablePromise) {\n            await this.microphone.enablePromise;\n        }\n        if (this.microphone.disablePromise) {\n            await this.microphone.disablePromise;\n        }\n        if (this.state.localParticipant?.audioStream || !this.permissionsContext.hasPermission(\"send-audio\")) {\n            return;\n        }\n        if (options.setStatus) {\n            // Publish media stream that was set before we joined\n            if (this.microphone.state.status === \"enabled\" && this.microphone.state.mediaStream && !this.publisher?.isPublishing(TrackType.AUDIO)) {\n                await this.publishAudioStream(this.microphone.state.mediaStream);\n            }\n            // Start mic if backend config specifies, and there is no local setting\n            if (this.microphone.state.status === undefined && this.state.settings?.audio.mic_default_on) {\n                await this.microphone.enable();\n            }\n        }\n    }\n}\nclass InsightMetrics {\n    constructor(){\n        this.connectionStartTimestamp = null;\n        this.wsTotalFailures = 0;\n        this.wsConsecutiveFailures = 0;\n        this.instanceClientId = randomId();\n    }\n}\n/**\n * postInsights is not supposed to be used by end users directly within chat application, and thus is kept isolated\n * from all the client/connection code/logic.\n *\n * @param insightType\n * @param insights\n */ const postInsights = async (insightType, insights)=>{\n    const maxAttempts = 3;\n    for(let i = 0; i < maxAttempts; i++){\n        try {\n            await axios__WEBPACK_IMPORTED_MODULE_35__[\"default\"].post(`https://chat-insights.getstream.io/insights/${insightType}`, insights);\n        } catch (e) {\n            await sleep((i + 1) * 3000);\n            continue;\n        }\n        break;\n    }\n};\nfunction buildWsFatalInsight(connection, event) {\n    return {\n        ...event,\n        ...buildWsBaseInsight(connection)\n    };\n}\nfunction buildWsBaseInsight(connection) {\n    const { client } = connection;\n    return {\n        ready_state: connection.ws?.readyState,\n        url: connection._buildUrl(),\n        api_key: client.key,\n        start_ts: client.insightMetrics.connectionStartTimestamp,\n        end_ts: new Date().getTime(),\n        auth_type: client.getAuthType(),\n        token: client.tokenManager.token,\n        user_id: client.userID,\n        user_details: client._user,\n        // device: client.options.device,\n        device: \"browser\",\n        client_id: connection.connectionID,\n        ws_details: connection.ws,\n        ws_consecutive_failures: client.insightMetrics.wsConsecutiveFailures,\n        ws_total_failures: client.insightMetrics.wsTotalFailures,\n        request_id: connection.requestID,\n        online: typeof navigator !== \"undefined\" ? navigator?.onLine : null,\n        user_agent: typeof navigator !== \"undefined\" ? navigator?.userAgent : null,\n        instance_client_id: client.insightMetrics.instanceClientId\n    };\n}\nfunction buildWsSuccessAfterFailureInsight(connection) {\n    return buildWsBaseInsight(connection);\n}\n// Type guards to check WebSocket error type\nconst isCloseEvent = (res)=>res.code !== undefined;\nconst isErrorEvent = (res)=>res.error !== undefined;\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */ class StableWSConnection {\n    constructor(client){\n        this._log = (msg, extra = {}, level = \"info\")=>{\n            this.client.logger(level, \"connection:\" + msg, {\n                ...extra\n            });\n        };\n        this.setClient = (client)=>{\n            this.client = client;\n        };\n        /**\n         * Builds and returns the url for websocket.\n         * @private\n         * @returns url string\n         */ this._buildUrl = ()=>{\n            const params = new URLSearchParams();\n            // const qs = encodeURIComponent(this.client._buildWSPayload(this.requestID));\n            // params.set('json', qs);\n            params.set(\"api_key\", this.client.key);\n            params.set(\"stream-auth-type\", this.client.getAuthType());\n            params.set(\"X-Stream-Client\", this.client.getUserAgent());\n            // params.append('authorization', this.client._getToken()!);\n            return `${this.client.wsBaseURL}/connect?${params.toString()}`;\n        };\n        /**\n         * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n         *\n         * @param {Event} event Event with type online or offline\n         *\n         */ this.onlineStatusChanged = (event)=>{\n            if (event.type === \"offline\") {\n                // mark the connection as down\n                this._log(\"onlineStatusChanged() - Status changing to offline\");\n                // we know that the app is offline so dispatch the unhealthy connection event immediately\n                this._setHealth(false, true);\n            } else if (event.type === \"online\") {\n                // retry right now...\n                // We check this.isHealthy, not sure if it's always\n                // smart to create a new WS connection if the old one is still up and running.\n                // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n                this._log(`onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`);\n                if (!this.isHealthy) {\n                    this._reconnect({\n                        interval: 10\n                    });\n                }\n            }\n        };\n        this.onopen = (wsID)=>{\n            if (this.wsID !== wsID) return;\n            const user = this.client.user;\n            if (!user) {\n                this.client.logger(\"error\", `User not set, can't connect to WS`);\n                return;\n            }\n            const token = this.client._getToken();\n            if (!token) {\n                this.client.logger(\"error\", `Token not set, can't connect authenticate`);\n                return;\n            }\n            const authMessage = {\n                token,\n                user_details: {\n                    id: user.id,\n                    name: user.name,\n                    image: user.image,\n                    custom: user.custom\n                }\n            };\n            this.authenticationSent = true;\n            this.ws?.send(JSON.stringify(authMessage));\n            this._log(\"onopen() - onopen callback\", {\n                wsID\n            });\n        };\n        this.onmessage = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            this._log(\"onmessage() - onmessage callback\", {\n                event,\n                wsID\n            });\n            const data = typeof event.data === \"string\" ? JSON.parse(event.data) : null;\n            // we wait till the first message before we consider the connection open.\n            // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n            // after that a ws.onclose.\n            if (!this.isResolved && data && data.type === \"connection.error\") {\n                this.isResolved = true;\n                if (data.error) {\n                    // @ts-expect-error - the types of _errorFromWSEvent are incorrect\n                    this.rejectPromise?.(this._errorFromWSEvent(data, false));\n                    return;\n                }\n            }\n            // trigger the event..\n            this.lastEvent = new Date();\n            if (data && (data.type === \"health.check\" || data.type === \"connection.ok\")) {\n                // the initial health-check should come from the client\n                this.scheduleNextPing();\n            }\n            if (data && data.type === \"connection.ok\") {\n                this.resolvePromise?.(data);\n                this._setHealth(true);\n            }\n            if (data && data.type === \"connection.error\" && data.error) {\n                const { code } = data.error;\n                this.isHealthy = false;\n                this.isConnecting = false;\n                this.consecutiveFailures += 1;\n                if (code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                    clearTimeout(this.connectionCheckTimeoutRef);\n                    this._log(\"connect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n                    this._reconnect({\n                        refreshToken: true\n                    });\n                }\n            }\n            if (data) {\n                this.client.dispatchEvent(data);\n            }\n            this.scheduleConnectionCheck();\n        };\n        this.onclose = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            this._log(\"onclose() - onclose callback - \" + event.code, {\n                event,\n                wsID\n            });\n            if (event.code === KnownCodes.WS_CLOSED_SUCCESS) {\n                // this is a permanent error raised by stream..\n                // usually caused by invalid auth details\n                const error = new Error(`WS connection reject with error ${event.reason}`);\n                error.reason = event.reason;\n                error.code = event.code;\n                error.wasClean = event.wasClean;\n                error.target = event.target;\n                this.rejectPromise?.(error);\n                this._log(`onclose() - WS connection reject with error ${event.reason}`, {\n                    event\n                });\n            } else {\n                this.consecutiveFailures += 1;\n                this.totalFailures += 1;\n                this._setHealth(false);\n                this.isConnecting = false;\n                this.rejectPromise?.(this._errorFromWSEvent(event));\n                this._log(`onclose() - WS connection closed. Calling reconnect ...`, {\n                    event\n                });\n                // reconnect if its an abnormal failure\n                this._reconnect();\n            }\n        };\n        this.onerror = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            this.consecutiveFailures += 1;\n            this.totalFailures += 1;\n            this._setHealth(false);\n            this.isConnecting = false;\n            this.rejectPromise?.(this._errorFromWSEvent(event));\n            this._log(`onerror() - WS connection resulted into error`, {\n                event\n            });\n            this._reconnect();\n        };\n        /**\n         * _setHealth - Sets the connection to healthy or unhealthy.\n         * Broadcasts an event in case the connection status changed.\n         *\n         * @param {boolean} healthy boolean indicating if the connection is healthy or not\n         * @param {boolean} dispatchImmediately boolean indicating to dispatch event immediately even if the connection is unhealthy\n         *\n         */ this._setHealth = (healthy, dispatchImmediately = false)=>{\n            if (healthy === this.isHealthy) return;\n            this.isHealthy = healthy;\n            if (this.isHealthy || dispatchImmediately) {\n                this.client.dispatchEvent({\n                    type: \"connection.changed\",\n                    online: this.isHealthy\n                });\n                return;\n            }\n            // we're offline, wait few seconds and fire and event if still offline\n            setTimeout(()=>{\n                if (this.isHealthy) return;\n                this.client.dispatchEvent({\n                    type: \"connection.changed\",\n                    online: this.isHealthy\n                });\n            }, 5000);\n        };\n        /**\n         * _errorFromWSEvent - Creates an error object for the WS event\n         *\n         */ this._errorFromWSEvent = (event, isWSFailure = true)=>{\n            let code;\n            let statusCode;\n            let message;\n            if (isCloseEvent(event)) {\n                code = event.code;\n                statusCode = \"unknown\";\n                message = event.reason;\n            }\n            if (isErrorEvent(event)) {\n                code = event.error.code;\n                statusCode = event.error.StatusCode;\n                message = event.error.message;\n            }\n            // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.\n            this._log(`_errorFromWSEvent() - WS failed with code ${code}`, {\n                event\n            }, \"warn\");\n            const error = new Error(`WS failed with code ${code} and reason - ${message}`);\n            error.code = code;\n            /**\n             * StatusCode does not exist on any event types but has been left\n             * as is to preserve JS functionality during the TS implementation\n             */ error.StatusCode = statusCode;\n            error.isWSFailure = isWSFailure;\n            return error;\n        };\n        /**\n         * _setupPromise - sets up the this.connectOpen promise\n         */ this._setupConnectionPromise = ()=>{\n            this.isResolved = false;\n            /** a promise that is resolved once ws.open is called */ this.connectionOpen = new Promise((resolve, reject)=>{\n                this.resolvePromise = resolve;\n                this.rejectPromise = reject;\n            });\n        };\n        /**\n         * Schedules a next health check ping for websocket.\n         */ this.scheduleNextPing = ()=>{\n            if (this.healthCheckTimeoutRef) {\n                clearTimeout(this.healthCheckTimeoutRef);\n            }\n            // 30 seconds is the recommended interval (messenger uses this)\n            this.healthCheckTimeoutRef = setTimeout(()=>{\n                // send the healthcheck..., server replies with a health check event\n                const data = [\n                    {\n                        type: \"health.check\",\n                        client_id: this.client.clientID\n                    }\n                ];\n                // try to send on the connection\n                try {\n                    this.ws?.send(JSON.stringify(data));\n                } catch (e) {\n                // error will already be detected elsewhere\n                }\n            }, this.pingInterval);\n        };\n        /**\n         * scheduleConnectionCheck - schedules a check for time difference between last received event and now.\n         * If the difference is more than 35 seconds, it means our health check logic has failed and websocket needs\n         * to be reconnected.\n         */ this.scheduleConnectionCheck = ()=>{\n            if (this.connectionCheckTimeoutRef) {\n                clearTimeout(this.connectionCheckTimeoutRef);\n            }\n            this.connectionCheckTimeoutRef = setTimeout(()=>{\n                const now = new Date();\n                if (this.lastEvent && now.getTime() - this.lastEvent.getTime() > this.connectionCheckTimeout) {\n                    this._log(\"scheduleConnectionCheck - going to reconnect\");\n                    this._setHealth(false);\n                    this._reconnect();\n                }\n            }, this.connectionCheckTimeout);\n        };\n        this.client = client;\n        /** consecutive failures influence the duration of the timeout */ this.consecutiveFailures = 0;\n        /** keep track of the total number of failures */ this.totalFailures = 0;\n        /** We only make 1 attempt to reconnect at the same time.. */ this.isConnecting = false;\n        /** True after the auth payload is sent to the server */ this.authenticationSent = false;\n        /** To avoid reconnect if client is disconnected */ this.isDisconnected = false;\n        /** Boolean that indicates if the connection promise is resolved */ this.isResolved = false;\n        /** Boolean that indicates if we have a working connection to the server */ this.isHealthy = false;\n        /** Incremented when a new WS connection is made */ this.wsID = 1;\n        /** Store the last event time for health checks */ this.lastEvent = null;\n        /** Send a health check message every 25 seconds */ this.pingInterval = 25 * 1000;\n        this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n        addConnectionEventListeners(this.onlineStatusChanged);\n    }\n    /**\n     * connect - Connect to the WS URL\n     * the default 15s timeout allows between 2~3 tries\n     * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n     */ async connect(timeout = 15000) {\n        if (this.isConnecting) {\n            throw Error(`You've called connect twice, can only attempt 1 connection at the time`);\n        }\n        this.isDisconnected = false;\n        try {\n            const healthCheck = await this._connect();\n            this.consecutiveFailures = 0;\n            this._log(`connect() - Established ws connection with healthcheck: ${healthCheck}`);\n        } catch (error) {\n            this.isHealthy = false;\n            this.consecutiveFailures += 1;\n            if (// @ts-ignore\n            error.code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                this._log(\"connect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n                this._reconnect({\n                    refreshToken: true\n                });\n            } else {\n                // @ts-ignore\n                if (!error.isWSFailure) {\n                    // API rejected the connection and we should not retry\n                    throw new Error(JSON.stringify({\n                        // @ts-ignore\n                        code: error.code,\n                        // @ts-ignore\n                        StatusCode: error.StatusCode,\n                        // @ts-ignore\n                        message: error.message,\n                        // @ts-ignore\n                        isWSFailure: error.isWSFailure\n                    }));\n                }\n            }\n        }\n        return await this._waitForHealthy(timeout);\n    }\n    /**\n     * _waitForHealthy polls the promise connection to see if its resolved until it times out\n     * the default 15s timeout allows between 2~3 tries\n     * @param timeout duration(ms)\n     */ async _waitForHealthy(timeout = 15000) {\n        return Promise.race([\n            (async ()=>{\n                const interval = 50; // ms\n                for(let i = 0; i <= timeout; i += interval){\n                    try {\n                        return await this.connectionOpen;\n                    } catch (error) {\n                        if (i === timeout) {\n                            throw new Error(JSON.stringify({\n                                code: error.code,\n                                StatusCode: error.StatusCode,\n                                message: error.message,\n                                isWSFailure: error.isWSFailure\n                            }));\n                        }\n                        await sleep(interval);\n                    }\n                }\n            })(),\n            (async ()=>{\n                await sleep(timeout);\n                this.isConnecting = false;\n                throw new Error(JSON.stringify({\n                    code: \"\",\n                    StatusCode: \"\",\n                    message: \"initial WS connection could not be established\",\n                    isWSFailure: true\n                }));\n            })()\n        ]);\n    }\n    /**\n     * disconnect - Disconnect the connection and doesn't recover...\n     *\n     */ disconnect(timeout) {\n        this._log(`disconnect() - Closing the websocket connection for wsID ${this.wsID}`);\n        this.wsID += 1;\n        this.isConnecting = false;\n        this.isDisconnected = true;\n        // start by removing all the listeners\n        if (this.healthCheckTimeoutRef) {\n            clearInterval(this.healthCheckTimeoutRef);\n        }\n        if (this.connectionCheckTimeoutRef) {\n            clearInterval(this.connectionCheckTimeoutRef);\n        }\n        removeConnectionEventListeners(this.onlineStatusChanged);\n        this.isHealthy = false;\n        // remove ws handlers...\n        if (this.ws && this.ws.removeAllListeners) {\n            this.ws.removeAllListeners();\n        }\n        let isClosedPromise;\n        // and finally close...\n        // Assigning to local here because we will remove it from this before the\n        // promise resolves.\n        const { ws } = this;\n        if (ws && ws.close && ws.readyState === ws.OPEN) {\n            isClosedPromise = new Promise((resolve)=>{\n                const onclose = (event)=>{\n                    this._log(`disconnect() - resolving isClosedPromise ${event ? \"with\" : \"without\"} close frame`, {\n                        event\n                    });\n                    resolve();\n                };\n                ws.onclose = onclose;\n                // In case we don't receive close frame websocket server in time,\n                // lets not wait for more than 1 second.\n                setTimeout(onclose, timeout != null ? timeout : 1000);\n            });\n            this._log(`disconnect() - Manually closed connection by calling client.disconnect()`);\n            ws.close(KnownCodes.WS_CLOSED_SUCCESS, \"Manually closed connection by calling client.disconnect()\");\n        } else {\n            this._log(`disconnect() - ws connection doesn't exist or it is already closed.`);\n            isClosedPromise = Promise.resolve();\n        }\n        delete this.ws;\n        return isClosedPromise;\n    }\n    /**\n     * _connect - Connect to the WS endpoint\n     *\n     * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n     */ async _connect() {\n        if (this.isConnecting || this.isDisconnected && this.client.options.enableWSFallback) return; // simply ignore _connect if it's currently trying to connect\n        this.isConnecting = true;\n        this.requestID = randomId();\n        this.client.insightMetrics.connectionStartTimestamp = new Date().getTime();\n        let isTokenReady = false;\n        try {\n            this._log(`_connect() - waiting for token`);\n            await this.client.tokenManager.tokenReady();\n            isTokenReady = true;\n        } catch (e) {\n        // token provider has failed before, so try again\n        }\n        try {\n            if (!isTokenReady) {\n                this._log(`_connect() - tokenProvider failed before, so going to retry`);\n                await this.client.tokenManager.loadToken();\n            }\n            this._setupConnectionPromise();\n            const wsURL = this._buildUrl();\n            this._log(`_connect() - Connecting to ${wsURL}`, {\n                wsURL,\n                requestID: this.requestID\n            });\n            this.ws = new (isomorphic_ws__WEBPACK_IMPORTED_MODULE_4___default())(wsURL);\n            this.ws.onopen = this.onopen.bind(this, this.wsID);\n            this.ws.onclose = this.onclose.bind(this, this.wsID);\n            this.ws.onerror = this.onerror.bind(this, this.wsID);\n            this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n            const response = await this.connectionOpen;\n            this.isConnecting = false;\n            if (response) {\n                this.connectionID = response.connection_id;\n                this.client.resolveConnectionId?.(this.connectionID);\n                if (this.client.insightMetrics.wsConsecutiveFailures > 0 && this.client.options.enableInsights) {\n                    postInsights(\"ws_success_after_failure\", buildWsSuccessAfterFailureInsight(this));\n                    this.client.insightMetrics.wsConsecutiveFailures = 0;\n                }\n                return response;\n            }\n        } catch (err) {\n            this.isConnecting = false;\n            // @ts-ignore\n            this._log(`_connect() - Error - `, err);\n            if (this.client.options.enableInsights) {\n                this.client.insightMetrics.wsConsecutiveFailures++;\n                this.client.insightMetrics.wsTotalFailures++;\n                const insights = buildWsFatalInsight(this, convertErrorToJson(err));\n                postInsights?.(\"ws_fatal\", insights);\n            }\n            this.client.rejectConnectionId?.();\n            throw err;\n        }\n    }\n    /**\n     * _reconnect - Retry the connection to WS endpoint\n     *\n     * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n     *\n     * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n     * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n     */ async _reconnect(options = {}) {\n        this._log(\"_reconnect() - Initiating the reconnect\");\n        // only allow 1 connection at the time\n        if (this.isConnecting || this.isHealthy) {\n            this._log(\"_reconnect() - Abort (1) since already connecting or healthy\");\n            return;\n        }\n        // reconnect in case of on error or on close\n        // also reconnect if the health check cycle fails\n        let interval = options.interval;\n        if (!interval) {\n            interval = retryInterval(this.consecutiveFailures);\n        }\n        // reconnect, or try again after a little while...\n        await sleep(interval);\n        // Check once again if by some other call to _reconnect is active or connection is\n        // already restored, then no need to proceed.\n        if (this.isConnecting || this.isHealthy) {\n            this._log(\"_reconnect() - Abort (2) since already connecting or healthy\");\n            return;\n        }\n        if (this.isDisconnected && this.client.options.enableWSFallback) {\n            this._log(\"_reconnect() - Abort (3) since disconnect() is called\");\n            return;\n        }\n        this._log(\"_reconnect() - Destroying current WS connection\");\n        // cleanup the old connection\n        this._destroyCurrentWSConnection();\n        if (options.refreshToken) {\n            await this.client.tokenManager.loadToken();\n        }\n        try {\n            await this._connect();\n            this._log(\"_reconnect() - Waiting for recoverCallBack\");\n            // await this.client.recoverState();\n            this._log(\"_reconnect() - Finished recoverCallBack\");\n            this.consecutiveFailures = 0;\n        } catch (error) {\n            this.isHealthy = false;\n            this.consecutiveFailures += 1;\n            if (error.code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                this._log(\"_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n                return this._reconnect({\n                    refreshToken: true\n                });\n            }\n            // reconnect on WS failures, don't reconnect if there is a code bug\n            if (error.isWSFailure) {\n                this._log(\"_reconnect() - WS failure, so going to try to reconnect\");\n                this._reconnect();\n            }\n        }\n        this._log(\"_reconnect() - == END ==\");\n    }\n    /**\n     * _destroyCurrentWSConnection - Removes the current WS connection\n     *\n     */ _destroyCurrentWSConnection() {\n        // increment the ID, meaning we will ignore all messages from the old\n        // ws connection from now on.\n        this.wsID += 1;\n        try {\n            this?.ws?.removeAllListeners();\n            this?.ws?.close();\n        } catch (e) {\n        // we don't care\n        }\n    }\n}\nfunction isString(arrayOrString) {\n    return typeof arrayOrString === \"string\";\n}\nfunction isMapStringCallback(arrayOrString, callback) {\n    return !!callback && isString(arrayOrString);\n}\nfunction map(arrayOrString, callback) {\n    const res = [];\n    if (isString(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {\n        for(let k = 0, len = arrayOrString.length; k < len; k++){\n            if (arrayOrString.charAt(k)) {\n                const kValue = arrayOrString.charAt(k);\n                const mappedValue = callback(kValue, k, arrayOrString);\n                res[k] = mappedValue;\n            }\n        }\n    } else if (!isString(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {\n        for(let k = 0, len = arrayOrString.length; k < len; k++){\n            if (k in arrayOrString) {\n                const kValue = arrayOrString[k];\n                const mappedValue = callback(kValue, k, arrayOrString);\n                res[k] = mappedValue;\n            }\n        }\n    }\n    return res;\n}\nconst encodeBase64 = (data)=>(0,base64_js__WEBPACK_IMPORTED_MODULE_8__.fromByteArray)(new Uint8Array(map(data, (char)=>char.charCodeAt(0))));\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nconst decodeBase64 = (s)=>{\n    const e = {}, w = String.fromCharCode, L = s.length;\n    let i, b = 0, c, x, l = 0, a, r = \"\";\n    const A = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for(i = 0; i < 64; i++){\n        e[A.charAt(i)] = i;\n    }\n    for(x = 0; x < L; x++){\n        c = e[s.charAt(x)];\n        b = (b << 6) + c;\n        l += 6;\n        while(l >= 8){\n            ((a = b >>> (l -= 8) & 0xff) || x < L - 2) && (r += w(a));\n        }\n    }\n    return r;\n};\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserToken\n * @memberof signing\n * @private\n * @param {Secret} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {UR} [extraData] - Extra that should be part of the JWT token\n * @param {SignOptions} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */ function JWTUserToken(apiSecret, userId, extraData = {}, jwtOptions = {}) {\n    if (typeof userId !== \"string\") {\n        throw new TypeError(\"userId should be a string\");\n    }\n    const payload = {\n        user_id: userId,\n        ...extraData\n    };\n    // make sure we return a clear error when jwt is shimmed (ie. browser build)\n    if ((jsonwebtoken__WEBPACK_IMPORTED_MODULE_6___default()) == null || (jsonwebtoken__WEBPACK_IMPORTED_MODULE_6___default().sign) == null) {\n        throw Error(`Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.`);\n    }\n    const opts = Object.assign({\n        algorithm: \"HS256\",\n        noTimestamp: true\n    }, jwtOptions);\n    if (payload.iat) {\n        opts.noTimestamp = false;\n    }\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_6___default().sign(payload, apiSecret, opts);\n}\nfunction JWTServerToken(apiSecret, jwtOptions = {}) {\n    const payload = {\n        server: true\n    };\n    const opts = Object.assign({\n        algorithm: \"HS256\",\n        noTimestamp: true\n    }, jwtOptions);\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_6___default().sign(payload, apiSecret, opts);\n}\nfunction UserFromToken(token) {\n    const fragments = token.split(\".\");\n    if (fragments.length !== 3) {\n        return \"\";\n    }\n    const b64Payload = fragments[1];\n    const payload = decodeBase64(b64Payload);\n    const data = JSON.parse(payload);\n    return data.user_id;\n}\n/**\n *\n * @param {string} userId the id of the user\n * @return {string}\n */ function DevToken(userId) {\n    return [\n        \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\",\n        encodeBase64(JSON.stringify({\n            user_id: userId\n        })),\n        \"devtoken\"\n    ].join(\".\");\n}\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */ class TokenManager {\n    /**\n     * Constructor\n     *\n     * @param {Secret} secret\n     */ constructor(secret){\n        /**\n         * Set the static string token or token provider.\n         * Token provider should return a token string or a promise which resolves to string token.\n         *\n         * @param {TokenOrProvider} tokenOrProvider - the token or token provider.\n         * @param {UserResponse} user - the user object.\n         * @param {boolean} isAnonymous - whether the user is anonymous or not.\n         */ this.setTokenOrProvider = async (tokenOrProvider, user, isAnonymous)=>{\n            this.validateToken(tokenOrProvider, user, isAnonymous);\n            this.user = user;\n            if (isFunction(tokenOrProvider)) {\n                this.tokenProvider = tokenOrProvider;\n                this.type = \"provider\";\n            }\n            if (typeof tokenOrProvider === \"string\") {\n                this.token = tokenOrProvider;\n                this.type = \"static\";\n            }\n            if (!tokenOrProvider && this.user && this.secret) {\n                this.token = JWTUserToken(this.secret, user.id, {}, {});\n                this.type = \"static\";\n            }\n            await this.loadToken();\n        };\n        /**\n         * Resets the token manager.\n         * Useful for client disconnection or switching user.\n         */ this.reset = ()=>{\n            this.token = undefined;\n            this.user = undefined;\n            this.loadTokenPromise = null;\n        };\n        // Validates the user token.\n        this.validateToken = (tokenOrProvider, user, isAnonymous)=>{\n            // allow empty token for anon user\n            if (user && isAnonymous && !tokenOrProvider) return;\n            // Don't allow empty token for non-server side client.\n            if (!this.secret && !tokenOrProvider) {\n                throw new Error(\"UserWithId token can not be empty\");\n            }\n            if (tokenOrProvider && typeof tokenOrProvider !== \"string\" && !isFunction(tokenOrProvider)) {\n                throw new Error(\"user token should either be a string or a function\");\n            }\n            if (typeof tokenOrProvider === \"string\") {\n                // Allow empty token for anonymous users\n                if (isAnonymous && tokenOrProvider === \"\") return;\n                const tokenUserId = UserFromToken(tokenOrProvider);\n                if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === \"\" || !isAnonymous && tokenUserId !== user.id)) {\n                    throw new Error(\"userToken does not have a user_id or is not matching with user.id\");\n                }\n            }\n        };\n        // Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n        // case a function should wait.\n        this.tokenReady = ()=>this.loadTokenPromise;\n        // Fetches a token from tokenProvider function and sets in tokenManager.\n        // In case of static token, it will simply resolve to static token.\n        this.loadToken = ()=>{\n            // eslint-disable-next-line no-async-promise-executor\n            this.loadTokenPromise = new Promise(async (resolve, reject)=>{\n                if (this.type === \"static\") {\n                    return resolve(this.token);\n                }\n                if (this.tokenProvider && typeof this.tokenProvider !== \"string\") {\n                    try {\n                        this.token = await this.tokenProvider();\n                    } catch (e) {\n                        return reject(new Error(`Call to tokenProvider failed with message: ${e}`));\n                    }\n                    resolve(this.token);\n                }\n            });\n            return this.loadTokenPromise;\n        };\n        // Returns a current token\n        this.getToken = ()=>{\n            if (this.token) {\n                return this.token;\n            }\n            if (this.user && !this.token) {\n                return this.token;\n            }\n            if (this.secret) {\n                return JWTServerToken(this.secret);\n            }\n            throw new Error(`Both secret and user tokens are not set. Either client.connectUser wasn't called or client.disconnect was called`);\n        };\n        this.isStatic = ()=>this.type === \"static\";\n        this.loadTokenPromise = null;\n        if (secret) {\n            this.secret = secret;\n        }\n        this.type = \"static\";\n        if (this.secret) {\n            this.token = JWTServerToken(this.secret);\n        }\n    }\n}\nconst APIErrorCodes = {\n    \"-1\": {\n        name: \"InternalSystemError\",\n        retryable: true\n    },\n    \"2\": {\n        name: \"AccessKeyError\",\n        retryable: false\n    },\n    \"3\": {\n        name: \"AuthenticationFailedError\",\n        retryable: true\n    },\n    \"4\": {\n        name: \"InputError\",\n        retryable: false\n    },\n    \"6\": {\n        name: \"DuplicateUsernameError\",\n        retryable: false\n    },\n    \"9\": {\n        name: \"RateLimitError\",\n        retryable: true\n    },\n    \"16\": {\n        name: \"DoesNotExistError\",\n        retryable: false\n    },\n    \"17\": {\n        name: \"NotAllowedError\",\n        retryable: false\n    },\n    \"18\": {\n        name: \"EventNotSupportedError\",\n        retryable: false\n    },\n    \"19\": {\n        name: \"ChannelFeatureNotSupportedError\",\n        retryable: false\n    },\n    \"20\": {\n        name: \"MessageTooLongError\",\n        retryable: false\n    },\n    \"21\": {\n        name: \"MultipleNestingLevelError\",\n        retryable: false\n    },\n    \"22\": {\n        name: \"PayloadTooBigError\",\n        retryable: false\n    },\n    \"23\": {\n        name: \"RequestTimeoutError\",\n        retryable: true\n    },\n    \"24\": {\n        name: \"MaxHeaderSizeExceededError\",\n        retryable: false\n    },\n    \"40\": {\n        name: \"AuthErrorTokenExpired\",\n        retryable: false\n    },\n    \"41\": {\n        name: \"AuthErrorTokenNotValidYet\",\n        retryable: false\n    },\n    \"42\": {\n        name: \"AuthErrorTokenUsedBeforeIssuedAt\",\n        retryable: false\n    },\n    \"43\": {\n        name: \"AuthErrorTokenSignatureInvalid\",\n        retryable: false\n    },\n    \"44\": {\n        name: \"CustomCommandEndpointMissingError\",\n        retryable: false\n    },\n    \"45\": {\n        name: \"CustomCommandEndpointCallError\",\n        retryable: true\n    },\n    \"46\": {\n        name: \"ConnectionIDNotFoundError\",\n        retryable: false\n    },\n    \"60\": {\n        name: \"CoolDownError\",\n        retryable: true\n    },\n    \"69\": {\n        name: \"ErrWrongRegion\",\n        retryable: false\n    },\n    \"70\": {\n        name: \"ErrQueryChannelPermissions\",\n        retryable: false\n    },\n    \"71\": {\n        name: \"ErrTooManyConnections\",\n        retryable: true\n    },\n    \"99\": {\n        name: \"AppSuspendedError\",\n        retryable: false\n    }\n};\nfunction isAPIError(error) {\n    return error.code !== undefined;\n}\nfunction isErrorRetryable(error) {\n    if (!error.code) return false;\n    const err = APIErrorCodes[`${error.code}`];\n    if (!err) return false;\n    return err.retryable;\n}\nfunction isConnectionIDError(error) {\n    return error.code === 46; // ConnectionIDNotFoundError\n}\nfunction isWSFailure(err) {\n    if (typeof err.isWSFailure === \"boolean\") {\n        return err.isWSFailure;\n    }\n    try {\n        return JSON.parse(err.message).isWSFailure;\n    } catch (_) {\n        return false;\n    }\n}\nfunction isErrorResponse(res) {\n    return !res.status || res.status < 200 || 300 <= res.status;\n}\nvar ConnectionState;\n(function(ConnectionState) {\n    ConnectionState[\"Closed\"] = \"CLOSED\";\n    ConnectionState[\"Connected\"] = \"CONNECTED\";\n    ConnectionState[\"Connecting\"] = \"CONNECTING\";\n    ConnectionState[\"Disconnected\"] = \"DISCONNECTED\";\n    ConnectionState[\"Init\"] = \"INIT\";\n})(ConnectionState || (ConnectionState = {}));\nclass WSConnectionFallback {\n    constructor(client){\n        /** @private */ this._onlineStatusChanged = (event)=>{\n            this._log(`_onlineStatusChanged() - ${event.type}`);\n            if (event.type === \"offline\") {\n                this._setState(ConnectionState.Closed);\n                this.cancelToken?.cancel(\"disconnect() is called\");\n                this.cancelToken = undefined;\n                return;\n            }\n            if (event.type === \"online\" && this.state === ConnectionState.Closed) {\n                this.connect(true);\n            }\n        };\n        /** @private */ this._req = async (params, config, retry)=>{\n            if (!this.cancelToken && !params.close) {\n                this.cancelToken = axios__WEBPACK_IMPORTED_MODULE_35__[\"default\"].CancelToken.source();\n            }\n            try {\n                const res = await this.client.doAxiosRequest(\"get\", this.client.baseURL.replace(\":3030\", \":8900\") + \"/longpoll\", undefined, {\n                    config: {\n                        ...config,\n                        cancelToken: this.cancelToken?.token\n                    },\n                    params,\n                    publicEndpoint: true\n                });\n                this.consecutiveFailures = 0; // always reset in case of no error\n                return res;\n            } catch (err) {\n                this.consecutiveFailures += 1;\n                // @ts-ignore\n                if (retry && isErrorRetryable(err)) {\n                    this._log(`_req() - Retryable error, retrying request`);\n                    await sleep(retryInterval(this.consecutiveFailures));\n                    return this._req(params, config, retry);\n                }\n                throw err;\n            }\n        };\n        /** @private */ this._poll = async ()=>{\n            while(this.state === ConnectionState.Connected){\n                try {\n                    const data = await this._req({}, {\n                        timeout: 30000\n                    }, true); // 30s => API responds in 20s if there is no event\n                    if (data.events?.length) {\n                        for(let i = 0; i < data.events.length; i++){\n                            this.client.dispatchEvent(data.events[i]);\n                        }\n                    }\n                } catch (err) {\n                    if (axios__WEBPACK_IMPORTED_MODULE_35__[\"default\"].isCancel(err)) {\n                        this._log(`_poll() - axios canceled request`);\n                        return;\n                    }\n                    /** client.doAxiosRequest will take care of TOKEN_EXPIRED error */ // @ts-ignore\n                    if (isConnectionIDError(err)) {\n                        this._log(`_poll() - ConnectionID error, connecting without ID...`);\n                        this._setState(ConnectionState.Disconnected);\n                        this.connect(true);\n                        return;\n                    }\n                    // @ts-ignore\n                    if (isAPIError(err) && !isErrorRetryable(err)) {\n                        this._setState(ConnectionState.Closed);\n                        return;\n                    }\n                    await sleep(retryInterval(this.consecutiveFailures));\n                }\n            }\n        };\n        /**\n         * connect try to open a longpoll request\n         * @param reconnect should be false for first call and true for subsequent calls to keep the connection alive and call recoverState\n         */ this.connect = async (reconnect = false)=>{\n            if (this.state === ConnectionState.Connecting) {\n                this._log(\"connect() - connecting already in progress\", {\n                    reconnect\n                }, \"warn\");\n                return;\n            }\n            if (this.state === ConnectionState.Connected) {\n                this._log(\"connect() - already connected and polling\", {\n                    reconnect\n                }, \"warn\");\n                return;\n            }\n            this._setState(ConnectionState.Connecting);\n            this.connectionID = undefined; // connect should be sent with empty connection_id so API creates one\n            try {\n                const { event } = await this._req({\n                    json: this.client._buildWSPayload()\n                }, {\n                    timeout: 8000\n                }, reconnect);\n                this._setState(ConnectionState.Connected);\n                this.connectionID = event.connection_id;\n                this.client.resolveConnectionId?.();\n                // @ts-expect-error\n                this.client.dispatchEvent(event);\n                this._poll();\n                return event;\n            } catch (err) {\n                this._setState(ConnectionState.Closed);\n                this.client.rejectConnectionId?.();\n                throw err;\n            }\n        };\n        /**\n         * isHealthy checks if there is a connectionID and connection is in Connected state\n         */ this.isHealthy = ()=>{\n            return !!this.connectionID && this.state === ConnectionState.Connected;\n        };\n        this.disconnect = async (timeout = 2000)=>{\n            removeConnectionEventListeners(this._onlineStatusChanged);\n            this._setState(ConnectionState.Disconnected);\n            this.cancelToken?.cancel(\"disconnect() is called\");\n            this.cancelToken = undefined;\n            const connection_id = this.connectionID;\n            this.connectionID = undefined;\n            try {\n                await this._req({\n                    close: true,\n                    connection_id\n                }, {\n                    timeout\n                }, false);\n                this._log(`disconnect() - Closed connectionID`);\n            } catch (err) {\n                this._log(`disconnect() - Failed`, {\n                    err\n                }, \"error\");\n            }\n        };\n        this.client = client;\n        this.state = ConnectionState.Init;\n        this.consecutiveFailures = 0;\n        addConnectionEventListeners(this._onlineStatusChanged);\n    }\n    _log(msg, extra = {}, level = \"info\") {\n        this.client.logger(level, \"WSConnectionFallback:\" + msg, {\n            ...extra\n        });\n    }\n    _setState(state) {\n        this._log(`_setState() - ${state}`);\n        // transition from connecting => connected\n        if (this.state === ConnectionState.Connecting && state === ConnectionState.Connected) {\n            this.client.dispatchEvent({\n                type: \"connection.changed\",\n                online: true\n            });\n        }\n        if (state === ConnectionState.Closed || state === ConnectionState.Disconnected) {\n            this.client.dispatchEvent({\n                type: \"connection.changed\",\n                online: false\n            });\n        }\n        this.state = state;\n    }\n}\nconst logger = getLogger([\n    \"location\"\n]);\nconst HINT_URL = `https://hint.stream-io-video.com/`;\nconst getLocationHint = async (hintUrl = HINT_URL, timeout = 2000)=>{\n    const abortController = new AbortController();\n    const timeoutId = setTimeout(()=>abortController.abort(), timeout);\n    try {\n        const response = await fetch(hintUrl, {\n            method: \"HEAD\",\n            signal: abortController.signal\n        });\n        const awsPop = response.headers.get(\"x-amz-cf-pop\") || \"ERR\";\n        logger(\"debug\", `Location header: ${awsPop}`);\n        return awsPop.substring(0, 3); // AMS1-P2 -> AMS\n    } catch (e) {\n        logger(\"warn\", `Failed to get location hint from ${hintUrl}`, e);\n        return \"ERR\";\n    } finally{\n        clearTimeout(timeoutId);\n    }\n};\nclass StreamClient {\n    /**\n     * Initialize a client.\n     *\n     * @param {string} key - the api key\n     * @param {StreamClientOptions} [options] - additional options, here you can pass custom options to axios instance\n     * @param {string} [options.secret] - the api secret\n     * @param {boolean} [options.browser] - enforce the client to be in browser mode\n     * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n     * @param {Logger} [options.Logger] - custom logger\n     * @param {number} [options.timeout] - default to 3000\n     * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n     */ constructor(key, options){\n        this.listeners = {};\n        this.nextRequestAbortController = null;\n        this.devToken = (userID)=>{\n            return DevToken(userID);\n        };\n        this.getAuthType = ()=>{\n            return this.anonymous ? \"anonymous\" : \"jwt\";\n        };\n        this.setBaseURL = (baseURL)=>{\n            this.baseURL = baseURL;\n            this.wsBaseURL = this.baseURL.replace(\"http\", \"ws\").replace(\":3030\", \":8800\");\n        };\n        this.getLocationHint = async (hintUrl, timeout)=>{\n            const hint = await this.locationHint;\n            if (!hint || hint === \"ERR\") {\n                this.locationHint = getLocationHint(hintUrl ?? this.options.locationHintUrl, timeout ?? this.options.locationHintTimeout);\n                return this.locationHint;\n            }\n            return hint;\n        };\n        this._getConnectionID = ()=>this.wsConnection?.connectionID || this.wsFallback?.connectionID;\n        this._hasConnectionID = ()=>Boolean(this._getConnectionID());\n        /**\n         * connectUser - Set the current user and open a WebSocket connection\n         *\n         * @param user Data about this user. IE {name: \"john\"}\n         * @param {TokenOrProvider} userTokenOrProvider Token or provider\n         *\n         * @return {ConnectAPIResponse} Returns a promise that resolves when the connection is setup\n         */ this.connectUser = async (user, userTokenOrProvider)=>{\n            if (!user.id) {\n                throw new Error('The \"id\" field on the user is missing');\n            }\n            /**\n             * Calling connectUser multiple times is potentially the result of a  bad integration, however,\n             * If the user id remains the same we don't throw error\n             */ if (this.userID === user.id && this.setUserPromise) {\n                this.logger(\"warn\", \"Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.\");\n                return this.setUserPromise;\n            }\n            if (this.userID) {\n                throw new Error(\"Use client.disconnect() before trying to connect as a different user. connectUser was called twice.\");\n            }\n            if ((this._isUsingServerAuth() || this.node) && !this.options.allowServerSideConnect) {\n                this.logger(\"warn\", 'Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.');\n            }\n            // we generate the client id client side\n            this.userID = user.id;\n            this.anonymous = false;\n            const setTokenPromise = this._setToken(user, userTokenOrProvider, this.anonymous);\n            this._setUser(user);\n            const wsPromise = this.openConnection();\n            this.setUserPromise = Promise.all([\n                setTokenPromise,\n                wsPromise\n            ]).then((result)=>result[1]);\n            try {\n                return await this.setUserPromise;\n            } catch (err) {\n                if (this.persistUserOnConnectionFailure) {\n                    // cleanup client to allow the user to retry connectUser again\n                    this.closeConnection();\n                } else {\n                    this.disconnectUser();\n                }\n                throw err;\n            }\n        };\n        this._setToken = (user, userTokenOrProvider, isAnonymous)=>this.tokenManager.setTokenOrProvider(userTokenOrProvider, user, isAnonymous);\n        this._setUser = (user)=>{\n            /**\n             * This one is used by the frontend. This is a copy of the current user object stored on backend.\n             * It contains reserved properties and own user properties which are not present in `this._user`.\n             */ this.user = user;\n            this.userID = user.id;\n            // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n            this._user = {\n                ...user\n            };\n        };\n        /**\n         * Disconnects the websocket connection, without removing the user set on client.\n         * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n         * to call client.openConnection to reconnect to websocket.\n         *\n         * This is mainly useful on mobile side. You can only receive push notifications\n         * if you don't have active websocket connection.\n         * So when your app goes to background, you can call `client.closeConnection`.\n         * And when app comes back to foreground, call `client.openConnection`.\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.closeConnection = async (timeout)=>{\n            if (this.cleaningIntervalRef != null) {\n                clearInterval(this.cleaningIntervalRef);\n                this.cleaningIntervalRef = undefined;\n            }\n            await Promise.all([\n                this.wsConnection?.disconnect(timeout),\n                this.wsFallback?.disconnect(timeout)\n            ]);\n            return Promise.resolve();\n        };\n        /**\n         * Creates a new WebSocket connection with the current user. Returns empty promise, if there is an active connection\n         */ this.openConnection = async ()=>{\n            if (!this.userID) {\n                throw Error(\"UserWithId is not set on client, use client.connectUser or client.connectAnonymousUser instead\");\n            }\n            if (this.wsConnection?.isConnecting && this.wsPromise) {\n                this.logger(\"info\", \"client:openConnection() - connection already in progress\");\n                return this.wsPromise;\n            }\n            if ((this.wsConnection?.isHealthy || this.wsFallback?.isHealthy()) && this._hasConnectionID()) {\n                this.logger(\"info\", \"client:openConnection() - openConnection called twice, healthy connection already exists\");\n                return Promise.resolve();\n            }\n            this.connectionIdPromise = new Promise((resolve, reject)=>{\n                this.resolveConnectionId = resolve;\n                this.rejectConnectionId = reject;\n            });\n            this.clientID = `${this.userID}--${randomId()}`;\n            this.wsPromise = this.connect();\n            return this.wsPromise;\n        };\n        this._normalizeDate = (before)=>{\n            if (before instanceof Date) {\n                before = before.toISOString();\n            }\n            if (before === \"\") {\n                throw new Error(\"Don't pass blank string for since, use null instead if resetting the token revoke\");\n            }\n            return before;\n        };\n        /**\n         * Disconnects the websocket and removes the user from client.\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.disconnectUser = async (timeout)=>{\n            this.logger(\"info\", \"client:disconnect() - Disconnecting the client\");\n            // remove the user specific fields\n            delete this.user;\n            delete this._user;\n            delete this.userID;\n            this.anonymous = false;\n            await this.closeConnection(timeout);\n            this.tokenManager.reset();\n            this.connectionIdPromise = undefined;\n            this.rejectConnectionId = undefined;\n            this.resolveConnectionId = undefined;\n        };\n        this.connectGuestUser = async (user)=>{\n            this.guestUserCreatePromise = this.doAxiosRequest(\"post\", \"/guest\", {\n                user: {\n                    ...user,\n                    role: \"guest\"\n                }\n            }, {\n                publicEndpoint: true\n            });\n            const response = await this.guestUserCreatePromise;\n            this.guestUserCreatePromise.finally(()=>this.guestUserCreatePromise = undefined);\n            return this.connectUser(response.user, response.access_token);\n        };\n        /**\n         * connectAnonymousUser - Set an anonymous user and open a WebSocket connection\n         */ this.connectAnonymousUser = async (user, tokenOrProvider)=>{\n            this.connectionIdPromise = new Promise((resolve, reject)=>{\n                this.resolveConnectionId = resolve;\n                this.rejectConnectionId = reject;\n            });\n            this.anonymous = true;\n            await this._setToken(user, tokenOrProvider, this.anonymous);\n            this._setUser(user);\n            // some endpoints require a connection_id to be resolved.\n            // as anonymous users aren't allowed to open WS connections, we just\n            // resolve the connection_id here.\n            this.resolveConnectionId?.();\n        };\n        /**\n         * on - Listen to events on all channels and users your watching\n         *\n         * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n         *\n         * @param eventName The event type to listen for (optional)\n         * @param callback The callback to call\n         *\n         * @return  Returns a function which, when called, unsubscribes the event handler.\n         */ this.on = (eventName, callback)=>{\n            if (!this.listeners[eventName]) {\n                this.listeners[eventName] = [];\n            }\n            this.logger(\"debug\", `Adding listener for ${eventName} event`);\n            this.listeners[eventName]?.push(callback);\n            return ()=>{\n                this.off(eventName, callback);\n            };\n        };\n        /**\n         * off - Remove the event handler\n         */ this.off = (eventName, callback)=>{\n            if (!this.listeners[eventName]) {\n                this.listeners[eventName] = [];\n            }\n            this.logger(\"debug\", `Removing listener for ${eventName} event`);\n            this.listeners[eventName] = this.listeners[eventName]?.filter((value)=>value !== callback);\n        };\n        this._logApiRequest = (type, url, data, config)=>{\n            this.logger(\"trace\", `client: ${type} - Request - ${url}`, {\n                payload: data,\n                config\n            });\n        };\n        this._logApiResponse = (type, url, response)=>{\n            this.logger(\"trace\", `client:${type} - Response - url: ${url} > status ${response.status}`, {\n                response\n            });\n        };\n        this._logApiError = (type, url, error)=>{\n            this.logger(\"error\", `client:${type} - Error - url: ${url}`, {\n                url,\n                error\n            });\n        };\n        this.doAxiosRequest = async (type, url, data, options = {})=>{\n            if (!options.publicEndpoint) {\n                await Promise.all([\n                    this.tokenManager.tokenReady(),\n                    this.guestUserCreatePromise,\n                    this.connectionIdPromise\n                ]);\n            }\n            const requestConfig = this._enrichAxiosOptions(options);\n            try {\n                let response;\n                this._logApiRequest(type, url, data, requestConfig);\n                switch(type){\n                    case \"get\":\n                        response = await this.axiosInstance.get(url, requestConfig);\n                        break;\n                    case \"delete\":\n                        response = await this.axiosInstance.delete(url, requestConfig);\n                        break;\n                    case \"post\":\n                        response = await this.axiosInstance.post(url, data, requestConfig);\n                        break;\n                    case \"put\":\n                        response = await this.axiosInstance.put(url, data, requestConfig);\n                        break;\n                    case \"patch\":\n                        response = await this.axiosInstance.patch(url, data, requestConfig);\n                        break;\n                    case \"options\":\n                        response = await this.axiosInstance.options(url, requestConfig);\n                        break;\n                    default:\n                        throw new Error(\"Invalid request type\");\n                }\n                this._logApiResponse(type, url, response);\n                this.consecutiveFailures = 0;\n                return this.handleResponse(response);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            } catch (e /**TODO: generalize error types  */ ) {\n                e.client_request_id = requestConfig.headers?.[\"x-client-request-id\"];\n                this.consecutiveFailures += 1;\n                if (e.response) {\n                    this._logApiError(type, url, e.response);\n                    /** connection_fallback depends on this token expiration logic */ if (e.response.data.code === KnownCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n                        if (this.consecutiveFailures > 1) {\n                            await sleep(retryInterval(this.consecutiveFailures));\n                        }\n                        await this.tokenManager.loadToken();\n                        return await this.doAxiosRequest(type, url, data, options);\n                    }\n                    return this.handleResponse(e.response);\n                } else {\n                    this._logApiError(type, url, e);\n                    // eslint-disable-next-line no-throw-literal\n                    throw e;\n                }\n            }\n        };\n        this.get = (url, params)=>{\n            return this.doAxiosRequest(\"get\", url, null, {\n                params\n            });\n        };\n        this.put = (url, data, params)=>{\n            return this.doAxiosRequest(\"put\", url, data, {\n                params\n            });\n        };\n        this.post = (url, data, params)=>{\n            return this.doAxiosRequest(\"post\", url, data, {\n                params\n            });\n        };\n        this.patch = (url, data, params)=>{\n            return this.doAxiosRequest(\"patch\", url, data, {\n                params\n            });\n        };\n        this.delete = (url, params)=>{\n            return this.doAxiosRequest(\"delete\", url, null, {\n                params\n            });\n        };\n        this.errorFromResponse = (response)=>{\n            let err;\n            err = new ErrorFromResponse(`Stream error HTTP code: ${response.status}`);\n            if (response.data && response.data.code) {\n                err = new Error(`Stream error code ${response.data.code}: ${response.data.message}`);\n                err.code = response.data.code;\n            }\n            err.response = response;\n            err.status = response.status;\n            return err;\n        };\n        this.handleResponse = (response)=>{\n            const data = response.data;\n            if (isErrorResponse(response)) {\n                throw this.errorFromResponse(response);\n            }\n            return data;\n        };\n        this.dispatchEvent = (event)=>{\n            if (!event.received_at) event.received_at = new Date();\n            this.logger(\"debug\", `Dispatching event: ${event.type}`, event);\n            if (!this.listeners) return;\n            // call generic listeners\n            for (const listener of this.listeners.all || []){\n                listener(event);\n            }\n            // call type specific listeners\n            for (const listener of this.listeners[event.type] || []){\n                listener(event);\n            }\n        };\n        /**\n         * @private\n         */ this.connect = async ()=>{\n            if (!this.userID || !this._user) {\n                throw Error(\"Call connectUser or connectAnonymousUser before starting the connection\");\n            }\n            if (!this.wsBaseURL) {\n                throw Error(\"Websocket base url not set\");\n            }\n            if (!this.clientID) {\n                throw Error(\"clientID is not set\");\n            }\n            if (!this.wsConnection && (this.options.warmUp || this.options.enableInsights)) {\n                this._sayHi();\n            }\n            // The StableWSConnection handles all the reconnection logic.\n            if (this.options.wsConnection && this.node) {\n                // Intentionally avoiding adding ts generics on wsConnection in options since its only useful for unit test purpose.\n                this.options.wsConnection.setClient(this);\n                this.wsConnection = this.options.wsConnection;\n            } else {\n                this.wsConnection = new StableWSConnection(this);\n            }\n            try {\n                // if fallback is used before, continue using it instead of waiting for WS to fail\n                if (this.wsFallback) {\n                    return await this.wsFallback.connect();\n                }\n                this.logger(\"info\", \"StreamClient.connect: this.wsConnection.connect()\");\n                // if WSFallback is enabled, ws connect should timeout faster so fallback can try\n                return await this.wsConnection.connect(this.options.enableWSFallback ? this.defaultWSTimeoutWithFallback : this.defaultWSTimeout);\n            } catch (err) {\n                // run fallback only if it's WS/Network error and not a normal API error\n                // make sure browser is online before even trying the longpoll\n                if (this.options.enableWSFallback && // @ts-ignore\n                isWSFailure(err) && isOnline(this.logger)) {\n                    this.logger(\"warn\", \"client:connect() - WS failed, fallback to longpoll\");\n                    this.dispatchEvent({\n                        type: \"transport.changed\",\n                        mode: \"longpoll\"\n                    });\n                    this.wsConnection._destroyCurrentWSConnection();\n                    this.wsConnection.disconnect().then(); // close WS so no retry\n                    this.wsFallback = new WSConnectionFallback(this);\n                    return await this.wsFallback.connect();\n                }\n                throw err;\n            }\n        };\n        /**\n         * Check the connectivity with server for warmup purpose.\n         *\n         * @private\n         */ this._sayHi = ()=>{\n            const client_request_id = randomId();\n            const opts = {\n                headers: axios__WEBPACK_IMPORTED_MODULE_1__.AxiosHeaders.from({\n                    \"x-client-request-id\": client_request_id\n                })\n            };\n            this.doAxiosRequest(\"get\", this.baseURL + \"/hi\", null, opts).catch((e)=>{\n                if (this.options.enableInsights) {\n                    postInsights(\"http_hi_failed\", {\n                        api_key: this.key,\n                        err: e,\n                        client_request_id\n                    });\n                }\n            });\n        };\n        this.getUserAgent = ()=>{\n            const version = \"0.6.7\";\n            return this.userAgent || `stream-video-javascript-client-${this.node ? \"node\" : \"browser\"}-${version}`;\n        };\n        this.setUserAgent = (userAgent)=>{\n            this.userAgent = userAgent;\n        };\n        /**\n         * _isUsingServerAuth - Returns true if we're using server side auth\n         */ this._isUsingServerAuth = ()=>!!this.secret;\n        this._enrichAxiosOptions = (options = {\n            params: {},\n            headers: {},\n            config: {}\n        })=>{\n            const token = options.publicEndpoint && !this.user ? undefined : this._getToken();\n            const authorization = token ? {\n                Authorization: token\n            } : undefined;\n            let signal = null;\n            if (this.nextRequestAbortController !== null) {\n                signal = this.nextRequestAbortController.signal;\n                this.nextRequestAbortController = null;\n            }\n            if (!options.headers?.[\"x-client-request-id\"]) {\n                options.headers = {\n                    ...options.headers,\n                    \"x-client-request-id\": randomId()\n                };\n            }\n            return {\n                params: {\n                    user_id: this.userID,\n                    connection_id: this._getConnectionID(),\n                    api_key: this.key,\n                    ...options.params\n                },\n                headers: {\n                    ...authorization,\n                    \"stream-auth-type\": options.publicEndpoint && !this.user ? \"anonymous\" : this.getAuthType(),\n                    \"X-Stream-Client\": this.getUserAgent(),\n                    ...options.headers\n                },\n                ...signal ? {\n                    signal\n                } : {},\n                ...options.config,\n                ...this.options.axiosRequestConfig\n            };\n        };\n        this._getToken = ()=>{\n            if (!this.tokenManager) return null;\n            return this.tokenManager.getToken();\n        };\n        /**\n         * encode ws url payload\n         * @private\n         * @returns json string\n         */ this._buildWSPayload = (client_request_id)=>{\n            return JSON.stringify({\n                user_id: this.userID,\n                user_details: this._user,\n                client_request_id\n            });\n        };\n        /**\n         * creates an abort controller that will be used by the next HTTP Request.\n         */ this.createAbortControllerForNextRequest = ()=>{\n            return this.nextRequestAbortController = new AbortController();\n        };\n        /**\n         * createToken - Creates a token to authenticate this user. This function is used server side.\n         * The resulting token should be passed to the client side when the users registers or logs in.\n         *\n         * @param {string} userID The UserWithId ID\n         * @param {number} [exp] The expiration time for the token expressed in the number of seconds since the epoch\n         * @param call_cids for anonymous tokens you have to provide the call cids the use can join\n         *\n         * @return {string} Returns a token\n         */ this.createToken = (userID, exp, iat, call_cids)=>{\n            if (this.secret == null) {\n                throw Error(`tokens can only be created server-side using the API Secret`);\n            }\n            const extra = {};\n            if (exp) {\n                extra.exp = exp;\n            }\n            if (iat) {\n                extra.iat = iat;\n            }\n            if (call_cids) {\n                extra.call_cids = call_cids;\n            }\n            return JWTUserToken(this.secret, userID, extra, {});\n        };\n        // set the key\n        this.key = key;\n        // set the secret\n        this.secret = options?.secret;\n        // set the options... and figure out defaults...\n        const inputOptions = options ? options : {\n            browser: \"undefined\" !== \"undefined\"\n        };\n        this.browser = inputOptions.browser || \"undefined\" !== \"undefined\";\n        this.node = !this.browser;\n        if (this.browser) {\n            this.locationHint = getLocationHint(options?.locationHintUrl, options?.locationHintTimeout);\n        }\n        this.options = {\n            timeout: 5000,\n            withCredentials: false,\n            warmUp: false,\n            ...inputOptions\n        };\n        if (this.node && !this.options.httpsAgent) {\n            this.options.httpsAgent = new (https__WEBPACK_IMPORTED_MODULE_5___default().Agent)({\n                keepAlive: true,\n                keepAliveMsecs: 3000\n            });\n        }\n        this.setBaseURL(this.options.baseURL || \"https://video.stream-io-api.com/video\");\n        if (typeof process !== \"undefined\" && process.env.STREAM_LOCAL_TEST_RUN) {\n            this.setBaseURL(\"http://localhost:3030/video\");\n        }\n        if (typeof process !== \"undefined\" && process.env.STREAM_LOCAL_TEST_HOST) {\n            this.setBaseURL(`http://${process.env.STREAM_LOCAL_TEST_HOST}/video`);\n        }\n        this.axiosInstance = axios__WEBPACK_IMPORTED_MODULE_35__[\"default\"].create({\n            ...this.options,\n            baseURL: this.baseURL\n        });\n        // WS connection is initialized when setUser is called\n        this.wsConnection = null;\n        this.wsPromise = null;\n        this.setUserPromise = null;\n        // mapping between channel groups and configs\n        this.anonymous = false;\n        this.persistUserOnConnectionFailure = this.options?.persistUserOnConnectionFailure;\n        // If it is a server-side client, then lets initialize the tokenManager, since token will be\n        // generated from secret.\n        this.tokenManager = new TokenManager(this.secret);\n        this.consecutiveFailures = 0;\n        this.insightMetrics = new InsightMetrics();\n        this.defaultWSTimeoutWithFallback = 6000;\n        this.defaultWSTimeout = 15000;\n        this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : ()=>null;\n    }\n}\n/**\n * A `StreamVideoClient` instance lets you communicate with our API, and authenticate users.\n */ class StreamVideoClient {\n    constructor(apiKeyOrArgs, opts){\n        this.logLevel = \"warn\";\n        this.eventHandlersToUnregister = [];\n        /**\n         * Disconnects the currently connected user from the client.\n         *\n         * If the connection is successfully disconnected, the connected user [state variable](#readonlystatestore) will be updated accordingly\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.disconnectUser = async (timeout)=>{\n            if (!this.streamClient.user && !this.connectionPromise) {\n                return;\n            }\n            const disconnectUser = ()=>this.streamClient.disconnectUser(timeout);\n            this.disconnectionPromise = this.connectionPromise ? this.connectionPromise.then(()=>disconnectUser()) : disconnectUser();\n            this.disconnectionPromise.finally(()=>this.disconnectionPromise = undefined);\n            await this.disconnectionPromise;\n            this.eventHandlersToUnregister.forEach((unregister)=>unregister());\n            this.eventHandlersToUnregister = [];\n            this.writeableStateStore.setConnectedUser(undefined);\n        };\n        /**\n         * You can subscribe to WebSocket events provided by the API.\n         * To remove a subscription, call the `off` method or, execute the returned unsubscribe function.\n         * Please note that subscribing to WebSocket events is an advanced use-case, for most use-cases it should be enough to watch for changes in the reactive [state store](#readonlystatestore).\n         *\n         * @param eventName the event name or 'all'.\n         * @param callback the callback which will be called when the event is emitted.\n         * @returns an unsubscribe function.\n         */ this.on = (eventName, callback)=>{\n            return this.streamClient.on(eventName, callback);\n        };\n        /**\n         * Remove subscription for WebSocket events that were created by the `on` method.\n         *\n         * @param eventName the event name.\n         * @param callback the callback which was passed to the `on` method.\n         */ this.off = (eventName, callback)=>{\n            return this.streamClient.off(eventName, callback);\n        };\n        /**\n         * Creates a new call.\n         *\n         * @param type the type of the call.\n         * @param id the id of the call.\n         */ this.call = (type, id)=>{\n            return new Call({\n                streamClient: this.streamClient,\n                id: id,\n                type: type,\n                clientStore: this.writeableStateStore\n            });\n        };\n        /**\n         * Creates a new guest user with the given data.\n         *\n         * @param data the data for the guest user.\n         */ this.createGuestUser = async (data)=>{\n            return this.streamClient.doAxiosRequest(\"post\", \"/guest\", data, {\n                publicEndpoint: true\n            });\n        };\n        /**\n         * Will query the API for calls matching the given filters.\n         *\n         * @param data the query data.\n         */ this.queryCalls = async (data = {})=>{\n            const response = await this.streamClient.post(\"/calls\", data);\n            const calls = response.calls.map((c)=>{\n                const call = new Call({\n                    streamClient: this.streamClient,\n                    id: c.call.id,\n                    type: c.call.type,\n                    members: c.members,\n                    ownCapabilities: c.own_capabilities,\n                    watching: data.watch,\n                    clientStore: this.writeableStateStore\n                });\n                call.state.updateFromCallResponse(c.call);\n                call.applyDeviceConfig();\n                if (data.watch) {\n                    this.writeableStateStore.registerCall(call);\n                }\n                return call;\n            });\n            return {\n                ...response,\n                calls: calls\n            };\n        };\n        /**\n         * Retrieve the list of available call statistics reports matching a particular condition.\n         *\n         * @param data Filter and sort conditions for retrieving available call report summaries.\n         * @returns List with summary of available call reports matching the condition.\n         */ this.queryCallStats = async (data = {})=>{\n            return this.streamClient.post(`/call/stats`, data);\n        };\n        /**\n         * Returns a list of available data centers available for hosting calls.\n         */ this.edges = async ()=>{\n            return this.streamClient.get(`/edges`);\n        };\n        /**\n         * addDevice - Adds a push device for a user.\n         *\n         * @param {string} id the device id\n         * @param {string} push_provider the push provider name (eg. apn, firebase)\n         * @param {string} push_provider_name user provided push provider name\n         * @param {string} [userID] the user id (defaults to current user)\n         * @param {boolean} [voip_token] enables use of VoIP token for push notifications on iOS platform\n         */ this.addDevice = async (id, push_provider, push_provider_name, userID, voip_token)=>{\n            return await this.streamClient.post(\"/devices\", {\n                id,\n                push_provider,\n                voip_token,\n                ...userID != null ? {\n                    user_id: userID\n                } : {},\n                ...push_provider_name != null ? {\n                    push_provider_name\n                } : {}\n            });\n        };\n        /**\n         * getDevices - Returns the devices associated with a current user\n         * @param {string} [userID] User ID. Only works on serverside\n         */ this.getDevices = async (userID)=>{\n            return await this.streamClient.get(\"/devices\", userID ? {\n                user_id: userID\n            } : {});\n        };\n        /**\n         * removeDevice - Removes the device with the given id.\n         *\n         * @param {string} id The device id\n         * @param {string} [userID] The user id. Only specify this for serverside requests\n         */ this.removeDevice = async (id, userID)=>{\n            return await this.streamClient.delete(\"/devices\", {\n                id,\n                ...userID ? {\n                    user_id: userID\n                } : {}\n            });\n        };\n        /**\n         * A callback that can be used to create ringing calls from push notifications. If the call already exists, it will do nothing.\n         * @param call_cid\n         * @returns\n         */ this.onRingingCall = async (call_cid)=>{\n            // if we find the call and is already ringing, we don't need to create a new call\n            // as client would have received the call.ring state because the app had WS alive when receiving push notifications\n            let call = this.readOnlyStateStore.calls.find((c)=>c.cid === call_cid && c.ringing);\n            if (!call) {\n                // if not it means that WS is not alive when receiving the push notifications and we need to fetch the call\n                const [callType, callId] = call_cid.split(\":\");\n                call = new Call({\n                    streamClient: this.streamClient,\n                    type: callType,\n                    id: callId,\n                    clientStore: this.writeableStateStore,\n                    ringing: true\n                });\n                await call.get();\n            }\n            return call;\n        };\n        /**\n         * Connects the given anonymous user to the client.\n         *\n         * @param user the user to connect.\n         * @param tokenOrProvider a token or a function that returns a token.\n         */ this.connectAnonymousUser = async (user, tokenOrProvider)=>{\n            const connectAnonymousUser = ()=>this.streamClient.connectAnonymousUser(user, tokenOrProvider);\n            this.connectionPromise = this.disconnectionPromise ? this.disconnectionPromise.then(()=>connectAnonymousUser()) : connectAnonymousUser();\n            this.connectionPromise.finally(()=>this.connectionPromise = undefined);\n            return this.connectionPromise;\n        };\n        let logger = logToConsole;\n        let logLevel = \"warn\";\n        if (typeof apiKeyOrArgs === \"string\") {\n            logLevel = opts?.logLevel || logLevel;\n            logger = opts?.logger || logger;\n        } else {\n            logLevel = apiKeyOrArgs.options?.logLevel || logLevel;\n            logger = apiKeyOrArgs.options?.logger || logger;\n        }\n        setLogger(logger, logLevel);\n        this.logger = getLogger([\n            \"client\"\n        ]);\n        if (typeof apiKeyOrArgs === \"string\") {\n            this.streamClient = new StreamClient(apiKeyOrArgs, {\n                persistUserOnConnectionFailure: true,\n                ...opts,\n                logLevel,\n                logger: this.logger\n            });\n        } else {\n            this.streamClient = new StreamClient(apiKeyOrArgs.apiKey, {\n                persistUserOnConnectionFailure: true,\n                ...apiKeyOrArgs.options,\n                logLevel,\n                logger: this.logger\n            });\n            const sdkInfo = getSdkInfo();\n            if (sdkInfo) {\n                this.streamClient.setUserAgent(this.streamClient.getUserAgent() + `-video-${SdkType[sdkInfo.type].toLowerCase()}-sdk-${sdkInfo.major}.${sdkInfo.minor}.${sdkInfo.patch}`);\n            }\n        }\n        this.writeableStateStore = new StreamVideoWriteableStateStore();\n        this.readOnlyStateStore = new StreamVideoReadOnlyStateStore(this.writeableStateStore);\n        if (typeof apiKeyOrArgs !== \"string\") {\n            const user = apiKeyOrArgs.user;\n            const token = apiKeyOrArgs.token || apiKeyOrArgs.tokenProvider;\n            if (user) {\n                this.connectUser(user, token);\n            }\n        }\n    }\n    /**\n     * Return the reactive state store, use this if you want to be notified about changes to the client state\n     */ get state() {\n        return this.readOnlyStateStore;\n    }\n    /**\n     * Connects the given user to the client.\n     * Only one user can connect at a time, if you want to change users, call `disconnectUser` before connecting a new user.\n     * If the connection is successful, the connected user [state variable](#readonlystatestore) will be updated accordingly.\n     *\n     * @param user the user to connect.\n     * @param token a token or a function that returns a token.\n     */ async connectUser(user, token) {\n        if (user.type === \"anonymous\") {\n            user.id = \"!anon\";\n            return this.connectAnonymousUser(user, token);\n        }\n        let connectUser = ()=>{\n            return this.streamClient.connectUser(user, token);\n        };\n        if (user.type === \"guest\") {\n            connectUser = async ()=>{\n                return this.streamClient.connectGuestUser(user);\n            };\n        }\n        this.connectionPromise = this.disconnectionPromise ? this.disconnectionPromise.then(()=>connectUser()) : connectUser();\n        this.connectionPromise?.finally(()=>this.connectionPromise = undefined);\n        const connectUserResponse = await this.connectionPromise;\n        // connectUserResponse will be void if connectUser called twice for the same user\n        if (connectUserResponse?.me) {\n            this.writeableStateStore.setConnectedUser(connectUserResponse.me);\n        }\n        this.eventHandlersToUnregister.push(this.on(\"connection.changed\", (event)=>{\n            if (event.online) {\n                const callsToReWatch = this.writeableStateStore.calls.filter((call)=>call.watching).map((call)=>call.cid);\n                this.logger(\"info\", `Rewatching calls after connection changed ${callsToReWatch.join(\", \")}`);\n                if (callsToReWatch.length > 0) {\n                    this.queryCalls({\n                        watch: true,\n                        filter_conditions: {\n                            cid: {\n                                $in: callsToReWatch\n                            }\n                        },\n                        sort: [\n                            {\n                                field: \"cid\",\n                                direction: 1\n                            }\n                        ]\n                    }).catch((err)=>{\n                        this.logger(\"error\", \"Failed to re-watch calls\", err);\n                    });\n                }\n            }\n        }));\n        this.eventHandlersToUnregister.push(this.on(\"call.created\", (event)=>{\n            const { call, members } = event;\n            if (user.id === call.created_by.id) {\n                this.logger(\"warn\", \"Received `call.created` sent by the current user\");\n                return;\n            }\n            this.logger(\"info\", `New call created and registered: ${call.cid}`);\n            const newCall = new Call({\n                streamClient: this.streamClient,\n                type: call.type,\n                id: call.id,\n                members,\n                clientStore: this.writeableStateStore\n            });\n            newCall.state.updateFromCallResponse(call);\n            this.writeableStateStore.registerCall(newCall);\n        }));\n        this.eventHandlersToUnregister.push(this.on(\"call.ring\", async (event)=>{\n            const { call, members } = event;\n            if (user.id === call.created_by.id) {\n                this.logger(\"debug\", \"Received `call.ring` sent by the current user so ignoring the event\");\n                return;\n            }\n            // The call might already be tracked by the client,\n            // if `call.created` was received before `call.ring`.\n            // In that case, we cleanup the already tracked call.\n            const prevCall = this.writeableStateStore.findCall(call.type, call.id);\n            await prevCall?.leave({\n                reason: \"cleaning-up in call.ring\"\n            });\n            // we create a new call\n            const theCall = new Call({\n                streamClient: this.streamClient,\n                type: call.type,\n                id: call.id,\n                members,\n                clientStore: this.writeableStateStore,\n                ringing: true\n            });\n            theCall.state.updateFromCallResponse(call);\n            // we fetch the latest metadata for the call from the server\n            await theCall.get();\n            this.writeableStateStore.registerCall(theCall);\n        }));\n        return connectUserResponse;\n    }\n    /**\n     * addDevice - Adds a push device for a user.\n     *\n     * @param {string} id the device id\n     * @param {string} push_provider the push provider name (eg. apn, firebase)\n     * @param {string} push_provider_name user provided push provider name\n     * @param {string} [userID] the user id (defaults to current user)\n     */ async addVoipDevice(id, push_provider, push_provider_name, userID) {\n        return await this.addDevice(id, push_provider, push_provider_name, userID, true);\n    }\n}\n/**\n * @deprecated Please use the `@stream-io/node-sdk` package instead.\n *\n * @see https://getstream.io/video/docs/api/\n */ class StreamVideoServerClient extends StreamVideoClient {\n    constructor(apiKey, options){\n        super({\n            apiKey,\n            options\n        });\n        this.getCallTypes = ()=>{\n            return this.streamClient.get(\"/calltypes\");\n        };\n        this.getCallType = (name)=>{\n            return this.streamClient.get(`/calltypes/${name}`);\n        };\n        this.createCallType = (data)=>{\n            return this.streamClient.post(\"/calltypes\", data);\n        };\n        this.deleteCallType = (name)=>{\n            return this.streamClient.delete(`/calltypes/${name}`);\n        };\n        this.updateCallType = (name, data)=>{\n            return this.streamClient.put(`/calltypes/${name}`, data);\n        };\n        this.listExternalStorage = ()=>{\n            return this.streamClient.get(\"/external_storage\");\n        };\n        this.createExternalStorage = (request)=>{\n            return this.streamClient.post(\"/external_storage\", request);\n        };\n        this.deleteExternalStorage = (name)=>{\n            return this.streamClient.delete(`/external_storage/${name}`);\n        };\n        this.updateExternalStorage = (name, request)=>{\n            return this.streamClient.put(`/external_storage/${name}`, request);\n        };\n        this.checkExternalStorage = (name)=>{\n            return this.streamClient.get(`/external_storage/${name}/check`);\n        };\n    }\n    /**\n     * createToken - Creates a token to authenticate this user. This function is used server side.\n     * The resulting token should be passed to the client side when the users register or logs in.\n     *\n     * @param {string} userID The User ID\n     * @param {number} [exp] The expiration time for the token expressed in the number of seconds since the epoch\n     * @param {number} [iat] The timestamp when a token has been issued\n     * @param call_cids for anonymous tokens you have to provide the call cids the use can join\n     *\n     * @return {string} Returns a token\n     */ createToken(userID, exp, iat, call_cids) {\n        return this.streamClient.createToken(userID, exp, iat, call_cids);\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-react-bindings/dist/index.es.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-bindings/dist/index.es.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_LANGUAGE: () => (/* binding */ DEFAULT_LANGUAGE),\n/* harmony export */   DEFAULT_NAMESPACE: () => (/* binding */ DEFAULT_NAMESPACE),\n/* harmony export */   Restricted: () => (/* binding */ Restricted),\n/* harmony export */   StreamCallProvider: () => (/* binding */ StreamCallProvider),\n/* harmony export */   StreamI18n: () => (/* binding */ StreamI18n),\n/* harmony export */   StreamI18nProvider: () => (/* binding */ StreamI18nProvider),\n/* harmony export */   StreamVideoProvider: () => (/* binding */ StreamVideoProvider),\n/* harmony export */   defaultTranslationFunction: () => (/* binding */ defaultTranslationFunction),\n/* harmony export */   mapToRegistry: () => (/* binding */ mapToRegistry),\n/* harmony export */   useCall: () => (/* binding */ useCall),\n/* harmony export */   useCallStateHooks: () => (/* binding */ useCallStateHooks),\n/* harmony export */   useCalls: () => (/* binding */ useCalls),\n/* harmony export */   useConnectedUser: () => (/* binding */ useConnectedUser),\n/* harmony export */   useCreateI18n: () => (/* binding */ useCreateI18n),\n/* harmony export */   useI18n: () => (/* binding */ useI18n),\n/* harmony export */   useStore: () => (/* binding */ useStore),\n/* harmony export */   useStreamVideoClient: () => (/* binding */ useStreamVideoClient)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! i18next */ \"(ssr)/./node_modules/i18next/dist/esm/i18next.js\");\n/* harmony import */ var _stream_io_video_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @stream-io/video-client */ \"(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js\");\n\n\n\n\n\nconst StreamCallContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n * A provider for the call object.\n */\nconst StreamCallProvider = (props) => {\n    const { call, children } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamCallContext.Provider, { value: call, children: children }));\n};\n/**\n * A hook to get the call object from the closest provider.\n */\nconst useCall = () => {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StreamCallContext);\n};\n\nconst mapToRegistry = (translationsMap, namespace) => Object.entries(translationsMap).reduce((acc, [lng, translations]) => {\n    acc[lng] = { [namespace]: translations };\n    return acc;\n}, {});\n\nconst DEFAULT_LANGUAGE = 'en';\nconst DEFAULT_NAMESPACE = 'stream-video';\nconst DEFAULT_CONFIG = {\n    debug: false,\n    currentLanguage: DEFAULT_LANGUAGE,\n    fallbackLanguage: false,\n};\nconst DEFAULT_TRANSLATIONS_REGISTRY = mapToRegistry({}, DEFAULT_NAMESPACE);\nconst defaultTranslationFunction = (key) => key;\nclass StreamI18n {\n    /** Simple logger function */\n    constructor(options = {}) {\n        /** Translator function that converts the provided string into its equivalent in the current language. */\n        this.t = defaultTranslationFunction;\n        this.init = async () => {\n            try {\n                this.t = await this.i18nInstance.init();\n            }\n            catch (e) {\n                console.error(`Failed to initialize translations: ${JSON.stringify(e)}`);\n            }\n            return this;\n        };\n        this.changeLanguage = async (language, onChange) => {\n            if (!this._checkIsInitialized())\n                return;\n            // i18next detects the language, if none provided, but it is better\n            // to show this detection here explicitly\n            const browserLanguage = typeof window !== 'undefined' && window.navigator\n                ? window.navigator.language\n                : undefined;\n            await this.i18nInstance.changeLanguage(language || browserLanguage);\n            onChange?.(this.currentLanguage);\n        };\n        this.registerTranslationsForLanguage = ({ lng, translations, }) => {\n            if (!this._checkIsInitialized())\n                return;\n            this.i18nInstance.addResourceBundle(lng, DEFAULT_NAMESPACE, translations, true, true);\n        };\n        this._checkIsInitialized = () => {\n            if (!this.i18nInstance.isInitialized) {\n                console.warn('I18n instance is not initialized. Call yourStreamI18nInstance.init().');\n            }\n            return this.i18nInstance.isInitialized;\n        };\n        const { debug = DEFAULT_CONFIG.debug, currentLanguage = DEFAULT_CONFIG.currentLanguage, fallbackLanguage = DEFAULT_CONFIG.fallbackLanguage, translationsOverrides, } = options;\n        this.i18nInstance = i18next__WEBPACK_IMPORTED_MODULE_2__[\"default\"].createInstance({\n            debug,\n            defaultNS: DEFAULT_NAMESPACE,\n            fallbackLng: fallbackLanguage,\n            interpolation: { escapeValue: false },\n            keySeparator: false,\n            lng: currentLanguage,\n            nsSeparator: false,\n            parseMissingKeyHandler: (key) => {\n                return key;\n            },\n            resources: DEFAULT_TRANSLATIONS_REGISTRY,\n        });\n        if (translationsOverrides) {\n            this.i18nInstance.on('initialized', () => {\n                Object.entries(translationsOverrides).forEach(([lng, translations]) => {\n                    this.registerTranslationsForLanguage({ lng, translations });\n                });\n            });\n        }\n    }\n    get currentLanguage() {\n        this._checkIsInitialized();\n        return this.i18nInstance.language;\n    }\n    get isInitialized() {\n        return this.i18nInstance.isInitialized;\n    }\n}\n\nconst StreamI18nContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    t: defaultTranslationFunction,\n});\nconst StreamI18nProvider = ({ children, ...createI18nParams }) => {\n    const { i18n, t } = useCreateI18n(createI18nParams);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamI18nContext.Provider, { value: { t, i18n }, children: children }));\n};\nconst useCreateI18n = ({ i18nInstance, language, fallbackLanguage, translationsOverrides, }) => {\n    const [i18n] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => i18nInstance ||\n        new StreamI18n({\n            currentLanguage: language,\n            fallbackLanguage,\n            translationsOverrides,\n        }));\n    const [t, setTranslationFn] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => defaultTranslationFunction);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        const { isInitialized } = i18n;\n        if (!isInitialized) {\n            i18n.init().then((_i18n) => setTranslationFn(() => _i18n.i18nInstance.t));\n            return;\n        }\n        if (language && i18n?.currentLanguage !== language) {\n            i18n.changeLanguage(language).catch((err) => {\n                console.log('Error while changing language', err);\n            });\n        }\n    }, [i18n, i18nInstance, language, translationsOverrides]);\n    return { i18n, t };\n};\nconst useI18n = () => (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StreamI18nContext);\n\nconst StreamVideoContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n * StreamVideo is a provider component which should be used to wrap the entire application.\n * It provides the client object to all children components and initializes the i18n instance.\n *  @param PropsWithChildren<StreamVideoProps>\n *  @category Client State\n */\nconst StreamVideoProvider = ({ children, client, i18nInstance, language, translationsOverrides, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamVideoContext.Provider, { value: client, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamI18nProvider, { i18nInstance: i18nInstance, language: language, translationsOverrides: translationsOverrides, children: children }) }));\n};\n/**\n *\n * @returns\n *\n * @category Client State\n */\nconst useStreamVideoClient = () => {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StreamVideoContext);\n};\n\n/**\n * Utility hook which provides the current value of the given observable.\n * @internal\n */\nconst useObservableValue = (observable$) => {\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => _stream_io_video_client__WEBPACK_IMPORTED_MODULE_3__.RxUtils.getCurrentValue(observable$));\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        const subscription = observable$.subscribe(setValue);\n        return () => {\n            subscription.unsubscribe();\n        };\n    }, [observable$]);\n    return value;\n};\n\n/**\n * Checks whether we are using React Native\n */\nconst isReactNative = () => {\n    if (typeof navigator === 'undefined')\n        return false;\n    return navigator.product?.toLowerCase() === 'reactnative';\n};\n\n/**\n * Utility hook, which provides the current call's state.\n *\n * @category Call State\n */\nconst useCallState = () => {\n    const call = useCall();\n    // return an empty and unlinked CallState object if there is no call in the provider\n    // this ensures that the hooks always return a value and many null checks can be avoided\n    if (!call) {\n        const message = 'You are using useCallState() outside a Call context. ' +\n            'Please wrap your component in <StreamCall /> and provide a \"call\" instance.';\n        console.warn(message);\n        return new _stream_io_video_client__WEBPACK_IMPORTED_MODULE_3__.CallState();\n    }\n    return call.state;\n};\n/**\n * Utility hook which provides information whether the current call is being recorded. It will return `true` if the call is being recorded.\n *\n * @category Call State\n */\nconst useIsCallRecordingInProgress = () => {\n    const { recording$ } = useCallState();\n    return useObservableValue(recording$);\n};\n/**\n * Utility hook which provides information whether the current call is broadcasting.\n *\n * @category Call State\n */\nconst useIsCallHLSBroadcastingInProgress = () => {\n    const { egress$ } = useCallState();\n    const egress = useObservableValue(egress$);\n    if (!egress)\n        return false;\n    return egress.broadcasting;\n};\n/**\n * Utility hook which provides information whether the current call is live.\n *\n * @category Call State\n */\nconst useIsCallLive = () => {\n    const { backstage$ } = useCallState();\n    const isBackstageOn = useObservableValue(backstage$);\n    return !isBackstageOn;\n};\n/**\n * Returns the list of blocked users in the current call.\n */\nconst useCallBlockedUserIds = () => {\n    const { blockedUserIds$ } = useCallState();\n    return useObservableValue(blockedUserIds$);\n};\n/**\n * Returns the timestamp when this call was created.\n */\nconst useCallCreatedAt = () => {\n    const { createdAt$ } = useCallState();\n    return useObservableValue(createdAt$);\n};\n/**\n * Returns the timestamp when this call was ended.\n */\nconst useCallEndedAt = () => {\n    const { endedAt$ } = useCallState();\n    return useObservableValue(endedAt$);\n};\n/**\n * Returns the timestamp telling when the call is scheduled to start.\n */\nconst useCallStartsAt = () => {\n    const { startsAt$ } = useCallState();\n    return useObservableValue(startsAt$);\n};\n/**\n * Returns the timestamp when this call was updated.\n */\nconst useCallUpdatedAt = () => {\n    const { updatedAt$ } = useCallState();\n    return useObservableValue(updatedAt$);\n};\n/**\n * Returns the information about the call's creator.\n */\nconst useCallCreatedBy = () => {\n    const { createdBy$ } = useCallState();\n    return useObservableValue(createdBy$);\n};\n/**\n * Returns the call's custom data.\n */\nconst useCallCustomData = () => {\n    const { custom$ } = useCallState();\n    return useObservableValue(custom$);\n};\n/**\n * Returns the call's Egress information.\n */\nconst useCallEgress = () => {\n    const { egress$ } = useCallState();\n    return useObservableValue(egress$);\n};\n/**\n * Returns the call's Ingress information.\n */\nconst useCallIngress = () => {\n    const { ingress$ } = useCallState();\n    return useObservableValue(ingress$);\n};\n/**\n * Returns the data for the current call session.\n */\nconst useCallSession = () => {\n    const { session$ } = useCallState();\n    return useObservableValue(session$);\n};\n/**\n * Returns the call's settings.\n */\nconst useCallSettings = () => {\n    const { settings$ } = useCallState();\n    return useObservableValue(settings$);\n};\n/**\n * Returns whether the call has transcribing enabled.\n */\nconst useIsCallTranscribingInProgress = () => {\n    const { transcribing$ } = useCallState();\n    return useObservableValue(transcribing$);\n};\n/**\n * Returns information about the user who has marked this call as ended.\n */\nconst useCallEndedBy = () => {\n    const { endedBy$ } = useCallState();\n    return useObservableValue(endedBy$);\n};\n/**\n * Utility hook which provides a boolean indicating whether there is\n * a participant in the current call which shares their screen.\n *\n * @category Call State\n */\nconst useHasOngoingScreenShare = () => {\n    const { hasOngoingScreenShare$ } = useCallState();\n    return useObservableValue(hasOngoingScreenShare$);\n};\n/**\n * Utility hook which provides the latest stats report of the current call.\n *\n * The latest stats report of the current call.\n * When stats gathering is enabled, this observable will emit a new value\n * at a regular (configurable) interval.\n *\n * Consumers of this observable can implement their own batching logic\n * in case they want to show historical stats data.\n *\n * @category Call State\n */\nconst useCallStatsReport = () => {\n    const { callStatsReport$ } = useCallState();\n    return useObservableValue(callStatsReport$);\n};\n/**\n * Utility hook which provides the dominant speaker of the current call.\n *\n * @category Call State\n */\nconst useDominantSpeaker = () => {\n    const { dominantSpeaker$ } = useCallState();\n    return useObservableValue(dominantSpeaker$);\n};\n/**\n * Utility hook which provides a list of call members.\n *\n * @category Call State\n */\nconst useCallMembers = () => {\n    const { members$ } = useCallState();\n    return useObservableValue(members$);\n};\n/**\n * Utility hook providing the current calling state of the call. For example, `RINGING` or `JOINED`.\n *\n * @category Call State\n */\nconst useCallCallingState = () => {\n    const { callingState$ } = useCallState();\n    return useObservableValue(callingState$);\n};\n/**\n * Utility hook providing the actual start time of the current session.\n * Useful for calculating the call duration.\n *\n * @category Call State\n */\nconst useCallStartedAt = () => {\n    const { startedAt$ } = useCallState();\n    return useObservableValue(startedAt$);\n};\n/**\n * A hook which provides a list of all participants that have joined an active call.\n *\n * @category Call State\n *\n * @param options.sortBy - A comparator function to sort the participants by.\n * Make sure to memoize output of the `combineComparators` function\n * (or keep it out of component's scope if possible) before passing it down to this property.\n */\nconst useParticipants = ({ sortBy, } = {}) => {\n    const { participants$ } = useCallState();\n    const participants = useObservableValue(participants$);\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        if (sortBy) {\n            return [...participants].sort(sortBy);\n        }\n        return participants;\n    }, [participants, sortBy]);\n};\n/**\n * A hook which provides a StreamVideoLocalParticipant object.\n * It signals that I have joined a call.\n *\n * @category Call State\n */\nconst useLocalParticipant = () => {\n    const { localParticipant$ } = useCallState();\n    return useObservableValue(localParticipant$);\n};\n/**\n * A hook which provides a list of all other participants than me that have joined an active call.\n *\n * @category Call State\n */\nconst useRemoteParticipants = () => {\n    const { remoteParticipants$ } = useCallState();\n    return useObservableValue(remoteParticipants$);\n};\n/**\n * Returns the approximate participant count of the active call.\n * This includes the anonymous users as well, and it is computed on the server.\n *\n * @category Call State\n */\nconst useParticipantCount = () => {\n    const { participantCount$ } = useCallState();\n    return useObservableValue(participantCount$);\n};\n/**\n * Returns the approximate anonymous participant count of the active call.\n * The regular participants are not included in this count. It is computed on the server.\n *\n * @category Call State\n */\nconst useAnonymousParticipantCount = () => {\n    const { anonymousParticipantCount$ } = useCallState();\n    return useObservableValue(anonymousParticipantCount$);\n};\n/**\n * Returns the generated thumbnail of the current call, if enabled in settings.\n */\nconst useCallThumbnail = () => {\n    const { thumbnails$ } = useCallState();\n    return useObservableValue(thumbnails$);\n};\n/**\n * A hook which returns the local participant's own capabilities.\n */\nconst useOwnCapabilities = () => {\n    const { ownCapabilities$ } = useCallState();\n    return useObservableValue(ownCapabilities$);\n};\n/**\n * Hook that returns true if the local participant has all the given permissions.\n *\n * @param permissions the permissions to check.\n */\nconst useHasPermissions = (...permissions) => {\n    const capabilities = useOwnCapabilities();\n    return permissions.every((permission) => capabilities?.includes(permission));\n};\n/**\n * Returns the camera state of the current call.\n *\n * @category Camera Manager State\n *\n */\nconst useCameraState = () => {\n    const call = useCall();\n    const { camera } = call;\n    const devices$ = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => camera.listDevices(), [camera]);\n    const { state } = camera;\n    const status = useObservableValue(state.status$);\n    const direction = useObservableValue(state.direction$);\n    const mediaStream = useObservableValue(state.mediaStream$);\n    const selectedDevice = useObservableValue(state.selectedDevice$);\n    const devices = useObservableValue(devices$);\n    const hasBrowserPermission = useObservableValue(state.hasBrowserPermission$);\n    const isMute = status !== 'enabled';\n    return {\n        camera,\n        status,\n        isEnabled: status === 'enabled',\n        direction,\n        mediaStream,\n        devices,\n        hasBrowserPermission,\n        selectedDevice,\n        isMute,\n    };\n};\n/**\n * Returns the microphone state of the current call.\n *\n * @category Microphone Manager State\n */\nconst useMicrophoneState = () => {\n    const call = useCall();\n    const { microphone } = call;\n    const devices$ = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => microphone.listDevices(), [microphone]);\n    const { state } = microphone;\n    const status = useObservableValue(state.status$);\n    const mediaStream = useObservableValue(state.mediaStream$);\n    const selectedDevice = useObservableValue(state.selectedDevice$);\n    const devices = useObservableValue(devices$);\n    const hasBrowserPermission = useObservableValue(state.hasBrowserPermission$);\n    const isSpeakingWhileMuted = useObservableValue(state.speakingWhileMuted$);\n    const isMute = status !== 'enabled';\n    return {\n        microphone,\n        status,\n        isEnabled: status === 'enabled',\n        mediaStream,\n        devices,\n        selectedDevice,\n        hasBrowserPermission,\n        isSpeakingWhileMuted,\n        isMute,\n    };\n};\n/**\n * Returns the speaker state of the current call.\n *\n * Note: This hook is not supported in React Native\n */\nconst useSpeakerState = () => {\n    if (isReactNative()) {\n        throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');\n    }\n    const call = useCall();\n    const { speaker } = call;\n    const devices$ = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => speaker.listDevices(), [speaker]);\n    const devices = useObservableValue(devices$);\n    const selectedDevice = useObservableValue(speaker.state.selectedDevice$);\n    return {\n        speaker,\n        devices,\n        selectedDevice,\n        isDeviceSelectionSupported: speaker.state.isDeviceSelectionSupported,\n    };\n};\n/**\n * Returns the Screen Share state of the current call.\n */\nconst useScreenShareState = () => {\n    const call = useCall();\n    const { screenShare } = call;\n    const status = useObservableValue(screenShare.state.status$);\n    const mediaStream = useObservableValue(screenShare.state.mediaStream$);\n    const isMute = status !== 'enabled';\n    return {\n        screenShare,\n        mediaStream,\n        status,\n        isMute,\n    };\n};\n\nvar CallStateHooks = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    useAnonymousParticipantCount: useAnonymousParticipantCount,\n    useCallBlockedUserIds: useCallBlockedUserIds,\n    useCallCallingState: useCallCallingState,\n    useCallCreatedAt: useCallCreatedAt,\n    useCallCreatedBy: useCallCreatedBy,\n    useCallCustomData: useCallCustomData,\n    useCallEgress: useCallEgress,\n    useCallEndedAt: useCallEndedAt,\n    useCallEndedBy: useCallEndedBy,\n    useCallIngress: useCallIngress,\n    useCallMembers: useCallMembers,\n    useCallSession: useCallSession,\n    useCallSettings: useCallSettings,\n    useCallStartedAt: useCallStartedAt,\n    useCallStartsAt: useCallStartsAt,\n    useCallState: useCallState,\n    useCallStatsReport: useCallStatsReport,\n    useCallThumbnail: useCallThumbnail,\n    useCallUpdatedAt: useCallUpdatedAt,\n    useCameraState: useCameraState,\n    useDominantSpeaker: useDominantSpeaker,\n    useHasOngoingScreenShare: useHasOngoingScreenShare,\n    useHasPermissions: useHasPermissions,\n    useIsCallHLSBroadcastingInProgress: useIsCallHLSBroadcastingInProgress,\n    useIsCallLive: useIsCallLive,\n    useIsCallRecordingInProgress: useIsCallRecordingInProgress,\n    useIsCallTranscribingInProgress: useIsCallTranscribingInProgress,\n    useLocalParticipant: useLocalParticipant,\n    useMicrophoneState: useMicrophoneState,\n    useOwnCapabilities: useOwnCapabilities,\n    useParticipantCount: useParticipantCount,\n    useParticipants: useParticipants,\n    useRemoteParticipants: useRemoteParticipants,\n    useScreenShareState: useScreenShareState,\n    useSpeakerState: useSpeakerState\n});\n\n/**\n * Utility hook which provides access to client's state store.\n */\nconst useStore = () => {\n    const client = useStreamVideoClient();\n    if (!client) {\n        throw new Error(`StreamVideoClient isn't initialized or this hook is called outside of <StreamVideo> context.`);\n    }\n    return client.readOnlyStateStore;\n};\n/**\n * Utility hook which provides a list of all notifications about created calls.\n * In the ring call settings, these calls can be outgoing (I have called somebody)\n * or incoming (somebody has called me).\n *\n * @category Client State\n */\nconst useCalls = () => {\n    const { calls$ } = useStore();\n    return useObservableValue(calls$);\n};\n/**\n * Returns the current connected user.\n *\n * @category Client State\n */\nconst useConnectedUser = () => {\n    const { connectedUser$ } = useStore();\n    return useObservableValue(connectedUser$);\n};\n\n/**\n * A hook-alike function that exposes all call state hooks.\n *\n * @category Call State\n */\nconst useCallStateHooks = () => CallStateHooks;\n\nconst Restricted = ({ canRequestOnly, hasPermissionsOnly, requiredGrants, requireAll = true, children, }) => {\n    const call = useCall();\n    const { useCallSettings, useOwnCapabilities } = useCallStateHooks();\n    const ownCapabilities = useOwnCapabilities();\n    const settings = useCallSettings();\n    const hasPermissions = requiredGrants[requireAll ? 'every' : 'some']((capability) => ownCapabilities?.includes(capability));\n    if (hasPermissionsOnly)\n        return hasPermissions ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: children }) : null;\n    const canRequest = requiredGrants.some((capability) => call?.permissionsContext.canRequest(capability, settings));\n    if (canRequestOnly)\n        return canRequest ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: children }) : null;\n    if (hasPermissions || canRequest)\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: children });\n    return null;\n};\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-react-bindings/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-react-sdk/dist/index.es.js":
/*!******************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-sdk/dist/index.es.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AcceptCallButton: () => (/* binding */ AcceptCallButton),\n/* harmony export */   Audio: () => (/* binding */ Audio),\n/* harmony export */   AudioSettingsDefaultDeviceEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.AudioSettingsDefaultDeviceEnum),\n/* harmony export */   AudioSettingsRequestDefaultDeviceEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.AudioSettingsRequestDefaultDeviceEnum),\n/* harmony export */   Avatar: () => (/* binding */ Avatar),\n/* harmony export */   AvatarFallback: () => (/* binding */ AvatarFallback),\n/* harmony export */   AxiosError: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.AxiosError),\n/* harmony export */   BaseVideo: () => (/* binding */ BaseVideo),\n/* harmony export */   Browsers: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Browsers),\n/* harmony export */   Call: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Call),\n/* harmony export */   CallControls: () => (/* binding */ CallControls),\n/* harmony export */   CallParticipantListing: () => (/* binding */ CallParticipantListing),\n/* harmony export */   CallParticipantListingItem: () => (/* binding */ CallParticipantListingItem),\n/* harmony export */   CallParticipantsList: () => (/* binding */ CallParticipantsList),\n/* harmony export */   CallPreview: () => (/* binding */ CallPreview),\n/* harmony export */   CallRecordingList: () => (/* binding */ CallRecordingList),\n/* harmony export */   CallRecordingListHeader: () => (/* binding */ CallRecordingListHeader),\n/* harmony export */   CallRecordingListItem: () => (/* binding */ CallRecordingListItem),\n/* harmony export */   CallState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallState),\n/* harmony export */   CallStats: () => (/* binding */ CallStats),\n/* harmony export */   CallStatsButton: () => (/* binding */ CallStatsButton),\n/* harmony export */   CallStatsLatencyChart: () => (/* binding */ CallStatsLatencyChart),\n/* harmony export */   CallType: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallType),\n/* harmony export */   CallTypes: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallTypes),\n/* harmony export */   CallingState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState),\n/* harmony export */   CameraManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CameraManager),\n/* harmony export */   CameraManagerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CameraManagerState),\n/* harmony export */   CancelCallButton: () => (/* binding */ CancelCallButton),\n/* harmony export */   CancelCallConfirmButton: () => (/* binding */ CancelCallConfirmButton),\n/* harmony export */   CompositeButton: () => (/* binding */ CompositeButton),\n/* harmony export */   CreateDeviceRequestPushProviderEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CreateDeviceRequestPushProviderEnum),\n/* harmony export */   DEFAULT_LANGUAGE: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_LANGUAGE),\n/* harmony export */   DEFAULT_NAMESPACE: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_NAMESPACE),\n/* harmony export */   DebounceType: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.DebounceType),\n/* harmony export */   DefaultParticipantViewUI: () => (/* binding */ DefaultParticipantViewUI),\n/* harmony export */   DefaultReactionsMenu: () => (/* binding */ DefaultReactionsMenu),\n/* harmony export */   DefaultScreenShareOverlay: () => (/* binding */ DefaultScreenShareOverlay),\n/* harmony export */   DefaultVideoPlaceholder: () => (/* binding */ DefaultVideoPlaceholder),\n/* harmony export */   DeviceSelector: () => (/* binding */ DeviceSelector),\n/* harmony export */   DeviceSelectorAudioInput: () => (/* binding */ DeviceSelectorAudioInput),\n/* harmony export */   DeviceSelectorAudioOutput: () => (/* binding */ DeviceSelectorAudioOutput),\n/* harmony export */   DeviceSelectorVideo: () => (/* binding */ DeviceSelectorVideo),\n/* harmony export */   DeviceSettings: () => (/* binding */ DeviceSettings),\n/* harmony export */   DropDownSelect: () => (/* binding */ DropDownSelect),\n/* harmony export */   DropDownSelectOption: () => (/* binding */ DropDownSelectOption),\n/* harmony export */   DynascaleManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.DynascaleManager),\n/* harmony export */   EmptyCallRecordingListing: () => (/* binding */ EmptyCallRecordingListing),\n/* harmony export */   ErrorFromResponse: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ErrorFromResponse),\n/* harmony export */   GenericMenu: () => (/* binding */ GenericMenu),\n/* harmony export */   GenericMenuButtonItem: () => (/* binding */ GenericMenuButtonItem),\n/* harmony export */   Icon: () => (/* binding */ Icon),\n/* harmony export */   IconButton: () => (/* binding */ IconButton),\n/* harmony export */   InputMediaDeviceManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.InputMediaDeviceManager),\n/* harmony export */   InputMediaDeviceManagerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.InputMediaDeviceManagerState),\n/* harmony export */   LayoutSettingsNameEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.LayoutSettingsNameEnum),\n/* harmony export */   LayoutSettingsRequestNameEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.LayoutSettingsRequestNameEnum),\n/* harmony export */   LivestreamLayout: () => (/* binding */ LivestreamLayout),\n/* harmony export */   LoadingCallRecordingListing: () => (/* binding */ LoadingCallRecordingListing),\n/* harmony export */   LoadingIndicator: () => (/* binding */ LoadingIndicator),\n/* harmony export */   MenuToggle: () => (/* binding */ MenuToggle),\n/* harmony export */   MenuVisualType: () => (/* binding */ MenuVisualType),\n/* harmony export */   MicrophoneManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.MicrophoneManager),\n/* harmony export */   MicrophoneManagerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.MicrophoneManagerState),\n/* harmony export */   Notification: () => (/* binding */ Notification),\n/* harmony export */   OwnCapability: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability),\n/* harmony export */   PaginatedGridLayout: () => (/* binding */ PaginatedGridLayout),\n/* harmony export */   ParticipantActionsContextMenu: () => (/* binding */ ParticipantActionsContextMenu),\n/* harmony export */   ParticipantDetails: () => (/* binding */ ParticipantDetails),\n/* harmony export */   ParticipantView: () => (/* binding */ ParticipantView),\n/* harmony export */   ParticipantViewContext: () => (/* binding */ ParticipantViewContext),\n/* harmony export */   ParticipantsAudio: () => (/* binding */ ParticipantsAudio),\n/* harmony export */   PermissionNotification: () => (/* binding */ PermissionNotification),\n/* harmony export */   PermissionRequestList: () => (/* binding */ PermissionRequestList),\n/* harmony export */   PermissionRequests: () => (/* binding */ PermissionRequests),\n/* harmony export */   ReactionsButton: () => (/* binding */ ReactionsButton),\n/* harmony export */   RecordCallButton: () => (/* binding */ RecordCallButton),\n/* harmony export */   RecordCallConfirmationButton: () => (/* binding */ RecordCallConfirmationButton),\n/* harmony export */   RecordSettingsRequestModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RecordSettingsRequestModeEnum),\n/* harmony export */   RecordSettingsRequestQualityEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RecordSettingsRequestQualityEnum),\n/* harmony export */   RecordingInProgressNotification: () => (/* binding */ RecordingInProgressNotification),\n/* harmony export */   Restricted: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted),\n/* harmony export */   RingingCall: () => (/* binding */ RingingCall),\n/* harmony export */   RingingCallControls: () => (/* binding */ RingingCallControls),\n/* harmony export */   RxUtils: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RxUtils),\n/* harmony export */   ScreenShareButton: () => (/* binding */ ScreenShareButton),\n/* harmony export */   ScreenShareManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ScreenShareManager),\n/* harmony export */   ScreenShareState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ScreenShareState),\n/* harmony export */   SearchInput: () => (/* binding */ SearchInput),\n/* harmony export */   SearchResults: () => (/* binding */ SearchResults),\n/* harmony export */   SfuEvents: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuEvents),\n/* harmony export */   SfuModels: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels),\n/* harmony export */   SpeakerLayout: () => (/* binding */ SpeakerLayout),\n/* harmony export */   SpeakerManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SpeakerManager),\n/* harmony export */   SpeakerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SpeakerState),\n/* harmony export */   SpeakingWhileMutedNotification: () => (/* binding */ SpeakingWhileMutedNotification),\n/* harmony export */   SpeechIndicator: () => (/* binding */ SpeechIndicator),\n/* harmony export */   StatCard: () => (/* binding */ StatCard),\n/* harmony export */   StatCardExplanation: () => (/* binding */ StatCardExplanation),\n/* harmony export */   StatsTag: () => (/* binding */ StatsTag),\n/* harmony export */   Statuses: () => (/* binding */ Statuses),\n/* harmony export */   StreamCall: () => (/* binding */ StreamCall),\n/* harmony export */   StreamCallProvider: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamCallProvider),\n/* harmony export */   StreamI18n: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamI18n),\n/* harmony export */   StreamI18nProvider: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamI18nProvider),\n/* harmony export */   StreamSfuClient: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamSfuClient),\n/* harmony export */   StreamTheme: () => (/* binding */ StreamTheme),\n/* harmony export */   StreamVideo: () => (/* binding */ StreamVideo),\n/* harmony export */   StreamVideoClient: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamVideoClient),\n/* harmony export */   StreamVideoProvider: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamVideoProvider),\n/* harmony export */   StreamVideoReadOnlyStateStore: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamVideoReadOnlyStateStore),\n/* harmony export */   StreamVideoServerClient: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamVideoServerClient),\n/* harmony export */   StreamVideoWriteableStateStore: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamVideoWriteableStateStore),\n/* harmony export */   TextButton: () => (/* binding */ TextButton),\n/* harmony export */   ToggleAudioOutputButton: () => (/* binding */ ToggleAudioOutputButton),\n/* harmony export */   ToggleAudioPreviewButton: () => (/* binding */ ToggleAudioPreviewButton),\n/* harmony export */   ToggleAudioPublishingButton: () => (/* binding */ ToggleAudioPublishingButton),\n/* harmony export */   ToggleVideoPreviewButton: () => (/* binding */ ToggleVideoPreviewButton),\n/* harmony export */   ToggleVideoPublishingButton: () => (/* binding */ ToggleVideoPublishingButton),\n/* harmony export */   Tooltip: () => (/* binding */ Tooltip),\n/* harmony export */   TranscriptionSettingsModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.TranscriptionSettingsModeEnum),\n/* harmony export */   TranscriptionSettingsRequestModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.TranscriptionSettingsRequestModeEnum),\n/* harmony export */   Video: () => (/* binding */ Video$1),\n/* harmony export */   VideoPreview: () => (/* binding */ VideoPreview),\n/* harmony export */   VideoSettingsCameraFacingEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VideoSettingsCameraFacingEnum),\n/* harmony export */   VideoSettingsRequestCameraFacingEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VideoSettingsRequestCameraFacingEnum),\n/* harmony export */   ViewportTracker: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ViewportTracker),\n/* harmony export */   VisibilityState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VisibilityState),\n/* harmony export */   WithTooltip: () => (/* binding */ WithTooltip),\n/* harmony export */   checkIfAudioOutputChangeSupported: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.checkIfAudioOutputChangeSupported),\n/* harmony export */   combineComparators: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.combineComparators),\n/* harmony export */   conditional: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.conditional),\n/* harmony export */   createSoundDetector: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.createSoundDetector),\n/* harmony export */   defaultReactions: () => (/* binding */ defaultReactions),\n/* harmony export */   defaultSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.defaultSortPreset),\n/* harmony export */   defaultTranslationFunction: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.defaultTranslationFunction),\n/* harmony export */   descending: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.descending),\n/* harmony export */   deviceIds$: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.deviceIds$),\n/* harmony export */   disposeOfMediaStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.disposeOfMediaStream),\n/* harmony export */   dominantSpeaker: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.dominantSpeaker),\n/* harmony export */   getAudioDevices: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioDevices),\n/* harmony export */   getAudioOutputDevices: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioOutputDevices),\n/* harmony export */   getAudioStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioStream),\n/* harmony export */   getClientDetails: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getClientDetails),\n/* harmony export */   getDeviceInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getDeviceInfo),\n/* harmony export */   getLogger: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getLogger),\n/* harmony export */   getOSInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getOSInfo),\n/* harmony export */   getScreenShareStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getScreenShareStream),\n/* harmony export */   getSdkInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getSdkInfo),\n/* harmony export */   getVideoDevices: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getVideoDevices),\n/* harmony export */   getVideoStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getVideoStream),\n/* harmony export */   getWebRTCInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getWebRTCInfo),\n/* harmony export */   livestreamOrAudioRoomSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.livestreamOrAudioRoomSortPreset),\n/* harmony export */   logLevels: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.logLevels),\n/* harmony export */   logToConsole: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.logToConsole),\n/* harmony export */   mapToRegistry: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.mapToRegistry),\n/* harmony export */   name: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.name),\n/* harmony export */   noopComparator: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.noopComparator),\n/* harmony export */   paginatedLayoutSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.paginatedLayoutSortPreset),\n/* harmony export */   pinned: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.pinned),\n/* harmony export */   publishingAudio: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.publishingAudio),\n/* harmony export */   publishingVideo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.publishingVideo),\n/* harmony export */   reactionType: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.reactionType),\n/* harmony export */   role: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.role),\n/* harmony export */   screenSharing: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.screenSharing),\n/* harmony export */   setDeviceInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setDeviceInfo),\n/* harmony export */   setLogLevel: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setLogLevel),\n/* harmony export */   setLogger: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setLogger),\n/* harmony export */   setOSInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setOSInfo),\n/* harmony export */   setSdkInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setSdkInfo),\n/* harmony export */   setWebRTCInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setWebRTCInfo),\n/* harmony export */   speakerLayoutSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.speakerLayoutSortPreset),\n/* harmony export */   speaking: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.speaking),\n/* harmony export */   translations: () => (/* binding */ translations),\n/* harmony export */   useCall: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall),\n/* harmony export */   useCallStateHooks: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks),\n/* harmony export */   useCalls: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCalls),\n/* harmony export */   useConnectedUser: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useConnectedUser),\n/* harmony export */   useCreateI18n: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCreateI18n),\n/* harmony export */   useHorizontalScrollPosition: () => (/* binding */ useHorizontalScrollPosition),\n/* harmony export */   useI18n: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n),\n/* harmony export */   useMenuContext: () => (/* binding */ useMenuContext),\n/* harmony export */   useParticipantViewContext: () => (/* binding */ useParticipantViewContext),\n/* harmony export */   usePersistedDevicePreferences: () => (/* binding */ usePersistedDevicePreferences),\n/* harmony export */   useRequestPermission: () => (/* binding */ useRequestPermission),\n/* harmony export */   useStore: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useStore),\n/* harmony export */   useStreamVideoClient: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useStreamVideoClient),\n/* harmony export */   useTrackElementVisibility: () => (/* binding */ useTrackElementVisibility),\n/* harmony export */   useVerticalScrollPosition: () => (/* binding */ useVerticalScrollPosition)\n/* harmony export */ });\n/* harmony import */ var _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stream-io/video-client */ \"(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js\");\n/* harmony import */ var _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stream-io/video-react-bindings */ \"(ssr)/./node_modules/@stream-io/video-react-bindings/dist/index.es.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react/dist/floating-ui.react.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/core/dist/floating-ui.core.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! chart.js */ \"(ssr)/./node_modules/chart.js/dist/chart.js\");\n/* harmony import */ var react_chartjs_2__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-chartjs-2 */ \"(ssr)/./node_modules/react-chartjs-2/dist/index.js\");\n\n\n\n\n\n\n\n\n\n\n\nconst Audio = ({ participant, trackType = 'audioTrack', ...rest }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const [audioElement, setAudioElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const { userId, sessionId } = participant;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !audioElement)\n            return;\n        const cleanup = call.bindAudioElement(audioElement, sessionId, trackType);\n        return () => {\n            cleanup?.();\n        };\n    }, [call, sessionId, audioElement, trackType]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"audio\", { autoPlay: true, ...rest, ref: setAudioElement, \"data-user-id\": userId, \"data-session-id\": sessionId, \"data-track-type\": trackType }));\n};\n\nconst ParticipantsAudio = (props) => {\n    const { participants, audioProps } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: participants.map((participant) => {\n            if (participant.isLocalParticipant)\n                return null;\n            const { publishedTracks, audioStream, screenShareAudioStream, sessionId, } = participant;\n            const hasAudio = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.AUDIO);\n            const audioTrackElement = hasAudio && audioStream && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { ...audioProps, trackType: \"audioTrack\", participant: participant }));\n            const hasScreenShareAudio = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.SCREEN_SHARE_AUDIO);\n            const screenShareAudioTrackElement = hasScreenShareAudio &&\n                screenShareAudioStream && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { ...audioProps, trackType: \"screenShareAudioTrack\", participant: participant }));\n            return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: [audioTrackElement, screenShareAudioTrackElement] }, sessionId));\n        }) }));\n};\n\nconst ParticipantViewContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(undefined);\nconst useParticipantViewContext = () => (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ParticipantViewContext);\n\nconst Avatar = ({ imageSrc, name, style, className, ...rest }) => {\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(!imageSrc || error) && name && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AvatarFallback, { className: className, style: style, names: [name] })), imageSrc && !error && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { onError: () => setError(true), alt: \"avatar\", className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__avatar', className), src: imageSrc, style: style, ...rest }))] }));\n};\nconst AvatarFallback = ({ className, names, style, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__avatar--initials-fallback', className), style: style, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { children: [names[0][0], names[1]?.[0]] }) }));\n};\n\nconst useFloatingUIPreset = ({ placement, strategy, offset: offsetInPx = 10, }) => {\n    const { refs, x, y, update, elements: { domReference, floating }, } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useFloating)({\n        placement,\n        strategy,\n        middleware: [\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.offset)(offsetInPx),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.shift)(),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.flip)(),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.size)({\n                padding: 10,\n                apply: ({ availableHeight, elements }) => {\n                    Object.assign(elements.floating.style, {\n                        maxHeight: `${availableHeight}px`,\n                    });\n                },\n            }),\n        ],\n    });\n    // handle window resizing\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!domReference || !floating)\n            return;\n        const cleanup = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.autoUpdate)(domReference, floating, update);\n        return () => cleanup();\n    }, [domReference, floating, update]);\n    return { refs, x, y, domReference, floating, strategy };\n};\n\n/**\n * This hook will persist the device settings to local storage.\n *\n * @param key the key to use for local storage.\n */\nconst usePersistDevicePreferences = (key) => {\n    const { useMicrophoneState, useCameraState, useSpeakerState, useCallSettings, } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const mic = useMicrophoneState();\n    const camera = useCameraState();\n    const speaker = useSpeakerState();\n    const settings = useCallSettings();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !settings)\n            return;\n        if (call.state.callingState === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.LEFT)\n            return;\n        try {\n            const hasPreferences = !!window.localStorage.getItem(key);\n            const { audio, video } = settings;\n            const defaultDevice = 'default';\n            const preferences = {\n                mic: {\n                    selectedDeviceId: mic.selectedDevice || defaultDevice,\n                    muted: hasPreferences ? mic.isMute : !audio.mic_default_on,\n                },\n                camera: {\n                    selectedDeviceId: camera.selectedDevice || defaultDevice,\n                    muted: hasPreferences ? camera.isMute : !video.camera_default_on,\n                },\n                speaker: {\n                    selectedDeviceId: speaker.selectedDevice || defaultDevice,\n                    muted: false,\n                },\n            };\n            window.localStorage.setItem(key, JSON.stringify(preferences));\n        }\n        catch (err) {\n            console.warn('Failed to save device preferences', err);\n        }\n    }, [\n        call,\n        camera.isMute,\n        camera.selectedDevice,\n        key,\n        mic.isMute,\n        mic.selectedDevice,\n        settings,\n        speaker.selectedDevice,\n    ]);\n};\n/**\n * This hook will apply the device settings from local storage.\n *\n * @param key the key to use for local storage.\n */\nconst useApplyDevicePreferences = (key) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useCallSettings } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const settings = useCallSettings();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !settings)\n            return;\n        const apply = async () => {\n            const initMic = async (setting) => {\n                await call.microphone.select(setting.selectedDeviceId);\n                if (setting.muted) {\n                    await call.microphone.disable();\n                }\n                else {\n                    await call.microphone.enable();\n                }\n            };\n            const initCamera = async (setting) => {\n                await call.camera.select(setting.selectedDeviceId);\n                if (setting.muted) {\n                    await call.camera.disable();\n                }\n                else {\n                    await call.camera.enable();\n                }\n            };\n            const initSpeaker = (setting) => {\n                call.speaker.select(setting.selectedDeviceId);\n            };\n            let preferences = null;\n            try {\n                preferences = JSON.parse(window.localStorage.getItem(key));\n            }\n            catch (err) {\n                console.warn('Failed to load device preferences', err);\n            }\n            if (preferences) {\n                await initMic(preferences.mic);\n                await initCamera(preferences.camera);\n                initSpeaker(preferences.speaker);\n            }\n            else {\n                const { audio, video } = settings;\n                if (audio.mic_default_on)\n                    await call.microphone.enable();\n                if (video.camera_default_on)\n                    await call.camera.enable();\n            }\n        };\n        apply().catch((err) => {\n            console.warn('Failed to apply device preferences', err);\n        });\n    }, [call, key, settings]);\n};\n/**\n * This hook will apply and persist the device preferences from local storage.\n *\n * @param key the key to use for local storage.\n */\nconst usePersistedDevicePreferences = (key = '@stream-io/device-preferences') => {\n    useApplyDevicePreferences(key);\n    usePersistDevicePreferences(key);\n};\n\nconst SCROLL_THRESHOLD = 10;\n/**\n * Hook which observes element's scroll position and returns text value based on the\n * position of the scrollbar (`top`, `bottom`, `between` and `null` if no scrollbar is available)\n */\nconst useVerticalScrollPosition = (scrollElement, threshold = SCROLL_THRESHOLD) => {\n    const [scrollPosition, setScrollPosition] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!scrollElement)\n            return;\n        const scrollHandler = () => {\n            const element = scrollElement;\n            const hasVerticalScrollbar = element.scrollHeight > element.clientHeight;\n            if (!hasVerticalScrollbar)\n                return setScrollPosition(null);\n            const isAtTheTop = element.scrollTop <= threshold;\n            if (isAtTheTop)\n                return setScrollPosition('top');\n            const isAtTheBottom = Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) <= threshold;\n            if (isAtTheBottom)\n                return setScrollPosition('bottom');\n            setScrollPosition('between');\n        };\n        const resizeObserver = new ResizeObserver(scrollHandler);\n        resizeObserver.observe(scrollElement);\n        scrollElement.addEventListener('scroll', scrollHandler);\n        return () => {\n            scrollElement.removeEventListener('scroll', scrollHandler);\n            resizeObserver.disconnect();\n        };\n    }, [scrollElement, threshold]);\n    return scrollPosition;\n};\nconst useHorizontalScrollPosition = (scrollElement, threshold = SCROLL_THRESHOLD) => {\n    const [scrollPosition, setScrollPosition] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!scrollElement)\n            return;\n        const scrollHandler = () => {\n            const element = scrollElement;\n            const hasHorizontalScrollbar = element.scrollWidth > element.clientWidth;\n            if (!hasHorizontalScrollbar)\n                return setScrollPosition(null);\n            const isAtTheStart = element.scrollLeft <= threshold;\n            if (isAtTheStart)\n                return setScrollPosition('start');\n            const isAtTheEnd = Math.abs(element.scrollWidth - element.scrollLeft - element.clientWidth) <= threshold;\n            if (isAtTheEnd)\n                return setScrollPosition('end');\n            setScrollPosition('between');\n        };\n        const resizeObserver = new ResizeObserver(scrollHandler);\n        resizeObserver.observe(scrollElement);\n        scrollElement.addEventListener('scroll', scrollHandler);\n        return () => {\n            scrollElement.removeEventListener('scroll', scrollHandler);\n            resizeObserver.disconnect();\n        };\n    }, [scrollElement, threshold]);\n    return scrollPosition;\n};\n\nconst useToggleCallRecording = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useIsCallRecordingInProgress } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const isCallRecordingInProgress = useIsCallRecordingInProgress();\n    const [isAwaitingResponse, setIsAwaitingResponse] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    // TODO: add permissions\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        // we wait until call.recording_started/stopped event to flips the\n        // `isCallRecordingInProgress` state variable.\n        // Once the flip happens, we remove the loading indicator\n        setIsAwaitingResponse((isAwaiting) => {\n            if (isAwaiting)\n                return false;\n            return isAwaiting;\n        });\n    }, [isCallRecordingInProgress]);\n    const toggleCallRecording = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async () => {\n        try {\n            setIsAwaitingResponse(true);\n            if (isCallRecordingInProgress) {\n                await call?.stopRecording();\n            }\n            else {\n                await call?.startRecording();\n            }\n        }\n        catch (e) {\n            console.error(`Failed start recording`, e);\n        }\n    }, [call, isCallRecordingInProgress]);\n    return { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress };\n};\n\nconst useRequestPermission = (permission) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const hasPermission = useHasPermissions(permission);\n    const [isAwaitingPermission, setIsAwaitingPermission] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false); // TODO: load with possibly pending state\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        const reset = () => setIsAwaitingPermission(false);\n        if (hasPermission)\n            reset();\n    }, [hasPermission]);\n    const requestPermission = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async () => {\n        if (hasPermission)\n            return true;\n        const canRequestPermission = !!call?.permissionsContext.canRequest(permission);\n        if (isAwaitingPermission || !canRequestPermission)\n            return false;\n        setIsAwaitingPermission(true);\n        try {\n            await call?.requestPermissions({\n                permissions: [permission],\n            });\n        }\n        catch (error) {\n            setIsAwaitingPermission(false);\n            throw new Error(`requestPermission failed: ${error}`);\n        }\n        return false;\n    }, [call, hasPermission, isAwaitingPermission, permission]);\n    return {\n        requestPermission,\n        hasPermission,\n        canRequestPermission: !!call?.permissionsContext.canRequest(permission),\n        isAwaitingPermission,\n    };\n};\n\nvar MenuVisualType;\n(function (MenuVisualType) {\n    MenuVisualType[\"PORTAL\"] = \"portal\";\n    MenuVisualType[\"MENU\"] = \"menu\";\n})(MenuVisualType || (MenuVisualType = {}));\n/**\n * Used to provide utility APIs to the components rendered inside the portal.\n */\nconst MenuContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});\n/**\n * Access to the closes MenuContext.\n */\nconst useMenuContext = () => {\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(MenuContext);\n};\nconst MenuPortal = ({ children, refs, }) => {\n    const portalId = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => `str-video-portal-${Math.random().toString(36).substring(2, 9)}`, []);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { id: portalId, className: \"str-video__portal\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.FloatingOverlay, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.FloatingPortal, { id: portalId, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__portal-content\", ref: refs.setFloating, children: children }) }) })] }));\n};\nconst MenuToggle = ({ ToggleButton, placement = 'top-start', strategy = 'absolute', offset, visualType = MenuVisualType.MENU, children, }) => {\n    const [menuShown, setMenuShown] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const { floating, domReference, refs, x, y } = useFloatingUIPreset({\n        placement,\n        strategy,\n        offset,\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        const handleClick = (event) => {\n            if (!floating && domReference?.contains(event.target)) {\n                setMenuShown(true);\n            }\n            else if (floating && !floating?.contains(event.target)) {\n                setMenuShown(false);\n            }\n        };\n        const handleKeyDown = (event) => {\n            if (event.key.toLowerCase() === 'escape' &&\n                !event.altKey &&\n                !event.ctrlKey) {\n                setMenuShown(false);\n            }\n        };\n        document?.addEventListener('click', handleClick, { capture: true });\n        document?.addEventListener('keydown', handleKeyDown);\n        return () => {\n            document?.removeEventListener('click', handleClick, { capture: true });\n            document?.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [floating, domReference]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [menuShown && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuContext.Provider, { value: { close: () => setMenuShown(false) }, children: visualType === MenuVisualType.PORTAL ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuPortal, { refs: refs, children: children })) : visualType === MenuVisualType.MENU ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__menu-container\", ref: refs.setFloating, style: {\n                        position: strategy,\n                        top: y ?? 0,\n                        left: x ?? 0,\n                        overflowY: 'auto',\n                    }, children: children })) : null })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ToggleButton, { menuShown: menuShown, ref: refs.setReference })] }));\n};\n\nconst GenericMenu = ({ children, onItemClick, }) => {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"ul\", { className: \"str-video__generic-menu\", ref: ref, onClick: (e) => {\n            if (onItemClick &&\n                e.target !== ref.current &&\n                ref.current?.contains(e.target)) {\n                onItemClick(e);\n            }\n        }, children: children }));\n};\nconst GenericMenuButtonItem = ({ children, ...rest }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"li\", { className: \"str-video__generic-menu--item\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { ...rest, children: children }) }));\n};\n\nconst Icon = ({ className, icon }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__icon', icon && `str-video__icon--${icon}`, className) }));\n\nconst IconButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function IconButton(props, ref) {\n    const { icon, enabled, variant, onClick, className, ...rest } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-controls__button', className, {\n            [`str-video__call-controls__button--variant-${variant}`]: variant,\n            'str-video__call-controls__button--enabled': enabled,\n        }), onClick: (e) => {\n            e.preventDefault();\n            onClick?.(e);\n        }, ref: ref, ...rest, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: icon }) }));\n});\n\nconst isComponentType = (elementOrComponent) => {\n    return elementOrComponent === null\n        ? false\n        : !(0,react__WEBPACK_IMPORTED_MODULE_3__.isValidElement)(elementOrComponent);\n};\n\nconst chunk = (array, size) => {\n    const chunkCount = Math.ceil(array.length / size);\n    return Array.from({ length: chunkCount }, (_, index) => array.slice(size * index, size * index + size));\n};\n\nconst applyElementToRef = (ref, element) => {\n    if (!ref)\n        return;\n    if (typeof ref === 'function')\n        return ref(element);\n    ref.current = element;\n};\n\nconst CompositeButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function CompositeButton({ caption, children, className, active, Menu, menuPlacement, menuOffset, title, ToggleMenuButton = DefaultToggleMenuButton, variant, onClick, ...restButtonProps }, ref) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__composite-button', className, {\n            'str-video__composite-button--caption': caption,\n            'str-video__composite-button--menu': Menu,\n        }), title: title, ref: ref, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__composite-button__button-group', {\n                    'str-video__composite-button__button-group--active': active,\n                    'str-video__composite-button__button-group--active-primary': active && variant === 'primary',\n                    'str-video__composite-button__button-group--active-secondary': active && variant === 'secondary',\n                }), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { type: \"button\", className: \"str-video__composite-button__button\", onClick: (e) => {\n                            e.preventDefault();\n                            onClick?.(e);\n                        }, ...restButtonProps, children: children }), Menu && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { offset: menuOffset, placement: menuPlacement, ToggleButton: ToggleMenuButton, children: isComponentType(Menu) ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Menu, {}) : Menu }))] }), caption && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__composite-button__caption\", children: caption }))] }));\n});\nconst DefaultToggleMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function DefaultToggleMenuButton({ menuShown }, ref) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__menu-toggle-button', {\n            'str-video__menu-toggle-button--active': menuShown,\n        }), icon: menuShown ? 'caret-down' : 'caret-up', ref: ref }));\n});\n\nconst TextButton = ({ children, ...rest }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { ...rest, className: \"str-video__text-button\", children: children }));\n};\n\nconst AcceptCallButton = ({ disabled, onAccept, onClick, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.join();\n            onAccept?.();\n        }\n    }, [onClick, onAccept, call]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { disabled: disabled, icon: \"call-accept\", variant: \"success\", \"data-testid\": \"accept-call-button\", onClick: handleClick }));\n};\n\nconst Notification = (props) => {\n    const { isVisible, message, children, visibilityTimeout, resetIsVisible, placement = 'top', iconClassName = 'str-video__notification__icon', close, } = props;\n    const { refs, x, y, strategy } = useFloatingUIPreset({\n        placement,\n        strategy: 'absolute',\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!isVisible || !visibilityTimeout || !resetIsVisible)\n            return;\n        const timeout = setTimeout(() => {\n            resetIsVisible();\n        }, visibilityTimeout);\n        return () => clearTimeout(timeout);\n    }, [isVisible, resetIsVisible, visibilityTimeout]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ref: refs.setReference, children: [isVisible && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__notification\", ref: refs.setFloating, style: {\n                    position: strategy,\n                    top: y ?? 0,\n                    left: x ?? 0,\n                    overflowY: 'auto',\n                }, children: [iconClassName && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"i\", { className: iconClassName }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__notification__message\", children: message }), close ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"i\", { className: \"str-video__icon str-video__icon--close str-video__notification__close\", onClick: close })) : null] })), children] }));\n};\n\nconst PermissionNotification = (props) => {\n    const { permission, isAwaitingApproval, messageApproved, messageAwaitingApproval, messageRevoked, visibilityTimeout = 3500, children, } = props;\n    const { useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const hasPermission = useHasPermissions(permission);\n    const prevHasPermission = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(hasPermission);\n    const [showNotification, setShowNotification] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (hasPermission && !prevHasPermission.current) {\n            setShowNotification('granted');\n            prevHasPermission.current = true;\n        }\n        else if (!hasPermission && prevHasPermission.current) {\n            setShowNotification('revoked');\n            prevHasPermission.current = false;\n        }\n    }, [hasPermission]);\n    const resetIsVisible = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => setShowNotification(undefined), []);\n    if (isAwaitingApproval) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { isVisible: isAwaitingApproval && !hasPermission, message: messageAwaitingApproval, children: children }));\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { isVisible: !!showNotification, visibilityTimeout: visibilityTimeout, resetIsVisible: resetIsVisible, message: showNotification === 'granted' ? messageApproved : messageRevoked, children: children }));\n};\n\nconst SpeakingWhileMutedNotification = ({ children, text, placement, }) => {\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { isSpeakingWhileMuted } = useMicrophoneState();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const message = text ?? t('You are muted. Unmute to speak.');\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { message: message, isVisible: isSpeakingWhileMuted, placement: placement || 'top-start', children: children }));\n};\n\nconst RecordingInProgressNotification = ({ children, text, }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { isCallRecordingInProgress } = useToggleCallRecording();\n    const [isVisible, setVisible] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const message = text ?? t('Recording in progress...');\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (isCallRecordingInProgress) {\n            setVisible(true);\n        }\n        else {\n            setVisible(false);\n        }\n    }, [isCallRecordingInProgress]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { message: message, iconClassName: \"str-video__icon str-video__icon--recording-on\", isVisible: isVisible, placement: \"top-start\", close: () => setVisible(false), children: children }));\n};\n\nconst LoadingIndicator = ({ className, type = 'spinner', text, tooltip, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__loading-indicator', className), title: tooltip, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__loading-indicator__icon', type) }), text && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__loading-indicator-text\", children: text })] }));\n};\n\nconst RecordEndConfirmation = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { toggleCallRecording, isAwaitingResponse } = useToggleCallRecording();\n    const { close } = useMenuContext();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-recording__confirmation\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-recording__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"recording-on\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"h2\", { className: \"str-video__end-recording__heading\", children: t('End recording') })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__end-recording__description\", children: t('Are you sure you want end the recording?') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-recording__actions\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { variant: \"secondary\", onClick: close, children: t('Cancel') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { variant: \"primary\", onClick: toggleCallRecording, children: isAwaitingResponse ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, {}) : t('End recording') })] })] }));\n};\nconst ToggleEndRecordingMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleEndRecordingMenuButton(props, ref) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { ref: ref, active: true, variant: \"secondary\", \"data-testid\": \"recording-stop-button\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"recording-off\" }) }));\n});\nconst RecordCallConfirmationButton = ({ caption, }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress } = useToggleCallRecording();\n    if (isCallRecordingInProgress) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [\n                _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.START_RECORD_CALL,\n                _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.STOP_RECORD_CALL,\n            ], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { ToggleButton: ToggleEndRecordingMenuButton, visualType: MenuVisualType.PORTAL, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RecordEndConfirmation, {}) }) }));\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.START_RECORD_CALL,\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.STOP_RECORD_CALL,\n        ], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { active: isCallRecordingInProgress, caption: caption, title: caption || t('Record call'), variant: \"secondary\", \"data-testid\": \"recording-start-button\", onClick: isAwaitingResponse ? undefined : toggleCallRecording, children: isAwaitingResponse ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, { tooltip: t('Waiting for recording to start...') })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"recording-off\" })) }) }));\n};\nconst RecordCallButton = ({ caption }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress } = useToggleCallRecording();\n    let title = caption || t('Record call');\n    if (isAwaitingResponse) {\n        title = isCallRecordingInProgress\n            ? t('Waiting for recording to stop...')\n            : t('Waiting for recording to start...');\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.START_RECORD_CALL,\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.STOP_RECORD_CALL,\n        ], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { active: isCallRecordingInProgress, caption: caption, variant: \"secondary\", \"data-testid\": isCallRecordingInProgress\n                ? 'recording-stop-button'\n                : 'recording-start-button', title: title, onClick: isAwaitingResponse ? undefined : toggleCallRecording, children: isAwaitingResponse ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, {})) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: isCallRecordingInProgress ? 'recording-on' : 'recording-off' })) }) }));\n};\n\nconst defaultEmojiReactionMap = {\n    ':like:': '👍',\n    ':raise-hand:': '✋',\n    ':fireworks:': '🎉',\n    ':dislike:': '👎',\n    ':heart:': '❤️',\n    ':smile:': '😀',\n};\nconst Reaction = ({ participant: { reaction, sessionId }, hideAfterTimeoutInMs = 5500, emojiReactionMap = defaultEmojiReactionMap, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !reaction)\n            return;\n        const timeoutId = setTimeout(() => {\n            call.resetReaction(sessionId);\n        }, hideAfterTimeoutInMs);\n        return () => {\n            clearTimeout(timeoutId);\n        };\n    }, [call, hideAfterTimeoutInMs, reaction, sessionId]);\n    if (!reaction)\n        return null;\n    const { emoji_code: emojiCode } = reaction;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__reaction\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__reaction__emoji\", children: emojiCode && emojiReactionMap[emojiCode] }) }));\n};\n\nconst defaultReactions = [\n    {\n        type: 'reaction',\n        emoji_code: ':like:',\n    },\n    {\n        // TODO OL: use `prompt` type?\n        type: 'raised-hand',\n        emoji_code: ':raise-hand:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':fireworks:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':dislike:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':heart:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':smile:',\n    },\n];\nconst ReactionsButton = ({ reactions = defaultReactions, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.CREATE_REACTION], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"top\", ToggleButton: ToggleReactionsMenuButton, visualType: MenuVisualType.MENU, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultReactionsMenu, { reactions: reactions }) }) }));\n};\nconst ToggleReactionsMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleReactionsMenuButton({ menuShown }, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { ref: ref, active: menuShown, variant: \"primary\", title: t('Reactions'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"reactions\" }) }));\n});\nconst DefaultReactionsMenu = ({ reactions, layout = 'horizontal', }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__reactions-menu', {\n            'str-video__reactions-menu--horizontal': layout === 'horizontal',\n            'str-video__reactions-menu--vertical': layout === 'vertical',\n        }), children: reactions.map((reaction) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { type: \"button\", className: \"str-video__reactions-menu__button\", onClick: () => {\n                call?.sendReaction(reaction);\n            }, children: reaction.emoji_code && defaultEmojiReactionMap[reaction.emoji_code] }, reaction.emoji_code))) }));\n};\n\nconst ScreenShareButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption } = props;\n    const { useHasOngoingScreenShare, useScreenShareState, useCallSettings } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const isSomeoneScreenSharing = useHasOngoingScreenShare();\n    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE);\n    const callSettings = useCallSettings();\n    const isScreenSharingAllowed = callSettings?.screensharing.enabled;\n    const { screenShare, isMute: amIScreenSharing } = useScreenShareState();\n    const disableScreenShareButton = amIScreenSharing\n        ? isSomeoneScreenSharing || isScreenSharingAllowed === false\n        : false;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionNotification, { permission: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now share your screen.'), messageAwaitingApproval: t('Awaiting for an approval to share screen.'), messageRevoked: t('You can no longer share your screen.'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { active: isSomeoneScreenSharing, caption: caption, title: caption || t('Share screen'), variant: \"primary\", \"data-testid\": isSomeoneScreenSharing\n                    ? 'screen-share-stop-button'\n                    : 'screen-share-start-button', disabled: disableScreenShareButton, onClick: async () => {\n                    if (!hasPermission) {\n                        await requestPermission();\n                    }\n                    else {\n                        await screenShare.toggle();\n                    }\n                }, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: isSomeoneScreenSharing ? 'screen-share-on' : 'screen-share-off' }) }) }) }));\n};\n\nconst SelectContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});\nconst Select = (props) => {\n    const { children, icon, defaultSelectedLabel, defaultSelectedIndex, handleSelect: handleSelectProp, } = props;\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const [activeIndex, setActiveIndex] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [selectedIndex, setSelectedIndex] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(defaultSelectedIndex);\n    const [selectedLabel, setSelectedLabel] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(defaultSelectedLabel);\n    const { refs, context } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useFloating)({\n        placement: 'bottom-start',\n        open: isOpen,\n        onOpenChange: setIsOpen,\n        whileElementsMounted: _floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.autoUpdate,\n        middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.flip)()],\n    });\n    const elementsRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n    const labelsRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n    const handleSelect = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((index) => {\n        setSelectedIndex(index);\n        handleSelectProp(index || 0);\n        setIsOpen(false);\n        if (index !== null) {\n            setSelectedLabel(labelsRef.current[index]);\n        }\n    }, [handleSelectProp]);\n    const handleTypeaheadMatch = (index) => {\n        if (isOpen) {\n            setActiveIndex(index);\n        }\n        else {\n            handleSelect(index);\n        }\n    };\n    const listNav = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useListNavigation)(context, {\n        listRef: elementsRef,\n        activeIndex,\n        selectedIndex,\n        onNavigate: setActiveIndex,\n    });\n    const typeahead = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useTypeahead)(context, {\n        listRef: labelsRef,\n        activeIndex,\n        selectedIndex,\n        onMatch: handleTypeaheadMatch,\n    });\n    const click = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useClick)(context);\n    const dismiss = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useDismiss)(context);\n    const role = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useRole)(context, { role: 'listbox' });\n    const { getReferenceProps, getFloatingProps, getItemProps } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useInteractions)([listNav, typeahead, click, dismiss, role]);\n    const selectContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n        activeIndex,\n        selectedIndex,\n        getItemProps,\n        handleSelect,\n    }), [activeIndex, selectedIndex, getItemProps, handleSelect]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__dropdown\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__dropdown-selected\", ref: refs.setReference, tabIndex: 0, ...getReferenceProps(), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"label\", { className: \"str-video__dropdown-selected__label\", children: [icon && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__dropdown-selected__icon\", icon: icon })), selectedLabel] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__dropdown-selected__chevron\", icon: isOpen ? 'chevron-up' : 'chevron-down' })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SelectContext.Provider, { value: selectContext, children: isOpen && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.FloatingFocusManager, { context: context, modal: false, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__dropdown-list\", ref: refs.setFloating, ...getFloatingProps(), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.FloatingList, { elementsRef: elementsRef, labelsRef: labelsRef, children: children }) }) })) })] }));\n};\nconst DropDownSelectOption = (props) => {\n    const { selected, label, icon } = props;\n    const { getItemProps, handleSelect } = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SelectContext);\n    const { ref, index } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useListItem)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__dropdown-option', {\n            'str-video__dropdown-option--selected': selected,\n        }), ref: ref, ...getItemProps({\n            onClick: () => handleSelect(index),\n        }), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__dropdown-icon\", icon: icon }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__dropdown-label\", children: label })] }));\n};\nconst DropDownSelect = (props) => {\n    const { children, icon, handleSelect, defaultSelectedLabel, defaultSelectedIndex, } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Select, { icon: icon, handleSelect: handleSelect, defaultSelectedIndex: defaultSelectedIndex, defaultSelectedLabel: defaultSelectedLabel, children: children }));\n};\n\nconst DeviceSelectorOption = ({ disabled, id, label, onChange, name, selected, defaultChecked, value, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"label\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__device-settings__option', {\n            'str-video__device-settings__option--selected': selected,\n            'str-video__device-settings__option--disabled': disabled,\n        }), htmlFor: id, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"input\", { type: \"radio\", name: name, onChange: onChange, value: value, id: id, checked: selected, defaultChecked: defaultChecked, disabled: disabled }), label] }));\n};\nconst DeviceSelectorList = (props) => {\n    const { devices = [], selectedDeviceId: selectedDeviceFromProps, title, type, onChange, } = props;\n    // sometimes the browser (Chrome) will report the system-default device\n    // with an id of 'default'. In case when it doesn't, we'll select the first\n    // available device.\n    let selectedDeviceId = selectedDeviceFromProps;\n    if (devices.length > 0 &&\n        !devices.find((d) => d.deviceId === selectedDeviceId)) {\n        selectedDeviceId = devices[0].deviceId;\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__device-settings__device-kind\", children: [title && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__device-settings__device-selector-title\", children: title })), !devices.length ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorOption, { id: `${type}--default`, label: \"Default\", name: type, defaultChecked: true, value: \"default\" })) : (devices.map((device) => {\n                return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorOption, { id: `${type}--${device.deviceId}`, value: device.deviceId, label: device.label, onChange: (e) => {\n                        onChange?.(e.target.value);\n                    }, name: type, selected: device.deviceId === selectedDeviceId || devices.length === 1 }, device.deviceId));\n            }))] }));\n};\nconst DeviceSelectorDropdown = (props) => {\n    const { devices = [], selectedDeviceId: selectedDeviceFromProps, title, onChange, icon, } = props;\n    // sometimes the browser (Chrome) will report the system-default device\n    // with an id of 'default'. In case when it doesn't, we'll select the first\n    // available device.\n    let selectedDeviceId = selectedDeviceFromProps;\n    if (devices.length > 0 &&\n        !devices.find((d) => d.deviceId === selectedDeviceId)) {\n        selectedDeviceId = devices[0].deviceId;\n    }\n    const selectedIndex = devices.findIndex((d) => d.deviceId === selectedDeviceId);\n    const handleSelect = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((index) => {\n        onChange?.(devices[index].deviceId);\n    }, [devices, onChange]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__device-settings__device-kind\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__device-settings__device-selector-title\", children: title }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropDownSelect, { icon: icon, defaultSelectedIndex: selectedIndex, defaultSelectedLabel: devices[selectedIndex]?.label, handleSelect: handleSelect, children: devices.map((device) => {\n                    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropDownSelectOption, { icon: icon, label: device.label, selected: device.deviceId === selectedDeviceId || devices.length === 1 }, device.deviceId));\n                }) })] }));\n};\nconst DeviceSelector = (props) => {\n    const { visualType = 'list', icon, placeholder, ...rest } = props;\n    if (visualType === 'list') {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorList, { ...rest });\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorDropdown, { ...rest, icon: icon, placeholder: placeholder }));\n};\n\nconst DeviceSelectorAudioInput = ({ title, visualType, }) => {\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { microphone, selectedDevice, devices } = useMicrophoneState();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelector, { devices: devices || [], selectedDeviceId: selectedDevice, type: \"audioinput\", onChange: async (deviceId) => {\n            await microphone.select(deviceId);\n        }, title: title, visualType: visualType, icon: \"mic\" }));\n};\nconst DeviceSelectorAudioOutput = ({ title, visualType, }) => {\n    const { useSpeakerState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { speaker, selectedDevice, devices, isDeviceSelectionSupported } = useSpeakerState();\n    if (!isDeviceSelectionSupported)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelector, { devices: devices, type: \"audiooutput\", selectedDeviceId: selectedDevice, onChange: (deviceId) => {\n            speaker.select(deviceId);\n        }, title: title, visualType: visualType, icon: \"speaker\" }));\n};\n\nconst DeviceSelectorVideo = ({ title, visualType, }) => {\n    const { useCameraState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { camera, devices, selectedDevice } = useCameraState();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelector, { devices: devices || [], type: \"videoinput\", selectedDeviceId: selectedDevice, onChange: async (deviceId) => {\n            await camera.select(deviceId);\n        }, title: title, visualType: visualType, icon: \"camera\" }));\n};\n\nconst DeviceSettings = ({ visualType = MenuVisualType.MENU, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"bottom-end\", ToggleButton: ToggleDeviceSettingsMenuButton, visualType: visualType, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Menu, {}) }));\n};\nconst Menu = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__device-settings\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorVideo, { title: t('Select a Camera') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorAudioInput, { title: t('Select a Mic') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorAudioOutput, { title: t('Select Speakers') })] }));\n};\nconst ToggleDeviceSettingsMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleDeviceSettingsMenuButton({ menuShown }, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__device-settings__button', {\n            'str-video__device-settings__button--active': menuShown,\n        }), title: t('Toggle device menu'), icon: \"device-settings\", ref: ref }));\n});\n\nconst ToggleAudioPreviewButton = (props) => {\n    const { caption, Menu, menuPlacement, ...restCompositeButtonProps } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { microphone, isMute, hasBrowserPermission } = useMicrophoneState();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: isMute, caption: caption, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(!hasBrowserPermission && 'str-video__device-unavailable'), variant: \"secondary\", title: !hasBrowserPermission\n            ? t('Check your browser audio permissions')\n            : caption || t('Mic'), disabled: !hasBrowserPermission, \"data-testid\": isMute ? 'preview-audio-unmute-button' : 'preview-audio-mute-button', onClick: () => microphone.toggle(), Menu: Menu, menuPlacement: menuPlacement, ...restCompositeButtonProps, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: !isMute ? 'mic' : 'mic-off' }), !hasBrowserPermission && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", title: t('Check your browser audio permissions'), children: \"!\" }))] }));\n};\nconst ToggleAudioPublishingButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, Menu = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorAudioInput, { visualType: \"list\" }), menuPlacement = 'top', ...restCompositeButtonProps } = props;\n    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO);\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { microphone, isMute, hasBrowserPermission } = useMicrophoneState();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionNotification, { permission: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now speak.'), messageAwaitingApproval: t('Awaiting for an approval to speak.'), messageRevoked: t('You can no longer speak.'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: isMute, caption: caption, title: !hasPermission\n                    ? t('You have no permission to share your audio')\n                    : !hasBrowserPermission\n                        ? t('Check your browser mic permissions')\n                        : caption || t('Mic'), variant: \"secondary\", disabled: !hasBrowserPermission || !hasPermission, \"data-testid\": isMute ? 'audio-unmute-button' : 'audio-mute-button', onClick: async () => {\n                    if (!hasPermission) {\n                        await requestPermission();\n                    }\n                    else {\n                        await microphone.toggle();\n                    }\n                }, Menu: Menu, menuPlacement: menuPlacement, menuOffset: 16, ...restCompositeButtonProps, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: isMute ? 'mic-off' : 'mic' }), (!hasBrowserPermission || !hasPermission) && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", children: \"!\" }))] }) }) }));\n};\n\nconst ToggleVideoPreviewButton = (props) => {\n    const { caption, Menu = DeviceSelectorVideo, menuPlacement = 'top', ...restCompositeButtonProps } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { useCameraState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { camera, isMute, hasBrowserPermission } = useCameraState();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: isMute, caption: caption, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(!hasBrowserPermission && 'str-video__device-unavailable'), title: !hasBrowserPermission\n            ? t('Check your browser video permissions')\n            : caption || t('Video'), variant: \"secondary\", \"data-testid\": isMute ? 'preview-video-unmute-button' : 'preview-video-mute-button', onClick: () => camera.toggle(), disabled: !hasBrowserPermission, Menu: Menu, menuPlacement: menuPlacement, ...restCompositeButtonProps, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: !isMute ? 'camera' : 'camera-off' }), !hasBrowserPermission && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", title: t('Check your browser video permissions'), children: \"!\" }))] }));\n};\nconst ToggleVideoPublishingButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, Menu = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorVideo, { visualType: \"list\" }), menuPlacement = 'top', ...restCompositeButtonProps } = props;\n    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO);\n    const { useCameraState, useCallSettings } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { camera, isMute, hasBrowserPermission } = useCameraState();\n    const callSettings = useCallSettings();\n    const isPublishingVideoAllowed = callSettings?.video.enabled;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionNotification, { permission: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now share your video.'), messageAwaitingApproval: t('Awaiting for an approval to share your video.'), messageRevoked: t('You can no longer share your video.'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: isMute, caption: caption, variant: \"secondary\", title: !hasPermission\n                    ? t('You have no permission to share your video')\n                    : !hasBrowserPermission\n                        ? t('Check your browser video permissions')\n                        : !isPublishingVideoAllowed\n                            ? t('Video publishing is disabled by the system')\n                            : caption || t('Video'), disabled: !hasBrowserPermission || !hasPermission || !isPublishingVideoAllowed, \"data-testid\": isMute ? 'video-unmute-button' : 'video-mute-button', onClick: async () => {\n                    if (!hasPermission) {\n                        await requestPermission();\n                    }\n                    else {\n                        await camera.toggle();\n                    }\n                }, Menu: Menu, menuPlacement: menuPlacement, menuOffset: 16, ...restCompositeButtonProps, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: isMute ? 'camera-off' : 'camera' }), (!hasBrowserPermission ||\n                        !hasPermission ||\n                        !isPublishingVideoAllowed) && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", children: \"!\" }))] }) }) }));\n};\n\nconst EndCallMenu = (props) => {\n    const { onLeave, onEnd } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-call__confirmation\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"button\", { className: \"str-video__button str-video__end-call__leave\", type: \"button\", \"data-testid\": \"leave-call-button\", onClick: onLeave, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__button__icon str-video__end-call__leave-icon\", icon: \"logout\" }), t('Leave call')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.END_CALL], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"button\", { className: \"str-video__button str-video__end-call__end\", type: \"button\", \"data-testid\": \"end-call-for-all-button\", onClick: onEnd, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__button__icon str-video__end-call__end-icon\", icon: \"call-end\" }), t('End call for all')] }) })] }));\n};\nconst CancelCallToggleMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function CancelCallToggleMenuButton(props, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { icon: \"call-end\", variant: \"danger\", title: t('Leave call'), \"data-testid\": \"leave-call-button\", ref: ref }));\n});\nconst CancelCallConfirmButton = ({ onClick, onLeave, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const handleLeave = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.leave();\n            onLeave?.();\n        }\n    }, [onClick, onLeave, call]);\n    const handleEndCall = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.endCall();\n            onLeave?.();\n        }\n    }, [onClick, onLeave, call]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"top-start\", ToggleButton: CancelCallToggleMenuButton, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EndCallMenu, { onEnd: handleEndCall, onLeave: handleLeave }) }));\n};\nconst CancelCallButton = ({ disabled, onClick, onLeave, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.leave();\n            onLeave?.();\n        }\n    }, [onClick, onLeave, call]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { disabled: disabled, icon: \"call-end\", variant: \"danger\", title: t('Leave call'), \"data-testid\": \"cancel-call-button\", onClick: handleClick }));\n};\n\nconst CallControls = ({ onLeave }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-controls\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RecordCallButton, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ReactionsButton, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ScreenShareButton, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SpeakingWhileMutedNotification, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ToggleAudioPublishingButton, {}) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ToggleVideoPublishingButton, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CancelCallButton, { onLeave: onLeave })] }));\n\nchart_js__WEBPACK_IMPORTED_MODULE_8__.Chart.register(chart_js__WEBPACK_IMPORTED_MODULE_8__.CategoryScale, chart_js__WEBPACK_IMPORTED_MODULE_8__.LinearScale, chart_js__WEBPACK_IMPORTED_MODULE_8__.LineElement, chart_js__WEBPACK_IMPORTED_MODULE_8__.PointElement);\nconst CallStatsLatencyChart = (props) => {\n    const { values } = props;\n    let max = 0;\n    const data = {\n        labels: values.map((point) => {\n            const date = new Date(point.x * 1000);\n            return `${date.getHours()}:${date.getMinutes()}`;\n        }),\n        datasets: [\n            {\n                data: values.map((point) => {\n                    const { y } = point;\n                    max = Math.max(max, y);\n                    return point;\n                }),\n                borderColor: '#00e2a1',\n                backgroundColor: '#00e2a1',\n            },\n        ],\n    };\n    const options = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => {\n        return {\n            maintainAspectRatio: false,\n            animation: {\n                duration: 0,\n            },\n            elements: {\n                line: {\n                    borderWidth: 1,\n                },\n                point: {\n                    radius: 2,\n                },\n            },\n            scales: {\n                y: {\n                    position: 'right',\n                    stacked: true,\n                    min: 0,\n                    max: Math.max(180, Math.ceil((max + 10) / 10) * 10),\n                    grid: {\n                        display: true,\n                        color: '#979ca0',\n                    },\n                    ticks: {\n                        stepSize: 30,\n                    },\n                },\n                x: {\n                    grid: {\n                        display: false,\n                    },\n                    ticks: {\n                        display: false,\n                    },\n                },\n            },\n        };\n    }, [max]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats-line-chart-container\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_chartjs_2__WEBPACK_IMPORTED_MODULE_9__.Line, { options: options, data: data, className: \"str-video__call-stats__latencychart\" }) }));\n};\n\nvar Statuses;\n(function (Statuses) {\n    Statuses[\"GOOD\"] = \"Good\";\n    Statuses[\"OK\"] = \"Ok\";\n    Statuses[\"BAD\"] = \"Bad\";\n})(Statuses || (Statuses = {}));\nconst statsStatus = ({ value, lowBound, highBound, }) => {\n    if (value <= lowBound) {\n        return Statuses.GOOD;\n    }\n    if (value >= lowBound && value <= highBound) {\n        return Statuses.OK;\n    }\n    if (value >= highBound) {\n        return Statuses.BAD;\n    }\n    return Statuses.GOOD;\n};\nconst CallStats = (props) => {\n    const { latencyLowBound = 75, latencyHighBound = 400 } = props;\n    const [latencyBuffer, setLatencyBuffer] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(() => {\n        const now = Date.now();\n        return Array.from({ length: 20 }, (_, i) => ({ x: now + i, y: 0 }));\n    });\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const [publishBitrate, setPublishBitrate] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('-');\n    const [subscribeBitrate, setSubscribeBitrate] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('-');\n    const previousStats = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    const { useCallStatsReport } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const callStatsReport = useCallStatsReport();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!callStatsReport)\n            return;\n        if (!previousStats.current) {\n            previousStats.current = callStatsReport;\n            return;\n        }\n        const previousCallStatsReport = previousStats.current;\n        setPublishBitrate(() => {\n            return calculatePublishBitrate(previousCallStatsReport, callStatsReport);\n        });\n        setSubscribeBitrate(() => {\n            return calculateSubscribeBitrate(previousCallStatsReport, callStatsReport);\n        });\n        setLatencyBuffer((latencyBuf) => {\n            const newLatencyBuffer = latencyBuf.slice(-19);\n            newLatencyBuffer.push({\n                x: callStatsReport.timestamp,\n                y: callStatsReport.publisherStats.averageRoundTripTimeInMs,\n            });\n            return newLatencyBuffer;\n        });\n        previousStats.current = callStatsReport;\n    }, [callStatsReport]);\n    const latencyComparison = {\n        lowBound: latencyLowBound,\n        highBound: latencyHighBound,\n        value: callStatsReport?.publisherStats.averageRoundTripTimeInMs || 0,\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats\", children: callStatsReport && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"h3\", { className: \"str-video__call-stats__heading\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__call-stats__icon\", icon: \"call-latency\" }), t('Call Latency')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__call-stats__description\", children: t('Very high latency values may reduce call quality, cause lag, and make the call less enjoyable.') })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats__latencychart\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallStatsLatencyChart, { values: latencyBuffer }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"h3\", { className: \"str-video__call-stats__heading\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__call-stats__icon\", icon: \"network-quality\" }), t('Call performance')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__call-stats__description\", children: t('Very high latency values may reduce call quality, cause lag, and make the call less enjoyable.') })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card-container\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Region\", value: callStatsReport.datacenter }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Latency\", value: `${callStatsReport.publisherStats.averageRoundTripTimeInMs} ms.`, comparison: latencyComparison }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Receive jitter\", value: `${callStatsReport.subscriberStats.averageJitterInMs} ms.`, comparison: {\n                                ...latencyComparison,\n                                value: callStatsReport.subscriberStats.averageJitterInMs,\n                            } }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Publish jitter\", value: `${callStatsReport.publisherStats.averageJitterInMs} ms.`, comparison: {\n                                ...latencyComparison,\n                                value: callStatsReport.publisherStats.averageJitterInMs,\n                            } }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Publish resolution\", value: toFrameSize(callStatsReport.publisherStats) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Publish quality drop reason\", value: callStatsReport.publisherStats.qualityLimitationReasons }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Receiving resolution\", value: toFrameSize(callStatsReport.subscriberStats) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Receive quality drop reason\", value: callStatsReport.subscriberStats.qualityLimitationReasons }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Publish bitrate\", value: publishBitrate }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: \"Receiving bitrate\", value: subscribeBitrate })] })] })) }));\n};\nconst StatCardExplanation = (props) => {\n    const { description } = props;\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const { refs, floatingStyles, context } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useFloating)({\n        open: isOpen,\n        onOpenChange: setIsOpen,\n    });\n    const hover = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useHover)(context);\n    const { getReferenceProps, getFloatingProps } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_5__.useInteractions)([hover]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-explanation\", ref: refs.setReference, ...getReferenceProps(), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__call-explanation__icon\", icon: \"info\" }) }), isOpen && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-explanation__description\", ref: refs.setFloating, style: floatingStyles, ...getFloatingProps(), children: description }))] }));\n};\nconst StatsTag = ({ children, status = Statuses.GOOD, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-stats__tag', {\n            'str-video__call-stats__tag--good': status === Statuses.GOOD,\n            'str-video__call-stats__tag--ok': status === Statuses.OK,\n            'str-video__call-stats__tag--bad': status === Statuses.BAD,\n        }), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats__tag__text\", children: children }) }));\n};\nconst StatCard = (props) => {\n    const { label, value, description, comparison } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const status = comparison ? statsStatus(comparison) : undefined;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card-content\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card-label\", children: [label, description && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCardExplanation, { description: description })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats__card-value\", children: value })] }), comparison && status && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatsTag, { status: status, children: t(status) })] }));\n};\nconst toFrameSize = (stats) => {\n    const { highestFrameWidth: w, highestFrameHeight: h, highestFramesPerSecond: fps, } = stats;\n    let size = `-`;\n    if (w && h) {\n        size = `${w}x${h}`;\n        if (fps) {\n            size += `@${fps}fps.`;\n        }\n    }\n    return size;\n};\nconst calculatePublishBitrate = (previousCallStatsReport, callStatsReport) => {\n    const { publisherStats: { totalBytesSent: previousTotalBytesSent, timestamp: previousTimestamp, }, } = previousCallStatsReport;\n    const { publisherStats: { totalBytesSent, timestamp }, } = callStatsReport;\n    const bytesSent = totalBytesSent - previousTotalBytesSent;\n    const timeElapsed = timestamp - previousTimestamp;\n    return `${((bytesSent * 8) / timeElapsed).toFixed(2)} kbps`;\n};\nconst calculateSubscribeBitrate = (previousCallStatsReport, callStatsReport) => {\n    const { subscriberStats: { totalBytesReceived: previousTotalBytesReceived, timestamp: previousTimestamp, }, } = previousCallStatsReport;\n    const { subscriberStats: { totalBytesReceived, timestamp }, } = callStatsReport;\n    const bytesReceived = totalBytesReceived - previousTotalBytesReceived;\n    const timeElapsed = timestamp - previousTimestamp;\n    return `${((bytesReceived * 8) / timeElapsed).toFixed(2)} kbps`;\n};\n\nconst CallStatsButton = () => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"top-end\", ToggleButton: ToggleMenuButton, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallStats, {}) }));\nconst ToggleMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleMenuButton(props, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, menuShown } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { ref: ref, active: menuShown, caption: caption, title: caption || t('Statistics'), \"data-testid\": \"stats-button\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"stats\" }) }));\n});\n\nconst ToggleAudioOutputButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, Menu = DeviceSelectorAudioOutput, menuPlacement = 'top', } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { Menu: Menu, menuPlacement: menuPlacement, caption: caption, title: caption || t('Speakers'), \"data-testid\": \"audio-output-button\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"speaker\" }) }));\n};\n\nconst BlockedUserListing = ({ data }) => {\n    if (!data.length)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-listing\", children: data.map((userId) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BlockedUserListingItem, { userId: userId }, userId))) }) }));\n};\nconst BlockedUserListingItem = ({ userId }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const unblockUserClickHandler = () => {\n        if (userId)\n            call?.unblockUser(userId);\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-listing-item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-listing-item__display-name\", children: userId }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.BLOCK_USERS], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TextButton, { onClick: unblockUserClickHandler, children: \"Unblock\" }) })] }));\n};\n\nconst CallParticipantListHeader = ({ onClose, }) => {\n    const { useParticipants, useAnonymousParticipantCount } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participants = useParticipants();\n    const anonymousParticipantCount = useAnonymousParticipantCount();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list-header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list-header__title\", children: [t('Participants'), ' ', (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: \"str-video__participant-list-header__title-count\", children: [\"[\", participants.length, \"]\"] }), anonymousParticipantCount > 0 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__participant-list-header__title-anonymous\", children: t('Anonymous', { count: anonymousParticipantCount }) }))] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: onClose, className: \"str-video__participant-list-header__close-button\", icon: \"close\" })] }));\n};\n\nconst Tooltip = ({ children, referenceElement, tooltipClassName, tooltipPlacement = 'top', visible = false, }) => {\n    const { refs, x, y, strategy } = useFloatingUIPreset({\n        placement: tooltipPlacement,\n        strategy: 'absolute',\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        refs.setReference(referenceElement);\n    }, [referenceElement, refs]);\n    if (!visible)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__tooltip', tooltipClassName), ref: refs.setFloating, style: {\n            position: strategy,\n            top: y ?? 0,\n            left: x ?? 0,\n            overflowY: 'auto',\n        }, children: children }));\n};\n\nconst useEnterLeaveHandlers = ({ onMouseEnter, onMouseLeave, } = {}) => {\n    const [tooltipVisible, setTooltipVisible] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const handleMouseEnter = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((e) => {\n        setTooltipVisible(true);\n        onMouseEnter?.(e);\n    }, [onMouseEnter]);\n    const handleMouseLeave = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((e) => {\n        setTooltipVisible(false);\n        onMouseLeave?.(e);\n    }, [onMouseLeave]);\n    return { handleMouseEnter, handleMouseLeave, tooltipVisible };\n};\n\n// todo: duplicate of CallParticipantList.tsx#MediaIndicator - refactor to a single component\nconst WithTooltip = ({ title, tooltipClassName, tooltipPlacement, ...props }) => {\n    const { handleMouseEnter, handleMouseLeave, tooltipVisible } = useEnterLeaveHandlers();\n    const [tooltipAnchor, setTooltipAnchor] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Tooltip, { referenceElement: tooltipAnchor, visible: tooltipVisible, tooltipClassName: tooltipClassName, tooltipPlacement: tooltipPlacement, children: title || '' }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: setTooltipAnchor, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, ...props })] }));\n};\n\nconst CallParticipantListingItem = ({ participant, DisplayName = DefaultDisplayName, }) => {\n    const isAudioOn = participant.publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.AUDIO);\n    const isVideoOn = participant.publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.VIDEO);\n    const isPinned = !!participant.pin;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-listing-item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Avatar, { name: participant.name, imageSrc: participant.image }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DisplayName, { participant: participant }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-listing-item__media-indicator-group\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MediaIndicator, { title: isAudioOn ? t('Microphone on') : t('Microphone off'), className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-listing-item__icon', `str-video__participant-listing-item__icon-${isAudioOn ? 'mic' : 'mic-off'}`) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MediaIndicator, { title: isVideoOn ? t('Camera on') : t('Camera off'), className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-listing-item__icon', `str-video__participant-listing-item__icon-${isVideoOn ? 'camera' : 'camera-off'}`) }), isPinned && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MediaIndicator, { title: t('Pinned'), className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-listing-item__icon', 'str-video__participant-listing-item__icon-pinned') })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"bottom-end\", ToggleButton: ToggleButton$2, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantViewContext.Provider, { value: { participant, trackType: 'none' }, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantActionsContextMenu, {}) }) })] })] }));\n};\nconst MediaIndicator = (props) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { ...props }));\nconst DefaultDisplayName = ({ participant }) => {\n    const connectedUser = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useConnectedUser)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const meFlag = participant.userId === connectedUser?.id ? t('Me') : '';\n    const nameOrId = participant.name || participant.userId || t('Unknown');\n    let displayName;\n    if (!participant.name) {\n        displayName = meFlag || nameOrId || t('Unknown');\n    }\n    else if (meFlag) {\n        displayName = `${nameOrId} (${meFlag})`;\n    }\n    else {\n        displayName = nameOrId;\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { className: \"str-video__participant-listing-item__display-name\", title: displayName, children: displayName }));\n};\nconst ToggleButton$2 = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleButton(props, ref) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { enabled: props.menuShown, icon: \"ellipsis\", ref: ref });\n});\n\nconst CallParticipantListing = ({ data, }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-listing\", children: data.map((participant) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallParticipantListingItem, { participant: participant }, participant.sessionId))) }));\n\nconst EmptyParticipantSearchList = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-list--empty\", children: t('No participants found') }));\n};\n\nconst SearchInput = ({ exitSearch, isActive, ...rest }) => {\n    const [inputElement, setInputElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!inputElement)\n            return;\n        const handleKeyDown = (e) => {\n            if (e.key.toLowerCase() === 'escape')\n                exitSearch();\n        };\n        inputElement.addEventListener('keydown', handleKeyDown);\n        return () => {\n            inputElement.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [exitSearch, inputElement]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__search-input__container', {\n            'str-video__search-input__container--active': isActive,\n        }), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"input\", { placeholder: \"Search\", ...rest, ref: setInputElement }), isActive ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { className: \"str-video__search-input__clear-btn\", onClick: exitSearch, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__search-input__icon--active\" }) })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__search-input__icon\" }))] }));\n};\n\nconst SearchResults = ({ EmptySearchResultComponent, LoadingIndicator: LoadingIndicator$1 = LoadingIndicator, searchQueryInProgress, searchResults, SearchResultList, }) => {\n    if (searchQueryInProgress) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__search-results--loading\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator$1, {}) }));\n    }\n    if (!searchResults.length) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EmptySearchResultComponent, {});\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchResultList, { data: searchResults });\n};\n\nconst useSearch = ({ debounceInterval, searchFn, searchQuery = '', }) => {\n    const [searchResults, setSearchResults] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]);\n    const [searchQueryInProgress, setSearchQueryInProgress] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!searchQuery.length) {\n            setSearchQueryInProgress(false);\n            setSearchResults([]);\n            return;\n        }\n        setSearchQueryInProgress(true);\n        const timeout = setTimeout(async () => {\n            try {\n                const results = await searchFn(searchQuery);\n                setSearchResults(results);\n            }\n            catch (error) {\n                console.error(error);\n            }\n            finally {\n                setSearchQueryInProgress(false);\n            }\n        }, debounceInterval);\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [debounceInterval, searchFn, searchQuery]);\n    return {\n        searchQueryInProgress,\n        searchResults,\n    };\n};\n\nconst UserListTypes = {\n    active: 'Active users',\n    blocked: 'Blocked users',\n};\nconst DEFAULT_DEBOUNCE_SEARCH_INTERVAL = 200;\nconst CallParticipantsList = ({ onClose, activeUsersSearchFn, blockedUsersSearchFn, debounceSearchInterval, }) => {\n    const [searchQuery, setSearchQuery] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('');\n    const [userListType, setUserListType] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('active');\n    const exitSearch = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => setSearchQuery(''), []);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallParticipantListHeader, { onClose: onClose }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchInput, { value: searchQuery, onChange: ({ currentTarget }) => setSearchQuery(currentTarget.value), exitSearch: exitSearch, isActive: !!searchQuery }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallParticipantListContentHeader, { userListType: userListType, setUserListType: setUserListType }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list__content\", children: [userListType === 'active' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ActiveUsersSearchResults, { searchQuery: searchQuery, activeUsersSearchFn: activeUsersSearchFn, debounceSearchInterval: debounceSearchInterval })), userListType === 'blocked' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BlockedUsersSearchResults, { searchQuery: searchQuery, blockedUsersSearchFn: blockedUsersSearchFn, debounceSearchInterval: debounceSearchInterval }))] })] }));\n};\nconst CallParticipantListContentHeader = ({ userListType, setUserListType, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const muteAll = () => {\n        call?.muteAllUsers('audio');\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list__content-header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-list__content-header-title\", children: userListType === 'active' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.MUTE_USERS], hasPermissionsOnly: true, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TextButton, { onClick: muteAll, children: \"Mute all\" }) })) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"bottom-end\", ToggleButton: ToggleButton$1, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenu, { children: Object.keys(UserListTypes).map((lt) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { \"aria-selected\": lt === userListType, onClick: () => setUserListType(lt), children: UserListTypes[lt] }, lt))) }) })] }));\n};\nconst ActiveUsersSearchResults = ({ searchQuery, activeUsersSearchFn: activeUsersSearchFnFromProps, debounceSearchInterval = DEFAULT_DEBOUNCE_SEARCH_INTERVAL, }) => {\n    const { useParticipants } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participants = useParticipants({ sortBy: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.name });\n    const activeUsersSearchFn = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((queryString) => {\n        const queryRegExp = new RegExp(queryString, 'i');\n        return Promise.resolve(participants.filter((participant) => {\n            return participant.name.match(queryRegExp);\n        }));\n    }, [participants]);\n    const { searchQueryInProgress, searchResults } = useSearch({\n        searchFn: activeUsersSearchFnFromProps ?? activeUsersSearchFn,\n        debounceInterval: debounceSearchInterval,\n        searchQuery,\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchResults, { EmptySearchResultComponent: EmptyParticipantSearchList, LoadingIndicator: LoadingIndicator, searchQueryInProgress: searchQueryInProgress, searchResults: searchQuery ? searchResults : participants, SearchResultList: CallParticipantListing }));\n};\nconst BlockedUsersSearchResults = ({ blockedUsersSearchFn: blockedUsersSearchFnFromProps, debounceSearchInterval = DEFAULT_DEBOUNCE_SEARCH_INTERVAL, searchQuery, }) => {\n    const { useCallBlockedUserIds } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const blockedUsers = useCallBlockedUserIds();\n    const blockedUsersSearchFn = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((queryString) => {\n        const queryRegExp = new RegExp(queryString, 'i');\n        return Promise.resolve(blockedUsers.filter((blockedUser) => {\n            return blockedUser.match(queryRegExp);\n        }));\n    }, [blockedUsers]);\n    const { searchQueryInProgress, searchResults } = useSearch({\n        searchFn: blockedUsersSearchFnFromProps ?? blockedUsersSearchFn,\n        debounceInterval: debounceSearchInterval,\n        searchQuery,\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchResults, { EmptySearchResultComponent: EmptyParticipantSearchList, LoadingIndicator: LoadingIndicator, searchQueryInProgress: searchQueryInProgress, searchResults: searchQuery ? searchResults : blockedUsers, SearchResultList: BlockedUserListing }));\n};\nconst ToggleButton$1 = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleButton(props, ref) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { enabled: props.menuShown, icon: \"filter\", ref: ref });\n});\n\nconst CallPreview = (props) => {\n    const { className, style } = props;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useCallThumbnail } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const thumbnail = useCallThumbnail();\n    const [imageRef, setImageRef] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!imageRef || !call)\n            return;\n        const cleanup = call.bindCallThumbnailElement(imageRef);\n        return () => cleanup();\n    }, [imageRef, call]);\n    if (!thumbnail)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-preview', className), style: style, alt: \"Call Preview Thumbnail\", ref: setImageRef }));\n};\n\nconst CallRecordingListHeader = ({ callRecordings, onRefresh, }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list__title\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { children: t('Call Recordings') }), callRecordings.length ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { children: [\"(\", callRecordings.length, \")\"] }) : null] }), onRefresh && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { icon: \"refresh\", title: t('Refresh'), onClick: onRefresh }))] }));\n};\n\nconst dateFormat = (date) => {\n    const format = new Date(date);\n    return format.toTimeString().split(' ')[0];\n};\nconst CallRecordingListItem = ({ recording, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"li\", { className: \"str-video__call-recording-list__item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__filename\", children: recording.filename }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__time\", children: dateFormat(recording.start_time) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__time\", children: dateFormat(recording.end_time) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__download\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"a\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-recording-list-item__action-button', 'str-video__call-recording-list-item__action-button--download'), role: \"button\", href: recording.url, download: recording.filename, title: \"Download the recording\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"download\" }) }) })] }));\n};\n\nconst EmptyCallRecordingListing = () => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list__listing str-video__call-recording-list__listing--empty\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__listing--icon-empty\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__call-recording-list__listing--text-empty\", children: \"No recordings available\" })] }));\n};\n\nconst LoadingCallRecordingListing = ({ callRecordings, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [callRecordings.map((recording) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallRecordingListItem, { recording: recording }, recording.filename))), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, { text: \"Recording getting ready\" })] }));\n};\n\nconst CallRecordingList = ({ callRecordings, CallRecordingListHeader: CallRecordingListHeader$1 = CallRecordingListHeader, CallRecordingListItem: CallRecordingListItem$1 = CallRecordingListItem, EmptyCallRecordingList = EmptyCallRecordingListing, loading, LoadingCallRecordingList = LoadingCallRecordingListing, onRefresh, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallRecordingListHeader$1, { callRecordings: callRecordings, onRefresh: onRefresh }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__listing\", children: loading ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingCallRecordingList, { callRecordings: callRecordings })) : callRecordings.length ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"ul\", { className: \"str-video__call-recording-list__list\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"li\", { className: \"str-video__call-recording-list__item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__filename\", children: \"Name\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__time\", children: \"Start time\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__time\", children: \"End time\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__download\" })] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"ul\", { className: \"str-video__call-recording-list__list\", children: callRecordings.map((recording) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallRecordingListItem$1, { recording: recording }, recording.filename))) })] })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EmptyCallRecordingList, {})) })] }));\n};\n\nconst RingingCallControls = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useCallCallingState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const callCallingState = useCallCallingState();\n    if (!call)\n        return null;\n    const buttonsDisabled = callCallingState !== _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RINGING;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__pending-call-controls\", children: call.isCreatedByMe ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CancelCallButton, { disabled: buttonsDisabled })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AcceptCallButton, { disabled: buttonsDisabled }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CancelCallButton, { onClick: () => call.leave({ reject: true }), disabled: buttonsDisabled })] })) }));\n};\n\nconst CALLING_STATE_TO_LABEL = {\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.JOINING]: 'Joining',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RINGING]: 'Ringing',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.MIGRATING]: 'Migrating',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RECONNECTING]: 'Re-connecting',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RECONNECTING_FAILED]: 'Failed',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.OFFLINE]: 'No internet connection',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.IDLE]: '',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.UNKNOWN]: '',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.JOINED]: 'Joined',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.LEFT]: 'Left call',\n};\nconst RingingCall = (props) => {\n    const { includeSelf = false, totalMembersToShow = 3 } = props;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { useCallCallingState, useCallMembers } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const callingState = useCallCallingState();\n    const members = useCallMembers();\n    const connectedUser = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useConnectedUser)();\n    if (!call)\n        return null;\n    // take the first N members to show their avatars\n    const membersToShow = (members || [])\n        .slice(0, totalMembersToShow)\n        .map(({ user }) => user)\n        .filter((user) => user.id !== connectedUser?.id || includeSelf);\n    if (includeSelf &&\n        !membersToShow.find((user) => user.id === connectedUser?.id)) {\n        // if the current user is not in the initial batch of members,\n        // replace the first item in membersToShow array with the current user\n        const self = members.find(({ user }) => user.id === connectedUser?.id);\n        if (self) {\n            membersToShow.splice(0, 1, self.user);\n        }\n    }\n    const callingStateLabel = CALLING_STATE_TO_LABEL[callingState];\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-panel str-video__call-panel--ringing\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-panel__members-list\", children: membersToShow.map((user) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-panel__member-box\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Avatar, { name: user.name, imageSrc: user.image }), user.name && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__member_details\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__member_name\", children: user.name }) }))] }, user.id))) }), callingStateLabel && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-panel__calling-state-label\", children: t(callingStateLabel) })), [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RINGING, _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.JOINING].includes(callingState) && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RingingCallControls, {}))] }));\n};\n\nconst byNameOrId = (a, b) => {\n    if (a.name && b.name && a.name < b.name)\n        return -1;\n    if (a.name && b.name && a.name > b.name)\n        return 1;\n    if (a.id < b.id)\n        return -1;\n    if (a.id > b.id)\n        return 1;\n    return 0;\n};\nconst PermissionRequests = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useLocalParticipant, useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const localParticipant = useLocalParticipant();\n    const [expanded, setExpanded] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const [permissionRequests, setPermissionRequests] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]);\n    const canUpdateCallPermissions = useHasPermissions(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.UPDATE_CALL_PERMISSIONS);\n    const localUserId = localParticipant?.userId;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !canUpdateCallPermissions)\n            return;\n        return call.on('call.permission_request', (event) => {\n            if (event.user.id !== localUserId) {\n                setPermissionRequests((requests) => [...requests, event].sort((a, b) => byNameOrId(a.user, b.user)));\n            }\n        });\n    }, [call, canUpdateCallPermissions, localUserId]);\n    const handleUpdatePermission = (request, type) => {\n        return async () => {\n            const { user, permissions } = request;\n            switch (type) {\n                case 'grant':\n                    await call?.grantPermissions(user.id, permissions);\n                    break;\n                case 'revoke':\n                    await call?.revokePermissions(user.id, permissions);\n                    break;\n            }\n            setPermissionRequests((requests) => requests.filter((r) => r !== request));\n        };\n    };\n    const { refs, x, y, strategy } = useFloatingUIPreset({\n        placement: 'bottom',\n        strategy: 'absolute',\n    });\n    // don't render anything if there are no permission requests\n    if (permissionRequests.length === 0)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__permission-requests\", ref: refs.setReference, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__permission-requests__notification\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: \"str-video__permission-requests__notification__message\", children: [permissionRequests.length, \" pending permission requests\"] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { type: \"button\", onClick: () => {\n                            setExpanded((e) => !e);\n                        }, children: expanded ? 'Hide requests' : 'Show requests' })] }), expanded && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionRequestList, { ref: refs.setFloating, style: {\n                    position: strategy,\n                    top: y ?? 0,\n                    left: x ?? 0,\n                    overflowY: 'auto',\n                }, permissionRequests: permissionRequests, handleUpdatePermission: handleUpdatePermission }))] }));\n};\nconst PermissionRequestList = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function PermissionRequestList(props, ref) {\n    const { permissionRequests, handleUpdatePermission, ...rest } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__permission-requests-list\", ref: ref, ...rest, children: permissionRequests.map((request, reqIndex) => {\n            const { user, permissions } = request;\n            return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: permissions.map((permission) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__permission-request\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__permission-request__message\", children: messageForPermission(user.name || user.id, permission, t) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { className: \"str-video__permission-request__button--allow\", type: \"button\", onClick: handleUpdatePermission(request, 'grant'), children: t('Allow') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { className: \"str-video__permission-request__button--reject\", type: \"button\", onClick: handleUpdatePermission(request, 'revoke'), children: t('Revoke') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { className: \"str-video__permission-request__button--reject\", type: \"button\", onClick: handleUpdatePermission(request, 'dismiss'), children: t('Dismiss') })] }, permission))) }, `${user.id}/${reqIndex}`));\n        }) }));\n});\nconst Button = (props) => {\n    const { className, ...rest } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__permission-request__button', className), ...rest }));\n};\nconst messageForPermission = (userName, permission, t) => {\n    switch (permission) {\n        case _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO:\n            return t('{{ userName }} is requesting to speak', { userName });\n        case _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO:\n            return t('{{ userName }} is requesting to share their camera', {\n                userName,\n            });\n        case _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE:\n            return t('{{ userName }} is requesting to present their screen', {\n                userName,\n            });\n        default:\n            return t('{{ userName }} is requesting permission: {{ permission }}', {\n                userName,\n                permission,\n            });\n    }\n};\n\nconst StreamTheme = ({ as: Component = 'div', className, children, ...props }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Component, { ...props, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video', className), children: children }));\n};\n\nconst DefaultVideoPlaceholder = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function DefaultVideoPlaceholder({ participant, style }, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const name = participant.name || participant.userId;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__video-placeholder\", style: style, ref: ref, children: [(!participant.image || error) &&\n                (name ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(InitialsFallback, { name: name })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__video-placeholder__no-video-label\", children: t('Video is disabled') }))), participant.image && !error && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { onError: () => setError(true), alt: \"video-placeholder\", className: \"str-video__video-placeholder__avatar\", src: participant.image }))] }));\n});\nconst InitialsFallback = (props) => {\n    const { name } = props;\n    const initials = name\n        .split(' ')\n        .slice(0, 2)\n        .map((n) => n[0])\n        .join('');\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__video-placeholder__initials-fallback\", children: initials }));\n};\n\nconst Video$1 = ({ trackType, participant, className, VideoPlaceholder = DefaultVideoPlaceholder, refs, ...rest }) => {\n    const { sessionId, videoStream, screenShareStream, publishedTracks, viewportVisibilityState, isLocalParticipant, userId, } = participant;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const [videoElement, setVideoElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    // start with true, will flip once the video starts playing\n    const [isVideoPaused, setIsVideoPaused] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    const [isWideMode, setIsWideMode] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    const stream = trackType === 'videoTrack'\n        ? videoStream\n        : trackType === 'screenShareTrack'\n            ? screenShareStream\n            : undefined;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(() => {\n        if (!call || !videoElement || trackType === 'none')\n            return;\n        const cleanup = call.bindVideoElement(videoElement, sessionId, trackType);\n        return () => {\n            cleanup?.();\n        };\n    }, [call, trackType, sessionId, videoElement]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!stream || !videoElement)\n            return;\n        const [track] = stream.getVideoTracks();\n        if (!track)\n            return;\n        const handlePlayPause = () => {\n            setIsVideoPaused(videoElement.paused);\n            const { width = 0, height = 0 } = track.getSettings();\n            setIsWideMode(width >= height);\n        };\n        // playback may have started before we had a chance to\n        // attach the 'play/pause' event listener, so we set the state\n        // here to make sure it's in sync\n        setIsVideoPaused(videoElement.paused);\n        videoElement.addEventListener('play', handlePlayPause);\n        videoElement.addEventListener('pause', handlePlayPause);\n        track.addEventListener('unmute', handlePlayPause);\n        return () => {\n            videoElement.removeEventListener('play', handlePlayPause);\n            videoElement.removeEventListener('pause', handlePlayPause);\n            track.removeEventListener('unmute', handlePlayPause);\n            // reset the 'pause' state once we unmount the video element\n            setIsVideoPaused(true);\n        };\n    }, [stream, videoElement]);\n    if (!call)\n        return null;\n    const isPublishingTrack = trackType === 'videoTrack'\n        ? publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.VIDEO)\n        : trackType === 'screenShareTrack'\n            ? publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.SCREEN_SHARE)\n            : false;\n    const isInvisible = trackType === 'none' ||\n        viewportVisibilityState?.[trackType] === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VisibilityState.INVISIBLE;\n    const hasNoVideoOrInvisible = !isPublishingTrack || isInvisible;\n    const mirrorVideo = isLocalParticipant && trackType === 'videoTrack';\n    const isScreenShareTrack = trackType === 'screenShareTrack';\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [!hasNoVideoOrInvisible && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"video\", { ...rest, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__video', className, {\n                    'str-video__video--not-playing': isVideoPaused,\n                    'str-video__video--tall': !isWideMode,\n                    'str-video__video--mirror': mirrorVideo,\n                    'str-video__video--screen-share': isScreenShareTrack,\n                }), \"data-user-id\": userId, \"data-session-id\": sessionId, ref: (element) => {\n                    setVideoElement(element);\n                    refs?.setVideoElement?.(element);\n                } })), (hasNoVideoOrInvisible || isVideoPaused) && VideoPlaceholder && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(VideoPlaceholder, { style: { position: 'absolute' }, participant: participant, ref: refs?.setVideoPlaceholderElement }))] }));\n};\n\n/**\n * @description Extends video element with `stream` property\n * (`srcObject`) to reactively handle stream changes\n */\nconst BaseVideo = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function BaseVideo({ stream, ...rest }, ref) {\n    const [videoElement, setVideoElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!videoElement || !stream)\n            return;\n        if (stream === videoElement.srcObject)\n            return;\n        videoElement.srcObject = stream;\n        if (_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Browsers.isSafari() || _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Browsers.isFirefox()) {\n            // Firefox and Safari have some timing issue\n            setTimeout(() => {\n                videoElement.srcObject = stream;\n                videoElement.play().catch((e) => {\n                    console.error(`Failed to play stream`, e);\n                });\n            }, 0);\n        }\n        return () => {\n            videoElement.pause();\n            videoElement.srcObject = null;\n        };\n    }, [stream, videoElement]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"video\", { autoPlay: true, playsInline: true, ...rest, ref: (element) => {\n            applyElementToRef(ref, element);\n            setVideoElement(element);\n        } }));\n});\n\nconst DefaultDisabledVideoPreview = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str_video__video-preview__disabled-video-preview\", children: t('Video is disabled') }));\n};\nconst DefaultNoCameraPreview = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str_video__video-preview__no-camera-preview\", children: t('No camera found') }));\n};\nconst VideoPreview = ({ className, mirror = true, DisabledVideoPreview = DefaultDisabledVideoPreview, NoCameraPreview = DefaultNoCameraPreview, StartingCameraPreview = LoadingIndicator, }) => {\n    const { useCameraState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { devices, status, isMute, mediaStream } = useCameraState();\n    let contents;\n    if (isMute && devices?.length === 0) {\n        contents = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(NoCameraPreview, {});\n    }\n    else if (status === 'enabled') {\n        const loading = !mediaStream;\n        contents = ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [mediaStream && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BaseVideo, { stream: mediaStream, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__video-preview', {\n                        'str-video__video-preview--mirror': mirror,\n                        'str-video__video-preview--loading': loading,\n                    }) })), loading && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StartingCameraPreview, {})] }));\n    }\n    else {\n        contents = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DisabledVideoPreview, {});\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__video-preview-container', className), children: contents }));\n};\n\nconst ParticipantActionsContextMenu = () => {\n    const { participant, participantViewElement, videoElement } = useParticipantViewContext();\n    const [fullscreenModeOn, setFullscreenModeOn] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(!!document.fullscreenElement);\n    const [pictureInPictureElement, setPictureInPictureElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(document.pictureInPictureElement);\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { pin, publishedTracks, sessionId, userId } = participant;\n    const hasAudio = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.AUDIO);\n    const hasVideo = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.VIDEO);\n    const hasScreenShare = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.SCREEN_SHARE);\n    const hasScreenShareAudio = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.SCREEN_SHARE_AUDIO);\n    const blockUser = () => call?.blockUser(userId);\n    const muteAudio = () => call?.muteUser(userId, 'audio');\n    const muteVideo = () => call?.muteUser(userId, 'video');\n    const muteScreenShare = () => call?.muteUser(userId, 'screenshare');\n    const muteScreenShareAudio = () => call?.muteUser(userId, 'screenshare_audio');\n    const grantPermission = (permission) => () => {\n        call?.updateUserPermissions({\n            user_id: userId,\n            grant_permissions: [permission],\n        });\n    };\n    const revokePermission = (permission) => () => {\n        call?.updateUserPermissions({\n            user_id: userId,\n            revoke_permissions: [permission],\n        });\n    };\n    const toggleParticipantPin = () => {\n        if (pin) {\n            call?.unpin(sessionId);\n        }\n        else {\n            call?.pin(sessionId);\n        }\n    };\n    const pinForEveryone = () => {\n        call\n            ?.pinForEveryone({\n            user_id: userId,\n            session_id: sessionId,\n        })\n            .catch((err) => {\n            console.error(`Failed to pin participant ${userId}`, err);\n        });\n    };\n    const unpinForEveryone = () => {\n        call\n            ?.unpinForEveryone({\n            user_id: userId,\n            session_id: sessionId,\n        })\n            .catch((err) => {\n            console.error(`Failed to unpin participant ${userId}`, err);\n        });\n    };\n    const toggleFullscreenMode = () => {\n        if (!fullscreenModeOn) {\n            return participantViewElement?.requestFullscreen().catch(console.error);\n        }\n        return document.exitFullscreen().catch(console.error);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        // handles the case when fullscreen mode is toggled externally,\n        // e.g., by pressing ESC key or some other keyboard shortcut\n        const handleFullscreenChange = () => {\n            setFullscreenModeOn(!!document.fullscreenElement);\n        };\n        document.addEventListener('fullscreenchange', handleFullscreenChange);\n        return () => {\n            document.removeEventListener('fullscreenchange', handleFullscreenChange);\n        };\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!videoElement)\n            return;\n        const handlePiP = () => {\n            setPictureInPictureElement(document.pictureInPictureElement);\n        };\n        videoElement.addEventListener('enterpictureinpicture', handlePiP);\n        videoElement.addEventListener('leavepictureinpicture', handlePiP);\n        return () => {\n            videoElement.removeEventListener('enterpictureinpicture', handlePiP);\n            videoElement.removeEventListener('leavepictureinpicture', handlePiP);\n        };\n    }, [videoElement]);\n    const togglePictureInPicture = () => {\n        if (videoElement && pictureInPictureElement !== videoElement) {\n            return videoElement\n                .requestPictureInPicture()\n                .catch(console.error);\n        }\n        return document.exitPictureInPicture().catch(console.error);\n    };\n    const { close } = useMenuContext() || {};\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenu, { onItemClick: close, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: toggleParticipantPin, disabled: pin && !pin.isLocalPin, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"pin\" }), pin ? t('Unpin') : t('Pin')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.PIN_FOR_EVERYONE], children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: pinForEveryone, disabled: pin && !pin.isLocalPin, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"pin\" }), t('Pin for everyone')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: unpinForEveryone, disabled: !pin || pin.isLocalPin, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"pin\" }), t('Unpin for everyone')] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.BLOCK_USERS], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: blockUser, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"not-allowed\" }), t('Block')] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.MUTE_USERS], children: [hasVideo && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteVideo, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"camera-off-outline\" }), t('Turn off video')] })), hasScreenShare && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteScreenShare, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"screen-share-off\" }), t('Turn off screen share')] })), hasAudio && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteAudio, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"no-audio\" }), t('Mute audio')] })), hasScreenShareAudio && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteScreenShareAudio, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"no-audio\" }), t('Mute screen share audio')] }))] }), participantViewElement && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: toggleFullscreenMode, children: t('{{ direction }} fullscreen', {\n                    direction: fullscreenModeOn ? t('Leave') : t('Enter'),\n                }) })), videoElement && document.pictureInPictureEnabled && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: togglePictureInPicture, children: t('{{ direction }} picture-in-picture', {\n                    direction: pictureInPictureElement === videoElement\n                        ? t('Leave')\n                        : t('Enter'),\n                }) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.UPDATE_CALL_PERMISSIONS], children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: grantPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO), children: t('Allow audio') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: grantPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO), children: t('Allow video') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: grantPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE), children: t('Allow screen sharing') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: revokePermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO), children: t('Disable audio') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: revokePermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO), children: t('Disable video') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: revokePermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE), children: t('Disable screen sharing') })] })] }));\n};\n\nconst useTrackElementVisibility = ({ trackedElement, dynascaleManager: propsDynascaleManager, sessionId, trackType, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const manager = propsDynascaleManager ?? call?.dynascaleManager;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!trackedElement || !manager || !call || trackType === 'none')\n            return;\n        const unobserve = manager.trackElementVisibility(trackedElement, sessionId, trackType);\n        return () => {\n            unobserve();\n        };\n    }, [trackedElement, manager, call, sessionId, trackType]);\n};\n\nconst ToggleButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleButton(props, ref) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { enabled: props.menuShown, icon: \"ellipsis\", ref: ref });\n});\nconst DefaultScreenShareOverlay = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const stopScreenShare = () => {\n        call?.screenShare.disable();\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__screen-share-overlay\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"screen-share-off\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__screen-share-overlay__title\", children: t('You are presenting your screen') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"button\", { onClick: stopScreenShare, className: \"str-video__screen-share-overlay__button\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"close\" }), \" \", t('Stop Screen Sharing')] })] }));\n};\nconst DefaultParticipantViewUI = ({ indicatorsVisible = true, menuPlacement = 'bottom-start', showMenuButton = true, ParticipantActionsContextMenu: ParticipantActionsContextMenu$1 = ParticipantActionsContextMenu, }) => {\n    const { participant, trackType } = useParticipantViewContext();\n    const { publishedTracks } = participant;\n    const hasScreenShare = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.SCREEN_SHARE);\n    if (participant.isLocalParticipant &&\n        hasScreenShare &&\n        trackType === 'screenShareTrack') {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultScreenShareOverlay, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantDetails, { indicatorsVisible: indicatorsVisible })] }));\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [showMenuButton && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { strategy: \"fixed\", placement: menuPlacement, ToggleButton: ToggleButton, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantActionsContextMenu$1, {}) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Reaction, { participant: participant }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantDetails, { indicatorsVisible: indicatorsVisible })] }));\n};\nconst ParticipantDetails = ({ indicatorsVisible = true, }) => {\n    const { participant } = useParticipantViewContext();\n    const { isLocalParticipant, connectionQuality, publishedTracks, pin, sessionId, name, userId, } = participant;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const connectionQualityAsString = !!connectionQuality &&\n        _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.ConnectionQuality[connectionQuality].toLowerCase();\n    const hasAudio = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.AUDIO);\n    const hasVideo = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.VIDEO);\n    const canUnpin = !!pin && pin.isLocalPin;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-details\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: \"str-video__participant-details__name\", children: [name || userId, indicatorsVisible && !hasAudio && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__participant-details__name--audio-muted\" })), indicatorsVisible && !hasVideo && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__participant-details__name--video-muted\" })), indicatorsVisible && canUnpin && (\n                        // TODO: remove this monstrosity once we have a proper design\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { title: t('Unpin'), onClick: () => call?.unpin(sessionId), className: \"str-video__participant-details__name--pinned\" })), indicatorsVisible && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SpeechIndicator, {})] }) }), indicatorsVisible && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { isVisible: isLocalParticipant &&\n                    connectionQuality === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.ConnectionQuality.POOR, message: t('Poor connection quality'), children: connectionQualityAsString && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-details__connection-quality', `str-video__participant-details__connection-quality--${connectionQualityAsString}`), title: connectionQualityAsString })) }))] }));\n};\nconst SpeechIndicator = () => {\n    const { participant } = useParticipantViewContext();\n    const { isSpeaking, isDominantSpeaker } = participant;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__speech-indicator', isSpeaking && 'str-video__speech-indicator--speaking', isDominantSpeaker && 'str-video__speech-indicator--dominant'), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__speech-indicator__bar\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__speech-indicator__bar\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__speech-indicator__bar\" })] }));\n};\n\nconst ParticipantView = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ParticipantView({ participant, trackType = 'videoTrack', muteAudio, refs: { setVideoElement, setVideoPlaceholderElement } = {}, className, VideoPlaceholder, ParticipantViewUI = DefaultParticipantViewUI, }, ref) {\n    const { isLocalParticipant, isSpeaking, isDominantSpeaker, publishedTracks, sessionId, } = participant;\n    const hasAudio = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.AUDIO);\n    const hasVideo = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.VIDEO);\n    const hasScreenShareAudio = publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.SCREEN_SHARE_AUDIO);\n    const [trackedElement, setTrackedElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [contextVideoElement, setContextVideoElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [contextVideoPlaceholderElement, setContextVideoPlaceholderElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    // TODO: allow to pass custom ViewportTracker instance from props\n    useTrackElementVisibility({\n        sessionId,\n        trackedElement,\n        trackType,\n    });\n    const participantViewContextValue = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n        participant,\n        participantViewElement: trackedElement,\n        videoElement: contextVideoElement,\n        videoPlaceholderElement: contextVideoPlaceholderElement,\n        trackType,\n    }), [\n        contextVideoElement,\n        contextVideoPlaceholderElement,\n        participant,\n        trackedElement,\n        trackType,\n    ]);\n    const videoRefs = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n        setVideoElement: (element) => {\n            setVideoElement?.(element);\n            setContextVideoElement(element);\n        },\n        setVideoPlaceholderElement: (element) => {\n            setVideoPlaceholderElement?.(element);\n            setContextVideoPlaceholderElement(element);\n        },\n    }), [setVideoElement, setVideoPlaceholderElement]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { \"data-testid\": \"participant-view\", ref: (element) => {\n            applyElementToRef(ref, element);\n            setTrackedElement(element);\n        }, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-view', isDominantSpeaker && 'str-video__participant-view--dominant-speaker', isSpeaking && 'str-video__participant-view--speaking', !hasVideo && 'str-video__participant-view--no-video', !hasAudio && 'str-video__participant-view--no-audio', className), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(ParticipantViewContext.Provider, { value: participantViewContextValue, children: [!isLocalParticipant && !muteAudio && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [hasAudio && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { participant: participant, trackType: \"audioTrack\" })), hasScreenShareAudio && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { participant: participant, trackType: \"screenShareAudioTrack\" }))] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Video$1, { VideoPlaceholder: VideoPlaceholder, participant: participant, trackType: trackType, refs: videoRefs, autoPlay: true }), isComponentType(ParticipantViewUI) ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantViewUI, {})) : (ParticipantViewUI)] }) }));\n});\n\n// re-exporting the StreamCallProvider as StreamCall\nconst StreamCall = _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamCallProvider;\n\nvar Joining = \"Joining\";\nvar Mic = \"Mic\";\nvar Ringing = \"Ringing\";\nvar Speakers = \"Speakers\";\nvar Video = \"Video\";\nvar Live = \"Live\";\nvar Reactions = \"Reactions\";\nvar Statistics = \"Statistics\";\nvar Invite = \"Invite\";\nvar Join = \"Join\";\nvar You = \"You\";\nvar Me = \"Me\";\nvar Unknown = \"Unknown\";\nvar Refresh = \"Refresh\";\nvar Allow = \"Allow\";\nvar Revoke = \"Revoke\";\nvar Dismiss = \"Dismiss\";\nvar Pinned = \"Pinned\";\nvar Unpin = \"Unpin\";\nvar Pin = \"Pin\";\nvar Block = \"Block\";\nvar Enter = \"Enter\";\nvar Leave = \"Leave\";\nvar Participants = \"Participants\";\nvar Anonymous = \", and ({{ count }}) anonymous\";\nvar en = {\n\tJoining: Joining,\n\tMic: Mic,\n\t\"No internet connection\": \"No internet connection\",\n\t\"Re-connecting\": \"Re-connecting\",\n\tRinging: Ringing,\n\t\"Screen Share\": \"Screen Share\",\n\t\"Select a Camera\": \"Select a Camera\",\n\t\"Select a Mic\": \"Select a Mic\",\n\t\"Select Speakers\": \"Select Speakers\",\n\tSpeakers: Speakers,\n\tVideo: Video,\n\t\"You are muted. Unmute to speak.\": \"You are muted. Unmute to speak.\",\n\tLive: Live,\n\t\"You can now speak.\": \"You can now speak.\",\n\t\"Awaiting for an approval to speak.\": \"Awaiting for an approval to speak.\",\n\t\"You can no longer speak.\": \"You can no longer speak.\",\n\t\"You can now share your video.\": \"You can now share your video.\",\n\t\"Awaiting for an approval to share your video.\": \"Awaiting for an approval to share your video.\",\n\t\"You can no longer share your video.\": \"You can no longer share your video.\",\n\t\"Waiting for recording to stop...\": \"Waiting for recording to stop...\",\n\t\"Waiting for recording to start...\": \"Waiting for recording to start...\",\n\t\"Record call\": \"Record call\",\n\tReactions: Reactions,\n\tStatistics: Statistics,\n\t\"You can now share your screen.\": \"You can now share your screen.\",\n\t\"Awaiting for an approval to share screen.\": \"Awaiting for an approval to share screen.\",\n\t\"You can no longer share your screen.\": \"You can no longer share your screen.\",\n\t\"Share screen\": \"Share screen\",\n\t\"Incoming Call...\": \"Incoming Call...\",\n\t\"Calling...\": \"Calling...\",\n\t\"Mute All\": \"Mute All\",\n\tInvite: Invite,\n\tJoin: Join,\n\tYou: You,\n\tMe: Me,\n\tUnknown: Unknown,\n\t\"Toggle device menu\": \"Toggle device menu\",\n\t\"Call Recordings\": \"Call Recordings\",\n\tRefresh: Refresh,\n\t\"Check your browser video permissions\": \"Check your browser video permissions\",\n\t\"Video publishing is disabled by the system\": \"Video publishing is disabled by the system\",\n\t\"You have no permission to share your video\": \"You have no permission to share your video\",\n\t\"You have no permission to share your audio\": \"You have no permission to share your audio\",\n\t\"You are presenting your screen\": \"You are presenting your screen\",\n\t\"Stop Screen Sharing\": \"Stop Screen Sharing\",\n\tAllow: Allow,\n\tRevoke: Revoke,\n\tDismiss: Dismiss,\n\t\"Microphone on\": \"Microphone on\",\n\t\"Microphone off\": \"Microphone off\",\n\t\"Camera on\": \"Camera on\",\n\t\"Camera off\": \"Camera off\",\n\t\"No camera found\": \"No camera found\",\n\t\"Video is disabled\": \"Video is disabled\",\n\tPinned: Pinned,\n\tUnpin: Unpin,\n\tPin: Pin,\n\t\"Pin for everyone\": \"Pin for everyone\",\n\t\"Unpin for everyone\": \"Unpin for everyone\",\n\tBlock: Block,\n\t\"Turn off video\": \"Turn off video\",\n\t\"Turn off screen share\": \"Turn off screen share\",\n\t\"Mute audio\": \"Mute audio\",\n\t\"Mute screen share audio\": \"Mute screen share audio\",\n\t\"Allow audio\": \"Allow audio\",\n\t\"Allow video\": \"Allow video\",\n\t\"Allow screen sharing\": \"Allow screen sharing\",\n\t\"Disable audio\": \"Disable audio\",\n\t\"Disable video\": \"Disable video\",\n\t\"Disable screen sharing\": \"Disable screen sharing\",\n\tEnter: Enter,\n\tLeave: Leave,\n\t\"Leave call\": \"Leave call\",\n\t\"End call for all\": \"End call for all\",\n\t\"{{ direction }} fullscreen\": \"{{ direction }} fullscreen\",\n\t\"{{ direction }} picture-in-picture\": \"{{ direction }} picture-in-picture\",\n\t\"Dominant Speaker\": \"Dominant Speaker\",\n\t\"Poor connection quality\": \"Poor connection quality. Please check your internet connection.\",\n\tParticipants: Participants,\n\tAnonymous: Anonymous,\n\t\"No participants found\": \"No participants found\",\n\t\"Participants ({{ numberOfParticipants }})\": \"Participants ({{ numberOfParticipants }})\",\n\t\"{{ userName }} is sharing their screen\": \"{{ userName }} is sharing their screen\",\n\t\"{{ userName }} is requesting to speak\": \"{{ userName }} is requesting to speak\",\n\t\"{{ userName }} is requesting to share their camera\": \"{{ userName }} is requesting to share their camera\",\n\t\"{{ userName }} is requesting to present their screen\": \"{{ userName }} is requesting to present their screen\",\n\t\"{{ userName }} is requesting permission: {{ permission }}\": \"{{ userName }} is requesting permission: {{ permission }}\"\n};\n\nconst translations = { en };\n\nconst StreamVideo = (props) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamVideoProvider, { translationsOverrides: translations, ...props }));\n};\n\nconst usePaginatedLayoutSortPreset = (call) => {\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call)\n            return;\n        call.setSortParticipantsBy(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.paginatedLayoutSortPreset);\n        return () => {\n            resetSortPreset(call);\n        };\n    }, [call]);\n};\nconst useSpeakerLayoutSortPreset = (call, isOneOnOneCall) => {\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call)\n            return;\n        // always show the remote participant in the spotlight\n        if (isOneOnOneCall) {\n            call.setSortParticipantsBy((0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.combineComparators)(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.screenSharing, loggedIn));\n        }\n        else {\n            call.setSortParticipantsBy(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.speakerLayoutSortPreset);\n        }\n        return () => {\n            resetSortPreset(call);\n        };\n    }, [call, isOneOnOneCall]);\n};\nconst resetSortPreset = (call) => {\n    // reset the sorting to the default for the call type\n    const callConfig = _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallTypes.get(call.type);\n    call.setSortParticipantsBy(callConfig.options.sortParticipantsBy || _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.defaultSortPreset);\n};\nconst loggedIn = (a, b) => {\n    if (a.isLocalParticipant)\n        return 1;\n    if (b.isLocalParticipant)\n        return -1;\n    return 0;\n};\n\nconst LivestreamLayout = (props) => {\n    const { useParticipants, useRemoteParticipants, useHasOngoingScreenShare } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const [currentSpeaker, ...otherParticipants] = useParticipants();\n    const remoteParticipants = useRemoteParticipants();\n    const hasOngoingScreenShare = useHasOngoingScreenShare();\n    const presenter = hasOngoingScreenShare\n        ? hasScreenShare$1(currentSpeaker) && currentSpeaker\n        : otherParticipants.find(hasScreenShare$1);\n    usePaginatedLayoutSortPreset(call);\n    const Overlay = ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantOverlay, { showParticipantCount: props.showParticipantCount, showDuration: props.showDuration, showLiveBadge: props.showLiveBadge, showSpeakerName: props.showSpeakerName }));\n    const { floatingParticipantProps } = props;\n    const FloatingParticipantOverlay = hasOngoingScreenShare && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantOverlay\n    // these elements aren't needed for the video feed\n    , { \n        // these elements aren't needed for the video feed\n        showParticipantCount: floatingParticipantProps?.showParticipantCount ?? false, showDuration: floatingParticipantProps?.showDuration ?? false, showLiveBadge: floatingParticipantProps?.showLiveBadge ?? false, showSpeakerName: floatingParticipantProps?.showSpeakerName ?? true }));\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__livestream-layout__wrapper\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantsAudio, { participants: remoteParticipants }), hasOngoingScreenShare && presenter && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { className: \"str-video__livestream-layout__screen-share\", participant: presenter, ParticipantViewUI: Overlay, trackType: \"screenShareTrack\", muteAudio // audio is rendered by ParticipantsAudio\n                : true })), currentSpeaker && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(hasOngoingScreenShare &&\n                    (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__livestream-layout__floating-participant', `str-video__livestream-layout__floating-participant--${floatingParticipantProps?.position ?? 'top-right'}`)), participant: currentSpeaker, ParticipantViewUI: FloatingParticipantOverlay || Overlay, muteAudio // audio is rendered by ParticipantsAudio\n                : true }))] }));\n};\nconst hasScreenShare$1 = (p) => !!p?.publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.SCREEN_SHARE);\nconst ParticipantOverlay = (props) => {\n    const { enableFullScreen = true, showParticipantCount = true, showDuration = true, showLiveBadge = true, showSpeakerName = false, } = props;\n    const { participant } = useParticipantViewContext();\n    const { useParticipantCount } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participantCount = useParticipantCount();\n    const duration = useUpdateCallDuration();\n    const toggleFullScreen = useToggleFullScreen();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__livestream-layout__overlay\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__livestream-layout__overlay__bar\", children: [showLiveBadge && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__live-badge\", children: t('Live') })), showParticipantCount && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__viewers-count\", children: participantCount })), showSpeakerName && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__speaker-name\", title: participant.name || participant.userId || '', children: participant.name || participant.userId || '' })), showDuration && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__duration\", children: formatDuration(duration) })), enableFullScreen && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__go-fullscreen\", onClick: toggleFullScreen }))] }) }));\n};\nconst useUpdateCallDuration = () => {\n    const { useIsCallLive, useCallSession } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const isCallLive = useIsCallLive();\n    const session = useCallSession();\n    const [duration, setDuration] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(() => {\n        if (!session || !session.live_started_at)\n            return 0;\n        const liveStartTime = new Date(session.live_started_at);\n        const now = new Date();\n        return Math.floor((now.getTime() - liveStartTime.getTime()) / 1000);\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!isCallLive)\n            return;\n        const interval = setInterval(() => {\n            setDuration((d) => d + 1);\n        }, 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [isCallLive]);\n    return duration;\n};\nconst useToggleFullScreen = () => {\n    const { participantViewElement } = useParticipantViewContext();\n    const [isFullscreen, setIsFullscreen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {\n        if (isFullscreen) {\n            document.exitFullscreen().then(() => {\n                setIsFullscreen(false);\n            });\n        }\n        else {\n            participantViewElement?.requestFullscreen().then(() => {\n                setIsFullscreen(true);\n            });\n        }\n    }, [isFullscreen, participantViewElement]);\n};\nconst formatDuration = (durationInMs) => {\n    const days = Math.floor(durationInMs / 86400);\n    const hours = Math.floor(durationInMs / 3600);\n    const minutes = Math.floor((durationInMs % 3600) / 60);\n    const seconds = durationInMs % 60;\n    return `${days ? days + ' ' : ''}${hours ? hours + ':' : ''}${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n};\n\nconst GROUP_SIZE = 16;\nconst PaginatedGridLayoutGroup = ({ group, VideoPlaceholder, ParticipantViewUI, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__paginated-grid-layout__group', {\n            'str-video__paginated-grid-layout--one': group.length === 1,\n            'str-video__paginated-grid-layout--two-four': group.length >= 2 && group.length <= 4,\n            'str-video__paginated-grid-layout--five-nine': group.length >= 5 && group.length <= 9,\n        }), children: group.map((participant) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participant, muteAudio: true, VideoPlaceholder: VideoPlaceholder, ParticipantViewUI: ParticipantViewUI }, participant.sessionId))) }));\n};\nconst PaginatedGridLayout = ({ groupSize = GROUP_SIZE, excludeLocalParticipant = false, pageArrowsVisible = true, VideoPlaceholder, ParticipantViewUI = DefaultParticipantViewUI, }) => {\n    const [page, setPage] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(0);\n    const [paginatedGridLayoutWrapperElement, setPaginatedGridLayoutWrapperElement,] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useParticipants, useRemoteParticipants } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participants = useParticipants();\n    // used to render audio elements\n    const remoteParticipants = useRemoteParticipants();\n    usePaginatedLayoutSortPreset(call);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!paginatedGridLayoutWrapperElement || !call)\n            return;\n        const cleanup = call.setViewport(paginatedGridLayoutWrapperElement);\n        return () => cleanup();\n    }, [paginatedGridLayoutWrapperElement, call]);\n    // only used to render video elements\n    const participantGroups = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => chunk(excludeLocalParticipant ? remoteParticipants : participants, groupSize), [excludeLocalParticipant, remoteParticipants, participants, groupSize]);\n    const pageCount = participantGroups.length;\n    // update page when page count is reduced and selected page no longer exists\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (page > pageCount - 1) {\n            setPage(Math.max(0, pageCount - 1));\n        }\n    }, [page, pageCount]);\n    const selectedGroup = participantGroups[page];\n    if (!call)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__paginated-grid-layout__wrapper\", ref: setPaginatedGridLayoutWrapperElement, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantsAudio, { participants: remoteParticipants }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__paginated-grid-layout\", children: [pageArrowsVisible && pageCount > 1 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { icon: \"caret-left\", disabled: page === 0, onClick: () => setPage((currentPage) => Math.max(0, currentPage - 1)) })), selectedGroup && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PaginatedGridLayoutGroup, { group: participantGroups[page], VideoPlaceholder: VideoPlaceholder, ParticipantViewUI: ParticipantViewUI })), pageArrowsVisible && pageCount > 1 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { disabled: page === pageCount - 1, icon: \"caret-right\", onClick: () => setPage((currentPage) => Math.min(pageCount - 1, currentPage + 1)) }))] })] }));\n};\n\nconst useCalculateHardLimit = (\n/**\n * Element that stretches to 100% of the whole layout component\n */\nwrapperElement, \n/**\n * Element that directly hosts individual `ParticipantView` (or wrapper) elements\n */\nhostElement, limit) => {\n    const [calculatedLimit, setCalculatedLimit] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)({\n        vertical: typeof limit === 'number' ? limit : null,\n        horizontal: typeof limit === 'number' ? limit : null,\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!hostElement ||\n            !wrapperElement ||\n            typeof limit === 'number' ||\n            typeof limit === 'undefined')\n            return;\n        let childWidth = null;\n        let childHeight = null;\n        const resizeObserver = new ResizeObserver((entries, observer) => {\n            // this part should ideally run as little times as possible\n            // get child measurements and disconnect\n            // does not consider dynamically sized children\n            // this hook is for SpeakerLayout use only, where children in the bar are fixed size\n            if (entries.length > 1) {\n                const child = hostElement.firstChild;\n                if (child) {\n                    childHeight = child.clientHeight;\n                    childWidth = child.clientWidth;\n                    observer.unobserve(hostElement);\n                }\n            }\n            // keep the state at { vertical: 1, horizontal: 1 }\n            // until we get the proper child measurements\n            if (childHeight === null || childWidth === null)\n                return;\n            const vertical = Math.floor(wrapperElement.clientHeight / childHeight);\n            const horizontal = Math.floor(wrapperElement.clientWidth / childWidth);\n            setCalculatedLimit((pv) => {\n                if (pv.vertical !== vertical || pv.horizontal !== horizontal)\n                    return { vertical, horizontal };\n                return pv;\n            });\n        });\n        resizeObserver.observe(wrapperElement);\n        resizeObserver.observe(hostElement);\n        return () => {\n            resizeObserver.disconnect();\n        };\n    }, [hostElement, limit, wrapperElement]);\n    return calculatedLimit;\n};\n\nconst DefaultParticipantViewUIBar = () => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultParticipantViewUI, { menuPlacement: \"top-end\" }));\nconst DefaultParticipantViewUISpotlight = () => (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultParticipantViewUI, {});\nconst SpeakerLayout = ({ ParticipantViewUIBar = DefaultParticipantViewUIBar, ParticipantViewUISpotlight = DefaultParticipantViewUISpotlight, VideoPlaceholder, participantsBarPosition = 'bottom', participantsBarLimit, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useParticipants, useRemoteParticipants } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const [participantInSpotlight, ...otherParticipants] = useParticipants();\n    const remoteParticipants = useRemoteParticipants();\n    const [participantsBarWrapperElement, setParticipantsBarWrapperElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [participantsBarElement, setParticipantsBarElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [buttonsWrapperElement, setButtonsWrapperElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const isSpeakerScreenSharing = hasScreenShare(participantInSpotlight);\n    const hardLimit = useCalculateHardLimit(buttonsWrapperElement, participantsBarElement, participantsBarLimit);\n    const isVertical = participantsBarPosition === 'left' || participantsBarPosition === 'right';\n    const isHorizontal = participantsBarPosition === 'top' || participantsBarPosition === 'bottom';\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!participantsBarWrapperElement || !call)\n            return;\n        const cleanup = call.setViewport(participantsBarWrapperElement);\n        return () => cleanup();\n    }, [participantsBarWrapperElement, call]);\n    const isOneOnOneCall = otherParticipants.length === 1;\n    useSpeakerLayoutSortPreset(call, isOneOnOneCall);\n    let participantsWithAppliedLimit = otherParticipants;\n    const hardLimitToApply = isVertical\n        ? hardLimit.vertical\n        : hardLimit.horizontal;\n    if (typeof participantsBarLimit !== 'undefined' &&\n        hardLimitToApply !== null) {\n        participantsWithAppliedLimit = otherParticipants.slice(0, \n        // subtract 1 if speaker is sharing screen as\n        // that one is rendered independently from otherParticipants array\n        hardLimitToApply - (isSpeakerScreenSharing ? 1 : 0));\n    }\n    if (!call)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__speaker-layout__wrapper\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantsAudio, { participants: remoteParticipants }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__speaker-layout', participantsBarPosition &&\n                    `str-video__speaker-layout--variant-${participantsBarPosition}`), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__spotlight\", children: participantInSpotlight && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participantInSpotlight, muteAudio: true, trackType: isSpeakerScreenSharing ? 'screenShareTrack' : 'videoTrack', ParticipantViewUI: ParticipantViewUISpotlight, VideoPlaceholder: VideoPlaceholder })) }), participantsWithAppliedLimit.length > 0 && participantsBarPosition && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ref: setButtonsWrapperElement, className: \"str-video__speaker-layout__participants-bar-buttons-wrapper\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__participants-bar-wrapper\", ref: setParticipantsBarWrapperElement, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ref: setParticipantsBarElement, className: \"str-video__speaker-layout__participants-bar\", children: [isSpeakerScreenSharing && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__participant-tile\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participantInSpotlight, ParticipantViewUI: ParticipantViewUIBar, VideoPlaceholder: VideoPlaceholder, muteAudio: true }) }, participantInSpotlight.sessionId)), participantsWithAppliedLimit.map((participant) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__participant-tile\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participant, ParticipantViewUI: ParticipantViewUIBar, VideoPlaceholder: VideoPlaceholder, muteAudio: true }) }, participant.sessionId)))] }) }), isVertical && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(VerticalScrollButtons, { scrollWrapper: participantsBarWrapperElement })), isHorizontal && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(HorizontalScrollButtons, { scrollWrapper: participantsBarWrapperElement }))] }))] })] }));\n};\nconst HorizontalScrollButtons = ({ scrollWrapper, }) => {\n    const scrollPosition = useHorizontalScrollPosition(scrollWrapper);\n    const scrollStartClickHandler = () => {\n        scrollWrapper?.scrollBy({ left: -150, behavior: 'smooth' });\n    };\n    const scrollEndClickHandler = () => {\n        scrollWrapper?.scrollBy({ left: 150, behavior: 'smooth' });\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [scrollPosition && scrollPosition !== 'start' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollStartClickHandler, icon: \"caret-left\", className: \"str-video__speaker-layout__participants-bar--button-left\" })), scrollPosition && scrollPosition !== 'end' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollEndClickHandler, icon: \"caret-right\", className: \"str-video__speaker-layout__participants-bar--button-right\" }))] }));\n};\nconst VerticalScrollButtons = ({ scrollWrapper, }) => {\n    const scrollPosition = useVerticalScrollPosition(scrollWrapper);\n    const scrollTopClickHandler = () => {\n        scrollWrapper?.scrollBy({ top: -150, behavior: 'smooth' });\n    };\n    const scrollBottomClickHandler = () => {\n        scrollWrapper?.scrollBy({ top: 150, behavior: 'smooth' });\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [scrollPosition && scrollPosition !== 'top' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollTopClickHandler, icon: \"caret-up\", className: \"str-video__speaker-layout__participants-bar--button-top\" })), scrollPosition && scrollPosition !== 'bottom' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollBottomClickHandler, icon: \"caret-down\", className: \"str-video__speaker-layout__participants-bar--button-bottom\" }))] }));\n};\nconst hasScreenShare = (p) => !!p?.publishedTracks.includes(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.SCREEN_SHARE);\n\nconst [major, minor, patch] = (\"0.5.9\" ).split('.');\n(0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setSdkInfo)({\n    type: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.SdkType.REACT,\n    major,\n    minor,\n    patch,\n});\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-react-sdk/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-react-sdk/dist/css/styles.css":
/*!*********************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-sdk/dist/css/styles.css ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"2605c43b14ca\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0cmVhbS1pby92aWRlby1yZWFjdC1zZGsvZGlzdC9jc3Mvc3R5bGVzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rldi1maW5kZXIvLi9ub2RlX21vZHVsZXMvQHN0cmVhbS1pby92aWRlby1yZWFjdC1zZGsvZGlzdC9jc3Mvc3R5bGVzLmNzcz82ZTU2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiMjYwNWM0M2IxNGNhXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-react-sdk/dist/css/styles.css\n");

/***/ })

};
;