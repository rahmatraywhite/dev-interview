"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/stream-chat";
exports.ids = ["vendor-chunks/stream-chat"];
exports.modules = {

/***/ "(action-browser)/./node_modules/stream-chat/dist/index.es.js":
/*!***************************************************!*\
  !*** ./node_modules/stream-chat/dist/index.es.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Allow: () => (/* binding */ Allow),\n/* harmony export */   AllowAll: () => (/* binding */ AllowAll),\n/* harmony export */   AnyResource: () => (/* binding */ AnyResource),\n/* harmony export */   AnyRole: () => (/* binding */ AnyRole),\n/* harmony export */   BuiltinPermissions: () => (/* binding */ BuiltinPermissions),\n/* harmony export */   BuiltinRoles: () => (/* binding */ BuiltinRoles),\n/* harmony export */   Campaign: () => (/* binding */ Campaign),\n/* harmony export */   Channel: () => (/* binding */ Channel),\n/* harmony export */   ChannelState: () => (/* binding */ ChannelState),\n/* harmony export */   CheckSignature: () => (/* binding */ CheckSignature),\n/* harmony export */   ClientState: () => (/* binding */ ClientState),\n/* harmony export */   Deny: () => (/* binding */ Deny),\n/* harmony export */   DenyAll: () => (/* binding */ DenyAll),\n/* harmony export */   DevToken: () => (/* binding */ DevToken),\n/* harmony export */   EVENT_MAP: () => (/* binding */ EVENT_MAP),\n/* harmony export */   ErrorFromResponse: () => (/* binding */ ErrorFromResponse),\n/* harmony export */   InsightMetrics: () => (/* binding */ InsightMetrics),\n/* harmony export */   JWTServerToken: () => (/* binding */ JWTServerToken),\n/* harmony export */   JWTUserToken: () => (/* binding */ JWTUserToken),\n/* harmony export */   MaxPriority: () => (/* binding */ MaxPriority),\n/* harmony export */   MinPriority: () => (/* binding */ MinPriority),\n/* harmony export */   Permission: () => (/* binding */ Permission),\n/* harmony export */   Segment: () => (/* binding */ Segment),\n/* harmony export */   StableWSConnection: () => (/* binding */ StableWSConnection),\n/* harmony export */   StreamChat: () => (/* binding */ StreamChat),\n/* harmony export */   Thread: () => (/* binding */ Thread),\n/* harmony export */   TokenManager: () => (/* binding */ TokenManager),\n/* harmony export */   UserFromToken: () => (/* binding */ UserFromToken),\n/* harmony export */   buildWsFatalInsight: () => (/* binding */ buildWsFatalInsight),\n/* harmony export */   buildWsSuccessAfterFailureInsight: () => (/* binding */ buildWsSuccessAfterFailureInsight),\n/* harmony export */   chatCodes: () => (/* binding */ chatCodes),\n/* harmony export */   decodeBase64: () => (/* binding */ decodeBase64),\n/* harmony export */   encodeBase64: () => (/* binding */ encodeBase64),\n/* harmony export */   formatMessage: () => (/* binding */ formatMessage),\n/* harmony export */   isOwnUser: () => (/* binding */ isOwnUser),\n/* harmony export */   logChatPromiseExecution: () => (/* binding */ logChatPromiseExecution),\n/* harmony export */   postInsights: () => (/* binding */ postInsights)\n/* harmony export */ });\n/* harmony import */ var base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! base64-js */ \"(action-browser)/./node_modules/base64-js/index.js\");\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"(action-browser)/./node_modules/@babel/runtime/helpers/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \"(action-browser)/./node_modules/@babel/runtime/helpers/typeof.js\");\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"(action-browser)/./node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\n/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"(action-browser)/./node_modules/@babel/runtime/helpers/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"(action-browser)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(action-browser)/./node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(action-browser)/./node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(action-browser)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"(action-browser)/./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! axios */ \"(action-browser)/./node_modules/axios/index.js\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"(action-browser)/./node_modules/@babel/runtime/helpers/slicedToArray.js\");\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! form-data */ \"(action-browser)/./node_modules/form-data/lib/form_data.js\");\n/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(form_data__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! isomorphic-ws */ \"(action-browser)/./node_modules/stream-chat/node_modules/isomorphic-ws/node.js\");\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(isomorphic_ws__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! jsonwebtoken */ \"(action-browser)/./node_modules/jsonwebtoken/index.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ \"(action-browser)/./node_modules/@babel/runtime/helpers/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ \"(action-browser)/./node_modules/@babel/runtime/helpers/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \"(action-browser)/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \"(action-browser)/./node_modules/@babel/runtime/helpers/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_19__);\n/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @babel/runtime/helpers/wrapNativeSuper */ \"(action-browser)/./node_modules/@babel/runtime/helpers/wrapNativeSuper.js\");\n/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_20__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction isString$1(arrayOrString) {\n    return typeof arrayOrString === \"string\";\n}\nfunction isMapStringCallback(arrayOrString, callback) {\n    return !!callback && isString$1(arrayOrString);\n} // source - https://github.com/beatgammit/base64-js/blob/master/test/convert.js#L72\nfunction map(arrayOrString, callback) {\n    var res = [];\n    if (isString$1(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {\n        for(var k = 0, len = arrayOrString.length; k < len; k++){\n            if (arrayOrString.charAt(k)) {\n                var kValue = arrayOrString.charAt(k);\n                var mappedValue = callback(kValue, k, arrayOrString);\n                res[k] = mappedValue;\n            }\n        }\n    } else if (!isString$1(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {\n        for(var _k = 0, _len = arrayOrString.length; _k < _len; _k++){\n            if (_k in arrayOrString) {\n                var _kValue = arrayOrString[_k];\n                var _mappedValue = callback(_kValue, _k, arrayOrString);\n                res[_k] = _mappedValue;\n            }\n        }\n    }\n    return res;\n}\nvar encodeBase64 = function encodeBase64(data) {\n    return (0,base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray)(new Uint8Array(map(data, function(char) {\n        return char.charCodeAt(0);\n    })));\n}; // base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nvar decodeBase64 = function decodeBase64(s) {\n    var e = {}, w = String.fromCharCode, L = s.length;\n    var i, b = 0, c, x, l = 0, a, r = \"\";\n    var A = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for(i = 0; i < 64; i++){\n        e[A.charAt(i)] = i;\n    }\n    for(x = 0; x < L; x++){\n        c = e[s.charAt(x)];\n        b = (b << 6) + c;\n        l += 6;\n        while(l >= 8){\n            ((a = b >>> (l -= 8) & 0xff) || x < L - 2) && (r += w(a));\n        }\n    }\n    return r;\n};\nfunction ownKeys$8(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$8(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$8(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$8(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _createForOfIteratorHelper$4(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            var F = function F() {};\n            return {\n                s: F,\n                n: function n() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function(_e) {\n                    function e(_x) {\n                        return _e.apply(this, arguments);\n                    }\n                    e.toString = function() {\n                        return _e.toString();\n                    };\n                    return e;\n                }(function(e) {\n                    throw e;\n                }),\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true, didErr = false, err;\n    return {\n        s: function s() {\n            it = it.call(o);\n        },\n        n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function(_e2) {\n            function e(_x2) {\n                return _e2.apply(this, arguments);\n            }\n            e.toString = function() {\n                return _e2.toString();\n            };\n            return e;\n        }(function(e) {\n            didErr = true;\n            err = e;\n        }),\n        f: function f() {\n            try {\n                if (!normalCompletion && it.return != null) it.return();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nfunction _unsupportedIterableToArray$4(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray$4(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen);\n}\nfunction _arrayLikeToArray$4(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\n/**\n * logChatPromiseExecution - utility function for logging the execution of a promise..\n *  use this when you want to run the promise and handle errors by logging a warning\n *\n * @param {Promise<T>} promise The promise you want to run and log\n * @param {string} name    A descriptive name of what the promise does for log output\n *\n */ function logChatPromiseExecution(promise, name) {\n    promise.then().catch(function(error) {\n        console.warn(\"failed to do \".concat(name, \", ran into error: \"), error);\n    });\n}\nvar sleep = function sleep(m) {\n    return new Promise(function(r) {\n        return setTimeout(r, m);\n    });\n};\nfunction isFunction(value) {\n    return value && (Object.prototype.toString.call(value) === \"[object Function]\" || \"function\" === typeof value || value instanceof Function);\n}\nvar chatCodes = {\n    TOKEN_EXPIRED: 40,\n    WS_CLOSED_SUCCESS: 1000\n};\nfunction isReadableStream(obj) {\n    return obj !== null && _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(obj) === \"object\" && (obj.readable || typeof obj._read === \"function\");\n}\nfunction isBuffer(obj) {\n    return obj != null && obj.constructor != null && // @ts-expect-error\n    typeof obj.constructor.isBuffer === \"function\" && // @ts-expect-error\n    obj.constructor.isBuffer(obj);\n}\nfunction isFileWebAPI(uri) {\n    return  false && 0;\n}\nfunction isOwnUser(user) {\n    return (user === null || user === void 0 ? void 0 : user.total_unread_count) !== undefined;\n}\nfunction isBlobWebAPI(uri) {\n    return  false && 0;\n}\nfunction isOwnUserBaseProperty(property) {\n    var ownUserBaseProperties = {\n        channel_mutes: true,\n        devices: true,\n        mutes: true,\n        total_unread_count: true,\n        unread_channels: true,\n        unread_count: true,\n        unread_threads: true,\n        invisible: true,\n        roles: true\n    };\n    return ownUserBaseProperties[property];\n}\nfunction addFileToFormData(uri, name, contentType) {\n    var data = new (form_data__WEBPACK_IMPORTED_MODULE_12___default())();\n    if (isReadableStream(uri) || isBuffer(uri) || isFileWebAPI(uri) || isBlobWebAPI(uri)) {\n        if (name) data.append(\"file\", uri, name);\n        else data.append(\"file\", uri);\n    } else {\n        data.append(\"file\", {\n            uri: uri,\n            name: name || uri.split(\"/\").reverse()[0],\n            contentType: contentType || undefined,\n            type: contentType || undefined\n        });\n    }\n    return data;\n}\nfunction normalizeQuerySort(sort) {\n    var sortFields = [];\n    var sortArr = Array.isArray(sort) ? sort : [\n        sort\n    ];\n    var _iterator = _createForOfIteratorHelper$4(sortArr), _step;\n    try {\n        for(_iterator.s(); !(_step = _iterator.n()).done;){\n            var item = _step.value;\n            var entries = Object.entries(item);\n            if (entries.length > 1) {\n                console.warn(\"client._buildSort() - multiple fields in a single sort object detected. Object's field order is not guaranteed\");\n            }\n            for(var _i = 0, _entries = entries; _i < _entries.length; _i++){\n                var _entries$_i = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_11___default()(_entries[_i], 2), field = _entries$_i[0], direction = _entries$_i[1];\n                sortFields.push({\n                    field: field,\n                    direction: direction\n                });\n            }\n        }\n    } catch (err) {\n        _iterator.e(err);\n    } finally{\n        _iterator.f();\n    }\n    return sortFields;\n}\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */ function retryInterval(numberOfFailures) {\n    // try to reconnect in 0.25-25 seconds (random to spread out the load from failures)\n    var max = Math.min(500 + numberOfFailures * 2000, 25000);\n    var min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 25000);\n    return Math.floor(Math.random() * (max - min) + min);\n}\nfunction randomId() {\n    return generateUUIDv4();\n}\nfunction hex(bytes) {\n    var s = \"\";\n    for(var i = 0; i < bytes.length; i++){\n        s += bytes[i].toString(16).padStart(2, \"0\");\n    }\n    return s;\n} // https://tools.ietf.org/html/rfc4122\nfunction generateUUIDv4() {\n    var bytes = getRandomBytes(16);\n    bytes[6] = bytes[6] & 0x0f | 0x40; // version\n    bytes[8] = bytes[8] & 0xbf | 0x80; // variant\n    return hex(bytes.subarray(0, 4)) + \"-\" + hex(bytes.subarray(4, 6)) + \"-\" + hex(bytes.subarray(6, 8)) + \"-\" + hex(bytes.subarray(8, 10)) + \"-\" + hex(bytes.subarray(10, 16));\n}\nfunction getRandomValuesWithMathRandom(bytes) {\n    var max = Math.pow(2, 8 * bytes.byteLength / bytes.length);\n    for(var i = 0; i < bytes.length; i++){\n        bytes[i] = Math.random() * max;\n    }\n}\nvar getRandomValues = function() {\n    var _crypto;\n    if (typeof crypto !== \"undefined\" && typeof ((_crypto = crypto) === null || _crypto === void 0 ? void 0 : _crypto.getRandomValues) !== \"undefined\") {\n        return crypto.getRandomValues.bind(crypto);\n    } else if (typeof msCrypto !== \"undefined\") {\n        return msCrypto.getRandomValues.bind(msCrypto);\n    } else {\n        return getRandomValuesWithMathRandom;\n    }\n}();\nfunction getRandomBytes(length) {\n    var bytes = new Uint8Array(length);\n    getRandomValues(bytes);\n    return bytes;\n}\nfunction convertErrorToJson(err) {\n    var jsonObj = {};\n    if (!err) return jsonObj;\n    try {\n        Object.getOwnPropertyNames(err).forEach(function(key) {\n            jsonObj[key] = Object.getOwnPropertyDescriptor(err, key);\n        });\n    } catch (_) {\n        return {\n            error: \"failed to serialize the error\"\n        };\n    }\n    return jsonObj;\n}\n/**\n * isOnline safely return the navigator.online value for browser env\n * if navigator is not in global object, it always return true\n */ function isOnline() {\n    var nav = typeof navigator !== \"undefined\" ? navigator :  false ? 0 : undefined;\n    if (!nav) {\n        console.warn(\"isOnline failed to access window.navigator and assume browser is online\");\n        return true;\n    } // RN navigator has undefined for onLine\n    if (typeof nav.onLine !== \"boolean\") {\n        return true;\n    }\n    return nav.onLine;\n}\n/**\n * listenForConnectionChanges - Adds an event listener fired on browser going online or offline\n */ function addConnectionEventListeners(cb) {\n    if (false) {}\n}\nfunction removeConnectionEventListeners(cb) {\n    if (false) {}\n}\nvar axiosParamsSerializer = function axiosParamsSerializer(params) {\n    var newParams = [];\n    for(var k in params){\n        // Stream backend doesn't treat \"undefined\" value same as value not being present.\n        // So, we need to skip the undefined values.\n        if (params[k] === undefined) continue;\n        if (Array.isArray(params[k]) || _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(params[k]) === \"object\") {\n            newParams.push(\"\".concat(k, \"=\").concat(encodeURIComponent(JSON.stringify(params[k]))));\n        } else {\n            newParams.push(\"\".concat(k, \"=\").concat(encodeURIComponent(params[k])));\n        }\n    }\n    return newParams.join(\"&\");\n};\n/**\n * formatMessage - Takes the message object. Parses the dates, sets __html\n * and sets the status to received if missing. Returns a message object\n *\n * @param {MessageResponse<StreamChatGenerics>} message a message object\n *\n */ function formatMessage(message) {\n    return _objectSpread$8(_objectSpread$8({}, message), {}, {\n        /**\n     * @deprecated please use `html`\n     */ __html: message.html,\n        // parse the date..\n        pinned_at: message.pinned_at ? new Date(message.pinned_at) : null,\n        created_at: message.created_at ? new Date(message.created_at) : new Date(),\n        updated_at: message.updated_at ? new Date(message.updated_at) : new Date(),\n        status: message.status || \"received\"\n    });\n}\nfunction addToMessageList(messages, message) {\n    var timestampChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var sortBy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"created_at\";\n    var addIfDoesNotExist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    var addMessageToList = addIfDoesNotExist || timestampChanged;\n    var messageArr = messages; // if created_at has changed, message should be filtered and re-inserted in correct order\n    // slow op but usually this only happens for a message inserted to state before actual response with correct timestamp\n    if (timestampChanged) {\n        messageArr = messageArr.filter(function(msg) {\n            return !(msg.id && message.id === msg.id);\n        });\n    } // Get array length after filtering\n    var messageArrayLength = messageArr.length; // for empty list just concat and return unless it's an update or deletion\n    if (messageArrayLength === 0 && addMessageToList) {\n        return messageArr.concat(message);\n    } else if (messageArrayLength === 0) {\n        return _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(messageArr);\n    }\n    var messageTime = message[sortBy].getTime();\n    var messageIsNewest = messageArr[messageArrayLength - 1][sortBy].getTime() < messageTime; // if message is newer than last item in the list concat and return unless it's an update or deletion\n    if (messageIsNewest && addMessageToList) {\n        return messageArr.concat(message);\n    } else if (messageIsNewest) {\n        return _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(messageArr);\n    } // find the closest index to push the new message\n    var left = 0;\n    var middle = 0;\n    var right = messageArrayLength - 1;\n    while(left <= right){\n        middle = Math.floor((right + left) / 2);\n        if (messageArr[middle][sortBy].getTime() <= messageTime) left = middle + 1;\n        else right = middle - 1;\n    } // message already exists and not filtered due to timestampChanged, update and return\n    if (!timestampChanged && message.id) {\n        if (messageArr[left] && message.id === messageArr[left].id) {\n            messageArr[left] = message;\n            return _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(messageArr);\n        }\n        if (messageArr[left - 1] && message.id === messageArr[left - 1].id) {\n            messageArr[left - 1] = message;\n            return _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(messageArr);\n        }\n    } // Do not add updated or deleted messages to the list if they do not already exist\n    // or have a timestamp change.\n    if (addMessageToList) {\n        messageArr.splice(left, 0, message);\n    }\n    return _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(messageArr);\n}\nfunction ownKeys$7(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$7(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$7(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$7(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\n/**\n * ChannelState - A container class for the channel state.\n */ var ChannelState = /*#__PURE__*/ function() {\n    /**\n   * Flag which indicates if channel state contain latest/recent messages or no.\n   * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n   * When false, any new message (received by websocket event - message.new) will not\n   * be pushed on to message list.\n   */ /**\n   * Disjoint lists of messages\n   * Users can jump in the message list (with searching) and this can result in disjoint lists of messages\n   * The state manages these lists and merges them when lists overlap\n   * The messages array contains the currently active set\n   */ function ChannelState(channel) {\n        var _this = this, _channel$state;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, ChannelState);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_channel\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"watcher_count\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"typing\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"read\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"pinnedMessages\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"pending_messages\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"threads\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"mutedUsers\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"watchers\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"members\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"unreadCount\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"membership\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"last_message_at\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"isUpToDate\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"messageSets\", []);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"setIsUpToDate\", function(isUpToDate) {\n            _this.isUpToDate = isUpToDate;\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"removeMessageFromArray\", function(msgArray, msg) {\n            var result = msgArray.filter(function(message) {\n                return !(!!message.id && !!msg.id && message.id === msg.id);\n            });\n            return {\n                removed: result.length < msgArray.length,\n                result: result\n            };\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"updateUserMessages\", function(user) {\n            var _updateUserMessages = function _updateUserMessages(messages, user) {\n                for(var i = 0; i < messages.length; i++){\n                    var _m$user;\n                    var m = messages[i];\n                    if (((_m$user = m.user) === null || _m$user === void 0 ? void 0 : _m$user.id) === user.id) {\n                        messages[i] = _objectSpread$7(_objectSpread$7({}, m), {}, {\n                            user: user\n                        });\n                    }\n                }\n            };\n            _this.messageSets.forEach(function(set) {\n                return _updateUserMessages(set.messages, user);\n            });\n            for(var parentId in _this.threads){\n                _updateUserMessages(_this.threads[parentId], user);\n            }\n            _updateUserMessages(_this.pinnedMessages, user);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"deleteUserMessages\", function(user) {\n            var hardDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            var _deleteUserMessages = function _deleteUserMessages(messages, user) {\n                var hardDelete = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                for(var i = 0; i < messages.length; i++){\n                    var _m$user2;\n                    var m = messages[i];\n                    if (((_m$user2 = m.user) === null || _m$user2 === void 0 ? void 0 : _m$user2.id) !== user.id) {\n                        continue;\n                    }\n                    if (hardDelete) {\n                        /**\n             * In case of hard delete, we need to strip down all text, html,\n             * attachments and all the custom properties on message\n             */ messages[i] = {\n                            cid: m.cid,\n                            created_at: m.created_at,\n                            deleted_at: user.deleted_at,\n                            id: m.id,\n                            latest_reactions: [],\n                            mentioned_users: [],\n                            own_reactions: [],\n                            parent_id: m.parent_id,\n                            reply_count: m.reply_count,\n                            status: m.status,\n                            thread_participants: m.thread_participants,\n                            type: \"deleted\",\n                            updated_at: m.updated_at,\n                            user: m.user\n                        };\n                    } else {\n                        messages[i] = _objectSpread$7(_objectSpread$7({}, m), {}, {\n                            type: \"deleted\",\n                            deleted_at: user.deleted_at\n                        });\n                    }\n                }\n            };\n            _this.messageSets.forEach(function(set) {\n                return _deleteUserMessages(set.messages, user, hardDelete);\n            });\n            for(var parentId in _this.threads){\n                _deleteUserMessages(_this.threads[parentId], user, hardDelete);\n            }\n            _deleteUserMessages(_this.pinnedMessages, user, hardDelete);\n        });\n        this._channel = channel;\n        this.watcher_count = 0;\n        this.typing = {};\n        this.read = {};\n        this.initMessages();\n        this.pinnedMessages = [];\n        this.pending_messages = [];\n        this.threads = {}; // a list of users to hide messages from\n        this.mutedUsers = [];\n        this.watchers = {};\n        this.members = {};\n        this.membership = {};\n        this.unreadCount = 0;\n        /**\n     * Flag which indicates if channel state contain latest/recent messages or no.\n     * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n     * When false, any new message (received by websocket event - message.new) will not\n     * be pushed on to message list.\n     */ this.isUpToDate = true;\n        this.last_message_at = (channel === null || channel === void 0 ? void 0 : (_channel$state = channel.state) === null || _channel$state === void 0 ? void 0 : _channel$state.last_message_at) != null ? new Date(channel.state.last_message_at) : null;\n    }\n    _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(ChannelState, [\n        {\n            key: \"messages\",\n            get: function get() {\n                var _this$messageSets$fin;\n                return ((_this$messageSets$fin = this.messageSets.find(function(s) {\n                    return s.isCurrent;\n                })) === null || _this$messageSets$fin === void 0 ? void 0 : _this$messageSets$fin.messages) || [];\n            },\n            set: function set(messages) {\n                var index = this.messageSets.findIndex(function(s) {\n                    return s.isCurrent;\n                });\n                this.messageSets[index].messages = messages;\n            }\n        },\n        {\n            key: \"latestMessages\",\n            get: function get() {\n                var _this$messageSets$fin2;\n                return ((_this$messageSets$fin2 = this.messageSets.find(function(s) {\n                    return s.isLatest;\n                })) === null || _this$messageSets$fin2 === void 0 ? void 0 : _this$messageSets$fin2.messages) || [];\n            },\n            set: function set(messages) {\n                var index = this.messageSets.findIndex(function(s) {\n                    return s.isLatest;\n                });\n                this.messageSets[index].messages = messages;\n            }\n        },\n        {\n            key: \"addMessageSorted\",\n            value: function addMessageSorted(newMessage) {\n                var timestampChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                var addIfDoesNotExist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n                var messageSetToAddToIfDoesNotExist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"latest\";\n                return this.addMessagesSorted([\n                    newMessage\n                ], timestampChanged, false, addIfDoesNotExist, messageSetToAddToIfDoesNotExist);\n            }\n        },\n        {\n            key: \"formatMessage\",\n            value: function formatMessage(message) {\n                return _objectSpread$7(_objectSpread$7({}, message), {}, {\n                    /**\n         * @deprecated please use `html`\n         */ __html: message.html,\n                    // parse the date..\n                    pinned_at: message.pinned_at ? new Date(message.pinned_at) : null,\n                    created_at: message.created_at ? new Date(message.created_at) : new Date(),\n                    updated_at: message.updated_at ? new Date(message.updated_at) : new Date(),\n                    status: message.status || \"received\"\n                });\n            }\n        },\n        {\n            key: \"addMessagesSorted\",\n            value: function addMessagesSorted(newMessages) {\n                var timestampChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                var initializing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                var addIfDoesNotExist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n                var messageSetToAddToIfDoesNotExist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"current\";\n                var _this$findTargetMessa = this.findTargetMessageSet(newMessages, addIfDoesNotExist, messageSetToAddToIfDoesNotExist), messagesToAdd = _this$findTargetMessa.messagesToAdd, targetMessageSetIndex = _this$findTargetMessa.targetMessageSetIndex;\n                for(var i = 0; i < messagesToAdd.length; i += 1){\n                    var isFromShadowBannedUser = messagesToAdd[i].shadowed;\n                    if (isFromShadowBannedUser) {\n                        continue;\n                    } // If message is already formatted we can skip the tasks below\n                    // This will be true for messages that are already present at the state -> this happens when we perform merging of message sets\n                    // This will be also true for message previews used by some SDKs\n                    var isMessageFormatted = messagesToAdd[i].created_at instanceof Date;\n                    var message = void 0;\n                    if (isMessageFormatted) {\n                        message = messagesToAdd[i];\n                    } else {\n                        var _this$_channel;\n                        message = this.formatMessage(messagesToAdd[i]);\n                        if (message.user && (_this$_channel = this._channel) !== null && _this$_channel !== void 0 && _this$_channel.cid) {\n                            /**\n             * Store the reference to user for this channel, so that when we have to\n             * handle updates to user, we can use the reference map, to determine which\n             * channels need to be updated with updated user object.\n             */ this._channel.getClient().state.updateUserReference(message.user, this._channel.cid);\n                        }\n                        if (initializing && message.id && this.threads[message.id]) {\n                            // If we are initializing the state of channel (e.g., in case of connection recovery),\n                            // then in that case we remove thread related to this message from threads object.\n                            // This way we can ensure that we don't have any stale data in thread object\n                            // and consumer can refetch the replies.\n                            delete this.threads[message.id];\n                        }\n                        if (!this.last_message_at) {\n                            this.last_message_at = new Date(message.created_at.getTime());\n                        }\n                        if (message.created_at.getTime() > this.last_message_at.getTime()) {\n                            this.last_message_at = new Date(message.created_at.getTime());\n                        }\n                    } // update or append the messages...\n                    var parentID = message.parent_id; // add to the given message set\n                    if ((!parentID || message.show_in_channel) && targetMessageSetIndex !== -1) {\n                        this.messageSets[targetMessageSetIndex].messages = this._addToMessageList(this.messageSets[targetMessageSetIndex].messages, message, timestampChanged, \"created_at\", addIfDoesNotExist);\n                    }\n                    /**\n         * Add message to thread if applicable and the message\n         * was added when querying for replies, or the thread already exits.\n         * This is to prevent the thread state from getting out of sync if\n         * a thread message is shown in channel but older than the newest thread\n         * message. This situation can result in a thread state where a random\n         * message is \"oldest\" message, and newer messages are therefore not loaded.\n         * This can also occur if an old thread message is updated.\n         */ if (parentID && !initializing) {\n                        var thread = this.threads[parentID] || [];\n                        var threadMessages = this._addToMessageList(thread, message, timestampChanged, \"created_at\", addIfDoesNotExist);\n                        this.threads[parentID] = threadMessages;\n                    }\n                }\n                return {\n                    messageSet: this.messageSets[targetMessageSetIndex]\n                };\n            }\n        },\n        {\n            key: \"addPinnedMessages\",\n            value: function addPinnedMessages(pinnedMessages) {\n                for(var i = 0; i < pinnedMessages.length; i += 1){\n                    this.addPinnedMessage(pinnedMessages[i]);\n                }\n            }\n        },\n        {\n            key: \"addPinnedMessage\",\n            value: function addPinnedMessage(pinnedMessage) {\n                this.pinnedMessages = this._addToMessageList(this.pinnedMessages, this.formatMessage(pinnedMessage), false, \"pinned_at\");\n            }\n        },\n        {\n            key: \"removePinnedMessage\",\n            value: function removePinnedMessage(message) {\n                var _this$removeMessageFr = this.removeMessageFromArray(this.pinnedMessages, message), result = _this$removeMessageFr.result;\n                this.pinnedMessages = result;\n            }\n        },\n        {\n            key: \"addReaction\",\n            value: function addReaction(reaction, message, enforce_unique) {\n                var _this2 = this;\n                if (!message) return;\n                var messageWithReaction = message;\n                this._updateMessage(message, function(msg) {\n                    messageWithReaction.own_reactions = _this2._addOwnReactionToMessage(msg.own_reactions, reaction, enforce_unique);\n                    return _this2.formatMessage(messageWithReaction);\n                });\n                return messageWithReaction;\n            }\n        },\n        {\n            key: \"_addOwnReactionToMessage\",\n            value: function _addOwnReactionToMessage(ownReactions, reaction, enforce_unique) {\n                if (enforce_unique) {\n                    ownReactions = [];\n                } else {\n                    ownReactions = this._removeOwnReactionFromMessage(ownReactions, reaction);\n                }\n                ownReactions = ownReactions || [];\n                if (this._channel.getClient().userID === reaction.user_id) {\n                    ownReactions.push(reaction);\n                }\n                return ownReactions;\n            }\n        },\n        {\n            key: \"_removeOwnReactionFromMessage\",\n            value: function _removeOwnReactionFromMessage(ownReactions, reaction) {\n                if (ownReactions) {\n                    return ownReactions.filter(function(item) {\n                        return item.user_id !== reaction.user_id || item.type !== reaction.type;\n                    });\n                }\n                return ownReactions;\n            }\n        },\n        {\n            key: \"removeReaction\",\n            value: function removeReaction(reaction, message) {\n                var _this3 = this;\n                if (!message) return;\n                var messageWithReaction = message;\n                this._updateMessage(message, function(msg) {\n                    messageWithReaction.own_reactions = _this3._removeOwnReactionFromMessage(msg.own_reactions, reaction);\n                    return _this3.formatMessage(messageWithReaction);\n                });\n                return messageWithReaction;\n            }\n        },\n        {\n            key: \"removeQuotedMessageReferences\",\n            value: function removeQuotedMessageReferences(message) {\n                var _this4 = this;\n                var parseMessage = function parseMessage(m) {\n                    var _m$pinned_at, _m$updated_at;\n                    return _objectSpread$7(_objectSpread$7({}, m), {}, {\n                        created_at: m.created_at.toISOString(),\n                        pinned_at: (_m$pinned_at = m.pinned_at) === null || _m$pinned_at === void 0 ? void 0 : _m$pinned_at.toISOString(),\n                        updated_at: (_m$updated_at = m.updated_at) === null || _m$updated_at === void 0 ? void 0 : _m$updated_at.toISOString()\n                    });\n                };\n                this.messageSets.forEach(function(set) {\n                    var updatedMessages = set.messages.filter(function(msg) {\n                        return msg.quoted_message_id === message.id;\n                    }).map(parseMessage).map(function(msg) {\n                        return _objectSpread$7(_objectSpread$7({}, msg), {}, {\n                            quoted_message: _objectSpread$7(_objectSpread$7({}, message), {}, {\n                                attachments: []\n                            })\n                        });\n                    });\n                    _this4.addMessagesSorted(updatedMessages, true);\n                });\n            }\n        },\n        {\n            key: \"_updateMessage\",\n            value: function _updateMessage(message, updateFunc) {\n                var parent_id = message.parent_id, show_in_channel = message.show_in_channel, pinned = message.pinned;\n                if (parent_id && this.threads[parent_id]) {\n                    var thread = this.threads[parent_id];\n                    var msgIndex = thread.findIndex(function(msg) {\n                        return msg.id === message.id;\n                    });\n                    if (msgIndex !== -1) {\n                        thread[msgIndex] = updateFunc(thread[msgIndex]);\n                        this.threads[parent_id] = thread;\n                    }\n                }\n                if (!show_in_channel && !parent_id || show_in_channel) {\n                    var messageSetIndex = this.findMessageSetIndex(message);\n                    if (messageSetIndex !== -1) {\n                        var _msgIndex = this.messageSets[messageSetIndex].messages.findIndex(function(msg) {\n                            return msg.id === message.id;\n                        });\n                        if (_msgIndex !== -1) {\n                            this.messageSets[messageSetIndex].messages[_msgIndex] = updateFunc(this.messageSets[messageSetIndex].messages[_msgIndex]);\n                        }\n                    }\n                }\n                if (pinned) {\n                    var _msgIndex2 = this.pinnedMessages.findIndex(function(msg) {\n                        return msg.id === message.id;\n                    });\n                    if (_msgIndex2 !== -1) {\n                        this.pinnedMessages[_msgIndex2] = updateFunc(this.pinnedMessages[_msgIndex2]);\n                    }\n                }\n            }\n        },\n        {\n            key: \"_addToMessageList\",\n            value: /**\n     * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isn't found\n     *\n     * @param {Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>} messages A list of messages\n     * @param message\n     * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n     * @param {string} sortBy field name to use to sort the messages by\n     * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n     */ function _addToMessageList(messages, message) {\n                var timestampChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                var sortBy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"created_at\";\n                var addIfDoesNotExist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n                return addToMessageList(messages, message, timestampChanged, sortBy, addIfDoesNotExist);\n            }\n        },\n        {\n            key: \"removeMessage\",\n            value: function removeMessage(messageToRemove) {\n                var isRemoved = false;\n                if (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {\n                    var _this$removeMessageFr2 = this.removeMessageFromArray(this.threads[messageToRemove.parent_id], messageToRemove), removed = _this$removeMessageFr2.removed, threadMessages = _this$removeMessageFr2.result;\n                    this.threads[messageToRemove.parent_id] = threadMessages;\n                    isRemoved = removed;\n                } else {\n                    var _messageToRemove$mess;\n                    var messageSetIndex = (_messageToRemove$mess = messageToRemove.messageSetIndex) !== null && _messageToRemove$mess !== void 0 ? _messageToRemove$mess : this.findMessageSetIndex(messageToRemove);\n                    if (messageSetIndex !== -1) {\n                        var _this$removeMessageFr3 = this.removeMessageFromArray(this.messageSets[messageSetIndex].messages, messageToRemove), _removed = _this$removeMessageFr3.removed, messages = _this$removeMessageFr3.result;\n                        this.messageSets[messageSetIndex].messages = messages;\n                        isRemoved = _removed;\n                    }\n                }\n                return isRemoved;\n            }\n        },\n        {\n            key: \"filterErrorMessages\",\n            value: /**\n     * filterErrorMessages - Removes error messages from the channel state.\n     *\n     */ function filterErrorMessages() {\n                var filteredMessages = this.latestMessages.filter(function(message) {\n                    return message.type !== \"error\";\n                });\n                this.latestMessages = filteredMessages;\n            }\n        },\n        {\n            key: \"clean\",\n            value: function clean() {\n                var now = new Date(); // prevent old users from showing up as typing\n                for(var _i = 0, _Object$entries = Object.entries(this.typing); _i < _Object$entries.length; _i++){\n                    var _Object$entries$_i = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_11___default()(_Object$entries[_i], 2), userID = _Object$entries$_i[0], lastEvent = _Object$entries$_i[1];\n                    var receivedAt = typeof lastEvent.received_at === \"string\" ? new Date(lastEvent.received_at) : lastEvent.received_at || new Date();\n                    if (now.getTime() - receivedAt.getTime() > 7000) {\n                        delete this.typing[userID];\n                        this._channel.getClient().dispatchEvent({\n                            cid: this._channel.cid,\n                            type: \"typing.stop\",\n                            user: {\n                                id: userID\n                            }\n                        });\n                    }\n                }\n            }\n        },\n        {\n            key: \"clearMessages\",\n            value: function clearMessages() {\n                this.initMessages();\n                this.pinnedMessages = [];\n            }\n        },\n        {\n            key: \"initMessages\",\n            value: function initMessages() {\n                this.messageSets = [\n                    {\n                        messages: [],\n                        isLatest: true,\n                        isCurrent: true\n                    }\n                ];\n            }\n        },\n        {\n            key: \"loadMessageIntoState\",\n            value: function() {\n                var _loadMessageIntoState = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee(messageId, parentMessageId) {\n                    var _this$threads$parentM;\n                    var limit, messageSetIndex, switchedToMessageSet, loadedMessageThread, messageIdToFind, _args = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n                        while(1){\n                            switch(_context.prev = _context.next){\n                                case 0:\n                                    limit = _args.length > 2 && _args[2] !== undefined ? _args[2] : 25;\n                                    switchedToMessageSet = false;\n                                    loadedMessageThread = false;\n                                    messageIdToFind = parentMessageId || messageId;\n                                    if (!(messageId === \"latest\")) {\n                                        _context.next = 10;\n                                        break;\n                                    }\n                                    if (!(this.messages === this.latestMessages)) {\n                                        _context.next = 7;\n                                        break;\n                                    }\n                                    return _context.abrupt(\"return\");\n                                case 7:\n                                    messageSetIndex = this.messageSets.findIndex(function(s) {\n                                        return s.isLatest;\n                                    });\n                                    _context.next = 11;\n                                    break;\n                                case 10:\n                                    messageSetIndex = this.findMessageSetIndex({\n                                        id: messageIdToFind\n                                    });\n                                case 11:\n                                    if (messageSetIndex !== -1) {\n                                        this.switchToMessageSet(messageSetIndex);\n                                        switchedToMessageSet = true;\n                                    }\n                                    loadedMessageThread = !parentMessageId || !!((_this$threads$parentM = this.threads[parentMessageId]) !== null && _this$threads$parentM !== void 0 && _this$threads$parentM.find(function(m) {\n                                        return m.id === messageId;\n                                    }));\n                                    if (!(switchedToMessageSet && loadedMessageThread)) {\n                                        _context.next = 15;\n                                        break;\n                                    }\n                                    return _context.abrupt(\"return\");\n                                case 15:\n                                    if (switchedToMessageSet) {\n                                        _context.next = 18;\n                                        break;\n                                    }\n                                    _context.next = 18;\n                                    return this._channel.query({\n                                        messages: {\n                                            id_around: messageIdToFind,\n                                            limit: limit\n                                        }\n                                    }, \"new\");\n                                case 18:\n                                    if (!(!loadedMessageThread && parentMessageId)) {\n                                        _context.next = 21;\n                                        break;\n                                    }\n                                    _context.next = 21;\n                                    return this._channel.getReplies(parentMessageId, {\n                                        id_around: messageId,\n                                        limit: limit\n                                    });\n                                case 21:\n                                    messageSetIndex = this.findMessageSetIndex({\n                                        id: messageIdToFind\n                                    });\n                                    if (messageSetIndex !== -1) {\n                                        this.switchToMessageSet(messageSetIndex);\n                                    }\n                                case 23:\n                                case \"end\":\n                                    return _context.stop();\n                            }\n                        }\n                    }, _callee, this);\n                }));\n                function loadMessageIntoState(_x, _x2) {\n                    return _loadMessageIntoState.apply(this, arguments);\n                }\n                return loadMessageIntoState;\n            }()\n        },\n        {\n            key: \"findMessage\",\n            value: function findMessage(messageId, parentMessageId) {\n                if (parentMessageId) {\n                    var messages = this.threads[parentMessageId];\n                    if (!messages) {\n                        return undefined;\n                    }\n                    return messages.find(function(m) {\n                        return m.id === messageId;\n                    });\n                }\n                var messageSetIndex = this.findMessageSetIndex({\n                    id: messageId\n                });\n                if (messageSetIndex === -1) {\n                    return undefined;\n                }\n                return this.messageSets[messageSetIndex].messages.find(function(m) {\n                    return m.id === messageId;\n                });\n            }\n        },\n        {\n            key: \"switchToMessageSet\",\n            value: function switchToMessageSet(index) {\n                var currentMessages = this.messageSets.find(function(s) {\n                    return s.isCurrent;\n                });\n                if (!currentMessages) {\n                    return;\n                }\n                currentMessages.isCurrent = false;\n                this.messageSets[index].isCurrent = true;\n            }\n        },\n        {\n            key: \"areMessageSetsOverlap\",\n            value: function areMessageSetsOverlap(messages1, messages2) {\n                return messages1.some(function(m1) {\n                    return messages2.find(function(m2) {\n                        return m1.id === m2.id;\n                    });\n                });\n            }\n        },\n        {\n            key: \"findMessageSetIndex\",\n            value: function findMessageSetIndex(message) {\n                return this.messageSets.findIndex(function(set) {\n                    return !!set.messages.find(function(m) {\n                        return m.id === message.id;\n                    });\n                });\n            }\n        },\n        {\n            key: \"findTargetMessageSet\",\n            value: function findTargetMessageSet(newMessages) {\n                var _this5 = this;\n                var addIfDoesNotExist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                var messageSetToAddToIfDoesNotExist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"current\";\n                var messagesToAdd = newMessages;\n                var targetMessageSetIndex;\n                if (addIfDoesNotExist) {\n                    var overlappingMessageSetIndices = this.messageSets.map(function(_, i) {\n                        return i;\n                    }).filter(function(i) {\n                        return _this5.areMessageSetsOverlap(_this5.messageSets[i].messages, newMessages);\n                    });\n                    switch(messageSetToAddToIfDoesNotExist){\n                        case \"new\":\n                            if (overlappingMessageSetIndices.length > 0) {\n                                targetMessageSetIndex = overlappingMessageSetIndices[0]; // No new message set is created if newMessages only contains thread replies\n                            } else if (newMessages.some(function(m) {\n                                return !m.parent_id;\n                            })) {\n                                this.messageSets.push({\n                                    messages: [],\n                                    isCurrent: false,\n                                    isLatest: false\n                                });\n                                targetMessageSetIndex = this.messageSets.length - 1;\n                            }\n                            break;\n                        case \"current\":\n                            targetMessageSetIndex = this.messageSets.findIndex(function(s) {\n                                return s.isCurrent;\n                            });\n                            break;\n                        case \"latest\":\n                            targetMessageSetIndex = this.messageSets.findIndex(function(s) {\n                                return s.isLatest;\n                            });\n                            break;\n                        default:\n                            targetMessageSetIndex = -1;\n                    } // when merging the target set will be the first one from the overlapping message sets\n                    var mergeTargetMessageSetIndex = overlappingMessageSetIndices.splice(0, 1)[0];\n                    var mergeSourceMessageSetIndices = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(overlappingMessageSetIndices);\n                    if (mergeTargetMessageSetIndex !== undefined && mergeTargetMessageSetIndex !== targetMessageSetIndex) {\n                        mergeSourceMessageSetIndices.push(targetMessageSetIndex);\n                    } // merge message sets\n                    if (mergeSourceMessageSetIndices.length > 0) {\n                        var target = this.messageSets[mergeTargetMessageSetIndex];\n                        var sources = this.messageSets.filter(function(_, i) {\n                            return mergeSourceMessageSetIndices.indexOf(i) !== -1;\n                        });\n                        sources.forEach(function(messageSet) {\n                            target.isLatest = target.isLatest || messageSet.isLatest;\n                            target.isCurrent = target.isCurrent || messageSet.isCurrent;\n                            messagesToAdd = [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(messagesToAdd), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(messageSet.messages));\n                        });\n                        sources.forEach(function(s) {\n                            return _this5.messageSets.splice(_this5.messageSets.indexOf(s), 1);\n                        });\n                        var overlappingMessageSetIndex = this.messageSets.findIndex(function(s) {\n                            return _this5.areMessageSetsOverlap(s.messages, newMessages);\n                        });\n                        targetMessageSetIndex = overlappingMessageSetIndex;\n                    }\n                } else {\n                    // assumes that all new messages belong to the same set\n                    targetMessageSetIndex = this.findMessageSetIndex(newMessages[0]);\n                }\n                return {\n                    targetMessageSetIndex: targetMessageSetIndex,\n                    messagesToAdd: messagesToAdd\n                };\n            }\n        }\n    ]);\n    return ChannelState;\n}();\nfunction _createForOfIteratorHelper$3(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            var F = function F() {};\n            return {\n                s: F,\n                n: function n() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function e(_e) {\n                    throw _e;\n                },\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true, didErr = false, err;\n    return {\n        s: function s() {\n            it = it.call(o);\n        },\n        n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function e(_e2) {\n            didErr = true;\n            err = _e2;\n        },\n        f: function f() {\n            try {\n                if (!normalCompletion && it.return != null) it.return();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nfunction _unsupportedIterableToArray$3(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray$3(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);\n}\nfunction _arrayLikeToArray$3(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction ownKeys$6(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$6(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$6(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$6(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\n/**\n * Channel - The Channel class manages it's own state.\n */ var Channel = /*#__PURE__*/ function() {\n    /**  */ /**\n   * This boolean is a vague indication of weather the channel exists on chat backend.\n   *\n   * If the value is true, then that means the channel has been initialized by either calling\n   * channel.create() or channel.query() or channel.watch().\n   *\n   * If the value is false, then channel may or may not exist on the backend. The only way to ensure\n   * is by calling channel.create() or channel.query() or channel.watch().\n   */ /**\n   * Indicates weather channel has been initialized by manually populating the state with some messages, members etc.\n   * Static state indicates that channel exists on backend, but is not being watched yet.\n   */ /**\n   * constructor - Create a channel\n   *\n   * @param {StreamChat<StreamChatGenerics>} client the chat client\n   * @param {string} type  the type of channel\n   * @param {string} [id]  the id of the chat\n   * @param {ChannelData<StreamChatGenerics>} data any additional custom params\n   *\n   * @return {Channel<StreamChatGenerics>} Returns a new uninitialized channel\n   */ function Channel(client, type, id, data) {\n        var _this = this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, Channel);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_client\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"type\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"id\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"data\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_data\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"cid\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"listeners\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"state\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"initialized\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"offlineMode\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"lastKeyStroke\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"lastTypingEvent\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"isTyping\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"disconnected\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"create\", /*#__PURE__*/ function() {\n            var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee(options) {\n                var defaultOptions;\n                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n                    while(1){\n                        switch(_context.prev = _context.next){\n                            case 0:\n                                defaultOptions = _objectSpread$6(_objectSpread$6({}, options), {}, {\n                                    watch: false,\n                                    state: false,\n                                    presence: false\n                                });\n                                _context.next = 3;\n                                return _this.query(defaultOptions, \"latest\");\n                            case 3:\n                                return _context.abrupt(\"return\", _context.sent);\n                            case 4:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }, _callee);\n            }));\n            return function(_x) {\n                return _ref.apply(this, arguments);\n            };\n        }());\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_callChannelListeners\", function(event) {\n            var channel = _this; // gather and call the listeners\n            var listeners = [];\n            if (channel.listeners.all) {\n                listeners.push.apply(listeners, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(channel.listeners.all));\n            }\n            if (channel.listeners[event.type]) {\n                listeners.push.apply(listeners, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(channel.listeners[event.type]));\n            } // call the event and send it to the listeners\n            for(var _i = 0, _listeners = listeners; _i < _listeners.length; _i++){\n                var listener = _listeners[_i];\n                if (typeof listener !== \"string\") {\n                    listener(event);\n                }\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_channelURL\", function() {\n            if (!_this.id) {\n                throw new Error(\"channel id is not defined\");\n            }\n            return \"\".concat(_this.getClient().baseURL, \"/channels/\").concat(_this.type, \"/\").concat(_this.id);\n        });\n        var validTypeRe = /^[\\w_-]+$/;\n        var validIDRe = /^[\\w!_-]+$/;\n        if (!validTypeRe.test(type)) {\n            throw new Error(\"Invalid chat type \".concat(type, ', letters, numbers and \"_-\" are allowed'));\n        }\n        if (typeof id === \"string\" && !validIDRe.test(id)) {\n            throw new Error(\"Invalid chat id \".concat(id, ', letters, numbers and \"!-_\" are allowed'));\n        }\n        this._client = client;\n        this.type = type;\n        this.id = id; // used by the frontend, gets updated:\n        this.data = data; // this._data is used for the requests...\n        this._data = _objectSpread$6({}, data);\n        this.cid = \"\".concat(type, \":\").concat(id);\n        this.listeners = {}; // perhaps the state variable should be private\n        this.state = new ChannelState(this);\n        this.initialized = false;\n        this.offlineMode = false;\n        this.lastTypingEvent = null;\n        this.isTyping = false;\n        this.disconnected = false;\n    }\n    /**\n   * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error\n   *\n   * @return {StreamChat<StreamChatGenerics>}\n   */ _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(Channel, [\n        {\n            key: \"getClient\",\n            value: function getClient() {\n                if (this.disconnected === true) {\n                    throw Error(\"You can't use a channel after client.disconnect() was called\");\n                }\n                return this._client;\n            }\n        },\n        {\n            key: \"getConfig\",\n            value: function getConfig() {\n                var client = this.getClient();\n                return client.configs[this.cid];\n            }\n        },\n        {\n            key: \"sendMessage\",\n            value: function() {\n                var _sendMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee2(message, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee2$(_context2) {\n                        while(1){\n                            switch(_context2.prev = _context2.next){\n                                case 0:\n                                    _context2.next = 2;\n                                    return this.getClient().post(this._channelURL() + \"/message\", _objectSpread$6({\n                                        message: message\n                                    }, options));\n                                case 2:\n                                    return _context2.abrupt(\"return\", _context2.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context2.stop();\n                            }\n                        }\n                    }, _callee2, this);\n                }));\n                function sendMessage(_x2, _x3) {\n                    return _sendMessage.apply(this, arguments);\n                }\n                return sendMessage;\n            }()\n        },\n        {\n            key: \"sendFile\",\n            value: function sendFile(uri, name, contentType, user) {\n                return this.getClient().sendFile(\"\".concat(this._channelURL(), \"/file\"), uri, name, contentType, user);\n            }\n        },\n        {\n            key: \"sendImage\",\n            value: function sendImage(uri, name, contentType, user) {\n                return this.getClient().sendFile(\"\".concat(this._channelURL(), \"/image\"), uri, name, contentType, user);\n            }\n        },\n        {\n            key: \"deleteFile\",\n            value: function deleteFile(url) {\n                return this.getClient().delete(\"\".concat(this._channelURL(), \"/file\"), {\n                    url: url\n                });\n            }\n        },\n        {\n            key: \"deleteImage\",\n            value: function deleteImage(url) {\n                return this.getClient().delete(\"\".concat(this._channelURL(), \"/image\"), {\n                    url: url\n                });\n            }\n        },\n        {\n            key: \"sendEvent\",\n            value: function() {\n                var _sendEvent = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee3(event) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee3$(_context3) {\n                        while(1){\n                            switch(_context3.prev = _context3.next){\n                                case 0:\n                                    this._checkInitialized();\n                                    _context3.next = 3;\n                                    return this.getClient().post(this._channelURL() + \"/event\", {\n                                        event: event\n                                    });\n                                case 3:\n                                    return _context3.abrupt(\"return\", _context3.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context3.stop();\n                            }\n                        }\n                    }, _callee3, this);\n                }));\n                function sendEvent(_x4) {\n                    return _sendEvent.apply(this, arguments);\n                }\n                return sendEvent;\n            }()\n        },\n        {\n            key: \"search\",\n            value: function() {\n                var _search = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee4(query) {\n                    var options, payload, _args4 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee4$(_context4) {\n                        while(1){\n                            switch(_context4.prev = _context4.next){\n                                case 0:\n                                    options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n                                    if (!(options.offset && options.next)) {\n                                        _context4.next = 3;\n                                        break;\n                                    }\n                                    throw Error(\"Cannot specify offset with next\");\n                                case 3:\n                                    // Return a list of channels\n                                    payload = _objectSpread$6(_objectSpread$6({\n                                        filter_conditions: {\n                                            cid: this.cid\n                                        }\n                                    }, options), {}, {\n                                        sort: options.sort ? normalizeQuerySort(options.sort) : undefined\n                                    });\n                                    if (!(typeof query === \"string\")) {\n                                        _context4.next = 8;\n                                        break;\n                                    }\n                                    payload.query = query;\n                                    _context4.next = 13;\n                                    break;\n                                case 8:\n                                    if (!(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(query) === \"object\")) {\n                                        _context4.next = 12;\n                                        break;\n                                    }\n                                    payload.message_filter_conditions = query;\n                                    _context4.next = 13;\n                                    break;\n                                case 12:\n                                    throw Error(\"Invalid type \".concat(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(query), \" for query parameter\"));\n                                case 13:\n                                    _context4.next = 15;\n                                    return this.getClient().wsPromise;\n                                case 15:\n                                    _context4.next = 17;\n                                    return this.getClient().get(this.getClient().baseURL + \"/search\", {\n                                        payload: payload\n                                    });\n                                case 17:\n                                    return _context4.abrupt(\"return\", _context4.sent);\n                                case 18:\n                                case \"end\":\n                                    return _context4.stop();\n                            }\n                        }\n                    }, _callee4, this);\n                }));\n                function search(_x5) {\n                    return _search.apply(this, arguments);\n                }\n                return search;\n            }()\n        },\n        {\n            key: \"queryMembers\",\n            value: function() {\n                var _queryMembers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee5(filterConditions) {\n                    var _this$data;\n                    var sort, options, id, type, members, _args5 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee5$(_context5) {\n                        while(1){\n                            switch(_context5.prev = _context5.next){\n                                case 0:\n                                    sort = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : [];\n                                    options = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {};\n                                    type = this.type;\n                                    if (this.id) {\n                                        id = this.id;\n                                    } else if ((_this$data = this.data) !== null && _this$data !== void 0 && _this$data.members && Array.isArray(this.data.members)) {\n                                        members = this.data.members;\n                                    } // Return a list of members\n                                    _context5.next = 6;\n                                    return this.getClient().get(this.getClient().baseURL + \"/members\", {\n                                        payload: _objectSpread$6({\n                                            type: type,\n                                            id: id,\n                                            members: members,\n                                            sort: normalizeQuerySort(sort),\n                                            filter_conditions: filterConditions\n                                        }, options)\n                                    });\n                                case 6:\n                                    return _context5.abrupt(\"return\", _context5.sent);\n                                case 7:\n                                case \"end\":\n                                    return _context5.stop();\n                            }\n                        }\n                    }, _callee5, this);\n                }));\n                function queryMembers(_x6) {\n                    return _queryMembers.apply(this, arguments);\n                }\n                return queryMembers;\n            }()\n        },\n        {\n            key: \"sendReaction\",\n            value: function() {\n                var _sendReaction = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee6(messageID, reaction, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee6$(_context6) {\n                        while(1){\n                            switch(_context6.prev = _context6.next){\n                                case 0:\n                                    if (messageID) {\n                                        _context6.next = 2;\n                                        break;\n                                    }\n                                    throw Error(\"Message id is missing\");\n                                case 2:\n                                    if (!(!reaction || Object.keys(reaction).length === 0)) {\n                                        _context6.next = 4;\n                                        break;\n                                    }\n                                    throw Error(\"Reaction object is missing\");\n                                case 4:\n                                    _context6.next = 6;\n                                    return this.getClient().post(this.getClient().baseURL + \"/messages/\".concat(messageID, \"/reaction\"), _objectSpread$6({\n                                        reaction: reaction\n                                    }, options));\n                                case 6:\n                                    return _context6.abrupt(\"return\", _context6.sent);\n                                case 7:\n                                case \"end\":\n                                    return _context6.stop();\n                            }\n                        }\n                    }, _callee6, this);\n                }));\n                function sendReaction(_x7, _x8, _x9) {\n                    return _sendReaction.apply(this, arguments);\n                }\n                return sendReaction;\n            }()\n        },\n        {\n            key: \"deleteReaction\",\n            value: function deleteReaction(messageID, reactionType, user_id) {\n                this._checkInitialized();\n                if (!reactionType || !messageID) {\n                    throw Error(\"Deleting a reaction requires specifying both the message and reaction type\");\n                }\n                var url = this.getClient().baseURL + \"/messages/\".concat(messageID, \"/reaction/\").concat(reactionType); //provided when server side request\n                if (user_id) {\n                    return this.getClient().delete(url, {\n                        user_id: user_id\n                    });\n                }\n                return this.getClient().delete(url, {});\n            }\n        },\n        {\n            key: \"update\",\n            value: function() {\n                var _update2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee7() {\n                    var channelData, updateMessage, options, reserved, _args7 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee7$(_context7) {\n                        while(1){\n                            switch(_context7.prev = _context7.next){\n                                case 0:\n                                    channelData = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};\n                                    updateMessage = _args7.length > 1 ? _args7[1] : undefined;\n                                    options = _args7.length > 2 ? _args7[2] : undefined;\n                                    // Strip out reserved names that will result in API errors.\n                                    reserved = [\n                                        \"config\",\n                                        \"cid\",\n                                        \"created_by\",\n                                        \"id\",\n                                        \"member_count\",\n                                        \"type\",\n                                        \"created_at\",\n                                        \"updated_at\",\n                                        \"last_message_at\",\n                                        \"own_capabilities\"\n                                    ];\n                                    reserved.forEach(function(key) {\n                                        delete channelData[key];\n                                    });\n                                    _context7.next = 7;\n                                    return this._update(_objectSpread$6({\n                                        message: updateMessage,\n                                        data: channelData\n                                    }, options));\n                                case 7:\n                                    return _context7.abrupt(\"return\", _context7.sent);\n                                case 8:\n                                case \"end\":\n                                    return _context7.stop();\n                            }\n                        }\n                    }, _callee7, this);\n                }));\n                function update() {\n                    return _update2.apply(this, arguments);\n                }\n                return update;\n            }()\n        },\n        {\n            key: \"updatePartial\",\n            value: function() {\n                var _updatePartial = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee8(update) {\n                    var _this$data2, _this$data3;\n                    var data, areCapabilitiesChanged;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee8$(_context8) {\n                        while(1){\n                            switch(_context8.prev = _context8.next){\n                                case 0:\n                                    _context8.next = 2;\n                                    return this.getClient().patch(this._channelURL(), update);\n                                case 2:\n                                    data = _context8.sent;\n                                    areCapabilitiesChanged = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(data.channel.own_capabilities || []).sort().join() !== _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(Array.isArray((_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : _this$data2.own_capabilities) ? (_this$data3 = this.data) === null || _this$data3 === void 0 ? void 0 : _this$data3.own_capabilities : []).sort().join();\n                                    this.data = data.channel; // If the capabiltities are changed, we trigger the `capabilities.changed` event.\n                                    if (areCapabilitiesChanged) {\n                                        this.getClient().dispatchEvent({\n                                            type: \"capabilities.changed\",\n                                            cid: this.cid,\n                                            own_capabilities: data.channel.own_capabilities\n                                        });\n                                    }\n                                    return _context8.abrupt(\"return\", data);\n                                case 7:\n                                case \"end\":\n                                    return _context8.stop();\n                            }\n                        }\n                    }, _callee8, this);\n                }));\n                function updatePartial(_x10) {\n                    return _updatePartial.apply(this, arguments);\n                }\n                return updatePartial;\n            }()\n        },\n        {\n            key: \"enableSlowMode\",\n            value: function() {\n                var _enableSlowMode = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee9(coolDownInterval) {\n                    var data;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee9$(_context9) {\n                        while(1){\n                            switch(_context9.prev = _context9.next){\n                                case 0:\n                                    _context9.next = 2;\n                                    return this.getClient().post(this._channelURL(), {\n                                        cooldown: coolDownInterval\n                                    });\n                                case 2:\n                                    data = _context9.sent;\n                                    this.data = data.channel;\n                                    return _context9.abrupt(\"return\", data);\n                                case 5:\n                                case \"end\":\n                                    return _context9.stop();\n                            }\n                        }\n                    }, _callee9, this);\n                }));\n                function enableSlowMode(_x11) {\n                    return _enableSlowMode.apply(this, arguments);\n                }\n                return enableSlowMode;\n            }()\n        },\n        {\n            key: \"disableSlowMode\",\n            value: function() {\n                var _disableSlowMode = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee10() {\n                    var data;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee10$(_context10) {\n                        while(1){\n                            switch(_context10.prev = _context10.next){\n                                case 0:\n                                    _context10.next = 2;\n                                    return this.getClient().post(this._channelURL(), {\n                                        cooldown: 0\n                                    });\n                                case 2:\n                                    data = _context10.sent;\n                                    this.data = data.channel;\n                                    return _context10.abrupt(\"return\", data);\n                                case 5:\n                                case \"end\":\n                                    return _context10.stop();\n                            }\n                        }\n                    }, _callee10, this);\n                }));\n                function disableSlowMode() {\n                    return _disableSlowMode.apply(this, arguments);\n                }\n                return disableSlowMode;\n            }()\n        },\n        {\n            key: \"delete\",\n            value: function() {\n                var _delete2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee11() {\n                    var options, _args11 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee11$(_context11) {\n                        while(1){\n                            switch(_context11.prev = _context11.next){\n                                case 0:\n                                    options = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};\n                                    _context11.next = 3;\n                                    return this.getClient().delete(this._channelURL(), _objectSpread$6({}, options));\n                                case 3:\n                                    return _context11.abrupt(\"return\", _context11.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context11.stop();\n                            }\n                        }\n                    }, _callee11, this);\n                }));\n                function _delete() {\n                    return _delete2.apply(this, arguments);\n                }\n                return _delete;\n            }()\n        },\n        {\n            key: \"truncate\",\n            value: function() {\n                var _truncate = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee12() {\n                    var options, _args12 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee12$(_context12) {\n                        while(1){\n                            switch(_context12.prev = _context12.next){\n                                case 0:\n                                    options = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};\n                                    _context12.next = 3;\n                                    return this.getClient().post(this._channelURL() + \"/truncate\", options);\n                                case 3:\n                                    return _context12.abrupt(\"return\", _context12.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context12.stop();\n                            }\n                        }\n                    }, _callee12, this);\n                }));\n                function truncate() {\n                    return _truncate.apply(this, arguments);\n                }\n                return truncate;\n            }()\n        },\n        {\n            key: \"acceptInvite\",\n            value: function() {\n                var _acceptInvite = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee13() {\n                    var options, _args13 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee13$(_context13) {\n                        while(1){\n                            switch(_context13.prev = _context13.next){\n                                case 0:\n                                    options = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};\n                                    _context13.next = 3;\n                                    return this._update(_objectSpread$6({\n                                        accept_invite: true\n                                    }, options));\n                                case 3:\n                                    return _context13.abrupt(\"return\", _context13.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context13.stop();\n                            }\n                        }\n                    }, _callee13, this);\n                }));\n                function acceptInvite() {\n                    return _acceptInvite.apply(this, arguments);\n                }\n                return acceptInvite;\n            }()\n        },\n        {\n            key: \"rejectInvite\",\n            value: function() {\n                var _rejectInvite = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee14() {\n                    var options, _args14 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee14$(_context14) {\n                        while(1){\n                            switch(_context14.prev = _context14.next){\n                                case 0:\n                                    options = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};\n                                    _context14.next = 3;\n                                    return this._update(_objectSpread$6({\n                                        reject_invite: true\n                                    }, options));\n                                case 3:\n                                    return _context14.abrupt(\"return\", _context14.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context14.stop();\n                            }\n                        }\n                    }, _callee14, this);\n                }));\n                function rejectInvite() {\n                    return _rejectInvite.apply(this, arguments);\n                }\n                return rejectInvite;\n            }()\n        },\n        {\n            key: \"addMembers\",\n            value: function() {\n                var _addMembers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee15(members, message) {\n                    var options, _args15 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee15$(_context15) {\n                        while(1){\n                            switch(_context15.prev = _context15.next){\n                                case 0:\n                                    options = _args15.length > 2 && _args15[2] !== undefined ? _args15[2] : {};\n                                    _context15.next = 3;\n                                    return this._update(_objectSpread$6({\n                                        add_members: members,\n                                        message: message\n                                    }, options));\n                                case 3:\n                                    return _context15.abrupt(\"return\", _context15.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context15.stop();\n                            }\n                        }\n                    }, _callee15, this);\n                }));\n                function addMembers(_x12, _x13) {\n                    return _addMembers.apply(this, arguments);\n                }\n                return addMembers;\n            }()\n        },\n        {\n            key: \"addModerators\",\n            value: function() {\n                var _addModerators = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee16(members, message) {\n                    var options, _args16 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee16$(_context16) {\n                        while(1){\n                            switch(_context16.prev = _context16.next){\n                                case 0:\n                                    options = _args16.length > 2 && _args16[2] !== undefined ? _args16[2] : {};\n                                    _context16.next = 3;\n                                    return this._update(_objectSpread$6({\n                                        add_moderators: members,\n                                        message: message\n                                    }, options));\n                                case 3:\n                                    return _context16.abrupt(\"return\", _context16.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context16.stop();\n                            }\n                        }\n                    }, _callee16, this);\n                }));\n                function addModerators(_x14, _x15) {\n                    return _addModerators.apply(this, arguments);\n                }\n                return addModerators;\n            }()\n        },\n        {\n            key: \"assignRoles\",\n            value: function() {\n                var _assignRoles = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee17(roles, message) {\n                    var options, _args17 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee17$(_context17) {\n                        while(1){\n                            switch(_context17.prev = _context17.next){\n                                case 0:\n                                    options = _args17.length > 2 && _args17[2] !== undefined ? _args17[2] : {};\n                                    _context17.next = 3;\n                                    return this._update(_objectSpread$6({\n                                        assign_roles: roles,\n                                        message: message\n                                    }, options));\n                                case 3:\n                                    return _context17.abrupt(\"return\", _context17.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context17.stop();\n                            }\n                        }\n                    }, _callee17, this);\n                }));\n                function assignRoles(_x16, _x17) {\n                    return _assignRoles.apply(this, arguments);\n                }\n                return assignRoles;\n            }()\n        },\n        {\n            key: \"inviteMembers\",\n            value: function() {\n                var _inviteMembers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee18(members, message) {\n                    var options, _args18 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee18$(_context18) {\n                        while(1){\n                            switch(_context18.prev = _context18.next){\n                                case 0:\n                                    options = _args18.length > 2 && _args18[2] !== undefined ? _args18[2] : {};\n                                    _context18.next = 3;\n                                    return this._update(_objectSpread$6({\n                                        invites: members,\n                                        message: message\n                                    }, options));\n                                case 3:\n                                    return _context18.abrupt(\"return\", _context18.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context18.stop();\n                            }\n                        }\n                    }, _callee18, this);\n                }));\n                function inviteMembers(_x18, _x19) {\n                    return _inviteMembers.apply(this, arguments);\n                }\n                return inviteMembers;\n            }()\n        },\n        {\n            key: \"removeMembers\",\n            value: function() {\n                var _removeMembers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee19(members, message) {\n                    var options, _args19 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee19$(_context19) {\n                        while(1){\n                            switch(_context19.prev = _context19.next){\n                                case 0:\n                                    options = _args19.length > 2 && _args19[2] !== undefined ? _args19[2] : {};\n                                    _context19.next = 3;\n                                    return this._update(_objectSpread$6({\n                                        remove_members: members,\n                                        message: message\n                                    }, options));\n                                case 3:\n                                    return _context19.abrupt(\"return\", _context19.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context19.stop();\n                            }\n                        }\n                    }, _callee19, this);\n                }));\n                function removeMembers(_x20, _x21) {\n                    return _removeMembers.apply(this, arguments);\n                }\n                return removeMembers;\n            }()\n        },\n        {\n            key: \"demoteModerators\",\n            value: function() {\n                var _demoteModerators = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee20(members, message) {\n                    var options, _args20 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee20$(_context20) {\n                        while(1){\n                            switch(_context20.prev = _context20.next){\n                                case 0:\n                                    options = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : {};\n                                    _context20.next = 3;\n                                    return this._update(_objectSpread$6({\n                                        demote_moderators: members,\n                                        message: message\n                                    }, options));\n                                case 3:\n                                    return _context20.abrupt(\"return\", _context20.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context20.stop();\n                            }\n                        }\n                    }, _callee20, this);\n                }));\n                function demoteModerators(_x22, _x23) {\n                    return _demoteModerators.apply(this, arguments);\n                }\n                return demoteModerators;\n            }()\n        },\n        {\n            key: \"_update\",\n            value: function() {\n                var _update3 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee21(payload) {\n                    var data;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee21$(_context21) {\n                        while(1){\n                            switch(_context21.prev = _context21.next){\n                                case 0:\n                                    _context21.next = 2;\n                                    return this.getClient().post(this._channelURL(), payload);\n                                case 2:\n                                    data = _context21.sent;\n                                    this.data = data.channel;\n                                    return _context21.abrupt(\"return\", data);\n                                case 5:\n                                case \"end\":\n                                    return _context21.stop();\n                            }\n                        }\n                    }, _callee21, this);\n                }));\n                function _update(_x24) {\n                    return _update3.apply(this, arguments);\n                }\n                return _update;\n            }()\n        },\n        {\n            key: \"mute\",\n            value: function() {\n                var _mute = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee22() {\n                    var opts, _args22 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee22$(_context22) {\n                        while(1){\n                            switch(_context22.prev = _context22.next){\n                                case 0:\n                                    opts = _args22.length > 0 && _args22[0] !== undefined ? _args22[0] : {};\n                                    _context22.next = 3;\n                                    return this.getClient().post(this.getClient().baseURL + \"/moderation/mute/channel\", _objectSpread$6({\n                                        channel_cid: this.cid\n                                    }, opts));\n                                case 3:\n                                    return _context22.abrupt(\"return\", _context22.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context22.stop();\n                            }\n                        }\n                    }, _callee22, this);\n                }));\n                function mute() {\n                    return _mute.apply(this, arguments);\n                }\n                return mute;\n            }()\n        },\n        {\n            key: \"unmute\",\n            value: function() {\n                var _unmute = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee23() {\n                    var opts, _args23 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee23$(_context23) {\n                        while(1){\n                            switch(_context23.prev = _context23.next){\n                                case 0:\n                                    opts = _args23.length > 0 && _args23[0] !== undefined ? _args23[0] : {};\n                                    _context23.next = 3;\n                                    return this.getClient().post(this.getClient().baseURL + \"/moderation/unmute/channel\", _objectSpread$6({\n                                        channel_cid: this.cid\n                                    }, opts));\n                                case 3:\n                                    return _context23.abrupt(\"return\", _context23.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context23.stop();\n                            }\n                        }\n                    }, _callee23, this);\n                }));\n                function unmute() {\n                    return _unmute.apply(this, arguments);\n                }\n                return unmute;\n            }()\n        },\n        {\n            key: \"muteStatus\",\n            value: function muteStatus() {\n                this._checkInitialized();\n                return this.getClient()._muteStatus(this.cid);\n            }\n        },\n        {\n            key: \"sendAction\",\n            value: function sendAction(messageID, formData) {\n                this._checkInitialized();\n                if (!messageID) {\n                    throw Error(\"Message id is missing\");\n                }\n                return this.getClient().post(this.getClient().baseURL + \"/messages/\".concat(messageID, \"/action\"), {\n                    message_id: messageID,\n                    form_data: formData,\n                    id: this.id,\n                    type: this.type\n                });\n            }\n        },\n        {\n            key: \"keystroke\",\n            value: function() {\n                var _keystroke = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee24(parent_id, options) {\n                    var _this$getConfig;\n                    var now, diff;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee24$(_context24) {\n                        while(1){\n                            switch(_context24.prev = _context24.next){\n                                case 0:\n                                    if ((_this$getConfig = this.getConfig()) !== null && _this$getConfig !== void 0 && _this$getConfig.typing_events) {\n                                        _context24.next = 2;\n                                        break;\n                                    }\n                                    return _context24.abrupt(\"return\");\n                                case 2:\n                                    now = new Date();\n                                    diff = this.lastTypingEvent && now.getTime() - this.lastTypingEvent.getTime();\n                                    this.lastKeyStroke = now;\n                                    this.isTyping = true; // send a typing.start every 2 seconds\n                                    if (!(diff === null || diff > 2000)) {\n                                        _context24.next = 10;\n                                        break;\n                                    }\n                                    this.lastTypingEvent = new Date();\n                                    _context24.next = 10;\n                                    return this.sendEvent(_objectSpread$6({\n                                        type: \"typing.start\",\n                                        parent_id: parent_id\n                                    }, options || {}));\n                                case 10:\n                                case \"end\":\n                                    return _context24.stop();\n                            }\n                        }\n                    }, _callee24, this);\n                }));\n                function keystroke(_x25, _x26) {\n                    return _keystroke.apply(this, arguments);\n                }\n                return keystroke;\n            }()\n        },\n        {\n            key: \"stopTyping\",\n            value: function() {\n                var _stopTyping = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee25(parent_id, options) {\n                    var _this$getConfig2;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee25$(_context25) {\n                        while(1){\n                            switch(_context25.prev = _context25.next){\n                                case 0:\n                                    if ((_this$getConfig2 = this.getConfig()) !== null && _this$getConfig2 !== void 0 && _this$getConfig2.typing_events) {\n                                        _context25.next = 2;\n                                        break;\n                                    }\n                                    return _context25.abrupt(\"return\");\n                                case 2:\n                                    this.lastTypingEvent = null;\n                                    this.isTyping = false;\n                                    _context25.next = 6;\n                                    return this.sendEvent(_objectSpread$6({\n                                        type: \"typing.stop\",\n                                        parent_id: parent_id\n                                    }, options || {}));\n                                case 6:\n                                case \"end\":\n                                    return _context25.stop();\n                            }\n                        }\n                    }, _callee25, this);\n                }));\n                function stopTyping(_x27, _x28) {\n                    return _stopTyping.apply(this, arguments);\n                }\n                return stopTyping;\n            }()\n        },\n        {\n            key: \"lastMessage\",\n            value: function lastMessage() {\n                // get last 5 messages, sort, return the latest\n                // get a slice of the last 5\n                var min = this.state.latestMessages.length - 5;\n                if (min < 0) {\n                    min = 0;\n                }\n                var max = this.state.latestMessages.length + 1;\n                var messageSlice = this.state.latestMessages.slice(min, max); // sort by pk desc\n                messageSlice.sort(function(a, b) {\n                    return b.created_at.getTime() - a.created_at.getTime();\n                });\n                return messageSlice[0];\n            }\n        },\n        {\n            key: \"markRead\",\n            value: function() {\n                var _markRead = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee26() {\n                    var _this$getConfig3;\n                    var data, _args26 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee26$(_context26) {\n                        while(1){\n                            switch(_context26.prev = _context26.next){\n                                case 0:\n                                    data = _args26.length > 0 && _args26[0] !== undefined ? _args26[0] : {};\n                                    this._checkInitialized();\n                                    if (!(!((_this$getConfig3 = this.getConfig()) !== null && _this$getConfig3 !== void 0 && _this$getConfig3.read_events) && !this.getClient()._isUsingServerAuth())) {\n                                        _context26.next = 4;\n                                        break;\n                                    }\n                                    return _context26.abrupt(\"return\", Promise.resolve(null));\n                                case 4:\n                                    _context26.next = 6;\n                                    return this.getClient().post(this._channelURL() + \"/read\", _objectSpread$6({}, data));\n                                case 6:\n                                    return _context26.abrupt(\"return\", _context26.sent);\n                                case 7:\n                                case \"end\":\n                                    return _context26.stop();\n                            }\n                        }\n                    }, _callee26, this);\n                }));\n                function markRead() {\n                    return _markRead.apply(this, arguments);\n                }\n                return markRead;\n            }()\n        },\n        {\n            key: \"markUnread\",\n            value: function() {\n                var _markUnread = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee27(data) {\n                    var _this$getConfig4;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee27$(_context27) {\n                        while(1){\n                            switch(_context27.prev = _context27.next){\n                                case 0:\n                                    this._checkInitialized();\n                                    if (!(!((_this$getConfig4 = this.getConfig()) !== null && _this$getConfig4 !== void 0 && _this$getConfig4.read_events) && !this.getClient()._isUsingServerAuth())) {\n                                        _context27.next = 3;\n                                        break;\n                                    }\n                                    return _context27.abrupt(\"return\", Promise.resolve(null));\n                                case 3:\n                                    _context27.next = 5;\n                                    return this.getClient().post(this._channelURL() + \"/unread\", _objectSpread$6({}, data));\n                                case 5:\n                                    return _context27.abrupt(\"return\", _context27.sent);\n                                case 6:\n                                case \"end\":\n                                    return _context27.stop();\n                            }\n                        }\n                    }, _callee27, this);\n                }));\n                function markUnread(_x29) {\n                    return _markUnread.apply(this, arguments);\n                }\n                return markUnread;\n            }()\n        },\n        {\n            key: \"clean\",\n            value: function clean() {\n                if (this.lastKeyStroke) {\n                    var now = new Date();\n                    var diff = now.getTime() - this.lastKeyStroke.getTime();\n                    if (diff > 1000 && this.isTyping) {\n                        logChatPromiseExecution(this.stopTyping(), \"stop typing event\");\n                    }\n                }\n                this.state.clean();\n            }\n        },\n        {\n            key: \"watch\",\n            value: function() {\n                var _watch = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee28(options) {\n                    var defaultOptions, combined, state;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee28$(_context28) {\n                        while(1){\n                            switch(_context28.prev = _context28.next){\n                                case 0:\n                                    defaultOptions = {\n                                        state: true,\n                                        watch: true,\n                                        presence: false\n                                    }; // Make sure we wait for the connect promise if there is a pending one\n                                    _context28.next = 3;\n                                    return this.getClient().wsPromise;\n                                case 3:\n                                    if (!this.getClient()._hasConnectionID()) {\n                                        defaultOptions.watch = false;\n                                    }\n                                    combined = _objectSpread$6(_objectSpread$6({}, defaultOptions), options);\n                                    _context28.next = 7;\n                                    return this.query(combined, \"latest\");\n                                case 7:\n                                    state = _context28.sent;\n                                    this.initialized = true;\n                                    this.data = state.channel;\n                                    this._client.logger(\"info\", \"channel:watch() - started watching channel \".concat(this.cid), {\n                                        tags: [\n                                            \"channel\"\n                                        ],\n                                        channel: this\n                                    });\n                                    return _context28.abrupt(\"return\", state);\n                                case 12:\n                                case \"end\":\n                                    return _context28.stop();\n                            }\n                        }\n                    }, _callee28, this);\n                }));\n                function watch(_x30) {\n                    return _watch.apply(this, arguments);\n                }\n                return watch;\n            }()\n        },\n        {\n            key: \"stopWatching\",\n            value: function() {\n                var _stopWatching = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee29() {\n                    var response;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee29$(_context29) {\n                        while(1){\n                            switch(_context29.prev = _context29.next){\n                                case 0:\n                                    _context29.next = 2;\n                                    return this.getClient().post(this._channelURL() + \"/stop-watching\", {});\n                                case 2:\n                                    response = _context29.sent;\n                                    this._client.logger(\"info\", \"channel:watch() - stopped watching channel \".concat(this.cid), {\n                                        tags: [\n                                            \"channel\"\n                                        ],\n                                        channel: this\n                                    });\n                                    return _context29.abrupt(\"return\", response);\n                                case 5:\n                                case \"end\":\n                                    return _context29.stop();\n                            }\n                        }\n                    }, _callee29, this);\n                }));\n                function stopWatching() {\n                    return _stopWatching.apply(this, arguments);\n                }\n                return stopWatching;\n            }()\n        },\n        {\n            key: \"getReplies\",\n            value: function() {\n                var _getReplies = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee30(parent_id, options) {\n                    var data;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee30$(_context30) {\n                        while(1){\n                            switch(_context30.prev = _context30.next){\n                                case 0:\n                                    _context30.next = 2;\n                                    return this.getClient().get(this.getClient().baseURL + \"/messages/\".concat(parent_id, \"/replies\"), _objectSpread$6({}, options));\n                                case 2:\n                                    data = _context30.sent;\n                                    // add any messages to our thread state\n                                    if (data.messages) {\n                                        this.state.addMessagesSorted(data.messages);\n                                    }\n                                    return _context30.abrupt(\"return\", data);\n                                case 5:\n                                case \"end\":\n                                    return _context30.stop();\n                            }\n                        }\n                    }, _callee30, this);\n                }));\n                function getReplies(_x31, _x32) {\n                    return _getReplies.apply(this, arguments);\n                }\n                return getReplies;\n            }()\n        },\n        {\n            key: \"getPinnedMessages\",\n            value: function() {\n                var _getPinnedMessages = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee31(options) {\n                    var sort, _args31 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee31$(_context31) {\n                        while(1){\n                            switch(_context31.prev = _context31.next){\n                                case 0:\n                                    sort = _args31.length > 1 && _args31[1] !== undefined ? _args31[1] : [];\n                                    _context31.next = 3;\n                                    return this.getClient().get(this.getClient().baseURL + \"/channels/\".concat(this.type, \"/\").concat(this.id, \"/pinned_messages\"), {\n                                        payload: _objectSpread$6(_objectSpread$6({}, options), {}, {\n                                            sort: normalizeQuerySort(sort)\n                                        })\n                                    });\n                                case 3:\n                                    return _context31.abrupt(\"return\", _context31.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context31.stop();\n                            }\n                        }\n                    }, _callee31, this);\n                }));\n                function getPinnedMessages(_x33) {\n                    return _getPinnedMessages.apply(this, arguments);\n                }\n                return getPinnedMessages;\n            }()\n        },\n        {\n            key: \"getReactions\",\n            value: function getReactions(message_id, options) {\n                return this.getClient().get(this.getClient().baseURL + \"/messages/\".concat(message_id, \"/reactions\"), _objectSpread$6({}, options));\n            }\n        },\n        {\n            key: \"getMessagesById\",\n            value: function getMessagesById(messageIds) {\n                return this.getClient().get(this._channelURL() + \"/messages\", {\n                    ids: messageIds.join(\",\")\n                });\n            }\n        },\n        {\n            key: \"lastRead\",\n            value: function lastRead() {\n                var _this$getClient = this.getClient(), userID = _this$getClient.userID;\n                if (userID) {\n                    return this.state.read[userID] ? this.state.read[userID].last_read : null;\n                }\n            }\n        },\n        {\n            key: \"_countMessageAsUnread\",\n            value: function _countMessageAsUnread(message) {\n                var _message$user, _message$user2, _this$data4, _this$data5;\n                if (message.shadowed) return false;\n                if (message.silent) return false;\n                if (message.parent_id && !message.show_in_channel) return false;\n                if (((_message$user = message.user) === null || _message$user === void 0 ? void 0 : _message$user.id) === this.getClient().userID) return false;\n                if ((_message$user2 = message.user) !== null && _message$user2 !== void 0 && _message$user2.id && this.getClient().userMuteStatus(message.user.id)) return false;\n                if (message.type === \"system\") return false; // Return false if channel doesn't allow read events.\n                if (Array.isArray((_this$data4 = this.data) === null || _this$data4 === void 0 ? void 0 : _this$data4.own_capabilities) && !((_this$data5 = this.data) !== null && _this$data5 !== void 0 && _this$data5.own_capabilities.includes(\"read-events\"))) return false; // FIXME: see #1265, adjust and count new messages even when the channel is muted\n                if (this.muteStatus().muted) return false;\n                return true;\n            }\n        },\n        {\n            key: \"countUnread\",\n            value: function countUnread(lastRead) {\n                if (!lastRead) return this.state.unreadCount;\n                var count = 0;\n                for(var i = 0; i < this.state.latestMessages.length; i += 1){\n                    var message = this.state.latestMessages[i];\n                    if (message.created_at > lastRead && this._countMessageAsUnread(message)) {\n                        count++;\n                    }\n                }\n                return count;\n            }\n        },\n        {\n            key: \"countUnreadMentions\",\n            value: function countUnreadMentions() {\n                var lastRead = this.lastRead();\n                var userID = this.getClient().userID;\n                var count = 0;\n                for(var i = 0; i < this.state.latestMessages.length; i += 1){\n                    var _message$mentioned_us;\n                    var message = this.state.latestMessages[i];\n                    if (this._countMessageAsUnread(message) && (!lastRead || message.created_at > lastRead) && (_message$mentioned_us = message.mentioned_users) !== null && _message$mentioned_us !== void 0 && _message$mentioned_us.some(function(user) {\n                        return user.id === userID;\n                    })) {\n                        count++;\n                    }\n                }\n                return count;\n            }\n        },\n        {\n            key: \"query\",\n            value: /**\n     * query - Query the API, get messages, members or other channel fields\n     *\n     * @param {ChannelQueryOptions<StreamChatGenerics>} options The query options\n     * @param {MessageSetType} messageSetToAddToIfDoesNotExist It's possible to load disjunct sets of a channel's messages into state, use `current` to load the initial channel state or if you want to extend the currently displayed messages, use `latest` if you want to load/extend the latest messages, `new` is used for loading a specific message and it's surroundings\n     *\n     * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} Returns a query response\n     */ function() {\n                var _query = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee32(options) {\n                    var _this$data6, _this$data7;\n                    var messageSetToAddToIfDoesNotExist, queryURL, state, membersStr, tempChannelCid, _this$_initializeStat, messageSet, areCapabilitiesChanged, _args32 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee32$(_context32) {\n                        while(1){\n                            switch(_context32.prev = _context32.next){\n                                case 0:\n                                    messageSetToAddToIfDoesNotExist = _args32.length > 1 && _args32[1] !== undefined ? _args32[1] : \"current\";\n                                    _context32.next = 3;\n                                    return this.getClient().wsPromise;\n                                case 3:\n                                    queryURL = \"\".concat(this.getClient().baseURL, \"/channels/\").concat(this.type);\n                                    if (this.id) {\n                                        queryURL += \"/\".concat(this.id);\n                                    }\n                                    _context32.next = 7;\n                                    return this.getClient().post(queryURL + \"/query\", _objectSpread$6({\n                                        data: this._data,\n                                        state: true\n                                    }, options));\n                                case 7:\n                                    state = _context32.sent;\n                                    // update the channel id if it was missing\n                                    if (!this.id) {\n                                        this.id = state.channel.id;\n                                        this.cid = state.channel.cid; // set the channel as active...\n                                        membersStr = state.members.map(function(member) {\n                                            var _member$user;\n                                            return member.user_id || ((_member$user = member.user) === null || _member$user === void 0 ? void 0 : _member$user.id);\n                                        }).sort().join(\",\");\n                                        tempChannelCid = \"\".concat(this.type, \":!members-\").concat(membersStr);\n                                        if (tempChannelCid in this.getClient().activeChannels) {\n                                            // This gets set in `client.channel()` function, when channel is created\n                                            // using members, not id.\n                                            delete this.getClient().activeChannels[tempChannelCid];\n                                        }\n                                        if (!(this.cid in this.getClient().activeChannels)) {\n                                            this.getClient().activeChannels[this.cid] = this;\n                                        }\n                                    }\n                                    this.getClient()._addChannelConfig(state.channel); // add any messages to our channel state\n                                    _this$_initializeStat = this._initializeState(state, messageSetToAddToIfDoesNotExist), messageSet = _this$_initializeStat.messageSet;\n                                    areCapabilitiesChanged = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(state.channel.own_capabilities || []).sort().join() !== _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(Array.isArray((_this$data6 = this.data) === null || _this$data6 === void 0 ? void 0 : _this$data6.own_capabilities) ? (_this$data7 = this.data) === null || _this$data7 === void 0 ? void 0 : _this$data7.own_capabilities : []).sort().join();\n                                    this.data = state.channel;\n                                    this.offlineMode = false;\n                                    if (areCapabilitiesChanged) {\n                                        this.getClient().dispatchEvent({\n                                            type: \"capabilities.changed\",\n                                            cid: this.cid,\n                                            own_capabilities: state.channel.own_capabilities\n                                        });\n                                    }\n                                    this.getClient().dispatchEvent({\n                                        type: \"channels.queried\",\n                                        queriedChannels: {\n                                            channels: [\n                                                state\n                                            ],\n                                            isLatestMessageSet: messageSet.isLatest\n                                        }\n                                    });\n                                    return _context32.abrupt(\"return\", state);\n                                case 17:\n                                case \"end\":\n                                    return _context32.stop();\n                            }\n                        }\n                    }, _callee32, this);\n                }));\n                function query(_x34) {\n                    return _query.apply(this, arguments);\n                }\n                return query;\n            }()\n        },\n        {\n            key: \"banUser\",\n            value: function() {\n                var _banUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee33(targetUserID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee33$(_context33) {\n                        while(1){\n                            switch(_context33.prev = _context33.next){\n                                case 0:\n                                    this._checkInitialized();\n                                    _context33.next = 3;\n                                    return this.getClient().banUser(targetUserID, _objectSpread$6(_objectSpread$6({}, options), {}, {\n                                        type: this.type,\n                                        id: this.id\n                                    }));\n                                case 3:\n                                    return _context33.abrupt(\"return\", _context33.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context33.stop();\n                            }\n                        }\n                    }, _callee33, this);\n                }));\n                function banUser(_x35, _x36) {\n                    return _banUser.apply(this, arguments);\n                }\n                return banUser;\n            }()\n        },\n        {\n            key: \"hide\",\n            value: function() {\n                var _hide = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee34() {\n                    var userId, clearHistory, _args34 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee34$(_context34) {\n                        while(1){\n                            switch(_context34.prev = _context34.next){\n                                case 0:\n                                    userId = _args34.length > 0 && _args34[0] !== undefined ? _args34[0] : null;\n                                    clearHistory = _args34.length > 1 && _args34[1] !== undefined ? _args34[1] : false;\n                                    this._checkInitialized();\n                                    _context34.next = 5;\n                                    return this.getClient().post(\"\".concat(this._channelURL(), \"/hide\"), {\n                                        user_id: userId,\n                                        clear_history: clearHistory\n                                    });\n                                case 5:\n                                    return _context34.abrupt(\"return\", _context34.sent);\n                                case 6:\n                                case \"end\":\n                                    return _context34.stop();\n                            }\n                        }\n                    }, _callee34, this);\n                }));\n                function hide() {\n                    return _hide.apply(this, arguments);\n                }\n                return hide;\n            }()\n        },\n        {\n            key: \"show\",\n            value: function() {\n                var _show = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee35() {\n                    var userId, _args35 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee35$(_context35) {\n                        while(1){\n                            switch(_context35.prev = _context35.next){\n                                case 0:\n                                    userId = _args35.length > 0 && _args35[0] !== undefined ? _args35[0] : null;\n                                    this._checkInitialized();\n                                    _context35.next = 4;\n                                    return this.getClient().post(\"\".concat(this._channelURL(), \"/show\"), {\n                                        user_id: userId\n                                    });\n                                case 4:\n                                    return _context35.abrupt(\"return\", _context35.sent);\n                                case 5:\n                                case \"end\":\n                                    return _context35.stop();\n                            }\n                        }\n                    }, _callee35, this);\n                }));\n                function show() {\n                    return _show.apply(this, arguments);\n                }\n                return show;\n            }()\n        },\n        {\n            key: \"unbanUser\",\n            value: function() {\n                var _unbanUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee36(targetUserID) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee36$(_context36) {\n                        while(1){\n                            switch(_context36.prev = _context36.next){\n                                case 0:\n                                    this._checkInitialized();\n                                    _context36.next = 3;\n                                    return this.getClient().unbanUser(targetUserID, {\n                                        type: this.type,\n                                        id: this.id\n                                    });\n                                case 3:\n                                    return _context36.abrupt(\"return\", _context36.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context36.stop();\n                            }\n                        }\n                    }, _callee36, this);\n                }));\n                function unbanUser(_x37) {\n                    return _unbanUser.apply(this, arguments);\n                }\n                return unbanUser;\n            }()\n        },\n        {\n            key: \"shadowBan\",\n            value: function() {\n                var _shadowBan = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee37(targetUserID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee37$(_context37) {\n                        while(1){\n                            switch(_context37.prev = _context37.next){\n                                case 0:\n                                    this._checkInitialized();\n                                    _context37.next = 3;\n                                    return this.getClient().shadowBan(targetUserID, _objectSpread$6(_objectSpread$6({}, options), {}, {\n                                        type: this.type,\n                                        id: this.id\n                                    }));\n                                case 3:\n                                    return _context37.abrupt(\"return\", _context37.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context37.stop();\n                            }\n                        }\n                    }, _callee37, this);\n                }));\n                function shadowBan(_x38, _x39) {\n                    return _shadowBan.apply(this, arguments);\n                }\n                return shadowBan;\n            }()\n        },\n        {\n            key: \"removeShadowBan\",\n            value: function() {\n                var _removeShadowBan = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee38(targetUserID) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee38$(_context38) {\n                        while(1){\n                            switch(_context38.prev = _context38.next){\n                                case 0:\n                                    this._checkInitialized();\n                                    _context38.next = 3;\n                                    return this.getClient().removeShadowBan(targetUserID, {\n                                        type: this.type,\n                                        id: this.id\n                                    });\n                                case 3:\n                                    return _context38.abrupt(\"return\", _context38.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context38.stop();\n                            }\n                        }\n                    }, _callee38, this);\n                }));\n                function removeShadowBan(_x40) {\n                    return _removeShadowBan.apply(this, arguments);\n                }\n                return removeShadowBan;\n            }()\n        },\n        {\n            key: \"createCall\",\n            value: function() {\n                var _createCall = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee39(options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee39$(_context39) {\n                        while(1){\n                            switch(_context39.prev = _context39.next){\n                                case 0:\n                                    _context39.next = 2;\n                                    return this.getClient().post(this._channelURL() + \"/call\", options);\n                                case 2:\n                                    return _context39.abrupt(\"return\", _context39.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context39.stop();\n                            }\n                        }\n                    }, _callee39, this);\n                }));\n                function createCall(_x41) {\n                    return _createCall.apply(this, arguments);\n                }\n                return createCall;\n            }()\n        },\n        {\n            key: \"on\",\n            value: function on(callbackOrString, callbackOrNothing) {\n                var _this2 = this;\n                var key = callbackOrNothing ? callbackOrString : \"all\";\n                var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n                if (!(key in this.listeners)) {\n                    this.listeners[key] = [];\n                }\n                this._client.logger(\"info\", \"Attaching listener for \".concat(key, \" event on channel \").concat(this.cid), {\n                    tags: [\n                        \"event\",\n                        \"channel\"\n                    ],\n                    channel: this\n                });\n                this.listeners[key].push(callback);\n                return {\n                    unsubscribe: function unsubscribe() {\n                        _this2._client.logger(\"info\", \"Removing listener for \".concat(key, \" event from channel \").concat(_this2.cid), {\n                            tags: [\n                                \"event\",\n                                \"channel\"\n                            ],\n                            channel: _this2\n                        });\n                        _this2.listeners[key] = _this2.listeners[key].filter(function(el) {\n                            return el !== callback;\n                        });\n                    }\n                };\n            }\n        },\n        {\n            key: \"off\",\n            value: function off(callbackOrString, callbackOrNothing) {\n                var key = callbackOrNothing ? callbackOrString : \"all\";\n                var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n                if (!(key in this.listeners)) {\n                    this.listeners[key] = [];\n                }\n                this._client.logger(\"info\", \"Removing listener for \".concat(key, \" event from channel \").concat(this.cid), {\n                    tags: [\n                        \"event\",\n                        \"channel\"\n                    ],\n                    channel: this\n                });\n                this.listeners[key] = this.listeners[key].filter(function(value) {\n                    return value !== callback;\n                });\n            } // eslint-disable-next-line sonarjs/cognitive-complexity\n        },\n        {\n            key: \"_handleChannelEvent\",\n            value: function _handleChannelEvent(event) {\n                var _event$user, _event$user2, _event$user3, _event$user5, _event$user6, _event$channel, _event$member, _event$user9, _event$user11, _channelState$members, _event$user12, _channelState$members2;\n                var channel = this;\n                this._client.logger(\"info\", \"channel:_handleChannelEvent - Received event of type { \".concat(event.type, \" } on \").concat(this.cid), {\n                    tags: [\n                        \"event\",\n                        \"channel\"\n                    ],\n                    channel: this\n                });\n                var channelState = channel.state;\n                switch(event.type){\n                    case \"typing.start\":\n                        if ((_event$user = event.user) !== null && _event$user !== void 0 && _event$user.id) {\n                            channelState.typing[event.user.id] = event;\n                        }\n                        break;\n                    case \"typing.stop\":\n                        if ((_event$user2 = event.user) !== null && _event$user2 !== void 0 && _event$user2.id) {\n                            delete channelState.typing[event.user.id];\n                        }\n                        break;\n                    case \"message.read\":\n                        if ((_event$user3 = event.user) !== null && _event$user3 !== void 0 && _event$user3.id && event.created_at) {\n                            var _event$user4, _this$getClient$user;\n                            channelState.read[event.user.id] = {\n                                last_read: new Date(event.created_at),\n                                last_read_message_id: event.last_read_message_id,\n                                user: event.user,\n                                unread_messages: 0\n                            };\n                            if (((_event$user4 = event.user) === null || _event$user4 === void 0 ? void 0 : _event$user4.id) === ((_this$getClient$user = this.getClient().user) === null || _this$getClient$user === void 0 ? void 0 : _this$getClient$user.id)) {\n                                channelState.unreadCount = 0;\n                            }\n                        }\n                        break;\n                    case \"user.watching.start\":\n                    case \"user.updated\":\n                        if ((_event$user5 = event.user) !== null && _event$user5 !== void 0 && _event$user5.id) {\n                            channelState.watchers[event.user.id] = event.user;\n                        }\n                        break;\n                    case \"user.watching.stop\":\n                        if ((_event$user6 = event.user) !== null && _event$user6 !== void 0 && _event$user6.id) {\n                            delete channelState.watchers[event.user.id];\n                        }\n                        break;\n                    case \"message.deleted\":\n                        if (event.message) {\n                            this._extendEventWithOwnReactions(event);\n                            if (event.hard_delete) channelState.removeMessage(event.message);\n                            else channelState.addMessageSorted(event.message, false, false);\n                            channelState.removeQuotedMessageReferences(event.message);\n                            if (event.message.pinned) {\n                                channelState.removePinnedMessage(event.message);\n                            }\n                        }\n                        break;\n                    case \"message.new\":\n                        if (event.message) {\n                            var _event$user7, _this$getClient$user2, _event$user8;\n                            /* if message belongs to current user, always assume timestamp is changed to filter it out and add again to avoid duplication */ var ownMessage = ((_event$user7 = event.user) === null || _event$user7 === void 0 ? void 0 : _event$user7.id) === ((_this$getClient$user2 = this.getClient().user) === null || _this$getClient$user2 === void 0 ? void 0 : _this$getClient$user2.id);\n                            var isThreadMessage = event.message.parent_id && !event.message.show_in_channel;\n                            if (this.state.isUpToDate || isThreadMessage) {\n                                channelState.addMessageSorted(event.message, ownMessage);\n                            }\n                            if (event.message.pinned) {\n                                channelState.addPinnedMessage(event.message);\n                            } // do not increase the unread count - the back-end does not increase the count neither in the following cases:\n                            // 1. the message is mine\n                            // 2. the message is a thread reply from any user\n                            var preventUnreadCountUpdate = ownMessage || isThreadMessage;\n                            if (preventUnreadCountUpdate) break;\n                            if ((_event$user8 = event.user) !== null && _event$user8 !== void 0 && _event$user8.id) {\n                                for(var userId in channelState.read){\n                                    if (userId === event.user.id) {\n                                        channelState.read[event.user.id] = {\n                                            last_read: new Date(event.created_at),\n                                            user: event.user,\n                                            unread_messages: 0\n                                        };\n                                    } else {\n                                        channelState.read[userId].unread_messages += 1;\n                                    }\n                                }\n                            }\n                            if (this._countMessageAsUnread(event.message)) {\n                                channelState.unreadCount = channelState.unreadCount + 1;\n                            }\n                        }\n                        break;\n                    case \"message.updated\":\n                    case \"message.undeleted\":\n                        if (event.message) {\n                            this._extendEventWithOwnReactions(event);\n                            channelState.addMessageSorted(event.message, false, false);\n                            if (event.message.pinned) {\n                                channelState.addPinnedMessage(event.message);\n                            } else {\n                                channelState.removePinnedMessage(event.message);\n                            }\n                        }\n                        break;\n                    case \"channel.truncated\":\n                        if ((_event$channel = event.channel) !== null && _event$channel !== void 0 && _event$channel.truncated_at) {\n                            var truncatedAt = +new Date(event.channel.truncated_at);\n                            channelState.messageSets.forEach(function(messageSet, messageSetIndex) {\n                                messageSet.messages.forEach(function(_ref2) {\n                                    var createdAt = _ref2.created_at, id = _ref2.id;\n                                    if (truncatedAt > +createdAt) channelState.removeMessage({\n                                        id: id,\n                                        messageSetIndex: messageSetIndex\n                                    });\n                                });\n                            });\n                            channelState.pinnedMessages.forEach(function(_ref3) {\n                                var id = _ref3.id, createdAt = _ref3.created_at;\n                                if (truncatedAt > +createdAt) channelState.removePinnedMessage({\n                                    id: id\n                                });\n                            });\n                        } else {\n                            channelState.clearMessages();\n                        }\n                        channelState.unreadCount = 0; // system messages don't increment unread counts\n                        if (event.message) {\n                            channelState.addMessageSorted(event.message);\n                            if (event.message.pinned) {\n                                channelState.addPinnedMessage(event.message);\n                            }\n                        }\n                        break;\n                    case \"member.added\":\n                    case \"member.updated\":\n                        if ((_event$member = event.member) !== null && _event$member !== void 0 && _event$member.user_id) {\n                            channelState.members[event.member.user_id] = event.member;\n                        }\n                        break;\n                    case \"member.removed\":\n                        if ((_event$user9 = event.user) !== null && _event$user9 !== void 0 && _event$user9.id) {\n                            delete channelState.members[event.user.id];\n                        }\n                        break;\n                    case \"notification.mark_unread\":\n                        {\n                            var _event$user10, _this$getClient$user3, _event$unread_message;\n                            var _ownMessage = ((_event$user10 = event.user) === null || _event$user10 === void 0 ? void 0 : _event$user10.id) === ((_this$getClient$user3 = this.getClient().user) === null || _this$getClient$user3 === void 0 ? void 0 : _this$getClient$user3.id);\n                            if (!(_ownMessage && event.user)) break;\n                            var unreadCount = (_event$unread_message = event.unread_messages) !== null && _event$unread_message !== void 0 ? _event$unread_message : 0;\n                            channelState.read[event.user.id] = {\n                                first_unread_message_id: event.first_unread_message_id,\n                                last_read: new Date(event.last_read_at),\n                                last_read_message_id: event.last_read_message_id,\n                                user: event.user,\n                                unread_messages: unreadCount\n                            };\n                            channelState.unreadCount = unreadCount;\n                            break;\n                        }\n                    case \"channel.updated\":\n                        if (event.channel) {\n                            var _event$channel2, _channel$data, _event$channel$hidden, _event$channel3, _channel$data2, _event$channel$own_ca, _event$channel4, _channel$data3;\n                            var isFrozenChanged = ((_event$channel2 = event.channel) === null || _event$channel2 === void 0 ? void 0 : _event$channel2.frozen) !== undefined && event.channel.frozen !== ((_channel$data = channel.data) === null || _channel$data === void 0 ? void 0 : _channel$data.frozen);\n                            if (isFrozenChanged) {\n                                this.query({\n                                    state: false,\n                                    messages: {\n                                        limit: 0\n                                    },\n                                    watchers: {\n                                        limit: 0\n                                    }\n                                });\n                            }\n                            channel.data = _objectSpread$6(_objectSpread$6({}, event.channel), {}, {\n                                hidden: (_event$channel$hidden = (_event$channel3 = event.channel) === null || _event$channel3 === void 0 ? void 0 : _event$channel3.hidden) !== null && _event$channel$hidden !== void 0 ? _event$channel$hidden : (_channel$data2 = channel.data) === null || _channel$data2 === void 0 ? void 0 : _channel$data2.hidden,\n                                own_capabilities: (_event$channel$own_ca = (_event$channel4 = event.channel) === null || _event$channel4 === void 0 ? void 0 : _event$channel4.own_capabilities) !== null && _event$channel$own_ca !== void 0 ? _event$channel$own_ca : (_channel$data3 = channel.data) === null || _channel$data3 === void 0 ? void 0 : _channel$data3.own_capabilities\n                            });\n                        }\n                        break;\n                    case \"reaction.new\":\n                        if (event.message && event.reaction) {\n                            event.message = channelState.addReaction(event.reaction, event.message);\n                        }\n                        break;\n                    case \"reaction.deleted\":\n                        if (event.reaction) {\n                            event.message = channelState.removeReaction(event.reaction, event.message);\n                        }\n                        break;\n                    case \"reaction.updated\":\n                        if (event.reaction) {\n                            // assuming reaction.updated is only called if enforce_unique is true\n                            event.message = channelState.addReaction(event.reaction, event.message, true);\n                        }\n                        break;\n                    case \"channel.hidden\":\n                        channel.data = _objectSpread$6(_objectSpread$6({}, channel.data), {}, {\n                            hidden: true\n                        });\n                        if (event.clear_history) {\n                            channelState.clearMessages();\n                        }\n                        break;\n                    case \"channel.visible\":\n                        channel.data = _objectSpread$6(_objectSpread$6({}, channel.data), {}, {\n                            hidden: false\n                        });\n                        break;\n                    case \"user.banned\":\n                        if (!((_event$user11 = event.user) !== null && _event$user11 !== void 0 && _event$user11.id)) break;\n                        channelState.members[event.user.id] = _objectSpread$6(_objectSpread$6({}, channelState.members[event.user.id] || {}), {}, {\n                            shadow_banned: !!event.shadow,\n                            banned: !event.shadow,\n                            user: _objectSpread$6(_objectSpread$6({}, ((_channelState$members = channelState.members[event.user.id]) === null || _channelState$members === void 0 ? void 0 : _channelState$members.user) || {}), event.user)\n                        });\n                        break;\n                    case \"user.unbanned\":\n                        if (!((_event$user12 = event.user) !== null && _event$user12 !== void 0 && _event$user12.id)) break;\n                        channelState.members[event.user.id] = _objectSpread$6(_objectSpread$6({}, channelState.members[event.user.id] || {}), {}, {\n                            shadow_banned: false,\n                            banned: false,\n                            user: _objectSpread$6(_objectSpread$6({}, ((_channelState$members2 = channelState.members[event.user.id]) === null || _channelState$members2 === void 0 ? void 0 : _channelState$members2.user) || {}), event.user)\n                        });\n                        break;\n                } // any event can send over the online count\n                if (event.watcher_count !== undefined) {\n                    channel.state.watcher_count = event.watcher_count;\n                }\n            }\n        },\n        {\n            key: \"_checkInitialized\",\n            value: function _checkInitialized() {\n                if (!this.initialized && !this.offlineMode && !this.getClient()._isUsingServerAuth()) {\n                    throw Error(\"Channel \".concat(this.cid, \" hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve\"));\n                }\n            } // eslint-disable-next-line sonarjs/cognitive-complexity\n        },\n        {\n            key: \"_initializeState\",\n            value: function _initializeState(state) {\n                var messageSetToAddToIfDoesNotExist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"latest\";\n                var _this$getClient2 = this.getClient(), clientState = _this$getClient2.state, user = _this$getClient2.user, userID = _this$getClient2.userID; // add the Users\n                if (state.members) {\n                    var _iterator = _createForOfIteratorHelper$3(state.members), _step;\n                    try {\n                        for(_iterator.s(); !(_step = _iterator.n()).done;){\n                            var member = _step.value;\n                            if (member.user) {\n                                clientState.updateUserReference(member.user, this.cid);\n                            }\n                        }\n                    } catch (err) {\n                        _iterator.e(err);\n                    } finally{\n                        _iterator.f();\n                    }\n                }\n                this.state.membership = state.membership || {};\n                var messages = state.messages || [];\n                if (!this.state.messages) {\n                    this.state.initMessages();\n                }\n                var _this$state$addMessag = this.state.addMessagesSorted(messages, false, true, true, messageSetToAddToIfDoesNotExist), messageSet = _this$state$addMessag.messageSet;\n                if (!this.state.pinnedMessages) {\n                    this.state.pinnedMessages = [];\n                }\n                this.state.addPinnedMessages(state.pinned_messages || []);\n                if (state.pending_messages) {\n                    this.state.pending_messages = state.pending_messages;\n                }\n                if (state.watcher_count !== undefined) {\n                    this.state.watcher_count = state.watcher_count;\n                } // convert the arrays into objects for easier syncing...\n                if (state.watchers) {\n                    var _iterator2 = _createForOfIteratorHelper$3(state.watchers), _step2;\n                    try {\n                        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){\n                            var watcher = _step2.value;\n                            if (watcher) {\n                                clientState.updateUserReference(watcher, this.cid);\n                                this.state.watchers[watcher.id] = watcher;\n                            }\n                        }\n                    } catch (err) {\n                        _iterator2.e(err);\n                    } finally{\n                        _iterator2.f();\n                    }\n                } // initialize read state to last message or current time if the channel is empty\n                // if the user is a member, this value will be overwritten later on otherwise this ensures\n                // that everything up to this point is not marked as unread\n                if (userID != null) {\n                    var last_read = this.state.last_message_at || new Date();\n                    if (user) {\n                        this.state.read[user.id] = {\n                            user: user,\n                            last_read: last_read,\n                            unread_messages: 0\n                        };\n                    }\n                } // apply read state if part of the state\n                if (state.read) {\n                    var _iterator3 = _createForOfIteratorHelper$3(state.read), _step3;\n                    try {\n                        for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){\n                            var _read$unread_messages;\n                            var read = _step3.value;\n                            this.state.read[read.user.id] = {\n                                last_read: new Date(read.last_read),\n                                last_read_message_id: read.last_read_message_id,\n                                unread_messages: (_read$unread_messages = read.unread_messages) !== null && _read$unread_messages !== void 0 ? _read$unread_messages : 0,\n                                user: read.user\n                            };\n                            if (read.user.id === (user === null || user === void 0 ? void 0 : user.id)) {\n                                this.state.unreadCount = this.state.read[read.user.id].unread_messages;\n                            }\n                        }\n                    } catch (err) {\n                        _iterator3.e(err);\n                    } finally{\n                        _iterator3.f();\n                    }\n                }\n                if (state.members) {\n                    this.state.members = state.members.reduce(function(acc, member) {\n                        if (member.user) {\n                            acc[member.user.id] = member;\n                        }\n                        return acc;\n                    }, {});\n                }\n                return {\n                    messageSet: messageSet\n                };\n            }\n        },\n        {\n            key: \"_extendEventWithOwnReactions\",\n            value: function _extendEventWithOwnReactions(event) {\n                if (!event.message) {\n                    return;\n                }\n                var message = this.state.findMessage(event.message.id, event.message.parent_id);\n                if (message) {\n                    event.message.own_reactions = message.own_reactions;\n                }\n            }\n        },\n        {\n            key: \"_disconnect\",\n            value: function _disconnect() {\n                this._client.logger(\"info\", \"channel:disconnect() - Disconnecting the channel \".concat(this.cid), {\n                    tags: [\n                        \"connection\",\n                        \"channel\"\n                    ],\n                    channel: this\n                });\n                this.disconnected = true;\n                this.state.setIsUpToDate(false);\n            }\n        }\n    ]);\n    return Channel;\n}();\nfunction _createForOfIteratorHelper$2(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            var F = function F() {};\n            return {\n                s: F,\n                n: function n() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function e(_e) {\n                    throw _e;\n                },\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true, didErr = false, err;\n    return {\n        s: function s() {\n            it = it.call(o);\n        },\n        n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function e(_e2) {\n            didErr = true;\n            err = _e2;\n        },\n        f: function f() {\n            try {\n                if (!normalCompletion && it.return != null) it.return();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nfunction _unsupportedIterableToArray$2(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray$2(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);\n}\nfunction _arrayLikeToArray$2(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\n/**\n * ClientState - A container class for the client state.\n */ var ClientState = /*#__PURE__*/ function() {\n    function ClientState() {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, ClientState);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"users\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"userChannelReferences\", void 0);\n        // show the status for a certain user...\n        // ie online, offline etc\n        this.users = {}; // store which channels contain references to the specified user...\n        this.userChannelReferences = {};\n    }\n    _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(ClientState, [\n        {\n            key: \"updateUsers\",\n            value: function updateUsers(users) {\n                var _iterator = _createForOfIteratorHelper$2(users), _step;\n                try {\n                    for(_iterator.s(); !(_step = _iterator.n()).done;){\n                        var user = _step.value;\n                        this.updateUser(user);\n                    }\n                } catch (err) {\n                    _iterator.e(err);\n                } finally{\n                    _iterator.f();\n                }\n            }\n        },\n        {\n            key: \"updateUser\",\n            value: function updateUser(user) {\n                if (user != null) {\n                    this.users[user.id] = user;\n                }\n            }\n        },\n        {\n            key: \"updateUserReference\",\n            value: function updateUserReference(user, channelID) {\n                if (user == null) {\n                    return;\n                }\n                this.updateUser(user);\n                if (!this.userChannelReferences[user.id]) {\n                    this.userChannelReferences[user.id] = {};\n                }\n                this.userChannelReferences[user.id][channelID] = true;\n            }\n        },\n        {\n            key: \"deleteAllChannelReference\",\n            value: function deleteAllChannelReference(channelID) {\n                for(var userID in this.userChannelReferences){\n                    delete this.userChannelReferences[userID][channelID];\n                }\n            }\n        }\n    ]);\n    return ClientState;\n}();\nfunction ownKeys$5(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$5(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$5(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$5(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar InsightMetrics = function InsightMetrics() {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, InsightMetrics);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connectionStartTimestamp\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"wsConsecutiveFailures\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"wsTotalFailures\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"instanceClientId\", void 0);\n    this.connectionStartTimestamp = null;\n    this.wsTotalFailures = 0;\n    this.wsConsecutiveFailures = 0;\n    this.instanceClientId = randomId();\n};\n/**\n * postInsights is not supposed to be used by end users directly within chat application, and thus is kept isolated\n * from all the client/connection code/logic.\n *\n * @param insightType\n * @param insights\n */ var postInsights = /*#__PURE__*/ function() {\n    var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee(insightType, insights) {\n        var maxAttempts, i;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n            while(1){\n                switch(_context.prev = _context.next){\n                    case 0:\n                        maxAttempts = 3;\n                        i = 0;\n                    case 2:\n                        if (!(i < maxAttempts)) {\n                            _context.next = 17;\n                            break;\n                        }\n                        _context.prev = 3;\n                        _context.next = 6;\n                        return axios__WEBPACK_IMPORTED_MODULE_21__[\"default\"].post(\"https://chat-insights.getstream.io/insights/\".concat(insightType), insights);\n                    case 6:\n                        _context.next = 13;\n                        break;\n                    case 8:\n                        _context.prev = 8;\n                        _context.t0 = _context[\"catch\"](3);\n                        _context.next = 12;\n                        return sleep((i + 1) * 3000);\n                    case 12:\n                        return _context.abrupt(\"continue\", 14);\n                    case 13:\n                        return _context.abrupt(\"break\", 17);\n                    case 14:\n                        i++;\n                        _context.next = 2;\n                        break;\n                    case 17:\n                    case \"end\":\n                        return _context.stop();\n                }\n            }\n        }, _callee, null, [\n            [\n                3,\n                8\n            ]\n        ]);\n    }));\n    return function postInsights(_x, _x2) {\n        return _ref.apply(this, arguments);\n    };\n}();\nfunction buildWsFatalInsight(connection, event) {\n    return _objectSpread$5(_objectSpread$5({}, event), buildWsBaseInsight(connection));\n}\nfunction buildWsBaseInsight(connection) {\n    var _connection$ws, _navigator, _navigator2;\n    var client = connection.client;\n    return {\n        ready_state: (_connection$ws = connection.ws) === null || _connection$ws === void 0 ? void 0 : _connection$ws.readyState,\n        url: connection._buildUrl(),\n        api_key: client.key,\n        start_ts: client.insightMetrics.connectionStartTimestamp,\n        end_ts: new Date().getTime(),\n        auth_type: client.getAuthType(),\n        token: client.tokenManager.token,\n        user_id: client.userID,\n        user_details: client._user,\n        device: client.options.device,\n        client_id: connection.connectionID,\n        ws_details: connection.ws,\n        ws_consecutive_failures: client.insightMetrics.wsConsecutiveFailures,\n        ws_total_failures: client.insightMetrics.wsTotalFailures,\n        request_id: connection.requestID,\n        online: typeof navigator !== \"undefined\" ? (_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.onLine : null,\n        user_agent: typeof navigator !== \"undefined\" ? (_navigator2 = navigator) === null || _navigator2 === void 0 ? void 0 : _navigator2.userAgent : null,\n        instance_client_id: client.insightMetrics.instanceClientId\n    };\n}\nfunction buildWsSuccessAfterFailureInsight(connection) {\n    return buildWsBaseInsight(connection);\n}\nfunction ownKeys$4(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$4(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$4(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$4(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\n// Type guards to check WebSocket error type\nvar isCloseEvent = function isCloseEvent(res) {\n    return res.code !== undefined;\n};\nvar isErrorEvent = function isErrorEvent(res) {\n    return res.error !== undefined;\n};\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */ var StableWSConnection = /*#__PURE__*/ function() {\n    // global from constructor\n    // local vars\n    function StableWSConnection(_ref) {\n        var _this = this;\n        var client = _ref.client;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, StableWSConnection);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"client\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connectionID\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connectionOpen\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"consecutiveFailures\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"pingInterval\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"healthCheckTimeoutRef\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"isConnecting\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"isDisconnected\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"isHealthy\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"isResolved\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"lastEvent\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connectionCheckTimeout\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connectionCheckTimeoutRef\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"rejectPromise\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"requestID\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"resolvePromise\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"totalFailures\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"ws\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"wsID\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_buildUrl\", function() {\n            var qs = encodeURIComponent(_this.client._buildWSPayload(_this.requestID));\n            var token = _this.client.tokenManager.getToken();\n            return \"\".concat(_this.client.wsBaseURL, \"/connect?json=\").concat(qs, \"&api_key=\").concat(_this.client.key, \"&authorization=\").concat(token, \"&stream-auth-type=\").concat(_this.client.getAuthType(), \"&X-Stream-Client=\").concat(_this.client.getUserAgent());\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"onlineStatusChanged\", function(event) {\n            if (event.type === \"offline\") {\n                // mark the connection as down\n                _this._log(\"onlineStatusChanged() - Status changing to offline\");\n                _this._setHealth(false);\n            } else if (event.type === \"online\") {\n                // retry right now...\n                // We check this.isHealthy, not sure if it's always\n                // smart to create a new WS connection if the old one is still up and running.\n                // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n                _this._log(\"onlineStatusChanged() - Status changing to online. isHealthy: \".concat(_this.isHealthy));\n                if (!_this.isHealthy) {\n                    _this._reconnect({\n                        interval: 10\n                    });\n                }\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"onopen\", function(wsID) {\n            if (_this.wsID !== wsID) return;\n            _this._log(\"onopen() - onopen callback\", {\n                wsID: wsID\n            });\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"onmessage\", function(wsID, event) {\n            if (_this.wsID !== wsID) return;\n            _this._log(\"onmessage() - onmessage callback\", {\n                event: event,\n                wsID: wsID\n            });\n            var data = typeof event.data === \"string\" ? JSON.parse(event.data) : null; // we wait till the first message before we consider the connection open..\n            // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n            // after that a ws.onclose..\n            if (!_this.isResolved && data) {\n                var _this$resolvePromise;\n                _this.isResolved = true;\n                if (data.error) {\n                    var _this$rejectPromise;\n                    (_this$rejectPromise = _this.rejectPromise) === null || _this$rejectPromise === void 0 ? void 0 : _this$rejectPromise.call(_this, _this._errorFromWSEvent(data, false));\n                    return;\n                }\n                (_this$resolvePromise = _this.resolvePromise) === null || _this$resolvePromise === void 0 ? void 0 : _this$resolvePromise.call(_this, data);\n                _this._setHealth(true);\n            } // trigger the event..\n            _this.lastEvent = new Date();\n            if (data && data.type === \"health.check\") {\n                _this.scheduleNextPing();\n            }\n            _this.client.handleEvent(event);\n            _this.scheduleConnectionCheck();\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"onclose\", function(wsID, event) {\n            if (_this.wsID !== wsID) return;\n            _this._log(\"onclose() - onclose callback - \" + event.code, {\n                event: event,\n                wsID: wsID\n            });\n            if (event.code === chatCodes.WS_CLOSED_SUCCESS) {\n                var _this$rejectPromise2;\n                // this is a permanent error raised by stream..\n                // usually caused by invalid auth details\n                var error = new Error(\"WS connection reject with error \".concat(event.reason));\n                error.reason = event.reason;\n                error.code = event.code;\n                error.wasClean = event.wasClean;\n                error.target = event.target;\n                (_this$rejectPromise2 = _this.rejectPromise) === null || _this$rejectPromise2 === void 0 ? void 0 : _this$rejectPromise2.call(_this, error);\n                _this._log(\"onclose() - WS connection reject with error \".concat(event.reason), {\n                    event: event\n                });\n            } else {\n                var _this$rejectPromise3;\n                _this.consecutiveFailures += 1;\n                _this.totalFailures += 1;\n                _this._setHealth(false);\n                _this.isConnecting = false;\n                (_this$rejectPromise3 = _this.rejectPromise) === null || _this$rejectPromise3 === void 0 ? void 0 : _this$rejectPromise3.call(_this, _this._errorFromWSEvent(event));\n                _this._log(\"onclose() - WS connection closed. Calling reconnect ...\", {\n                    event: event\n                }); // reconnect if its an abnormal failure\n                _this._reconnect();\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"onerror\", function(wsID, event) {\n            var _this$rejectPromise4;\n            if (_this.wsID !== wsID) return;\n            _this.consecutiveFailures += 1;\n            _this.totalFailures += 1;\n            _this._setHealth(false);\n            _this.isConnecting = false;\n            (_this$rejectPromise4 = _this.rejectPromise) === null || _this$rejectPromise4 === void 0 ? void 0 : _this$rejectPromise4.call(_this, _this._errorFromWSEvent(event));\n            _this._log(\"onerror() - WS connection resulted into error\", {\n                event: event\n            });\n            _this._reconnect();\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_setHealth\", function(healthy) {\n            if (healthy === _this.isHealthy) return;\n            _this.isHealthy = healthy;\n            if (_this.isHealthy) {\n                _this.client.dispatchEvent({\n                    type: \"connection.changed\",\n                    online: _this.isHealthy\n                });\n                return;\n            } // we're offline, wait few seconds and fire and event if still offline\n            setTimeout(function() {\n                if (_this.isHealthy) return;\n                _this.client.dispatchEvent({\n                    type: \"connection.changed\",\n                    online: _this.isHealthy\n                });\n            }, 5000);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_errorFromWSEvent\", function(event) {\n            var isWSFailure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n            var code;\n            var statusCode;\n            var message;\n            if (isCloseEvent(event)) {\n                code = event.code;\n                statusCode = \"unknown\";\n                message = event.reason;\n            }\n            if (isErrorEvent(event)) {\n                code = event.error.code;\n                statusCode = event.error.StatusCode;\n                message = event.error.message;\n            } // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.\n            _this._log(\"_errorFromWSEvent() - WS failed with code \".concat(code), {\n                event: event\n            }, \"warn\");\n            var error = new Error(\"WS failed with code \".concat(code, \" and reason - \").concat(message));\n            error.code = code;\n            /**\n       * StatusCode does not exist on any event types but has been left\n       * as is to preserve JS functionality during the TS implementation\n       */ error.StatusCode = statusCode;\n            error.isWSFailure = isWSFailure;\n            return error;\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_setupConnectionPromise\", function() {\n            _this.isResolved = false;\n            /** a promise that is resolved once ws.open is called */ _this.connectionOpen = new Promise(function(resolve, reject) {\n                _this.resolvePromise = resolve;\n                _this.rejectPromise = reject;\n            });\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"scheduleNextPing\", function() {\n            if (_this.healthCheckTimeoutRef) {\n                clearTimeout(_this.healthCheckTimeoutRef);\n            } // 30 seconds is the recommended interval (messenger uses this)\n            _this.healthCheckTimeoutRef = setTimeout(function() {\n                // send the healthcheck.., server replies with a health check event\n                var data = [\n                    {\n                        type: \"health.check\",\n                        client_id: _this.client.clientID\n                    }\n                ]; // try to send on the connection\n                try {\n                    var _this$ws;\n                    (_this$ws = _this.ws) === null || _this$ws === void 0 ? void 0 : _this$ws.send(JSON.stringify(data));\n                } catch (e) {}\n            }, _this.pingInterval);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"scheduleConnectionCheck\", function() {\n            if (_this.connectionCheckTimeoutRef) {\n                clearTimeout(_this.connectionCheckTimeoutRef);\n            }\n            _this.connectionCheckTimeoutRef = setTimeout(function() {\n                var now = new Date();\n                if (_this.lastEvent && now.getTime() - _this.lastEvent.getTime() > _this.connectionCheckTimeout) {\n                    _this._log(\"scheduleConnectionCheck - going to reconnect\");\n                    _this._setHealth(false);\n                    _this._reconnect();\n                }\n            }, _this.connectionCheckTimeout);\n        });\n        /** StreamChat client */ this.client = client;\n        /** consecutive failures influence the duration of the timeout */ this.consecutiveFailures = 0;\n        /** keep track of the total number of failures */ this.totalFailures = 0;\n        /** We only make 1 attempt to reconnect at the same time.. */ this.isConnecting = false;\n        /** To avoid reconnect if client is disconnected */ this.isDisconnected = false;\n        /** Boolean that indicates if the connection promise is resolved */ this.isResolved = false;\n        /** Boolean that indicates if we have a working connection to the server */ this.isHealthy = false;\n        /** Incremented when a new WS connection is made */ this.wsID = 1;\n        /** Store the last event time for health checks */ this.lastEvent = null;\n        /** Send a health check message every 25 seconds */ this.pingInterval = 25 * 1000;\n        this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n        addConnectionEventListeners(this.onlineStatusChanged);\n    }\n    _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(StableWSConnection, [\n        {\n            key: \"_log\",\n            value: function _log(msg) {\n                var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"info\";\n                this.client.logger(level, \"connection:\" + msg, _objectSpread$4({\n                    tags: [\n                        \"connection\"\n                    ]\n                }, extra));\n            }\n        },\n        {\n            key: \"setClient\",\n            value: function setClient(client) {\n                this.client = client;\n            }\n        },\n        {\n            key: \"connect\",\n            value: function() {\n                var _connect2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee() {\n                    var timeout, healthCheck, _args = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n                        while(1){\n                            switch(_context.prev = _context.next){\n                                case 0:\n                                    timeout = _args.length > 0 && _args[0] !== undefined ? _args[0] : 15000;\n                                    if (!this.isConnecting) {\n                                        _context.next = 3;\n                                        break;\n                                    }\n                                    throw Error(\"You've called connect twice, can only attempt 1 connection at the time\");\n                                case 3:\n                                    this.isDisconnected = false;\n                                    _context.prev = 4;\n                                    _context.next = 7;\n                                    return this._connect();\n                                case 7:\n                                    healthCheck = _context.sent;\n                                    this.consecutiveFailures = 0;\n                                    this._log(\"connect() - Established ws connection with healthcheck: \".concat(healthCheck));\n                                    _context.next = 23;\n                                    break;\n                                case 12:\n                                    _context.prev = 12;\n                                    _context.t0 = _context[\"catch\"](4);\n                                    this.isHealthy = false;\n                                    this.consecutiveFailures += 1;\n                                    if (!(_context.t0.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic())) {\n                                        _context.next = 21;\n                                        break;\n                                    }\n                                    this._log(\"connect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n                                    this._reconnect({\n                                        refreshToken: true\n                                    });\n                                    _context.next = 23;\n                                    break;\n                                case 21:\n                                    if (_context.t0.isWSFailure) {\n                                        _context.next = 23;\n                                        break;\n                                    }\n                                    throw new Error(JSON.stringify({\n                                        code: _context.t0.code,\n                                        StatusCode: _context.t0.StatusCode,\n                                        message: _context.t0.message,\n                                        isWSFailure: _context.t0.isWSFailure\n                                    }));\n                                case 23:\n                                    _context.next = 25;\n                                    return this._waitForHealthy(timeout);\n                                case 25:\n                                    return _context.abrupt(\"return\", _context.sent);\n                                case 26:\n                                case \"end\":\n                                    return _context.stop();\n                            }\n                        }\n                    }, _callee, this, [\n                        [\n                            4,\n                            12\n                        ]\n                    ]);\n                }));\n                function connect() {\n                    return _connect2.apply(this, arguments);\n                }\n                return connect;\n            }()\n        },\n        {\n            key: \"_waitForHealthy\",\n            value: function() {\n                var _waitForHealthy2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee4() {\n                    var _this2 = this;\n                    var timeout, _args4 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee4$(_context4) {\n                        while(1){\n                            switch(_context4.prev = _context4.next){\n                                case 0:\n                                    timeout = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 15000;\n                                    return _context4.abrupt(\"return\", Promise.race([\n                                        _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee2() {\n                                            var interval, i;\n                                            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee2$(_context2) {\n                                                while(1){\n                                                    switch(_context2.prev = _context2.next){\n                                                        case 0:\n                                                            interval = 50; // ms\n                                                            i = 0;\n                                                        case 2:\n                                                            if (!(i <= timeout)) {\n                                                                _context2.next = 18;\n                                                                break;\n                                                            }\n                                                            _context2.prev = 3;\n                                                            _context2.next = 6;\n                                                            return _this2.connectionOpen;\n                                                        case 6:\n                                                            return _context2.abrupt(\"return\", _context2.sent);\n                                                        case 9:\n                                                            _context2.prev = 9;\n                                                            _context2.t0 = _context2[\"catch\"](3);\n                                                            if (!(i === timeout)) {\n                                                                _context2.next = 13;\n                                                                break;\n                                                            }\n                                                            throw new Error(JSON.stringify({\n                                                                code: _context2.t0.code,\n                                                                StatusCode: _context2.t0.StatusCode,\n                                                                message: _context2.t0.message,\n                                                                isWSFailure: _context2.t0.isWSFailure\n                                                            }));\n                                                        case 13:\n                                                            _context2.next = 15;\n                                                            return sleep(interval);\n                                                        case 15:\n                                                            i += interval;\n                                                            _context2.next = 2;\n                                                            break;\n                                                        case 18:\n                                                        case \"end\":\n                                                            return _context2.stop();\n                                                    }\n                                                }\n                                            }, _callee2, null, [\n                                                [\n                                                    3,\n                                                    9\n                                                ]\n                                            ]);\n                                        }))(),\n                                        _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee3() {\n                                            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee3$(_context3) {\n                                                while(1){\n                                                    switch(_context3.prev = _context3.next){\n                                                        case 0:\n                                                            _context3.next = 2;\n                                                            return sleep(timeout);\n                                                        case 2:\n                                                            _this2.isConnecting = false;\n                                                            throw new Error(JSON.stringify({\n                                                                code: \"\",\n                                                                StatusCode: \"\",\n                                                                message: \"initial WS connection could not be established\",\n                                                                isWSFailure: true\n                                                            }));\n                                                        case 4:\n                                                        case \"end\":\n                                                            return _context3.stop();\n                                                    }\n                                                }\n                                            }, _callee3);\n                                        }))()\n                                    ]));\n                                case 2:\n                                case \"end\":\n                                    return _context4.stop();\n                            }\n                        }\n                    }, _callee4);\n                }));\n                function _waitForHealthy() {\n                    return _waitForHealthy2.apply(this, arguments);\n                }\n                return _waitForHealthy;\n            }()\n        },\n        {\n            key: \"disconnect\",\n            value: /**\n     * disconnect - Disconnect the connection and doesn't recover...\n     *\n     */ function disconnect(timeout) {\n                var _this3 = this;\n                this._log(\"disconnect() - Closing the websocket connection for wsID \".concat(this.wsID));\n                this.wsID += 1;\n                this.isConnecting = false;\n                this.isDisconnected = true; // start by removing all the listeners\n                if (this.healthCheckTimeoutRef) {\n                    clearInterval(this.healthCheckTimeoutRef);\n                }\n                if (this.connectionCheckTimeoutRef) {\n                    clearInterval(this.connectionCheckTimeoutRef);\n                }\n                removeConnectionEventListeners(this.onlineStatusChanged);\n                this.isHealthy = false; // remove ws handlers...\n                if (this.ws && this.ws.removeAllListeners) {\n                    this.ws.removeAllListeners();\n                }\n                var isClosedPromise; // and finally close...\n                // Assigning to local here because we will remove it from this before the\n                // promise resolves.\n                var ws = this.ws;\n                if (ws && ws.close && ws.readyState === ws.OPEN) {\n                    isClosedPromise = new Promise(function(resolve) {\n                        var onclose = function onclose(event) {\n                            _this3._log(\"disconnect() - resolving isClosedPromise \".concat(event ? \"with\" : \"without\", \" close frame\"), {\n                                event: event\n                            });\n                            resolve();\n                        };\n                        ws.onclose = onclose; // In case we don't receive close frame websocket server in time,\n                        // lets not wait for more than 1 seconds.\n                        setTimeout(onclose, timeout != null ? timeout : 1000);\n                    });\n                    this._log(\"disconnect() - Manually closed connection by calling client.disconnect()\");\n                    ws.close(chatCodes.WS_CLOSED_SUCCESS, \"Manually closed connection by calling client.disconnect()\");\n                } else {\n                    this._log(\"disconnect() - ws connection doesn't exist or it is already closed.\");\n                    isClosedPromise = Promise.resolve();\n                }\n                delete this.ws;\n                return isClosedPromise;\n            }\n        },\n        {\n            key: \"_connect\",\n            value: function() {\n                var _connect3 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee5() {\n                    var isTokenReady, wsURL, response, insights;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee5$(_context5) {\n                        while(1){\n                            switch(_context5.prev = _context5.next){\n                                case 0:\n                                    if (!(this.isConnecting || this.isDisconnected && this.client.options.enableWSFallback)) {\n                                        _context5.next = 2;\n                                        break;\n                                    }\n                                    return _context5.abrupt(\"return\");\n                                case 2:\n                                    // simply ignore _connect if it's currently trying to connect\n                                    this.isConnecting = true;\n                                    this.requestID = randomId();\n                                    this.client.insightMetrics.connectionStartTimestamp = new Date().getTime();\n                                    isTokenReady = false;\n                                    _context5.prev = 6;\n                                    this._log(\"_connect() - waiting for token\");\n                                    _context5.next = 10;\n                                    return this.client.tokenManager.tokenReady();\n                                case 10:\n                                    isTokenReady = true;\n                                    _context5.next = 15;\n                                    break;\n                                case 13:\n                                    _context5.prev = 13;\n                                    _context5.t0 = _context5[\"catch\"](6);\n                                case 15:\n                                    _context5.prev = 15;\n                                    if (isTokenReady) {\n                                        _context5.next = 20;\n                                        break;\n                                    }\n                                    this._log(\"_connect() - tokenProvider failed before, so going to retry\");\n                                    _context5.next = 20;\n                                    return this.client.tokenManager.loadToken();\n                                case 20:\n                                    this._setupConnectionPromise();\n                                    wsURL = this._buildUrl();\n                                    this._log(\"_connect() - Connecting to \".concat(wsURL), {\n                                        wsURL: wsURL,\n                                        requestID: this.requestID\n                                    });\n                                    this.ws = new (isomorphic_ws__WEBPACK_IMPORTED_MODULE_13___default())(wsURL);\n                                    this.ws.onopen = this.onopen.bind(this, this.wsID);\n                                    this.ws.onclose = this.onclose.bind(this, this.wsID);\n                                    this.ws.onerror = this.onerror.bind(this, this.wsID);\n                                    this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n                                    _context5.next = 30;\n                                    return this.connectionOpen;\n                                case 30:\n                                    response = _context5.sent;\n                                    this.isConnecting = false;\n                                    if (!response) {\n                                        _context5.next = 36;\n                                        break;\n                                    }\n                                    this.connectionID = response.connection_id;\n                                    if (this.client.insightMetrics.wsConsecutiveFailures > 0 && this.client.options.enableInsights) {\n                                        postInsights(\"ws_success_after_failure\", buildWsSuccessAfterFailureInsight(this));\n                                        this.client.insightMetrics.wsConsecutiveFailures = 0;\n                                    }\n                                    return _context5.abrupt(\"return\", response);\n                                case 36:\n                                    _context5.next = 44;\n                                    break;\n                                case 38:\n                                    _context5.prev = 38;\n                                    _context5.t1 = _context5[\"catch\"](15);\n                                    this.isConnecting = false;\n                                    this._log(\"_connect() - Error - \", _context5.t1);\n                                    if (this.client.options.enableInsights) {\n                                        this.client.insightMetrics.wsConsecutiveFailures++;\n                                        this.client.insightMetrics.wsTotalFailures++;\n                                        insights = buildWsFatalInsight(this, convertErrorToJson(_context5.t1));\n                                        postInsights === null || postInsights === void 0 ? void 0 : postInsights(\"ws_fatal\", insights);\n                                    }\n                                    throw _context5.t1;\n                                case 44:\n                                case \"end\":\n                                    return _context5.stop();\n                            }\n                        }\n                    }, _callee5, this, [\n                        [\n                            6,\n                            13\n                        ],\n                        [\n                            15,\n                            38\n                        ]\n                    ]);\n                }));\n                function _connect() {\n                    return _connect3.apply(this, arguments);\n                }\n                return _connect;\n            }()\n        },\n        {\n            key: \"_reconnect\",\n            value: function() {\n                var _reconnect2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee6() {\n                    var options, interval, _args6 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee6$(_context6) {\n                        while(1){\n                            switch(_context6.prev = _context6.next){\n                                case 0:\n                                    options = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};\n                                    this._log(\"_reconnect() - Initiating the reconnect\"); // only allow 1 connection at the time\n                                    if (!(this.isConnecting || this.isHealthy)) {\n                                        _context6.next = 5;\n                                        break;\n                                    }\n                                    this._log(\"_reconnect() - Abort (1) since already connecting or healthy\");\n                                    return _context6.abrupt(\"return\");\n                                case 5:\n                                    // reconnect in case of on error or on close\n                                    // also reconnect if the health check cycle fails\n                                    interval = options.interval;\n                                    if (!interval) {\n                                        interval = retryInterval(this.consecutiveFailures);\n                                    } // reconnect, or try again after a little while...\n                                    _context6.next = 9;\n                                    return sleep(interval);\n                                case 9:\n                                    if (!(this.isConnecting || this.isHealthy)) {\n                                        _context6.next = 12;\n                                        break;\n                                    }\n                                    this._log(\"_reconnect() - Abort (2) since already connecting or healthy\");\n                                    return _context6.abrupt(\"return\");\n                                case 12:\n                                    if (!(this.isDisconnected && this.client.options.enableWSFallback)) {\n                                        _context6.next = 15;\n                                        break;\n                                    }\n                                    this._log(\"_reconnect() - Abort (3) since disconnect() is called\");\n                                    return _context6.abrupt(\"return\");\n                                case 15:\n                                    this._log(\"_reconnect() - Destroying current WS connection\"); // cleanup the old connection\n                                    this._destroyCurrentWSConnection();\n                                    if (!options.refreshToken) {\n                                        _context6.next = 20;\n                                        break;\n                                    }\n                                    _context6.next = 20;\n                                    return this.client.tokenManager.loadToken();\n                                case 20:\n                                    _context6.prev = 20;\n                                    _context6.next = 23;\n                                    return this._connect();\n                                case 23:\n                                    this._log(\"_reconnect() - Waiting for recoverCallBack\");\n                                    _context6.next = 26;\n                                    return this.client.recoverState();\n                                case 26:\n                                    this._log(\"_reconnect() - Finished recoverCallBack\");\n                                    this.consecutiveFailures = 0;\n                                    _context6.next = 38;\n                                    break;\n                                case 30:\n                                    _context6.prev = 30;\n                                    _context6.t0 = _context6[\"catch\"](20);\n                                    this.isHealthy = false;\n                                    this.consecutiveFailures += 1;\n                                    if (!(_context6.t0.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic())) {\n                                        _context6.next = 37;\n                                        break;\n                                    }\n                                    this._log(\"_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n                                    return _context6.abrupt(\"return\", this._reconnect({\n                                        refreshToken: true\n                                    }));\n                                case 37:\n                                    // reconnect on WS failures, don't reconnect if there is a code bug\n                                    if (_context6.t0.isWSFailure) {\n                                        this._log(\"_reconnect() - WS failure, so going to try to reconnect\");\n                                        this._reconnect();\n                                    }\n                                case 38:\n                                    this._log(\"_reconnect() - == END ==\");\n                                case 39:\n                                case \"end\":\n                                    return _context6.stop();\n                            }\n                        }\n                    }, _callee6, this, [\n                        [\n                            20,\n                            30\n                        ]\n                    ]);\n                }));\n                function _reconnect() {\n                    return _reconnect2.apply(this, arguments);\n                }\n                return _reconnect;\n            }()\n        },\n        {\n            key: \"_destroyCurrentWSConnection\",\n            value: /**\n     * _destroyCurrentWSConnection - Removes the current WS connection\n     *\n     */ function _destroyCurrentWSConnection() {\n                // increment the ID, meaning we will ignore all messages from the old\n                // ws connection from now on.\n                this.wsID += 1;\n                try {\n                    var _this$ws2, _this$ws3;\n                    this === null || this === void 0 ? void 0 : (_this$ws2 = this.ws) === null || _this$ws2 === void 0 ? void 0 : _this$ws2.removeAllListeners();\n                    this === null || this === void 0 ? void 0 : (_this$ws3 = this.ws) === null || _this$ws3 === void 0 ? void 0 : _this$ws3.close();\n                } catch (e) {}\n            }\n        }\n    ]);\n    return StableWSConnection;\n}();\nfunction ownKeys$3(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$3(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$3(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$3(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserToken\n * @memberof signing\n * @private\n * @param {Secret} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {UR} [extraData] - Extra that should be part of the JWT token\n * @param {SignOptions} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */ function JWTUserToken(apiSecret, userId) {\n    var extraData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var jwtOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    if (typeof userId !== \"string\") {\n        throw new TypeError(\"userId should be a string\");\n    }\n    var payload = _objectSpread$3({\n        user_id: userId\n    }, extraData); // make sure we return a clear error when jwt is shimmed (ie. browser build)\n    if ((jsonwebtoken__WEBPACK_IMPORTED_MODULE_14___default()) == null || (jsonwebtoken__WEBPACK_IMPORTED_MODULE_14___default().sign) == null) {\n        throw Error(\"Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.\");\n    }\n    var opts = _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1___default()({\n        algorithm: \"HS256\",\n        noTimestamp: true\n    }, jwtOptions);\n    if (payload.iat) {\n        opts.noTimestamp = false;\n    }\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_14___default().sign(payload, apiSecret, opts);\n}\nfunction JWTServerToken(apiSecret) {\n    var jwtOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var payload = {\n        server: true\n    };\n    var opts = _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1___default()({\n        algorithm: \"HS256\",\n        noTimestamp: true\n    }, jwtOptions);\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_14___default().sign(payload, apiSecret, opts);\n}\nfunction UserFromToken(token) {\n    var fragments = token.split(\".\");\n    if (fragments.length !== 3) {\n        return \"\";\n    }\n    var b64Payload = fragments[1];\n    var payload = decodeBase64(b64Payload);\n    var data = JSON.parse(payload);\n    return data.user_id;\n}\n/**\n *\n * @param {string} userId the id of the user\n * @return {string}\n */ function DevToken(userId) {\n    return [\n        \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\",\n        encodeBase64(JSON.stringify({\n            user_id: userId\n        })),\n        \"devtoken\" // hardcoded signature\n    ].join(\".\");\n}\n/**\n *\n * @param {string | Buffer} body the signed message\n * @param {string} secret the shared secret used to generate the signature (Stream API secret)\n * @param {string} signature the signature to validate\n * @return {boolean}\n */ function CheckSignature(body, secret, signature) {\n    var key = Buffer.from(secret, \"utf8\");\n    var hash = crypto__WEBPACK_IMPORTED_MODULE_15___default().createHmac(\"sha256\", key).update(body).digest(\"hex\");\n    try {\n        return crypto__WEBPACK_IMPORTED_MODULE_15___default().timingSafeEqual(Buffer.from(hash), Buffer.from(signature));\n    } catch (_unused) {\n        return false;\n    }\n}\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */ var TokenManager = /**\n * Constructor\n *\n * @param {Secret} secret\n */ function TokenManager(secret) {\n    var _this = this;\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, TokenManager);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"loadTokenPromise\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"type\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"secret\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"token\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"tokenProvider\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"user\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"setTokenOrProvider\", /*#__PURE__*/ function() {\n        var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee(tokenOrProvider, user) {\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n                while(1){\n                    switch(_context.prev = _context.next){\n                        case 0:\n                            _this.validateToken(tokenOrProvider, user);\n                            _this.user = user;\n                            if (isFunction(tokenOrProvider)) {\n                                _this.tokenProvider = tokenOrProvider;\n                                _this.type = \"provider\";\n                            }\n                            if (typeof tokenOrProvider === \"string\") {\n                                _this.token = tokenOrProvider;\n                                _this.type = \"static\";\n                            }\n                            if (!tokenOrProvider && _this.user && _this.secret) {\n                                _this.token = JWTUserToken(_this.secret, user.id, {}, {});\n                                _this.type = \"static\";\n                            }\n                            _context.next = 7;\n                            return _this.loadToken();\n                        case 7:\n                        case \"end\":\n                            return _context.stop();\n                    }\n                }\n            }, _callee);\n        }));\n        return function(_x, _x2) {\n            return _ref.apply(this, arguments);\n        };\n    }());\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"reset\", function() {\n        _this.token = undefined;\n        _this.user = undefined;\n        _this.loadTokenPromise = null;\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"validateToken\", function(tokenOrProvider, user) {\n        // allow empty token for anon user\n        if (user && user.anon && !tokenOrProvider) return; // Don't allow empty token for non-server side client.\n        if (!_this.secret && !tokenOrProvider) {\n            throw new Error(\"User token can not be empty\");\n        }\n        if (tokenOrProvider && typeof tokenOrProvider !== \"string\" && !isFunction(tokenOrProvider)) {\n            throw new Error(\"user token should either be a string or a function\");\n        }\n        if (typeof tokenOrProvider === \"string\") {\n            // Allow empty token for anonymous users\n            if (user.anon && tokenOrProvider === \"\") return;\n            var tokenUserId = UserFromToken(tokenOrProvider);\n            if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === \"\" || tokenUserId !== user.id)) {\n                throw new Error(\"userToken does not have a user_id or is not matching with user.id\");\n            }\n        }\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"tokenReady\", function() {\n        return _this.loadTokenPromise;\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"loadToken\", function() {\n        // eslint-disable-next-line no-async-promise-executor\n        _this.loadTokenPromise = new Promise(/*#__PURE__*/ function() {\n            var _ref2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee2(resolve, reject) {\n                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee2$(_context2) {\n                    while(1){\n                        switch(_context2.prev = _context2.next){\n                            case 0:\n                                if (!(_this.type === \"static\")) {\n                                    _context2.next = 2;\n                                    break;\n                                }\n                                return _context2.abrupt(\"return\", resolve(_this.token));\n                            case 2:\n                                if (!(_this.tokenProvider && typeof _this.tokenProvider !== \"string\")) {\n                                    _context2.next = 13;\n                                    break;\n                                }\n                                _context2.prev = 3;\n                                _context2.next = 6;\n                                return _this.tokenProvider();\n                            case 6:\n                                _this.token = _context2.sent;\n                                _context2.next = 12;\n                                break;\n                            case 9:\n                                _context2.prev = 9;\n                                _context2.t0 = _context2[\"catch\"](3);\n                                return _context2.abrupt(\"return\", reject(new Error(\"Call to tokenProvider failed with message: \".concat(_context2.t0))));\n                            case 12:\n                                resolve(_this.token);\n                            case 13:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2, null, [\n                    [\n                        3,\n                        9\n                    ]\n                ]);\n            }));\n            return function(_x3, _x4) {\n                return _ref2.apply(this, arguments);\n            };\n        }());\n        return _this.loadTokenPromise;\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"getToken\", function() {\n        if (_this.token) {\n            return _this.token;\n        }\n        if (_this.user && _this.user.anon && !_this.token) {\n            return _this.token;\n        }\n        if (_this.secret) {\n            return JWTServerToken(_this.secret);\n        }\n        throw new Error(\"Both secret and user tokens are not set. Either client.connectUser wasn't called or client.disconnect was called\");\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"isStatic\", function() {\n        return _this.type === \"static\";\n    });\n    this.loadTokenPromise = null;\n    if (secret) {\n        this.secret = secret;\n    }\n    this.type = \"static\";\n    if (this.secret) {\n        this.token = JWTServerToken(this.secret);\n    }\n} /**\n * Set the static string token or token provider.\n * Token provider should return a token string or a promise which resolves to string token.\n *\n * @param {TokenOrProvider} tokenOrProvider\n * @param {UserResponse<StreamChatGenerics>} user\n */ ;\nvar APIErrorCodes = {\n    \"-1\": {\n        name: \"InternalSystemError\",\n        retryable: true\n    },\n    \"2\": {\n        name: \"AccessKeyError\",\n        retryable: false\n    },\n    \"3\": {\n        name: \"AuthenticationFailedError\",\n        retryable: true\n    },\n    \"4\": {\n        name: \"InputError\",\n        retryable: false\n    },\n    \"6\": {\n        name: \"DuplicateUsernameError\",\n        retryable: false\n    },\n    \"9\": {\n        name: \"RateLimitError\",\n        retryable: true\n    },\n    \"16\": {\n        name: \"DoesNotExistError\",\n        retryable: false\n    },\n    \"17\": {\n        name: \"NotAllowedError\",\n        retryable: false\n    },\n    \"18\": {\n        name: \"EventNotSupportedError\",\n        retryable: false\n    },\n    \"19\": {\n        name: \"ChannelFeatureNotSupportedError\",\n        retryable: false\n    },\n    \"20\": {\n        name: \"MessageTooLongError\",\n        retryable: false\n    },\n    \"21\": {\n        name: \"MultipleNestingLevelError\",\n        retryable: false\n    },\n    \"22\": {\n        name: \"PayloadTooBigError\",\n        retryable: false\n    },\n    \"23\": {\n        name: \"RequestTimeoutError\",\n        retryable: true\n    },\n    \"24\": {\n        name: \"MaxHeaderSizeExceededError\",\n        retryable: false\n    },\n    \"40\": {\n        name: \"AuthErrorTokenExpired\",\n        retryable: false\n    },\n    \"41\": {\n        name: \"AuthErrorTokenNotValidYet\",\n        retryable: false\n    },\n    \"42\": {\n        name: \"AuthErrorTokenUsedBeforeIssuedAt\",\n        retryable: false\n    },\n    \"43\": {\n        name: \"AuthErrorTokenSignatureInvalid\",\n        retryable: false\n    },\n    \"44\": {\n        name: \"CustomCommandEndpointMissingError\",\n        retryable: false\n    },\n    \"45\": {\n        name: \"CustomCommandEndpointCallError\",\n        retryable: true\n    },\n    \"46\": {\n        name: \"ConnectionIDNotFoundError\",\n        retryable: false\n    },\n    \"60\": {\n        name: \"CoolDownError\",\n        retryable: true\n    },\n    \"69\": {\n        name: \"ErrWrongRegion\",\n        retryable: false\n    },\n    \"70\": {\n        name: \"ErrQueryChannelPermissions\",\n        retryable: false\n    },\n    \"71\": {\n        name: \"ErrTooManyConnections\",\n        retryable: true\n    },\n    \"99\": {\n        name: \"AppSuspendedError\",\n        retryable: false\n    }\n};\nfunction isAPIError(error) {\n    return error.code !== undefined;\n}\nfunction isErrorRetryable(error) {\n    if (!error.code) return false;\n    var err = APIErrorCodes[\"\".concat(error.code)];\n    if (!err) return false;\n    return err.retryable;\n}\nfunction isConnectionIDError(error) {\n    return error.code === 46; // ConnectionIDNotFoundError\n}\nfunction isWSFailure(err) {\n    if (typeof err.isWSFailure === \"boolean\") {\n        return err.isWSFailure;\n    }\n    try {\n        return JSON.parse(err.message).isWSFailure;\n    } catch (_) {\n        return false;\n    }\n}\nfunction isErrorResponse(res) {\n    return !res.status || res.status < 200 || 300 <= res.status;\n}\nfunction ownKeys$2(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$2(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$2(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nvar ConnectionState;\n(function(ConnectionState) {\n    ConnectionState[\"Closed\"] = \"CLOSED\";\n    ConnectionState[\"Connected\"] = \"CONNECTED\";\n    ConnectionState[\"Connecting\"] = \"CONNECTING\";\n    ConnectionState[\"Disconnected\"] = \"DISCONNECTED\";\n    ConnectionState[\"Init\"] = \"INIT\";\n})(ConnectionState || (ConnectionState = {}));\nvar WSConnectionFallback = /*#__PURE__*/ function() {\n    function WSConnectionFallback(_ref) {\n        var _this = this;\n        var client = _ref.client;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, WSConnectionFallback);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"client\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"state\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"consecutiveFailures\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connectionID\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"cancelToken\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_onlineStatusChanged\", function(event) {\n            _this._log(\"_onlineStatusChanged() - \".concat(event.type));\n            if (event.type === \"offline\") {\n                var _this$cancelToken;\n                _this._setState(ConnectionState.Closed);\n                (_this$cancelToken = _this.cancelToken) === null || _this$cancelToken === void 0 ? void 0 : _this$cancelToken.cancel(\"disconnect() is called\");\n                _this.cancelToken = undefined;\n                return;\n            }\n            if (event.type === \"online\" && _this.state === ConnectionState.Closed) {\n                _this.connect(true);\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_req\", /*#__PURE__*/ function() {\n            var _ref2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee(params, config, retry) {\n                var _this$cancelToken2, res;\n                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n                    while(1){\n                        switch(_context.prev = _context.next){\n                            case 0:\n                                if (!_this.cancelToken && !params.close) {\n                                    _this.cancelToken = axios__WEBPACK_IMPORTED_MODULE_21__[\"default\"].CancelToken.source();\n                                }\n                                _context.prev = 1;\n                                _context.next = 4;\n                                return _this.client.doAxiosRequest(\"get\", _this.client.baseURL.replace(\":3030\", \":8900\") + \"/longpoll\", undefined, {\n                                    config: _objectSpread$2(_objectSpread$2({}, config), {}, {\n                                        cancelToken: (_this$cancelToken2 = _this.cancelToken) === null || _this$cancelToken2 === void 0 ? void 0 : _this$cancelToken2.token\n                                    }),\n                                    params: params\n                                });\n                            case 4:\n                                res = _context.sent;\n                                _this.consecutiveFailures = 0; // always reset in case of no error\n                                return _context.abrupt(\"return\", res);\n                            case 9:\n                                _context.prev = 9;\n                                _context.t0 = _context[\"catch\"](1);\n                                _this.consecutiveFailures += 1;\n                                if (!(retry && isErrorRetryable(_context.t0))) {\n                                    _context.next = 17;\n                                    break;\n                                }\n                                _this._log(\"_req() - Retryable error, retrying request\");\n                                _context.next = 16;\n                                return sleep(retryInterval(_this.consecutiveFailures));\n                            case 16:\n                                return _context.abrupt(\"return\", _this._req(params, config, retry));\n                            case 17:\n                                throw _context.t0;\n                            case 18:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, null, [\n                    [\n                        1,\n                        9\n                    ]\n                ]);\n            }));\n            return function(_x, _x2, _x3) {\n                return _ref2.apply(this, arguments);\n            };\n        }());\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_poll\", /*#__PURE__*/ _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee2() {\n            var _data$events, data, i;\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee2$(_context2) {\n                while(1){\n                    switch(_context2.prev = _context2.next){\n                        case 0:\n                            if (!(_this.state === ConnectionState.Connected)) {\n                                _context2.next = 25;\n                                break;\n                            }\n                            _context2.prev = 1;\n                            _context2.next = 4;\n                            return _this._req({}, {\n                                timeout: 30000\n                            }, true);\n                        case 4:\n                            data = _context2.sent;\n                            // 30s => API responds in 20s if there is no event\n                            if ((_data$events = data.events) !== null && _data$events !== void 0 && _data$events.length) {\n                                for(i = 0; i < data.events.length; i++){\n                                    _this.client.dispatchEvent(data.events[i]);\n                                }\n                            }\n                            _context2.next = 23;\n                            break;\n                        case 8:\n                            _context2.prev = 8;\n                            _context2.t0 = _context2[\"catch\"](1);\n                            if (!axios__WEBPACK_IMPORTED_MODULE_21__[\"default\"].isCancel(_context2.t0)) {\n                                _context2.next = 13;\n                                break;\n                            }\n                            _this._log(\"_poll() - axios canceled request\");\n                            return _context2.abrupt(\"return\");\n                        case 13:\n                            if (!isConnectionIDError(_context2.t0)) {\n                                _context2.next = 18;\n                                break;\n                            }\n                            _this._log(\"_poll() - ConnectionID error, connecting without ID...\");\n                            _this._setState(ConnectionState.Disconnected);\n                            _this.connect(true);\n                            return _context2.abrupt(\"return\");\n                        case 18:\n                            if (!(isAPIError(_context2.t0) && !isErrorRetryable(_context2.t0))) {\n                                _context2.next = 21;\n                                break;\n                            }\n                            _this._setState(ConnectionState.Closed);\n                            return _context2.abrupt(\"return\");\n                        case 21:\n                            _context2.next = 23;\n                            return sleep(retryInterval(_this.consecutiveFailures));\n                        case 23:\n                            _context2.next = 0;\n                            break;\n                        case 25:\n                        case \"end\":\n                            return _context2.stop();\n                    }\n                }\n            }, _callee2, null, [\n                [\n                    1,\n                    8\n                ]\n            ]);\n        })));\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connect\", /*#__PURE__*/ _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee3() {\n            var reconnect, _yield$_this$_req, event, _args3 = arguments;\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee3$(_context3) {\n                while(1){\n                    switch(_context3.prev = _context3.next){\n                        case 0:\n                            reconnect = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : false;\n                            if (!(_this.state === ConnectionState.Connecting)) {\n                                _context3.next = 4;\n                                break;\n                            }\n                            _this._log(\"connect() - connecting already in progress\", {\n                                reconnect: reconnect\n                            }, \"warn\");\n                            return _context3.abrupt(\"return\");\n                        case 4:\n                            if (!(_this.state === ConnectionState.Connected)) {\n                                _context3.next = 7;\n                                break;\n                            }\n                            _this._log(\"connect() - already connected and polling\", {\n                                reconnect: reconnect\n                            }, \"warn\");\n                            return _context3.abrupt(\"return\");\n                        case 7:\n                            _this._setState(ConnectionState.Connecting);\n                            _this.connectionID = undefined; // connect should be sent with empty connection_id so API creates one\n                            _context3.prev = 9;\n                            _context3.next = 12;\n                            return _this._req({\n                                json: _this.client._buildWSPayload()\n                            }, {\n                                timeout: 8000\n                            }, reconnect);\n                        case 12:\n                            _yield$_this$_req = _context3.sent;\n                            event = _yield$_this$_req.event;\n                            _this._setState(ConnectionState.Connected);\n                            _this.connectionID = event.connection_id; // @ts-expect-error\n                            _this.client.dispatchEvent(event);\n                            _this._poll();\n                            if (reconnect) {\n                                _this.client.recoverState();\n                            }\n                            return _context3.abrupt(\"return\", event);\n                        case 22:\n                            _context3.prev = 22;\n                            _context3.t0 = _context3[\"catch\"](9);\n                            _this._setState(ConnectionState.Closed);\n                            throw _context3.t0;\n                        case 26:\n                        case \"end\":\n                            return _context3.stop();\n                    }\n                }\n            }, _callee3, null, [\n                [\n                    9,\n                    22\n                ]\n            ]);\n        })));\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"isHealthy\", function() {\n            return !!_this.connectionID && _this.state === ConnectionState.Connected;\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"disconnect\", /*#__PURE__*/ _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee4() {\n            var _this$cancelToken3;\n            var timeout, connection_id, _args4 = arguments;\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee4$(_context4) {\n                while(1){\n                    switch(_context4.prev = _context4.next){\n                        case 0:\n                            timeout = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 2000;\n                            removeConnectionEventListeners(_this._onlineStatusChanged);\n                            _this._setState(ConnectionState.Disconnected);\n                            (_this$cancelToken3 = _this.cancelToken) === null || _this$cancelToken3 === void 0 ? void 0 : _this$cancelToken3.cancel(\"disconnect() is called\");\n                            _this.cancelToken = undefined;\n                            connection_id = _this.connectionID;\n                            _this.connectionID = undefined;\n                            _context4.prev = 7;\n                            _context4.next = 10;\n                            return _this._req({\n                                close: true,\n                                connection_id: connection_id\n                            }, {\n                                timeout: timeout\n                            }, false);\n                        case 10:\n                            _this._log(\"disconnect() - Closed connectionID\");\n                            _context4.next = 16;\n                            break;\n                        case 13:\n                            _context4.prev = 13;\n                            _context4.t0 = _context4[\"catch\"](7);\n                            _this._log(\"disconnect() - Failed\", {\n                                err: _context4.t0\n                            }, \"error\");\n                        case 16:\n                        case \"end\":\n                            return _context4.stop();\n                    }\n                }\n            }, _callee4, null, [\n                [\n                    7,\n                    13\n                ]\n            ]);\n        })));\n        this.client = client;\n        this.state = ConnectionState.Init;\n        this.consecutiveFailures = 0;\n        addConnectionEventListeners(this._onlineStatusChanged);\n    }\n    _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(WSConnectionFallback, [\n        {\n            key: \"_log\",\n            value: function _log(msg) {\n                var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"info\";\n                this.client.logger(level, \"WSConnectionFallback:\" + msg, _objectSpread$2({\n                    tags: [\n                        \"connection_fallback\",\n                        \"connection\"\n                    ]\n                }, extra));\n            }\n        },\n        {\n            key: \"_setState\",\n            value: function _setState(state) {\n                this._log(\"_setState() - \".concat(state)); // transition from connecting => connected\n                if (this.state === ConnectionState.Connecting && state === ConnectionState.Connected) {\n                    this.client.dispatchEvent({\n                        type: \"connection.changed\",\n                        online: true\n                    });\n                }\n                if (state === ConnectionState.Closed || state === ConnectionState.Disconnected) {\n                    this.client.dispatchEvent({\n                        type: \"connection.changed\",\n                        online: false\n                    });\n                }\n                this.state = state;\n            }\n        }\n    ]);\n    return WSConnectionFallback;\n}();\nvar Campaign = /*#__PURE__*/ function() {\n    function Campaign(client, id, data) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, Campaign);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"id\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"data\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"client\", void 0);\n        this.client = client;\n        this.id = id;\n        this.data = data;\n    }\n    _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(Campaign, [\n        {\n            key: \"create\",\n            value: function() {\n                var _create = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee() {\n                    var _this$data, _this$data2, _this$data3, _this$data4, _this$data5, _this$data6, _this$data7, _this$data8;\n                    var body, result;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n                        while(1){\n                            switch(_context.prev = _context.next){\n                                case 0:\n                                    body = {\n                                        id: this.id,\n                                        message_template: (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.message_template,\n                                        segment_ids: (_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : _this$data2.segment_ids,\n                                        sender_id: (_this$data3 = this.data) === null || _this$data3 === void 0 ? void 0 : _this$data3.sender_id,\n                                        channel_template: (_this$data4 = this.data) === null || _this$data4 === void 0 ? void 0 : _this$data4.channel_template,\n                                        create_channels: (_this$data5 = this.data) === null || _this$data5 === void 0 ? void 0 : _this$data5.create_channels,\n                                        description: (_this$data6 = this.data) === null || _this$data6 === void 0 ? void 0 : _this$data6.description,\n                                        name: (_this$data7 = this.data) === null || _this$data7 === void 0 ? void 0 : _this$data7.name,\n                                        user_ids: (_this$data8 = this.data) === null || _this$data8 === void 0 ? void 0 : _this$data8.user_ids\n                                    };\n                                    _context.next = 3;\n                                    return this.client.createCampaign(body);\n                                case 3:\n                                    result = _context.sent;\n                                    this.id = result.campaign.id;\n                                    this.data = result.campaign;\n                                    return _context.abrupt(\"return\", result);\n                                case 7:\n                                case \"end\":\n                                    return _context.stop();\n                            }\n                        }\n                    }, _callee, this);\n                }));\n                function create() {\n                    return _create.apply(this, arguments);\n                }\n                return create;\n            }()\n        },\n        {\n            key: \"verifyCampaignId\",\n            value: function verifyCampaignId() {\n                if (!this.id) {\n                    throw new Error(\"Campaign id is missing. Either create the campaign using campaign.create() or set the id during instantiation - const campaign = client.campaign(id)\");\n                }\n            }\n        },\n        {\n            key: \"start\",\n            value: function() {\n                var _start = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee2(options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee2$(_context2) {\n                        while(1){\n                            switch(_context2.prev = _context2.next){\n                                case 0:\n                                    this.verifyCampaignId();\n                                    _context2.next = 3;\n                                    return this.client.startCampaign(this.id, options);\n                                case 3:\n                                    return _context2.abrupt(\"return\", _context2.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context2.stop();\n                            }\n                        }\n                    }, _callee2, this);\n                }));\n                function start(_x) {\n                    return _start.apply(this, arguments);\n                }\n                return start;\n            }()\n        },\n        {\n            key: \"update\",\n            value: function() {\n                var _update = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee3(data) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee3$(_context3) {\n                        while(1){\n                            switch(_context3.prev = _context3.next){\n                                case 0:\n                                    this.verifyCampaignId();\n                                    return _context3.abrupt(\"return\", this.client.updateCampaign(this.id, data));\n                                case 2:\n                                case \"end\":\n                                    return _context3.stop();\n                            }\n                        }\n                    }, _callee3, this);\n                }));\n                function update(_x2) {\n                    return _update.apply(this, arguments);\n                }\n                return update;\n            }()\n        },\n        {\n            key: \"delete\",\n            value: function() {\n                var _delete2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee4() {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee4$(_context4) {\n                        while(1){\n                            switch(_context4.prev = _context4.next){\n                                case 0:\n                                    this.verifyCampaignId();\n                                    _context4.next = 3;\n                                    return this.client.deleteCampaign(this.id);\n                                case 3:\n                                    return _context4.abrupt(\"return\", _context4.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context4.stop();\n                            }\n                        }\n                    }, _callee4, this);\n                }));\n                function _delete() {\n                    return _delete2.apply(this, arguments);\n                }\n                return _delete;\n            }()\n        },\n        {\n            key: \"stop\",\n            value: function() {\n                var _stop = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee5() {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee5$(_context5) {\n                        while(1){\n                            switch(_context5.prev = _context5.next){\n                                case 0:\n                                    this.verifyCampaignId();\n                                    return _context5.abrupt(\"return\", this.client.stopCampaign(this.id));\n                                case 2:\n                                case \"end\":\n                                    return _context5.stop();\n                            }\n                        }\n                    }, _callee5, this);\n                }));\n                function stop() {\n                    return _stop.apply(this, arguments);\n                }\n                return stop;\n            }()\n        },\n        {\n            key: \"get\",\n            value: function() {\n                var _get = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee6() {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee6$(_context6) {\n                        while(1){\n                            switch(_context6.prev = _context6.next){\n                                case 0:\n                                    this.verifyCampaignId();\n                                    return _context6.abrupt(\"return\", this.client.getCampaign(this.id));\n                                case 2:\n                                case \"end\":\n                                    return _context6.stop();\n                            }\n                        }\n                    }, _callee6, this);\n                }));\n                function get() {\n                    return _get.apply(this, arguments);\n                }\n                return get;\n            }()\n        }\n    ]);\n    return Campaign;\n}();\nvar Segment = /*#__PURE__*/ function() {\n    function Segment(client, type, id, data) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, Segment);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"type\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"id\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"client\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"data\", void 0);\n        this.client = client;\n        this.type = type;\n        this.id = id;\n        this.data = data;\n    }\n    _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(Segment, [\n        {\n            key: \"create\",\n            value: function() {\n                var _create = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee() {\n                    var _this$data, _this$data2, _this$data3, _this$data4, _this$data5;\n                    var body;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n                        while(1){\n                            switch(_context.prev = _context.next){\n                                case 0:\n                                    body = {\n                                        name: (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.name,\n                                        filter: (_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : _this$data2.filter,\n                                        description: (_this$data3 = this.data) === null || _this$data3 === void 0 ? void 0 : _this$data3.description,\n                                        all_sender_channels: (_this$data4 = this.data) === null || _this$data4 === void 0 ? void 0 : _this$data4.all_sender_channels,\n                                        all_users: (_this$data5 = this.data) === null || _this$data5 === void 0 ? void 0 : _this$data5.all_users\n                                    };\n                                    return _context.abrupt(\"return\", this.client.createSegment(this.type, this.id, body));\n                                case 2:\n                                case \"end\":\n                                    return _context.stop();\n                            }\n                        }\n                    }, _callee, this);\n                }));\n                function create() {\n                    return _create.apply(this, arguments);\n                }\n                return create;\n            }()\n        },\n        {\n            key: \"verifySegmentId\",\n            value: function verifySegmentId() {\n                if (!this.id) {\n                    throw new Error(\"Segment id is missing. Either create the segment using segment.create() or set the id during instantiation - const segment = client.segment(id)\");\n                }\n            }\n        },\n        {\n            key: \"get\",\n            value: function() {\n                var _get = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee2() {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee2$(_context2) {\n                        while(1){\n                            switch(_context2.prev = _context2.next){\n                                case 0:\n                                    this.verifySegmentId();\n                                    return _context2.abrupt(\"return\", this.client.getSegment(this.id));\n                                case 2:\n                                case \"end\":\n                                    return _context2.stop();\n                            }\n                        }\n                    }, _callee2, this);\n                }));\n                function get() {\n                    return _get.apply(this, arguments);\n                }\n                return get;\n            }()\n        },\n        {\n            key: \"update\",\n            value: function() {\n                var _update = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee3(data) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee3$(_context3) {\n                        while(1){\n                            switch(_context3.prev = _context3.next){\n                                case 0:\n                                    this.verifySegmentId();\n                                    return _context3.abrupt(\"return\", this.client.updateSegment(this.id, data));\n                                case 2:\n                                case \"end\":\n                                    return _context3.stop();\n                            }\n                        }\n                    }, _callee3, this);\n                }));\n                function update(_x) {\n                    return _update.apply(this, arguments);\n                }\n                return update;\n            }()\n        },\n        {\n            key: \"addTargets\",\n            value: function() {\n                var _addTargets = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee4(targets) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee4$(_context4) {\n                        while(1){\n                            switch(_context4.prev = _context4.next){\n                                case 0:\n                                    this.verifySegmentId();\n                                    return _context4.abrupt(\"return\", this.client.addSegmentTargets(this.id, targets));\n                                case 2:\n                                case \"end\":\n                                    return _context4.stop();\n                            }\n                        }\n                    }, _callee4, this);\n                }));\n                function addTargets(_x2) {\n                    return _addTargets.apply(this, arguments);\n                }\n                return addTargets;\n            }()\n        },\n        {\n            key: \"removeTargets\",\n            value: function() {\n                var _removeTargets = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee5(targets) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee5$(_context5) {\n                        while(1){\n                            switch(_context5.prev = _context5.next){\n                                case 0:\n                                    this.verifySegmentId();\n                                    return _context5.abrupt(\"return\", this.client.removeSegmentTargets(this.id, targets));\n                                case 2:\n                                case \"end\":\n                                    return _context5.stop();\n                            }\n                        }\n                    }, _callee5, this);\n                }));\n                function removeTargets(_x3) {\n                    return _removeTargets.apply(this, arguments);\n                }\n                return removeTargets;\n            }()\n        },\n        {\n            key: \"delete\",\n            value: function() {\n                var _delete2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee6() {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee6$(_context6) {\n                        while(1){\n                            switch(_context6.prev = _context6.next){\n                                case 0:\n                                    this.verifySegmentId();\n                                    return _context6.abrupt(\"return\", this.client.deleteSegment(this.id));\n                                case 2:\n                                case \"end\":\n                                    return _context6.stop();\n                            }\n                        }\n                    }, _callee6, this);\n                }));\n                function _delete() {\n                    return _delete2.apply(this, arguments);\n                }\n                return _delete;\n            }()\n        },\n        {\n            key: \"targetExists\",\n            value: function() {\n                var _targetExists = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee7(targetId) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee7$(_context7) {\n                        while(1){\n                            switch(_context7.prev = _context7.next){\n                                case 0:\n                                    this.verifySegmentId();\n                                    return _context7.abrupt(\"return\", this.client.segmentTargetExists(this.id, targetId));\n                                case 2:\n                                case \"end\":\n                                    return _context7.stop();\n                            }\n                        }\n                    }, _callee7, this);\n                }));\n                function targetExists(_x4) {\n                    return _targetExists.apply(this, arguments);\n                }\n                return targetExists;\n            }()\n        },\n        {\n            key: \"queryTargets\",\n            value: function() {\n                var _queryTargets = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee8() {\n                    var filter, sort, options, _args8 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee8$(_context8) {\n                        while(1){\n                            switch(_context8.prev = _context8.next){\n                                case 0:\n                                    filter = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};\n                                    sort = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : [];\n                                    options = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : {};\n                                    this.verifySegmentId();\n                                    return _context8.abrupt(\"return\", this.client.querySegmentTargets(this.id, filter, sort, options));\n                                case 5:\n                                case \"end\":\n                                    return _context8.stop();\n                            }\n                        }\n                    }, _callee8, this);\n                }));\n                function queryTargets() {\n                    return _queryTargets.apply(this, arguments);\n                }\n                return queryTargets;\n            }()\n        }\n    ]);\n    return Segment;\n}();\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_19___default()(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_19___default()(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_18___default()(this, result);\n    };\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n/**\n * Utility Types\n */ /* Unknown Record */ //alias to avoid breaking change\n/**\n * Response Types\n */ // TODO: Figure out a way to strongly type set and unset.\n// Thumb URL(thumb_url) is added considering video attachments as the backend will return the thumbnail in the response.\n/**\n * Option Types\n */ // TODO: rename to UpdateChannelOptions in the next major update and use it in channel._update and/or channel.update\n/** @deprecated use MarkChannelsReadOptions instead */ // TODO: rename to UpdateChannelTypeOptions in the next major update\n/**\n * Event Types\n */ /**\n * Filter Types\n */ /**\n * Sort Types\n */ /**\n * Base Types\n */ /*\n  DeleteUserOptions specifies a collection of one or more `user_ids` to be deleted.\n\n  `user`:\n    - soft: marks user as deleted and retains all user data \n    - pruning: marks user as deleted and nullifies user information \n    - hard: deletes user completely - this requires hard option for messages and conversation as well\n  `conversations`:\n    - soft: marks all conversation channels as deleted (same effect as Delete Channels with 'hard' option disabled)\n    - hard: deletes channel and all its data completely including messages (same effect as Delete Channels with 'hard' option enabled)\n  `messages`:\n    - soft: marks all user messages as deleted without removing any related message data\n    - pruning: marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags\n    - hard: deletes messages completely with all related information\n  `new_channel_owner_id`: any channels owned by the hard-deleted user will be transferred to this user ID\n */ // TODO: add better typing\nvar ErrorFromResponse = /*#__PURE__*/ function(_Error) {\n    _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_17___default()(ErrorFromResponse, _Error);\n    var _super = _createSuper(ErrorFromResponse);\n    function ErrorFromResponse() {\n        var _this;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, ErrorFromResponse);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_16___default()(_this), \"code\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_16___default()(_this), \"response\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_16___default()(_this), \"status\", void 0);\n        return _this;\n    }\n    return ErrorFromResponse;\n}(/*#__PURE__*/ _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_20___default()(Error));\nfunction ownKeys$1(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$1(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$1(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$1(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _createForOfIteratorHelper$1(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            var F = function F() {};\n            return {\n                s: F,\n                n: function n() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function e(_e) {\n                    throw _e;\n                },\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true, didErr = false, err;\n    return {\n        s: function s() {\n            it = it.call(o);\n        },\n        n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function e(_e2) {\n            didErr = true;\n            err = _e2;\n        },\n        f: function f() {\n            try {\n                if (!normalCompletion && it.return != null) it.return();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nfunction _unsupportedIterableToArray$1(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);\n}\nfunction _arrayLikeToArray$1(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nvar Thread = /*#__PURE__*/ function() {\n    function Thread(client, t) {\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, Thread);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"id\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"latestReplies\", []);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"participants\", []);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"message\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"channel\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_channel\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"replyCount\", 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_client\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"read\", {});\n        this.id = t.parent_message.id;\n        this.message = formatMessage(t.parent_message);\n        this.latestReplies = t.latest_replies.map(formatMessage);\n        this.participants = t.thread_participants;\n        this.replyCount = t.reply_count;\n        this.channel = t.channel;\n        this._channel = client.channel(t.channel.type, t.channel.id);\n        this._client = client;\n        if (t.read) {\n            var _iterator = _createForOfIteratorHelper$1(t.read), _step;\n            try {\n                for(_iterator.s(); !(_step = _iterator.n()).done;){\n                    var r = _step.value;\n                    this.read[r.user.id] = _objectSpread$1(_objectSpread$1({}, r), {}, {\n                        last_read: new Date(r.last_read)\n                    });\n                }\n            } catch (err) {\n                _iterator.e(err);\n            } finally{\n                _iterator.f();\n            }\n        }\n    }\n    _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(Thread, [\n        {\n            key: \"getClient\",\n            value: function getClient() {\n                return this._client;\n            }\n        },\n        {\n            key: \"addReply\",\n            value: function addReply(message) {\n                if (message.parent_id !== this.message.id) {\n                    throw new Error(\"Message does not belong to this thread\");\n                }\n                this.latestReplies = addToMessageList(this.latestReplies, formatMessage(message), true);\n            }\n        },\n        {\n            key: \"updateReply\",\n            value: function updateReply(message) {\n                this.latestReplies = this.latestReplies.map(function(m) {\n                    if (m.id === message.id) {\n                        return formatMessage(message);\n                    }\n                    return m;\n                });\n            }\n        },\n        {\n            key: \"updateMessageOrReplyIfExists\",\n            value: function updateMessageOrReplyIfExists(message) {\n                if (!message.parent_id && message.id !== this.message.id) {\n                    return;\n                }\n                if (message.parent_id && message.parent_id !== this.message.id) {\n                    return;\n                }\n                if (message.parent_id && message.parent_id === this.message.id) {\n                    this.updateReply(message);\n                    return;\n                }\n                if (!message.parent_id && message.id === this.message.id) {\n                    this.message = formatMessage(message);\n                }\n            }\n        },\n        {\n            key: \"addReaction\",\n            value: function addReaction(reaction, message, enforce_unique) {\n                var _this = this;\n                if (!message) return;\n                this.latestReplies = this.latestReplies.map(function(m) {\n                    if (m.id === message.id) {\n                        return formatMessage(_this._channel.state.addReaction(reaction, message, enforce_unique));\n                    }\n                    return m;\n                });\n            }\n        },\n        {\n            key: \"removeReaction\",\n            value: function removeReaction(reaction, message) {\n                var _this2 = this;\n                if (!message) return;\n                this.latestReplies = this.latestReplies.map(function(m) {\n                    if (m.id === message.id) {\n                        return formatMessage(_this2._channel.state.removeReaction(reaction, message));\n                    }\n                    return m;\n                });\n            }\n        }\n    ]);\n    return Thread;\n}();\nvar _excluded = [\n    \"created_at\",\n    \"updated_at\",\n    \"last_active\",\n    \"online\"\n], _excluded2 = [\n    \"params\",\n    \"headers\"\n];\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            var F = function F() {};\n            return {\n                s: F,\n                n: function n() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function e(_e) {\n                    throw _e;\n                },\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true, didErr = false, err;\n    return {\n        s: function s() {\n            it = it.call(o);\n        },\n        n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function e(_e2) {\n            didErr = true;\n            err = _e2;\n        },\n        f: function f() {\n            try {\n                if (!normalCompletion && it.return != null) it.return();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction isString(x) {\n    return typeof x === \"string\" || x instanceof String;\n}\nvar StreamChat = /*#__PURE__*/ function() {\n    function StreamChat(_key, secretOrOptions, _options) {\n        var _this = this, _this$options;\n        _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, StreamChat);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_user\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"activeChannels\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"anonymous\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"persistUserOnConnectionFailure\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"axiosInstance\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"baseURL\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"browser\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"cleaningIntervalRef\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"clientID\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"configs\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"key\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"listeners\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"logger\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"recoverStateOnReconnect\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"mutedChannels\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"mutedUsers\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"node\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"options\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"secret\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"setUserPromise\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"state\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"tokenManager\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"user\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"userAgent\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"userID\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"wsBaseURL\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"wsConnection\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"wsFallback\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"wsPromise\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"consecutiveFailures\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"insightMetrics\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"defaultWSTimeoutWithFallback\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"defaultWSTimeout\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"nextRequestAbortController\", null);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_getConnectionID\", function() {\n            var _this$wsConnection, _this$wsFallback;\n            return ((_this$wsConnection = _this.wsConnection) === null || _this$wsConnection === void 0 ? void 0 : _this$wsConnection.connectionID) || ((_this$wsFallback = _this.wsFallback) === null || _this$wsFallback === void 0 ? void 0 : _this$wsFallback.connectionID);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_hasConnectionID\", function() {\n            return Boolean(_this._getConnectionID());\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connectUser\", /*#__PURE__*/ function() {\n            var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee(user, userTokenOrProvider) {\n                var setTokenPromise, wsPromise;\n                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee$(_context) {\n                    while(1){\n                        switch(_context.prev = _context.next){\n                            case 0:\n                                if (user.id) {\n                                    _context.next = 2;\n                                    break;\n                                }\n                                throw new Error('The \"id\" field on the user is missing');\n                            case 2:\n                                if (!(_this.userID === user.id && _this.setUserPromise)) {\n                                    _context.next = 5;\n                                    break;\n                                }\n                                console.warn(\"Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.\");\n                                return _context.abrupt(\"return\", _this.setUserPromise);\n                            case 5:\n                                if (!_this.userID) {\n                                    _context.next = 7;\n                                    break;\n                                }\n                                throw new Error(\"Use client.disconnect() before trying to connect as a different user. connectUser was called twice.\");\n                            case 7:\n                                if ((_this._isUsingServerAuth() || _this.node) && !_this.options.allowServerSideConnect) {\n                                    console.warn('Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.');\n                                } // we generate the client id client side\n                                _this.userID = user.id;\n                                _this.anonymous = false;\n                                setTokenPromise = _this._setToken(user, userTokenOrProvider);\n                                _this._setUser(user);\n                                wsPromise = _this.openConnection();\n                                _this.setUserPromise = Promise.all([\n                                    setTokenPromise,\n                                    wsPromise\n                                ]).then(function(result) {\n                                    return result[1];\n                                } // We only return connection promise;\n                                );\n                                _context.prev = 14;\n                                _context.next = 17;\n                                return _this.setUserPromise;\n                            case 17:\n                                return _context.abrupt(\"return\", _context.sent);\n                            case 20:\n                                _context.prev = 20;\n                                _context.t0 = _context[\"catch\"](14);\n                                if (_this.persistUserOnConnectionFailure) {\n                                    // cleanup client to allow the user to retry connectUser again\n                                    _this.closeConnection();\n                                } else {\n                                    _this.disconnectUser();\n                                }\n                                throw _context.t0;\n                            case 24:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, null, [\n                    [\n                        14,\n                        20\n                    ]\n                ]);\n            }));\n            return function(_x, _x2) {\n                return _ref.apply(this, arguments);\n            };\n        }());\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"setUser\", this.connectUser);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_setToken\", function(user, userTokenOrProvider) {\n            return _this.tokenManager.setTokenOrProvider(userTokenOrProvider, user);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"closeConnection\", /*#__PURE__*/ function() {\n            var _ref2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee2(timeout) {\n                var _this$wsConnection2, _this$wsFallback2;\n                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee2$(_context2) {\n                    while(1){\n                        switch(_context2.prev = _context2.next){\n                            case 0:\n                                if (_this.cleaningIntervalRef != null) {\n                                    clearInterval(_this.cleaningIntervalRef);\n                                    _this.cleaningIntervalRef = undefined;\n                                }\n                                _context2.next = 3;\n                                return Promise.all([\n                                    (_this$wsConnection2 = _this.wsConnection) === null || _this$wsConnection2 === void 0 ? void 0 : _this$wsConnection2.disconnect(timeout),\n                                    (_this$wsFallback2 = _this.wsFallback) === null || _this$wsFallback2 === void 0 ? void 0 : _this$wsFallback2.disconnect(timeout)\n                                ]);\n                            case 3:\n                                return _context2.abrupt(\"return\", Promise.resolve());\n                            case 4:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2);\n            }));\n            return function(_x3) {\n                return _ref2.apply(this, arguments);\n            };\n        }());\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"openConnection\", /*#__PURE__*/ _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee3() {\n            var _this$wsConnection3, _this$wsConnection4, _this$wsFallback3;\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee3$(_context3) {\n                while(1){\n                    switch(_context3.prev = _context3.next){\n                        case 0:\n                            if (_this.userID) {\n                                _context3.next = 2;\n                                break;\n                            }\n                            throw Error(\"User is not set on client, use client.connectUser or client.connectAnonymousUser instead\");\n                        case 2:\n                            if (!((_this$wsConnection3 = _this.wsConnection) !== null && _this$wsConnection3 !== void 0 && _this$wsConnection3.isConnecting && _this.wsPromise)) {\n                                _context3.next = 5;\n                                break;\n                            }\n                            _this.logger(\"info\", \"client:openConnection() - connection already in progress\", {\n                                tags: [\n                                    \"connection\",\n                                    \"client\"\n                                ]\n                            });\n                            return _context3.abrupt(\"return\", _this.wsPromise);\n                        case 5:\n                            if (!(((_this$wsConnection4 = _this.wsConnection) !== null && _this$wsConnection4 !== void 0 && _this$wsConnection4.isHealthy || (_this$wsFallback3 = _this.wsFallback) !== null && _this$wsFallback3 !== void 0 && _this$wsFallback3.isHealthy()) && _this._hasConnectionID())) {\n                                _context3.next = 8;\n                                break;\n                            }\n                            _this.logger(\"info\", \"client:openConnection() - openConnection called twice, healthy connection already exists\", {\n                                tags: [\n                                    \"connection\",\n                                    \"client\"\n                                ]\n                            });\n                            return _context3.abrupt(\"return\", Promise.resolve());\n                        case 8:\n                            _this.clientID = \"\".concat(_this.userID, \"--\").concat(randomId());\n                            _this.wsPromise = _this.connect();\n                            _this._startCleaning();\n                            return _context3.abrupt(\"return\", _this.wsPromise);\n                        case 12:\n                        case \"end\":\n                            return _context3.stop();\n                    }\n                }\n            }, _callee3);\n        })));\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_setupConnection\", this.openConnection);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_normalizeDate\", function(before) {\n            if (before instanceof Date) {\n                before = before.toISOString();\n            }\n            if (before === \"\") {\n                throw new Error(\"Don't pass blank string for since, use null instead if resetting the token revoke\");\n            }\n            return before;\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"disconnectUser\", /*#__PURE__*/ function() {\n            var _ref4 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee4(timeout) {\n                var closePromise, _i, _Object$values, _channel;\n                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee4$(_context4) {\n                    while(1){\n                        switch(_context4.prev = _context4.next){\n                            case 0:\n                                _this.logger(\"info\", \"client:disconnect() - Disconnecting the client\", {\n                                    tags: [\n                                        \"connection\",\n                                        \"client\"\n                                    ]\n                                }); // remove the user specific fields\n                                delete _this.user;\n                                delete _this._user;\n                                delete _this.userID;\n                                _this.anonymous = false;\n                                closePromise = _this.closeConnection(timeout);\n                                for(_i = 0, _Object$values = Object.values(_this.activeChannels); _i < _Object$values.length; _i++){\n                                    _channel = _Object$values[_i];\n                                    _channel._disconnect();\n                                } // ensure we no longer return inactive channels\n                                _this.activeChannels = {}; // reset client state\n                                _this.state = new ClientState(); // reset token manager\n                                setTimeout(_this.tokenManager.reset); // delay reseting to use token for disconnect calls\n                                // close the WS connection\n                                return _context4.abrupt(\"return\", closePromise);\n                            case 11:\n                            case \"end\":\n                                return _context4.stop();\n                        }\n                    }\n                }, _callee4);\n            }));\n            return function(_x4) {\n                return _ref4.apply(this, arguments);\n            };\n        }());\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"disconnect\", this.disconnectUser);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"connectAnonymousUser\", function() {\n            if ((_this._isUsingServerAuth() || _this.node) && !_this.options.allowServerSideConnect) {\n                console.warn('Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.');\n            }\n            _this.anonymous = true;\n            _this.userID = randomId();\n            var anonymousUser = {\n                id: _this.userID,\n                anon: true\n            };\n            _this._setToken(anonymousUser, \"\");\n            _this._setUser(anonymousUser);\n            return _this._setupConnection();\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"setAnonymousUser\", this.connectAnonymousUser);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"doAxiosRequest\", /*#__PURE__*/ function() {\n            var _ref5 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee5(type, url, data) {\n                var options, requestConfig, response, _requestConfig$header, _args5 = arguments;\n                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee5$(_context5) {\n                    while(1){\n                        switch(_context5.prev = _context5.next){\n                            case 0:\n                                options = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : {};\n                                _context5.next = 3;\n                                return _this.tokenManager.tokenReady();\n                            case 3:\n                                requestConfig = _this._enrichAxiosOptions(options);\n                                _context5.prev = 4;\n                                _this._logApiRequest(type, url, data, requestConfig);\n                                _context5.t0 = type;\n                                _context5.next = _context5.t0 === \"get\" ? 9 : _context5.t0 === \"delete\" ? 13 : _context5.t0 === \"post\" ? 17 : _context5.t0 === \"postForm\" ? 21 : _context5.t0 === \"put\" ? 25 : _context5.t0 === \"patch\" ? 29 : _context5.t0 === \"options\" ? 33 : 37;\n                                break;\n                            case 9:\n                                _context5.next = 11;\n                                return _this.axiosInstance.get(url, requestConfig);\n                            case 11:\n                                response = _context5.sent;\n                                return _context5.abrupt(\"break\", 38);\n                            case 13:\n                                _context5.next = 15;\n                                return _this.axiosInstance.delete(url, requestConfig);\n                            case 15:\n                                response = _context5.sent;\n                                return _context5.abrupt(\"break\", 38);\n                            case 17:\n                                _context5.next = 19;\n                                return _this.axiosInstance.post(url, data, requestConfig);\n                            case 19:\n                                response = _context5.sent;\n                                return _context5.abrupt(\"break\", 38);\n                            case 21:\n                                _context5.next = 23;\n                                return _this.axiosInstance.postForm(url, data, requestConfig);\n                            case 23:\n                                response = _context5.sent;\n                                return _context5.abrupt(\"break\", 38);\n                            case 25:\n                                _context5.next = 27;\n                                return _this.axiosInstance.put(url, data, requestConfig);\n                            case 27:\n                                response = _context5.sent;\n                                return _context5.abrupt(\"break\", 38);\n                            case 29:\n                                _context5.next = 31;\n                                return _this.axiosInstance.patch(url, data, requestConfig);\n                            case 31:\n                                response = _context5.sent;\n                                return _context5.abrupt(\"break\", 38);\n                            case 33:\n                                _context5.next = 35;\n                                return _this.axiosInstance.options(url, requestConfig);\n                            case 35:\n                                response = _context5.sent;\n                                return _context5.abrupt(\"break\", 38);\n                            case 37:\n                                throw new Error(\"Invalid request type\");\n                            case 38:\n                                _this._logApiResponse(type, url, response);\n                                _this.consecutiveFailures = 0;\n                                return _context5.abrupt(\"return\", _this.handleResponse(response));\n                            case 43:\n                                _context5.prev = 43;\n                                _context5.t1 = _context5[\"catch\"](4);\n                                _context5.t1.client_request_id = (_requestConfig$header = requestConfig.headers) === null || _requestConfig$header === void 0 ? void 0 : _requestConfig$header[\"x-client-request-id\"];\n                                _this._logApiError(type, url, _context5.t1);\n                                _this.consecutiveFailures += 1;\n                                if (!_context5.t1.response) {\n                                    _context5.next = 60;\n                                    break;\n                                }\n                                if (!(_context5.t1.response.data.code === chatCodes.TOKEN_EXPIRED && !_this.tokenManager.isStatic())) {\n                                    _context5.next = 57;\n                                    break;\n                                }\n                                if (!(_this.consecutiveFailures > 1)) {\n                                    _context5.next = 53;\n                                    break;\n                                }\n                                _context5.next = 53;\n                                return sleep(retryInterval(_this.consecutiveFailures));\n                            case 53:\n                                _this.tokenManager.loadToken();\n                                _context5.next = 56;\n                                return _this.doAxiosRequest(type, url, data, options);\n                            case 56:\n                                return _context5.abrupt(\"return\", _context5.sent);\n                            case 57:\n                                return _context5.abrupt(\"return\", _this.handleResponse(_context5.t1.response));\n                            case 60:\n                                throw _context5.t1;\n                            case 61:\n                            case \"end\":\n                                return _context5.stop();\n                        }\n                    }\n                }, _callee5, null, [\n                    [\n                        4,\n                        43\n                    ]\n                ]);\n            }));\n            return function(_x5, _x6, _x7) {\n                return _ref5.apply(this, arguments);\n            };\n        }());\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"dispatchEvent\", function(event) {\n            if (!event.received_at) event.received_at = new Date(); // client event handlers\n            var postListenerCallbacks = _this._handleClientEvent(event); // channel event handlers\n            var cid = event.cid;\n            var channel = cid ? _this.activeChannels[cid] : undefined;\n            if (channel) {\n                channel._handleChannelEvent(event);\n            }\n            _this._callClientListeners(event);\n            if (channel) {\n                channel._callChannelListeners(event);\n            }\n            postListenerCallbacks.forEach(function(c) {\n                return c();\n            });\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"handleEvent\", function(messageEvent) {\n            // dispatch the event to the channel listeners\n            var jsonString = messageEvent.data;\n            var event = JSON.parse(jsonString);\n            _this.dispatchEvent(event);\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_updateMemberWatcherReferences\", function(user) {\n            var refMap = _this.state.userChannelReferences[user.id] || {};\n            for(var _channelID in refMap){\n                var _channel2 = _this.activeChannels[_channelID];\n                if (_channel2 !== null && _channel2 !== void 0 && _channel2.state) {\n                    if (_channel2.state.members[user.id]) {\n                        _channel2.state.members[user.id].user = user;\n                    }\n                    if (_channel2.state.watchers[user.id]) {\n                        _channel2.state.watchers[user.id] = user;\n                    }\n                    if (_channel2.state.read[user.id]) {\n                        _channel2.state.read[user.id].user = user;\n                    }\n                }\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_updateUserReferences\", this._updateMemberWatcherReferences);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_updateUserMessageReferences\", function(user) {\n            var refMap = _this.state.userChannelReferences[user.id] || {};\n            for(var _channelID2 in refMap){\n                var _channel3 = _this.activeChannels[_channelID2];\n                if (!_channel3) continue;\n                var state = _channel3.state;\n                /** update the messages from this user. */ state === null || state === void 0 ? void 0 : state.updateUserMessages(user);\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_deleteUserMessageReference\", function(user) {\n            var hardDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            var refMap = _this.state.userChannelReferences[user.id] || {};\n            for(var _channelID3 in refMap){\n                var _channel4 = _this.activeChannels[_channelID3];\n                var state = _channel4.state;\n                /** deleted the messages from this user. */ state === null || state === void 0 ? void 0 : state.deleteUserMessages(user, hardDelete);\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_handleUserEvent\", function(event) {\n            if (!event.user) {\n                return;\n            }\n            /** update the client.state with any changes to users */ if (event.type === \"user.presence.changed\" || event.type === \"user.updated\") {\n                if (event.user.id === _this.userID) {\n                    var user = _objectSpread({}, _this.user || {});\n                    var _user = _objectSpread({}, _this._user || {}); // Remove deleted properties from user objects.\n                    for(var _key2 in _this.user){\n                        if (_key2 in event.user || isOwnUserBaseProperty(_key2)) {\n                            continue;\n                        }\n                        delete user[_key2];\n                        delete _user[_key2];\n                    }\n                    /** Updating only available properties in _user object. */ for(var _key3 in event.user){\n                        if (_user && _key3 in _user) {\n                            _user[_key3] = event.user[_key3];\n                        }\n                    } // @ts-expect-error\n                    _this._user = _objectSpread({}, _user);\n                    _this.user = _objectSpread(_objectSpread({}, user), event.user);\n                }\n                _this.state.updateUser(event.user);\n                _this._updateMemberWatcherReferences(event.user);\n            }\n            if (event.type === \"user.updated\") {\n                _this._updateUserMessageReferences(event.user);\n            }\n            if (event.type === \"user.deleted\" && event.user.deleted_at && (event.mark_messages_deleted || event.hard_delete)) {\n                _this._deleteUserMessageReference(event.user, event.hard_delete);\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_callClientListeners\", function(event) {\n            var client = _this; // gather and call the listeners\n            var listeners = [];\n            if (client.listeners.all) {\n                listeners.push.apply(listeners, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(client.listeners.all));\n            }\n            if (client.listeners[event.type]) {\n                listeners.push.apply(listeners, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(client.listeners[event.type]));\n            } // call the event and send it to the listeners\n            for(var _i2 = 0, _listeners = listeners; _i2 < _listeners.length; _i2++){\n                var listener = _listeners[_i2];\n                listener(event);\n            }\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"recoverState\", /*#__PURE__*/ _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee6() {\n            var cids;\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee6$(_context6) {\n                while(1){\n                    switch(_context6.prev = _context6.next){\n                        case 0:\n                            _this.logger(\"info\", \"client:recoverState() - Start of recoverState with connectionID \".concat(_this._getConnectionID()), {\n                                tags: [\n                                    \"connection\"\n                                ]\n                            });\n                            cids = Object.keys(_this.activeChannels);\n                            if (!(cids.length && _this.recoverStateOnReconnect)) {\n                                _context6.next = 10;\n                                break;\n                            }\n                            _this.logger(\"info\", \"client:recoverState() - Start the querying of \".concat(cids.length, \" channels\"), {\n                                tags: [\n                                    \"connection\",\n                                    \"client\"\n                                ]\n                            });\n                            _context6.next = 6;\n                            return _this.queryChannels({\n                                cid: {\n                                    $in: cids\n                                }\n                            }, {\n                                last_message_at: -1\n                            }, {\n                                limit: 30\n                            });\n                        case 6:\n                            _this.logger(\"info\", \"client:recoverState() - Querying channels finished\", {\n                                tags: [\n                                    \"connection\",\n                                    \"client\"\n                                ]\n                            });\n                            _this.dispatchEvent({\n                                type: \"connection.recovered\"\n                            });\n                            _context6.next = 11;\n                            break;\n                        case 10:\n                            _this.dispatchEvent({\n                                type: \"connection.recovered\"\n                            });\n                        case 11:\n                            _this.wsPromise = Promise.resolve();\n                            _this.setUserPromise = Promise.resolve();\n                        case 13:\n                        case \"end\":\n                            return _context6.stop();\n                    }\n                }\n            }, _callee6);\n        })));\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"getChannelByMembers\", function(channelType, custom) {\n            // Check if the channel already exists.\n            // Only allow 1 channel object per cid\n            var membersStr = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_4___default()(custom.members || []).sort().join(\",\");\n            var tempCid = \"\".concat(channelType, \":!members-\").concat(membersStr);\n            if (!membersStr) {\n                throw Error(\"Please specify atleast one member when creating unique conversation\");\n            } // channel could exist in `activeChannels` list with either one of the following two keys:\n            // 1. cid - Which gets set on channel only after calling channel.query or channel.watch or channel.create\n            // 2. Sorted membersStr - E.g., \"messaging:amin,vishal\" OR \"messaging:amin,jaap,tom\"\n            //                        This is set when you create a channel, but haven't queried yet. After query,\n            //                        we will replace it with `cid`\n            for(var _key4 in _this.activeChannels){\n                var _channel5 = _this.activeChannels[_key4];\n                if (_channel5.disconnected) {\n                    continue;\n                }\n                if (_key4 === tempCid) {\n                    return _channel5;\n                }\n                if (_key4.indexOf(\"\".concat(channelType, \":!members-\")) === 0) {\n                    var membersStrInExistingChannel = Object.keys(_channel5.state.members).sort().join(\",\");\n                    if (membersStrInExistingChannel === membersStr) {\n                        return _channel5;\n                    }\n                }\n            }\n            var channel = new Channel(_this, channelType, undefined, custom); // For the time being set the key as membersStr, since we don't know the cid yet.\n            // In channel.query, we will replace it with 'cid'.\n            _this.activeChannels[tempCid] = channel;\n            return channel;\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"getChannelById\", function(channelType, channelID, custom) {\n            if (typeof channelID === \"string\" && ~channelID.indexOf(\":\")) {\n                throw Error(\"Invalid channel id \".concat(channelID, \", can't contain the : character\"));\n            } // only allow 1 channel object per cid\n            var cid = \"\".concat(channelType, \":\").concat(channelID);\n            if (cid in _this.activeChannels && !_this.activeChannels[cid].disconnected) {\n                var _channel6 = _this.activeChannels[cid];\n                if (Object.keys(custom).length > 0) {\n                    _channel6.data = custom;\n                    _channel6._data = custom;\n                }\n                return _channel6;\n            }\n            var channel = new Channel(_this, channelType, channelID, custom);\n            _this.activeChannels[channel.cid] = channel;\n            return channel;\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"updateUsers\", this.upsertUsers);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"updateUser\", this.upsertUser);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_unblockMessage\", this.unblockMessage);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"markAllRead\", this.markChannelsRead);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_isUsingServerAuth\", function() {\n            return !!_this.secret;\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"_buildWSPayload\", function(client_request_id) {\n            return JSON.stringify({\n                user_id: _this.userID,\n                user_details: _this._user,\n                device: _this.options.device,\n                client_request_id: client_request_id\n            });\n        });\n        // set the key\n        this.key = _key;\n        this.listeners = {};\n        this.state = new ClientState(); // a list of channels to hide ws events from\n        this.mutedChannels = [];\n        this.mutedUsers = []; // set the secret\n        if (secretOrOptions && isString(secretOrOptions)) {\n            this.secret = secretOrOptions;\n        } // set the options... and figure out defaults...\n        var inputOptions = _options ? _options : secretOrOptions && !isString(secretOrOptions) ? secretOrOptions : {};\n        this.browser = typeof inputOptions.browser !== \"undefined\" ? inputOptions.browser : \"undefined\" !== \"undefined\";\n        this.node = !this.browser;\n        this.options = _objectSpread({\n            timeout: 3000,\n            withCredentials: false,\n            // making sure cookies are not sent\n            warmUp: false,\n            recoverStateOnReconnect: true\n        }, inputOptions);\n        if (this.node && !this.options.httpsAgent) {\n            this.options.httpsAgent = new (https__WEBPACK_IMPORTED_MODULE_10___default().Agent)({\n                keepAlive: true,\n                keepAliveMsecs: 3000\n            });\n        }\n        this.axiosInstance = axios__WEBPACK_IMPORTED_MODULE_21__[\"default\"].create(this.options);\n        this.setBaseURL(this.options.baseURL || \"https://chat.stream-io-api.com\");\n        if (typeof process !== \"undefined\" && process.env.STREAM_LOCAL_TEST_RUN) {\n            this.setBaseURL(\"http://localhost:3030\");\n        }\n        if (typeof process !== \"undefined\" && process.env.STREAM_LOCAL_TEST_HOST) {\n            this.setBaseURL(\"http://\" + process.env.STREAM_LOCAL_TEST_HOST);\n        } // WS connection is initialized when setUser is called\n        this.wsConnection = null;\n        this.wsPromise = null;\n        this.setUserPromise = null; // keeps a reference to all the channels that are in use\n        this.activeChannels = {}; // mapping between channel groups and configs\n        this.configs = {};\n        this.anonymous = false;\n        this.persistUserOnConnectionFailure = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.persistUserOnConnectionFailure; // If its a server-side client, then lets initialize the tokenManager, since token will be\n        // generated from secret.\n        this.tokenManager = new TokenManager(this.secret);\n        this.consecutiveFailures = 0;\n        this.insightMetrics = new InsightMetrics();\n        this.defaultWSTimeoutWithFallback = 6000;\n        this.defaultWSTimeout = 15000;\n        this.axiosInstance.defaults.paramsSerializer = axiosParamsSerializer;\n        /**\n     * logger function should accept 3 parameters:\n     * @param logLevel string\n     * @param message   string\n     * @param extraData object\n     *\n     * e.g.,\n     * const client = new StreamChat('api_key', {}, {\n     * \t\tlogger = (logLevel, message, extraData) => {\n     * \t\t\tconsole.log(message);\n     * \t\t}\n     * })\n     *\n     * extraData contains tags array attached to log message. Tags can have one/many of following values:\n     * 1. api\n     * 2. api_request\n     * 3. api_response\n     * 4. client\n     * 5. channel\n     * 6. connection\n     * 7. event\n     *\n     * It may also contains some extra data, some examples have been mentioned below:\n     * 1. {\n     * \t\ttags: ['api', 'api_request', 'client'],\n     * \t\turl: string,\n     * \t\tpayload: object,\n     * \t\tconfig: object\n     * }\n     * 2. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\tresponse: object\n     * }\n     * 3. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\terror: object\n     * }\n     * 4. {\n     * \t\ttags: ['event', 'client'],\n     * \t\tevent: object\n     * }\n     * 5. {\n     * \t\ttags: ['channel'],\n     * \t\tchannel: object\n     * }\n     */ this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : function() {\n            return null;\n        };\n        this.recoverStateOnReconnect = this.options.recoverStateOnReconnect;\n    }\n    /**\n   * Get a client instance\n   *\n   * This function always returns the same Client instance to avoid issues raised by multiple Client and WS connections\n   *\n   * **After the first call, the client configuration will not change if the key or options parameters change**\n   *\n   * @param {string} key - the api key\n   * @param {string} [secret] - the api secret\n   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   * @example <caption>initialize the client in user mode</caption>\n   * StreamChat.getInstance('api_key')\n   * @example <caption>initialize the client in user mode with options</caption>\n   * StreamChat.getInstance('api_key', { timeout:5000 })\n   * @example <caption>secret is optional and only used in server side mode</caption>\n   * StreamChat.getInstance('api_key', \"secret\", { httpsAgent: customAgent })\n   */ _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_7___default()(StreamChat, [\n        {\n            key: \"devToken\",\n            value: function devToken(userID) {\n                return DevToken(userID);\n            }\n        },\n        {\n            key: \"getAuthType\",\n            value: function getAuthType() {\n                return this.anonymous ? \"anonymous\" : \"jwt\";\n            }\n        },\n        {\n            key: \"setBaseURL\",\n            value: function setBaseURL(baseURL) {\n                this.baseURL = baseURL;\n                this.wsBaseURL = this.baseURL.replace(\"http\", \"ws\").replace(\":3030\", \":8800\");\n            }\n        },\n        {\n            key: \"_setUser\",\n            value: function _setUser(user) {\n                /**\n       * This one is used by the frontend. This is a copy of the current user object stored on backend.\n       * It contains reserved properties and own user properties which are not present in `this._user`.\n       */ this.user = user;\n                this.userID = user.id; // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n                this._user = _objectSpread({}, user);\n            }\n        },\n        {\n            key: \"updateAppSettings\",\n            value: /**\n     * updateAppSettings - updates application settings\n     *\n     * @param {AppSettings} options App settings.\n     * IE: {\n        'apn_config': {\n          'auth_type': 'token',\n          'auth_key\": fs.readFileSync(\n            './apn-push-auth-key.p8',\n            'utf-8',\n          ),\n          'key_id': 'keyid',\n          'team_id': 'teamid',\n          'notification_template\": 'notification handlebars template',\n          'bundle_id': 'com.apple.your.app',\n          'development': true\n        },\n        'firebase_config': {\n          'server_key': 'server key from fcm',\n          'notification_template': 'notification handlebars template',\n          'data_template': 'data handlebars template',\n          'apn_template': 'apn notification handlebars template under v2'\n        },\n        'webhook_url': 'https://acme.com/my/awesome/webhook/'\n      }\n     */ function() {\n                var _updateAppSettings = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee7(options) {\n                    var apn_config;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee7$(_context7) {\n                        while(1){\n                            switch(_context7.prev = _context7.next){\n                                case 0:\n                                    apn_config = options.apn_config;\n                                    if (apn_config !== null && apn_config !== void 0 && apn_config.p12_cert) {\n                                        options = _objectSpread(_objectSpread({}, options), {}, {\n                                            apn_config: _objectSpread(_objectSpread({}, apn_config), {}, {\n                                                p12_cert: Buffer.from(apn_config.p12_cert).toString(\"base64\")\n                                            })\n                                        });\n                                    }\n                                    _context7.next = 4;\n                                    return this.patch(this.baseURL + \"/app\", options);\n                                case 4:\n                                    return _context7.abrupt(\"return\", _context7.sent);\n                                case 5:\n                                case \"end\":\n                                    return _context7.stop();\n                            }\n                        }\n                    }, _callee7, this);\n                }));\n                function updateAppSettings(_x8) {\n                    return _updateAppSettings.apply(this, arguments);\n                }\n                return updateAppSettings;\n            }()\n        },\n        {\n            key: \"revokeTokens\",\n            value: /**\n     * Revokes all tokens on application level issued before given time\n     */ function() {\n                var _revokeTokens = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee8(before) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee8$(_context8) {\n                        while(1){\n                            switch(_context8.prev = _context8.next){\n                                case 0:\n                                    _context8.next = 2;\n                                    return this.updateAppSettings({\n                                        revoke_tokens_issued_before: this._normalizeDate(before)\n                                    });\n                                case 2:\n                                    return _context8.abrupt(\"return\", _context8.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context8.stop();\n                            }\n                        }\n                    }, _callee8, this);\n                }));\n                function revokeTokens(_x9) {\n                    return _revokeTokens.apply(this, arguments);\n                }\n                return revokeTokens;\n            }()\n        },\n        {\n            key: \"revokeUserToken\",\n            value: function() {\n                var _revokeUserToken = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee9(userID, before) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee9$(_context9) {\n                        while(1){\n                            switch(_context9.prev = _context9.next){\n                                case 0:\n                                    _context9.next = 2;\n                                    return this.revokeUsersToken([\n                                        userID\n                                    ], before);\n                                case 2:\n                                    return _context9.abrupt(\"return\", _context9.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context9.stop();\n                            }\n                        }\n                    }, _callee9, this);\n                }));\n                function revokeUserToken(_x10, _x11) {\n                    return _revokeUserToken.apply(this, arguments);\n                }\n                return revokeUserToken;\n            }()\n        },\n        {\n            key: \"revokeUsersToken\",\n            value: function() {\n                var _revokeUsersToken = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee10(userIDs, before) {\n                    var users, _iterator, _step, userID;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee10$(_context10) {\n                        while(1){\n                            switch(_context10.prev = _context10.next){\n                                case 0:\n                                    if (before === undefined) {\n                                        before = new Date().toISOString();\n                                    } else {\n                                        before = this._normalizeDate(before);\n                                    }\n                                    users = [];\n                                    _iterator = _createForOfIteratorHelper(userIDs);\n                                    try {\n                                        for(_iterator.s(); !(_step = _iterator.n()).done;){\n                                            userID = _step.value;\n                                            users.push({\n                                                id: userID,\n                                                set: {\n                                                    revoke_tokens_issued_before: before\n                                                }\n                                            });\n                                        }\n                                    } catch (err) {\n                                        _iterator.e(err);\n                                    } finally{\n                                        _iterator.f();\n                                    }\n                                    _context10.next = 6;\n                                    return this.partialUpdateUsers(users);\n                                case 6:\n                                    return _context10.abrupt(\"return\", _context10.sent);\n                                case 7:\n                                case \"end\":\n                                    return _context10.stop();\n                            }\n                        }\n                    }, _callee10, this);\n                }));\n                function revokeUsersToken(_x12, _x13) {\n                    return _revokeUsersToken.apply(this, arguments);\n                }\n                return revokeUsersToken;\n            }()\n        },\n        {\n            key: \"getAppSettings\",\n            value: function() {\n                var _getAppSettings = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee11() {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee11$(_context11) {\n                        while(1){\n                            switch(_context11.prev = _context11.next){\n                                case 0:\n                                    _context11.next = 2;\n                                    return this.get(this.baseURL + \"/app\");\n                                case 2:\n                                    return _context11.abrupt(\"return\", _context11.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context11.stop();\n                            }\n                        }\n                    }, _callee11, this);\n                }));\n                function getAppSettings() {\n                    return _getAppSettings.apply(this, arguments);\n                }\n                return getAppSettings;\n            }()\n        },\n        {\n            key: \"testPushSettings\",\n            value: function() {\n                var _testPushSettings = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee12(userID) {\n                    var data, _args12 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee12$(_context12) {\n                        while(1){\n                            switch(_context12.prev = _context12.next){\n                                case 0:\n                                    data = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {};\n                                    _context12.next = 3;\n                                    return this.post(this.baseURL + \"/check_push\", _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n                                        user_id: userID\n                                    }, data.messageID ? {\n                                        message_id: data.messageID\n                                    } : {}), data.apnTemplate ? {\n                                        apn_template: data.apnTemplate\n                                    } : {}), data.firebaseTemplate ? {\n                                        firebase_template: data.firebaseTemplate\n                                    } : {}), data.firebaseDataTemplate ? {\n                                        firebase_data_template: data.firebaseDataTemplate\n                                    } : {}), data.skipDevices ? {\n                                        skip_devices: true\n                                    } : {}), data.pushProviderName ? {\n                                        push_provider_name: data.pushProviderName\n                                    } : {}), data.pushProviderType ? {\n                                        push_provider_type: data.pushProviderType\n                                    } : {}));\n                                case 3:\n                                    return _context12.abrupt(\"return\", _context12.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context12.stop();\n                            }\n                        }\n                    }, _callee12, this);\n                }));\n                function testPushSettings(_x14) {\n                    return _testPushSettings.apply(this, arguments);\n                }\n                return testPushSettings;\n            }()\n        },\n        {\n            key: \"testSQSSettings\",\n            value: function() {\n                var _testSQSSettings = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee13() {\n                    var data, _args13 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee13$(_context13) {\n                        while(1){\n                            switch(_context13.prev = _context13.next){\n                                case 0:\n                                    data = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};\n                                    _context13.next = 3;\n                                    return this.post(this.baseURL + \"/check_sqs\", data);\n                                case 3:\n                                    return _context13.abrupt(\"return\", _context13.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context13.stop();\n                            }\n                        }\n                    }, _callee13, this);\n                }));\n                function testSQSSettings() {\n                    return _testSQSSettings.apply(this, arguments);\n                }\n                return testSQSSettings;\n            }()\n        },\n        {\n            key: \"testSNSSettings\",\n            value: function() {\n                var _testSNSSettings = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee14() {\n                    var data, _args14 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee14$(_context14) {\n                        while(1){\n                            switch(_context14.prev = _context14.next){\n                                case 0:\n                                    data = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};\n                                    _context14.next = 3;\n                                    return this.post(this.baseURL + \"/check_sns\", data);\n                                case 3:\n                                    return _context14.abrupt(\"return\", _context14.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context14.stop();\n                            }\n                        }\n                    }, _callee14, this);\n                }));\n                function testSNSSettings() {\n                    return _testSNSSettings.apply(this, arguments);\n                }\n                return testSNSSettings;\n            }()\n        },\n        {\n            key: \"setGuestUser\",\n            value: /**\n     * setGuestUser - Setup a temporary guest user\n     *\n     * @param {UserResponse<StreamChatGenerics>} user Data about this user. IE {name: \"john\"}\n     *\n     * @return {ConnectAPIResponse<StreamChatGenerics>} Returns a promise that resolves when the connection is setup\n     */ function() {\n                var _setGuestUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee15(user) {\n                    var response, _response$user, guestUser;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee15$(_context15) {\n                        while(1){\n                            switch(_context15.prev = _context15.next){\n                                case 0:\n                                    this.anonymous = true;\n                                    _context15.prev = 1;\n                                    _context15.next = 4;\n                                    return this.post(this.baseURL + \"/guest\", {\n                                        user: user\n                                    });\n                                case 4:\n                                    response = _context15.sent;\n                                    _context15.next = 11;\n                                    break;\n                                case 7:\n                                    _context15.prev = 7;\n                                    _context15.t0 = _context15[\"catch\"](1);\n                                    this.anonymous = false;\n                                    throw _context15.t0;\n                                case 11:\n                                    this.anonymous = false; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                                    _response$user = response.user, _response$user.created_at, _response$user.updated_at, _response$user.last_active, _response$user.online, guestUser = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3___default()(_response$user, _excluded);\n                                    _context15.next = 15;\n                                    return this.connectUser(guestUser, response.access_token);\n                                case 15:\n                                    return _context15.abrupt(\"return\", _context15.sent);\n                                case 16:\n                                case \"end\":\n                                    return _context15.stop();\n                            }\n                        }\n                    }, _callee15, this, [\n                        [\n                            1,\n                            7\n                        ]\n                    ]);\n                }));\n                function setGuestUser(_x15) {\n                    return _setGuestUser.apply(this, arguments);\n                }\n                return setGuestUser;\n            }()\n        },\n        {\n            key: \"createToken\",\n            value: function createToken(userID, exp, iat) {\n                if (this.secret == null) {\n                    throw Error(\"tokens can only be created server-side using the API Secret\");\n                }\n                var extra = {};\n                if (exp) {\n                    extra.exp = exp;\n                }\n                if (iat) {\n                    extra.iat = iat;\n                }\n                return JWTUserToken(this.secret, userID, extra, {});\n            }\n        },\n        {\n            key: \"on\",\n            value: function on(callbackOrString, callbackOrNothing) {\n                var _this2 = this;\n                var key = callbackOrNothing ? callbackOrString : \"all\";\n                var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n                if (!(key in this.listeners)) {\n                    this.listeners[key] = [];\n                }\n                this.logger(\"info\", \"Attaching listener for \".concat(key, \" event\"), {\n                    tags: [\n                        \"event\",\n                        \"client\"\n                    ]\n                });\n                this.listeners[key].push(callback);\n                return {\n                    unsubscribe: function unsubscribe() {\n                        _this2.logger(\"info\", \"Removing listener for \".concat(key, \" event\"), {\n                            tags: [\n                                \"event\",\n                                \"client\"\n                            ]\n                        });\n                        _this2.listeners[key] = _this2.listeners[key].filter(function(el) {\n                            return el !== callback;\n                        });\n                    }\n                };\n            }\n        },\n        {\n            key: \"off\",\n            value: function off(callbackOrString, callbackOrNothing) {\n                var key = callbackOrNothing ? callbackOrString : \"all\";\n                var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n                if (!(key in this.listeners)) {\n                    this.listeners[key] = [];\n                }\n                this.logger(\"info\", \"Removing listener for \".concat(key, \" event\"), {\n                    tags: [\n                        \"event\",\n                        \"client\"\n                    ]\n                });\n                this.listeners[key] = this.listeners[key].filter(function(value) {\n                    return value !== callback;\n                });\n            }\n        },\n        {\n            key: \"_logApiRequest\",\n            value: function _logApiRequest(type, url, data, config) {\n                this.logger(\"info\", \"client: \".concat(type, \" - Request - \").concat(url), {\n                    tags: [\n                        \"api\",\n                        \"api_request\",\n                        \"client\"\n                    ],\n                    url: url,\n                    payload: data,\n                    config: config\n                });\n            }\n        },\n        {\n            key: \"_logApiResponse\",\n            value: function _logApiResponse(type, url, response) {\n                this.logger(\"info\", \"client:\".concat(type, \" - Response - url: \").concat(url, \" > status \").concat(response.status), {\n                    tags: [\n                        \"api\",\n                        \"api_response\",\n                        \"client\"\n                    ],\n                    url: url,\n                    response: response\n                });\n            }\n        },\n        {\n            key: \"_logApiError\",\n            value: function _logApiError(type, url, error) {\n                this.logger(\"error\", \"client:\".concat(type, \" - Error - url: \").concat(url), {\n                    tags: [\n                        \"api\",\n                        \"api_response\",\n                        \"client\"\n                    ],\n                    url: url,\n                    error: error\n                });\n            }\n        },\n        {\n            key: \"get\",\n            value: function get(url, params) {\n                return this.doAxiosRequest(\"get\", url, null, {\n                    params: params\n                });\n            }\n        },\n        {\n            key: \"put\",\n            value: function put(url, data) {\n                return this.doAxiosRequest(\"put\", url, data);\n            }\n        },\n        {\n            key: \"post\",\n            value: function post(url, data) {\n                return this.doAxiosRequest(\"post\", url, data);\n            }\n        },\n        {\n            key: \"patch\",\n            value: function patch(url, data) {\n                return this.doAxiosRequest(\"patch\", url, data);\n            }\n        },\n        {\n            key: \"delete\",\n            value: function _delete(url, params) {\n                return this.doAxiosRequest(\"delete\", url, null, {\n                    params: params\n                });\n            }\n        },\n        {\n            key: \"sendFile\",\n            value: function sendFile(url, uri, name, contentType, user) {\n                var data = addFileToFormData(uri, name, contentType || \"multipart/form-data\");\n                if (user != null) data.append(\"user\", JSON.stringify(user));\n                return this.doAxiosRequest(\"postForm\", url, data, {\n                    headers: data.getHeaders ? data.getHeaders() : {},\n                    // node vs browser\n                    config: {\n                        timeout: 0,\n                        maxContentLength: Infinity,\n                        maxBodyLength: Infinity\n                    }\n                });\n            }\n        },\n        {\n            key: \"errorFromResponse\",\n            value: function errorFromResponse(response) {\n                var err;\n                err = new ErrorFromResponse(\"StreamChat error HTTP code: \".concat(response.status));\n                if (response.data && response.data.code) {\n                    err = new Error(\"StreamChat error code \".concat(response.data.code, \": \").concat(response.data.message));\n                    err.code = response.data.code;\n                }\n                err.response = response;\n                err.status = response.status;\n                return err;\n            }\n        },\n        {\n            key: \"handleResponse\",\n            value: function handleResponse(response) {\n                var data = response.data;\n                if (isErrorResponse(response)) {\n                    throw this.errorFromResponse(response);\n                }\n                return data;\n            }\n        },\n        {\n            key: \"_handleClientEvent\",\n            value: function _handleClientEvent(event) {\n                var _event$me, _event$me2, _this3 = this;\n                var client = this;\n                var postListenerCallbacks = [];\n                this.logger(\"info\", \"client:_handleClientEvent - Received event of type { \".concat(event.type, \" }\"), {\n                    tags: [\n                        \"event\",\n                        \"client\"\n                    ],\n                    event: event\n                });\n                if (event.type === \"user.presence.changed\" || event.type === \"user.updated\" || event.type === \"user.deleted\") {\n                    this._handleUserEvent(event);\n                }\n                if (event.type === \"health.check\" && event.me) {\n                    client.user = event.me;\n                    client.state.updateUser(event.me);\n                    client.mutedChannels = event.me.channel_mutes;\n                    client.mutedUsers = event.me.mutes;\n                }\n                if (event.channel && event.type === \"notification.message_new\") {\n                    this._addChannelConfig(event.channel);\n                }\n                if (event.type === \"notification.channel_mutes_updated\" && (_event$me = event.me) !== null && _event$me !== void 0 && _event$me.channel_mutes) {\n                    this.mutedChannels = event.me.channel_mutes;\n                }\n                if (event.type === \"notification.mutes_updated\" && (_event$me2 = event.me) !== null && _event$me2 !== void 0 && _event$me2.mutes) {\n                    this.mutedUsers = event.me.mutes;\n                }\n                if (event.type === \"notification.mark_read\" && event.unread_channels === 0) {\n                    var activeChannelKeys = Object.keys(this.activeChannels);\n                    activeChannelKeys.forEach(function(activeChannelKey) {\n                        return _this3.activeChannels[activeChannelKey].state.unreadCount = 0;\n                    });\n                }\n                if ((event.type === \"channel.deleted\" || event.type === \"notification.channel_deleted\") && event.cid) {\n                    var _this$activeChannels$;\n                    client.state.deleteAllChannelReference(event.cid);\n                    (_this$activeChannels$ = this.activeChannels[event.cid]) === null || _this$activeChannels$ === void 0 ? void 0 : _this$activeChannels$._disconnect();\n                    postListenerCallbacks.push(function() {\n                        if (!event.cid) return;\n                        delete _this3.activeChannels[event.cid];\n                    });\n                }\n                return postListenerCallbacks;\n            }\n        },\n        {\n            key: \"_muteStatus\",\n            value: function _muteStatus(cid) {\n                var muteStatus;\n                for(var i = 0; i < this.mutedChannels.length; i++){\n                    var _mute$channel;\n                    var mute = this.mutedChannels[i];\n                    if (((_mute$channel = mute.channel) === null || _mute$channel === void 0 ? void 0 : _mute$channel.cid) === cid) {\n                        muteStatus = {\n                            muted: mute.expires ? new Date(mute.expires).getTime() > new Date().getTime() : true,\n                            createdAt: mute.created_at ? new Date(mute.created_at) : new Date(),\n                            expiresAt: mute.expires ? new Date(mute.expires) : null\n                        };\n                        break;\n                    }\n                }\n                if (muteStatus) {\n                    return muteStatus;\n                }\n                return {\n                    muted: false,\n                    createdAt: null,\n                    expiresAt: null\n                };\n            }\n        },\n        {\n            key: \"connect\",\n            value: /**\n     * @private\n     */ function() {\n                var _connect = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee16() {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee16$(_context16) {\n                        while(1){\n                            switch(_context16.prev = _context16.next){\n                                case 0:\n                                    if (!(!this.userID || !this._user)) {\n                                        _context16.next = 2;\n                                        break;\n                                    }\n                                    throw Error(\"Call connectUser or connectAnonymousUser before starting the connection\");\n                                case 2:\n                                    if (this.wsBaseURL) {\n                                        _context16.next = 4;\n                                        break;\n                                    }\n                                    throw Error(\"Websocket base url not set\");\n                                case 4:\n                                    if (this.clientID) {\n                                        _context16.next = 6;\n                                        break;\n                                    }\n                                    throw Error(\"clientID is not set\");\n                                case 6:\n                                    if (!this.wsConnection && (this.options.warmUp || this.options.enableInsights)) {\n                                        this._sayHi();\n                                    } // The StableWSConnection handles all the reconnection logic.\n                                    if (this.options.wsConnection && this.node) {\n                                        // Intentionally avoiding adding ts generics on wsConnection in options since its only useful for unit test purpose.\n                                        this.options.wsConnection.setClient(this);\n                                        this.wsConnection = this.options.wsConnection;\n                                    } else {\n                                        this.wsConnection = new StableWSConnection({\n                                            client: this\n                                        });\n                                    }\n                                    _context16.prev = 8;\n                                    if (!this.wsFallback) {\n                                        _context16.next = 13;\n                                        break;\n                                    }\n                                    _context16.next = 12;\n                                    return this.wsFallback.connect();\n                                case 12:\n                                    return _context16.abrupt(\"return\", _context16.sent);\n                                case 13:\n                                    _context16.next = 15;\n                                    return this.wsConnection.connect(this.options.enableWSFallback ? this.defaultWSTimeoutWithFallback : this.defaultWSTimeout);\n                                case 15:\n                                    return _context16.abrupt(\"return\", _context16.sent);\n                                case 18:\n                                    _context16.prev = 18;\n                                    _context16.t0 = _context16[\"catch\"](8);\n                                    if (!(this.options.enableWSFallback && isWSFailure(_context16.t0) && isOnline())) {\n                                        _context16.next = 29;\n                                        break;\n                                    }\n                                    this.logger(\"info\", \"client:connect() - WS failed, fallback to longpoll\", {\n                                        tags: [\n                                            \"connection\",\n                                            \"client\"\n                                        ]\n                                    });\n                                    this.dispatchEvent({\n                                        type: \"transport.changed\",\n                                        mode: \"longpoll\"\n                                    });\n                                    this.wsConnection._destroyCurrentWSConnection();\n                                    this.wsConnection.disconnect().then(); // close WS so no retry\n                                    this.wsFallback = new WSConnectionFallback({\n                                        client: this\n                                    });\n                                    _context16.next = 28;\n                                    return this.wsFallback.connect();\n                                case 28:\n                                    return _context16.abrupt(\"return\", _context16.sent);\n                                case 29:\n                                    throw _context16.t0;\n                                case 30:\n                                case \"end\":\n                                    return _context16.stop();\n                            }\n                        }\n                    }, _callee16, this, [\n                        [\n                            8,\n                            18\n                        ]\n                    ]);\n                }));\n                function connect() {\n                    return _connect.apply(this, arguments);\n                }\n                return connect;\n            }()\n        },\n        {\n            key: \"_sayHi\",\n            value: function _sayHi() {\n                var _this4 = this;\n                var client_request_id = randomId();\n                var opts = {\n                    headers: {\n                        \"x-client-request-id\": client_request_id\n                    }\n                };\n                this.doAxiosRequest(\"get\", this.baseURL + \"/hi\", null, opts).catch(function(e) {\n                    if (_this4.options.enableInsights) {\n                        postInsights(\"http_hi_failed\", {\n                            api_key: _this4.key,\n                            err: e,\n                            client_request_id: client_request_id\n                        });\n                    }\n                });\n            }\n        },\n        {\n            key: \"queryUsers\",\n            value: function() {\n                var _queryUsers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee17(filterConditions) {\n                    var sort, options, defaultOptions, data, _args17 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee17$(_context17) {\n                        while(1){\n                            switch(_context17.prev = _context17.next){\n                                case 0:\n                                    sort = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : [];\n                                    options = _args17.length > 2 && _args17[2] !== undefined ? _args17[2] : {};\n                                    defaultOptions = {\n                                        presence: false\n                                    }; // Make sure we wait for the connect promise if there is a pending one\n                                    _context17.next = 5;\n                                    return this.wsPromise;\n                                case 5:\n                                    if (!this._hasConnectionID()) {\n                                        defaultOptions.presence = false;\n                                    } // Return a list of users\n                                    _context17.next = 8;\n                                    return this.get(this.baseURL + \"/users\", {\n                                        payload: _objectSpread(_objectSpread({\n                                            filter_conditions: filterConditions,\n                                            sort: normalizeQuerySort(sort)\n                                        }, defaultOptions), options)\n                                    });\n                                case 8:\n                                    data = _context17.sent;\n                                    this.state.updateUsers(data.users);\n                                    return _context17.abrupt(\"return\", data);\n                                case 11:\n                                case \"end\":\n                                    return _context17.stop();\n                            }\n                        }\n                    }, _callee17, this);\n                }));\n                function queryUsers(_x16) {\n                    return _queryUsers.apply(this, arguments);\n                }\n                return queryUsers;\n            }()\n        },\n        {\n            key: \"queryBannedUsers\",\n            value: function() {\n                var _queryBannedUsers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee18() {\n                    var filterConditions, sort, options, _args18 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee18$(_context18) {\n                        while(1){\n                            switch(_context18.prev = _context18.next){\n                                case 0:\n                                    filterConditions = _args18.length > 0 && _args18[0] !== undefined ? _args18[0] : {};\n                                    sort = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : [];\n                                    options = _args18.length > 2 && _args18[2] !== undefined ? _args18[2] : {};\n                                    _context18.next = 5;\n                                    return this.get(this.baseURL + \"/query_banned_users\", {\n                                        payload: _objectSpread({\n                                            filter_conditions: filterConditions,\n                                            sort: normalizeQuerySort(sort)\n                                        }, options)\n                                    });\n                                case 5:\n                                    return _context18.abrupt(\"return\", _context18.sent);\n                                case 6:\n                                case \"end\":\n                                    return _context18.stop();\n                            }\n                        }\n                    }, _callee18, this);\n                }));\n                function queryBannedUsers() {\n                    return _queryBannedUsers.apply(this, arguments);\n                }\n                return queryBannedUsers;\n            }()\n        },\n        {\n            key: \"queryMessageFlags\",\n            value: function() {\n                var _queryMessageFlags = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee19() {\n                    var filterConditions, options, _args19 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee19$(_context19) {\n                        while(1){\n                            switch(_context19.prev = _context19.next){\n                                case 0:\n                                    filterConditions = _args19.length > 0 && _args19[0] !== undefined ? _args19[0] : {};\n                                    options = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : {};\n                                    _context19.next = 4;\n                                    return this.get(this.baseURL + \"/moderation/flags/message\", {\n                                        payload: _objectSpread({\n                                            filter_conditions: filterConditions\n                                        }, options)\n                                    });\n                                case 4:\n                                    return _context19.abrupt(\"return\", _context19.sent);\n                                case 5:\n                                case \"end\":\n                                    return _context19.stop();\n                            }\n                        }\n                    }, _callee19, this);\n                }));\n                function queryMessageFlags() {\n                    return _queryMessageFlags.apply(this, arguments);\n                }\n                return queryMessageFlags;\n            }()\n        },\n        {\n            key: \"queryChannels\",\n            value: function() {\n                var _queryChannels = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee20(filterConditions) {\n                    var sort, options, stateOptions, defaultOptions, payload, data, _args20 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee20$(_context20) {\n                        while(1){\n                            switch(_context20.prev = _context20.next){\n                                case 0:\n                                    sort = _args20.length > 1 && _args20[1] !== undefined ? _args20[1] : [];\n                                    options = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : {};\n                                    stateOptions = _args20.length > 3 && _args20[3] !== undefined ? _args20[3] : {};\n                                    defaultOptions = {\n                                        state: true,\n                                        watch: true,\n                                        presence: false\n                                    }; // Make sure we wait for the connect promise if there is a pending one\n                                    _context20.next = 6;\n                                    return this.wsPromise;\n                                case 6:\n                                    if (!this._hasConnectionID()) {\n                                        defaultOptions.watch = false;\n                                    } // Return a list of channels\n                                    payload = _objectSpread(_objectSpread({\n                                        filter_conditions: filterConditions,\n                                        sort: normalizeQuerySort(sort)\n                                    }, defaultOptions), options);\n                                    _context20.next = 10;\n                                    return this.post(this.baseURL + \"/channels\", payload);\n                                case 10:\n                                    data = _context20.sent;\n                                    this.dispatchEvent({\n                                        type: \"channels.queried\",\n                                        queriedChannels: {\n                                            channels: data.channels,\n                                            isLatestMessageSet: true\n                                        }\n                                    });\n                                    return _context20.abrupt(\"return\", this.hydrateActiveChannels(data.channels, stateOptions));\n                                case 13:\n                                case \"end\":\n                                    return _context20.stop();\n                            }\n                        }\n                    }, _callee20, this);\n                }));\n                function queryChannels(_x17) {\n                    return _queryChannels.apply(this, arguments);\n                }\n                return queryChannels;\n            }()\n        },\n        {\n            key: \"hydrateActiveChannels\",\n            value: function hydrateActiveChannels() {\n                var channelsFromApi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n                var stateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var skipInitialization = stateOptions.skipInitialization, _stateOptions$offline = stateOptions.offlineMode, offlineMode = _stateOptions$offline === void 0 ? false : _stateOptions$offline;\n                var _iterator2 = _createForOfIteratorHelper(channelsFromApi), _step2;\n                try {\n                    for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){\n                        var channelState = _step2.value;\n                        this._addChannelConfig(channelState.channel);\n                    }\n                } catch (err) {\n                    _iterator2.e(err);\n                } finally{\n                    _iterator2.f();\n                }\n                var channels = [];\n                var _iterator3 = _createForOfIteratorHelper(channelsFromApi), _step3;\n                try {\n                    for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){\n                        var _channelState = _step3.value;\n                        var c = this.channel(_channelState.channel.type, _channelState.channel.id);\n                        c.data = _channelState.channel;\n                        c.offlineMode = offlineMode;\n                        c.initialized = !offlineMode;\n                        if (skipInitialization === undefined) {\n                            c._initializeState(_channelState, \"latest\");\n                        } else if (!skipInitialization.includes(_channelState.channel.id)) {\n                            c.state.clearMessages();\n                            c._initializeState(_channelState, \"latest\");\n                        }\n                        channels.push(c);\n                    }\n                } catch (err) {\n                    _iterator3.e(err);\n                } finally{\n                    _iterator3.f();\n                }\n                return channels;\n            }\n        },\n        {\n            key: \"search\",\n            value: function() {\n                var _search = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee21(filterConditions, query) {\n                    var options, payload, _args21 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee21$(_context21) {\n                        while(1){\n                            switch(_context21.prev = _context21.next){\n                                case 0:\n                                    options = _args21.length > 2 && _args21[2] !== undefined ? _args21[2] : {};\n                                    if (!(options.offset && options.next)) {\n                                        _context21.next = 3;\n                                        break;\n                                    }\n                                    throw Error(\"Cannot specify offset with next\");\n                                case 3:\n                                    payload = _objectSpread(_objectSpread({\n                                        filter_conditions: filterConditions\n                                    }, options), {}, {\n                                        sort: options.sort ? normalizeQuerySort(options.sort) : undefined\n                                    });\n                                    if (!(typeof query === \"string\")) {\n                                        _context21.next = 8;\n                                        break;\n                                    }\n                                    payload.query = query;\n                                    _context21.next = 13;\n                                    break;\n                                case 8:\n                                    if (!(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(query) === \"object\")) {\n                                        _context21.next = 12;\n                                        break;\n                                    }\n                                    payload.message_filter_conditions = query;\n                                    _context21.next = 13;\n                                    break;\n                                case 12:\n                                    throw Error(\"Invalid type \".concat(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(query), \" for query parameter\"));\n                                case 13:\n                                    _context21.next = 15;\n                                    return this.wsPromise;\n                                case 15:\n                                    _context21.next = 17;\n                                    return this.get(this.baseURL + \"/search\", {\n                                        payload: payload\n                                    });\n                                case 17:\n                                    return _context21.abrupt(\"return\", _context21.sent);\n                                case 18:\n                                case \"end\":\n                                    return _context21.stop();\n                            }\n                        }\n                    }, _callee21, this);\n                }));\n                function search(_x18, _x19) {\n                    return _search.apply(this, arguments);\n                }\n                return search;\n            }()\n        },\n        {\n            key: \"setLocalDevice\",\n            value: function setLocalDevice(device) {\n                var _this$wsConnection5, _this$wsConnection6, _this$wsFallback4;\n                if ((_this$wsConnection5 = this.wsConnection) !== null && _this$wsConnection5 !== void 0 && _this$wsConnection5.isConnecting && this.wsPromise || ((_this$wsConnection6 = this.wsConnection) !== null && _this$wsConnection6 !== void 0 && _this$wsConnection6.isHealthy || (_this$wsFallback4 = this.wsFallback) !== null && _this$wsFallback4 !== void 0 && _this$wsFallback4.isHealthy()) && this._hasConnectionID()) {\n                    throw new Error(\"you can only set device before opening a websocket connection\");\n                }\n                this.options.device = device;\n            }\n        },\n        {\n            key: \"addDevice\",\n            value: function() {\n                var _addDevice = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee22(id, push_provider, userID, push_provider_name) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee22$(_context22) {\n                        while(1){\n                            switch(_context22.prev = _context22.next){\n                                case 0:\n                                    _context22.next = 2;\n                                    return this.post(this.baseURL + \"/devices\", _objectSpread(_objectSpread({\n                                        id: id,\n                                        push_provider: push_provider\n                                    }, userID != null ? {\n                                        user_id: userID\n                                    } : {}), push_provider_name != null ? {\n                                        push_provider_name: push_provider_name\n                                    } : {}));\n                                case 2:\n                                    return _context22.abrupt(\"return\", _context22.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context22.stop();\n                            }\n                        }\n                    }, _callee22, this);\n                }));\n                function addDevice(_x20, _x21, _x22, _x23) {\n                    return _addDevice.apply(this, arguments);\n                }\n                return addDevice;\n            }()\n        },\n        {\n            key: \"getDevices\",\n            value: function() {\n                var _getDevices = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee23(userID) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee23$(_context23) {\n                        while(1){\n                            switch(_context23.prev = _context23.next){\n                                case 0:\n                                    _context23.next = 2;\n                                    return this.get(this.baseURL + \"/devices\", userID ? {\n                                        user_id: userID\n                                    } : {});\n                                case 2:\n                                    return _context23.abrupt(\"return\", _context23.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context23.stop();\n                            }\n                        }\n                    }, _callee23, this);\n                }));\n                function getDevices(_x24) {\n                    return _getDevices.apply(this, arguments);\n                }\n                return getDevices;\n            }()\n        },\n        {\n            key: \"getUnreadCount\",\n            value: function() {\n                var _getUnreadCount = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee24(userID) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee24$(_context24) {\n                        while(1){\n                            switch(_context24.prev = _context24.next){\n                                case 0:\n                                    _context24.next = 2;\n                                    return this.get(this.baseURL + \"/unread\", userID ? {\n                                        user_id: userID\n                                    } : {});\n                                case 2:\n                                    return _context24.abrupt(\"return\", _context24.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context24.stop();\n                            }\n                        }\n                    }, _callee24, this);\n                }));\n                function getUnreadCount(_x25) {\n                    return _getUnreadCount.apply(this, arguments);\n                }\n                return getUnreadCount;\n            }()\n        },\n        {\n            key: \"getUnreadCountBatch\",\n            value: function() {\n                var _getUnreadCountBatch = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee25(userIDs) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee25$(_context25) {\n                        while(1){\n                            switch(_context25.prev = _context25.next){\n                                case 0:\n                                    _context25.next = 2;\n                                    return this.post(this.baseURL + \"/unread_batch\", {\n                                        user_ids: userIDs\n                                    });\n                                case 2:\n                                    return _context25.abrupt(\"return\", _context25.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context25.stop();\n                            }\n                        }\n                    }, _callee25, this);\n                }));\n                function getUnreadCountBatch(_x26) {\n                    return _getUnreadCountBatch.apply(this, arguments);\n                }\n                return getUnreadCountBatch;\n            }()\n        },\n        {\n            key: \"removeDevice\",\n            value: function() {\n                var _removeDevice = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee26(id, userID) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee26$(_context26) {\n                        while(1){\n                            switch(_context26.prev = _context26.next){\n                                case 0:\n                                    _context26.next = 2;\n                                    return this.delete(this.baseURL + \"/devices\", _objectSpread({\n                                        id: id\n                                    }, userID ? {\n                                        user_id: userID\n                                    } : {}));\n                                case 2:\n                                    return _context26.abrupt(\"return\", _context26.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context26.stop();\n                            }\n                        }\n                    }, _callee26, this);\n                }));\n                function removeDevice(_x27, _x28) {\n                    return _removeDevice.apply(this, arguments);\n                }\n                return removeDevice;\n            }()\n        },\n        {\n            key: \"getRateLimits\",\n            value: function() {\n                var _getRateLimits = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee27(params) {\n                    var _ref7, serverSide, web, android, ios, endpoints;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee27$(_context27) {\n                        while(1){\n                            switch(_context27.prev = _context27.next){\n                                case 0:\n                                    _ref7 = params || {}, serverSide = _ref7.serverSide, web = _ref7.web, android = _ref7.android, ios = _ref7.ios, endpoints = _ref7.endpoints;\n                                    return _context27.abrupt(\"return\", this.get(this.baseURL + \"/rate_limits\", {\n                                        server_side: serverSide,\n                                        web: web,\n                                        android: android,\n                                        ios: ios,\n                                        endpoints: endpoints ? endpoints.join(\",\") : undefined\n                                    }));\n                                case 2:\n                                case \"end\":\n                                    return _context27.stop();\n                            }\n                        }\n                    }, _callee27, this);\n                }));\n                function getRateLimits(_x29) {\n                    return _getRateLimits.apply(this, arguments);\n                }\n                return getRateLimits;\n            }()\n        },\n        {\n            key: \"_addChannelConfig\",\n            value: function _addChannelConfig(_ref8) {\n                var cid = _ref8.cid, config = _ref8.config;\n                this.configs[cid] = config;\n            }\n        },\n        {\n            key: \"channel\",\n            value: function channel(channelType, channelIDOrCustom) {\n                var _custom$members;\n                var custom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                if (!this.userID && !this._isUsingServerAuth()) {\n                    throw Error(\"Call connectUser or connectAnonymousUser before creating a channel\");\n                }\n                if (~channelType.indexOf(\":\")) {\n                    throw Error(\"Invalid channel group \".concat(channelType, \", can't contain the : character\"));\n                } // support channel(\"messaging\", {options})\n                if (channelIDOrCustom && _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(channelIDOrCustom) === \"object\") {\n                    return this.getChannelByMembers(channelType, channelIDOrCustom);\n                } // // support channel(\"messaging\", undefined, {options})\n                if (!channelIDOrCustom && _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(custom) === \"object\" && (_custom$members = custom.members) !== null && _custom$members !== void 0 && _custom$members.length) {\n                    return this.getChannelByMembers(channelType, custom);\n                } // support channel(\"messaging\", null, {options})\n                // support channel(\"messaging\", undefined, {options})\n                // support channel(\"messaging\", \"\", {options})\n                if (!channelIDOrCustom) {\n                    return new Channel(this, channelType, undefined, custom);\n                }\n                return this.getChannelById(channelType, channelIDOrCustom, custom);\n            }\n        },\n        {\n            key: \"partialUpdateUser\",\n            value: /**\n     * partialUpdateUser - Update the given user object\n     *\n     * @param {PartialUserUpdate<StreamChatGenerics>} partialUserObject which should contain id and any of \"set\" or \"unset\" params;\n     * example: {id: \"user1\", set:{field: value}, unset:[\"field2\"]}\n     *\n     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>} list of updated users\n     */ function() {\n                var _partialUpdateUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee28(partialUserObject) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee28$(_context28) {\n                        while(1){\n                            switch(_context28.prev = _context28.next){\n                                case 0:\n                                    _context28.next = 2;\n                                    return this.partialUpdateUsers([\n                                        partialUserObject\n                                    ]);\n                                case 2:\n                                    return _context28.abrupt(\"return\", _context28.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context28.stop();\n                            }\n                        }\n                    }, _callee28, this);\n                }));\n                function partialUpdateUser(_x30) {\n                    return _partialUpdateUser.apply(this, arguments);\n                }\n                return partialUpdateUser;\n            }()\n        },\n        {\n            key: \"upsertUsers\",\n            value: function() {\n                var _upsertUsers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee29(users) {\n                    var userMap, _iterator4, _step4, userObject;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee29$(_context29) {\n                        while(1){\n                            switch(_context29.prev = _context29.next){\n                                case 0:\n                                    userMap = {};\n                                    _iterator4 = _createForOfIteratorHelper(users);\n                                    _context29.prev = 2;\n                                    _iterator4.s();\n                                case 4:\n                                    if ((_step4 = _iterator4.n()).done) {\n                                        _context29.next = 11;\n                                        break;\n                                    }\n                                    userObject = _step4.value;\n                                    if (userObject.id) {\n                                        _context29.next = 8;\n                                        break;\n                                    }\n                                    throw Error(\"User ID is required when updating a user\");\n                                case 8:\n                                    userMap[userObject.id] = userObject;\n                                case 9:\n                                    _context29.next = 4;\n                                    break;\n                                case 11:\n                                    _context29.next = 16;\n                                    break;\n                                case 13:\n                                    _context29.prev = 13;\n                                    _context29.t0 = _context29[\"catch\"](2);\n                                    _iterator4.e(_context29.t0);\n                                case 16:\n                                    _context29.prev = 16;\n                                    _iterator4.f();\n                                    return _context29.finish(16);\n                                case 19:\n                                    _context29.next = 21;\n                                    return this.post(this.baseURL + \"/users\", {\n                                        users: userMap\n                                    });\n                                case 21:\n                                    return _context29.abrupt(\"return\", _context29.sent);\n                                case 22:\n                                case \"end\":\n                                    return _context29.stop();\n                            }\n                        }\n                    }, _callee29, this, [\n                        [\n                            2,\n                            13,\n                            16,\n                            19\n                        ]\n                    ]);\n                }));\n                function upsertUsers(_x31) {\n                    return _upsertUsers.apply(this, arguments);\n                }\n                return upsertUsers;\n            }()\n        },\n        {\n            key: \"upsertUser\",\n            value: /**\n     * upsertUser - Update or Create the given user object\n     *\n     * @param {UserResponse<StreamChatGenerics>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n     *\n     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n     */ function upsertUser(userObject) {\n                return this.upsertUsers([\n                    userObject\n                ]);\n            }\n        },\n        {\n            key: \"partialUpdateUsers\",\n            value: /**\n     * partialUpdateUsers - Batch partial update of users\n     *\n     * @param {PartialUserUpdate<StreamChatGenerics>[]} users list of partial update requests\n     *\n     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n     */ function() {\n                var _partialUpdateUsers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee30(users) {\n                    var _iterator5, _step5, userObject;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee30$(_context30) {\n                        while(1){\n                            switch(_context30.prev = _context30.next){\n                                case 0:\n                                    _iterator5 = _createForOfIteratorHelper(users);\n                                    _context30.prev = 1;\n                                    _iterator5.s();\n                                case 3:\n                                    if ((_step5 = _iterator5.n()).done) {\n                                        _context30.next = 9;\n                                        break;\n                                    }\n                                    userObject = _step5.value;\n                                    if (userObject.id) {\n                                        _context30.next = 7;\n                                        break;\n                                    }\n                                    throw Error(\"User ID is required when updating a user\");\n                                case 7:\n                                    _context30.next = 3;\n                                    break;\n                                case 9:\n                                    _context30.next = 14;\n                                    break;\n                                case 11:\n                                    _context30.prev = 11;\n                                    _context30.t0 = _context30[\"catch\"](1);\n                                    _iterator5.e(_context30.t0);\n                                case 14:\n                                    _context30.prev = 14;\n                                    _iterator5.f();\n                                    return _context30.finish(14);\n                                case 17:\n                                    _context30.next = 19;\n                                    return this.patch(this.baseURL + \"/users\", {\n                                        users: users\n                                    });\n                                case 19:\n                                    return _context30.abrupt(\"return\", _context30.sent);\n                                case 20:\n                                case \"end\":\n                                    return _context30.stop();\n                            }\n                        }\n                    }, _callee30, this, [\n                        [\n                            1,\n                            11,\n                            14,\n                            17\n                        ]\n                    ]);\n                }));\n                function partialUpdateUsers(_x32) {\n                    return _partialUpdateUsers.apply(this, arguments);\n                }\n                return partialUpdateUsers;\n            }()\n        },\n        {\n            key: \"deleteUser\",\n            value: function() {\n                var _deleteUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee31(userID, params) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee31$(_context31) {\n                        while(1){\n                            switch(_context31.prev = _context31.next){\n                                case 0:\n                                    _context31.next = 2;\n                                    return this.delete(this.baseURL + \"/users/\".concat(userID), params);\n                                case 2:\n                                    return _context31.abrupt(\"return\", _context31.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context31.stop();\n                            }\n                        }\n                    }, _callee31, this);\n                }));\n                function deleteUser(_x33, _x34) {\n                    return _deleteUser.apply(this, arguments);\n                }\n                return deleteUser;\n            }()\n        },\n        {\n            key: \"restoreUsers\",\n            value: function() {\n                var _restoreUsers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee32(user_ids) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee32$(_context32) {\n                        while(1){\n                            switch(_context32.prev = _context32.next){\n                                case 0:\n                                    _context32.next = 2;\n                                    return this.post(this.baseURL + \"/users/restore\", {\n                                        user_ids: user_ids\n                                    });\n                                case 2:\n                                    return _context32.abrupt(\"return\", _context32.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context32.stop();\n                            }\n                        }\n                    }, _callee32, this);\n                }));\n                function restoreUsers(_x35) {\n                    return _restoreUsers.apply(this, arguments);\n                }\n                return restoreUsers;\n            }()\n        },\n        {\n            key: \"reactivateUser\",\n            value: function() {\n                var _reactivateUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee33(userID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee33$(_context33) {\n                        while(1){\n                            switch(_context33.prev = _context33.next){\n                                case 0:\n                                    _context33.next = 2;\n                                    return this.post(this.baseURL + \"/users/\".concat(userID, \"/reactivate\"), _objectSpread({}, options));\n                                case 2:\n                                    return _context33.abrupt(\"return\", _context33.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context33.stop();\n                            }\n                        }\n                    }, _callee33, this);\n                }));\n                function reactivateUser(_x36, _x37) {\n                    return _reactivateUser.apply(this, arguments);\n                }\n                return reactivateUser;\n            }()\n        },\n        {\n            key: \"reactivateUsers\",\n            value: function() {\n                var _reactivateUsers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee34(user_ids, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee34$(_context34) {\n                        while(1){\n                            switch(_context34.prev = _context34.next){\n                                case 0:\n                                    _context34.next = 2;\n                                    return this.post(this.baseURL + \"/users/reactivate\", _objectSpread({\n                                        user_ids: user_ids\n                                    }, options));\n                                case 2:\n                                    return _context34.abrupt(\"return\", _context34.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context34.stop();\n                            }\n                        }\n                    }, _callee34, this);\n                }));\n                function reactivateUsers(_x38, _x39) {\n                    return _reactivateUsers.apply(this, arguments);\n                }\n                return reactivateUsers;\n            }()\n        },\n        {\n            key: \"deactivateUser\",\n            value: function() {\n                var _deactivateUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee35(userID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee35$(_context35) {\n                        while(1){\n                            switch(_context35.prev = _context35.next){\n                                case 0:\n                                    _context35.next = 2;\n                                    return this.post(this.baseURL + \"/users/\".concat(userID, \"/deactivate\"), _objectSpread({}, options));\n                                case 2:\n                                    return _context35.abrupt(\"return\", _context35.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context35.stop();\n                            }\n                        }\n                    }, _callee35, this);\n                }));\n                function deactivateUser(_x40, _x41) {\n                    return _deactivateUser.apply(this, arguments);\n                }\n                return deactivateUser;\n            }()\n        },\n        {\n            key: \"deactivateUsers\",\n            value: function() {\n                var _deactivateUsers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee36(user_ids, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee36$(_context36) {\n                        while(1){\n                            switch(_context36.prev = _context36.next){\n                                case 0:\n                                    _context36.next = 2;\n                                    return this.post(this.baseURL + \"/users/deactivate\", _objectSpread({\n                                        user_ids: user_ids\n                                    }, options));\n                                case 2:\n                                    return _context36.abrupt(\"return\", _context36.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context36.stop();\n                            }\n                        }\n                    }, _callee36, this);\n                }));\n                function deactivateUsers(_x42, _x43) {\n                    return _deactivateUsers.apply(this, arguments);\n                }\n                return deactivateUsers;\n            }()\n        },\n        {\n            key: \"exportUser\",\n            value: function() {\n                var _exportUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee37(userID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee37$(_context37) {\n                        while(1){\n                            switch(_context37.prev = _context37.next){\n                                case 0:\n                                    _context37.next = 2;\n                                    return this.get(this.baseURL + \"/users/\".concat(userID, \"/export\"), _objectSpread({}, options));\n                                case 2:\n                                    return _context37.abrupt(\"return\", _context37.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context37.stop();\n                            }\n                        }\n                    }, _callee37, this);\n                }));\n                function exportUser(_x44, _x45) {\n                    return _exportUser.apply(this, arguments);\n                }\n                return exportUser;\n            }()\n        },\n        {\n            key: \"banUser\",\n            value: function() {\n                var _banUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee38(targetUserID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee38$(_context38) {\n                        while(1){\n                            switch(_context38.prev = _context38.next){\n                                case 0:\n                                    _context38.next = 2;\n                                    return this.post(this.baseURL + \"/moderation/ban\", _objectSpread({\n                                        target_user_id: targetUserID\n                                    }, options));\n                                case 2:\n                                    return _context38.abrupt(\"return\", _context38.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context38.stop();\n                            }\n                        }\n                    }, _callee38, this);\n                }));\n                function banUser(_x46, _x47) {\n                    return _banUser.apply(this, arguments);\n                }\n                return banUser;\n            }()\n        },\n        {\n            key: \"unbanUser\",\n            value: function() {\n                var _unbanUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee39(targetUserID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee39$(_context39) {\n                        while(1){\n                            switch(_context39.prev = _context39.next){\n                                case 0:\n                                    _context39.next = 2;\n                                    return this.delete(this.baseURL + \"/moderation/ban\", _objectSpread({\n                                        target_user_id: targetUserID\n                                    }, options));\n                                case 2:\n                                    return _context39.abrupt(\"return\", _context39.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context39.stop();\n                            }\n                        }\n                    }, _callee39, this);\n                }));\n                function unbanUser(_x48, _x49) {\n                    return _unbanUser.apply(this, arguments);\n                }\n                return unbanUser;\n            }()\n        },\n        {\n            key: \"shadowBan\",\n            value: function() {\n                var _shadowBan = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee40(targetUserID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee40$(_context40) {\n                        while(1){\n                            switch(_context40.prev = _context40.next){\n                                case 0:\n                                    _context40.next = 2;\n                                    return this.banUser(targetUserID, _objectSpread({\n                                        shadow: true\n                                    }, options));\n                                case 2:\n                                    return _context40.abrupt(\"return\", _context40.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context40.stop();\n                            }\n                        }\n                    }, _callee40, this);\n                }));\n                function shadowBan(_x50, _x51) {\n                    return _shadowBan.apply(this, arguments);\n                }\n                return shadowBan;\n            }()\n        },\n        {\n            key: \"removeShadowBan\",\n            value: function() {\n                var _removeShadowBan = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee41(targetUserID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee41$(_context41) {\n                        while(1){\n                            switch(_context41.prev = _context41.next){\n                                case 0:\n                                    _context41.next = 2;\n                                    return this.unbanUser(targetUserID, _objectSpread({\n                                        shadow: true\n                                    }, options));\n                                case 2:\n                                    return _context41.abrupt(\"return\", _context41.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context41.stop();\n                            }\n                        }\n                    }, _callee41, this);\n                }));\n                function removeShadowBan(_x52, _x53) {\n                    return _removeShadowBan.apply(this, arguments);\n                }\n                return removeShadowBan;\n            }()\n        },\n        {\n            key: \"muteUser\",\n            value: function() {\n                var _muteUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee42(targetID, userID) {\n                    var options, _args42 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee42$(_context42) {\n                        while(1){\n                            switch(_context42.prev = _context42.next){\n                                case 0:\n                                    options = _args42.length > 2 && _args42[2] !== undefined ? _args42[2] : {};\n                                    _context42.next = 3;\n                                    return this.post(this.baseURL + \"/moderation/mute\", _objectSpread(_objectSpread({\n                                        target_id: targetID\n                                    }, userID ? {\n                                        user_id: userID\n                                    } : {}), options));\n                                case 3:\n                                    return _context42.abrupt(\"return\", _context42.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context42.stop();\n                            }\n                        }\n                    }, _callee42, this);\n                }));\n                function muteUser(_x54, _x55) {\n                    return _muteUser.apply(this, arguments);\n                }\n                return muteUser;\n            }()\n        },\n        {\n            key: \"unmuteUser\",\n            value: function() {\n                var _unmuteUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee43(targetID, currentUserID) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee43$(_context43) {\n                        while(1){\n                            switch(_context43.prev = _context43.next){\n                                case 0:\n                                    _context43.next = 2;\n                                    return this.post(this.baseURL + \"/moderation/unmute\", _objectSpread({\n                                        target_id: targetID\n                                    }, currentUserID ? {\n                                        user_id: currentUserID\n                                    } : {}));\n                                case 2:\n                                    return _context43.abrupt(\"return\", _context43.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context43.stop();\n                            }\n                        }\n                    }, _callee43, this);\n                }));\n                function unmuteUser(_x56, _x57) {\n                    return _unmuteUser.apply(this, arguments);\n                }\n                return unmuteUser;\n            }()\n        },\n        {\n            key: \"userMuteStatus\",\n            value: function userMuteStatus(targetID) {\n                if (!this.user || !this.wsPromise) {\n                    throw new Error(\"Make sure to await connectUser() first.\");\n                }\n                for(var i = 0; i < this.mutedUsers.length; i += 1){\n                    if (this.mutedUsers[i].target.id === targetID) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"flagMessage\",\n            value: function() {\n                var _flagMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee44(targetMessageID) {\n                    var options, _args44 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee44$(_context44) {\n                        while(1){\n                            switch(_context44.prev = _context44.next){\n                                case 0:\n                                    options = _args44.length > 1 && _args44[1] !== undefined ? _args44[1] : {};\n                                    _context44.next = 3;\n                                    return this.post(this.baseURL + \"/moderation/flag\", _objectSpread({\n                                        target_message_id: targetMessageID\n                                    }, options));\n                                case 3:\n                                    return _context44.abrupt(\"return\", _context44.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context44.stop();\n                            }\n                        }\n                    }, _callee44, this);\n                }));\n                function flagMessage(_x58) {\n                    return _flagMessage.apply(this, arguments);\n                }\n                return flagMessage;\n            }()\n        },\n        {\n            key: \"flagUser\",\n            value: function() {\n                var _flagUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee45(targetID) {\n                    var options, _args45 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee45$(_context45) {\n                        while(1){\n                            switch(_context45.prev = _context45.next){\n                                case 0:\n                                    options = _args45.length > 1 && _args45[1] !== undefined ? _args45[1] : {};\n                                    _context45.next = 3;\n                                    return this.post(this.baseURL + \"/moderation/flag\", _objectSpread({\n                                        target_user_id: targetID\n                                    }, options));\n                                case 3:\n                                    return _context45.abrupt(\"return\", _context45.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context45.stop();\n                            }\n                        }\n                    }, _callee45, this);\n                }));\n                function flagUser(_x59) {\n                    return _flagUser.apply(this, arguments);\n                }\n                return flagUser;\n            }()\n        },\n        {\n            key: \"unflagMessage\",\n            value: function() {\n                var _unflagMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee46(targetMessageID) {\n                    var options, _args46 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee46$(_context46) {\n                        while(1){\n                            switch(_context46.prev = _context46.next){\n                                case 0:\n                                    options = _args46.length > 1 && _args46[1] !== undefined ? _args46[1] : {};\n                                    _context46.next = 3;\n                                    return this.post(this.baseURL + \"/moderation/unflag\", _objectSpread({\n                                        target_message_id: targetMessageID\n                                    }, options));\n                                case 3:\n                                    return _context46.abrupt(\"return\", _context46.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context46.stop();\n                            }\n                        }\n                    }, _callee46, this);\n                }));\n                function unflagMessage(_x60) {\n                    return _unflagMessage.apply(this, arguments);\n                }\n                return unflagMessage;\n            }()\n        },\n        {\n            key: \"unflagUser\",\n            value: function() {\n                var _unflagUser = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee47(targetID) {\n                    var options, _args47 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee47$(_context47) {\n                        while(1){\n                            switch(_context47.prev = _context47.next){\n                                case 0:\n                                    options = _args47.length > 1 && _args47[1] !== undefined ? _args47[1] : {};\n                                    _context47.next = 3;\n                                    return this.post(this.baseURL + \"/moderation/unflag\", _objectSpread({\n                                        target_user_id: targetID\n                                    }, options));\n                                case 3:\n                                    return _context47.abrupt(\"return\", _context47.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context47.stop();\n                            }\n                        }\n                    }, _callee47, this);\n                }));\n                function unflagUser(_x61) {\n                    return _unflagUser.apply(this, arguments);\n                }\n                return unflagUser;\n            }()\n        },\n        {\n            key: \"getCallToken\",\n            value: function() {\n                var _getCallToken = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee48(callID) {\n                    var options, _args48 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee48$(_context48) {\n                        while(1){\n                            switch(_context48.prev = _context48.next){\n                                case 0:\n                                    options = _args48.length > 1 && _args48[1] !== undefined ? _args48[1] : {};\n                                    _context48.next = 3;\n                                    return this.post(this.baseURL + \"/calls/\".concat(callID), _objectSpread({}, options));\n                                case 3:\n                                    return _context48.abrupt(\"return\", _context48.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context48.stop();\n                            }\n                        }\n                    }, _callee48, this);\n                }));\n                function getCallToken(_x62) {\n                    return _getCallToken.apply(this, arguments);\n                }\n                return getCallToken;\n            }()\n        },\n        {\n            key: \"_queryFlags\",\n            value: function() {\n                var _queryFlags2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee49() {\n                    var filterConditions, options, _args49 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee49$(_context49) {\n                        while(1){\n                            switch(_context49.prev = _context49.next){\n                                case 0:\n                                    filterConditions = _args49.length > 0 && _args49[0] !== undefined ? _args49[0] : {};\n                                    options = _args49.length > 1 && _args49[1] !== undefined ? _args49[1] : {};\n                                    _context49.next = 4;\n                                    return this.post(this.baseURL + \"/moderation/flags\", _objectSpread({\n                                        filter_conditions: filterConditions\n                                    }, options));\n                                case 4:\n                                    return _context49.abrupt(\"return\", _context49.sent);\n                                case 5:\n                                case \"end\":\n                                    return _context49.stop();\n                            }\n                        }\n                    }, _callee49, this);\n                }));\n                function _queryFlags() {\n                    return _queryFlags2.apply(this, arguments);\n                }\n                return _queryFlags;\n            }()\n        },\n        {\n            key: \"_queryFlagReports\",\n            value: function() {\n                var _queryFlagReports2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee50() {\n                    var filterConditions, options, _args50 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee50$(_context50) {\n                        while(1){\n                            switch(_context50.prev = _context50.next){\n                                case 0:\n                                    filterConditions = _args50.length > 0 && _args50[0] !== undefined ? _args50[0] : {};\n                                    options = _args50.length > 1 && _args50[1] !== undefined ? _args50[1] : {};\n                                    _context50.next = 4;\n                                    return this.post(this.baseURL + \"/moderation/reports\", _objectSpread({\n                                        filter_conditions: filterConditions\n                                    }, options));\n                                case 4:\n                                    return _context50.abrupt(\"return\", _context50.sent);\n                                case 5:\n                                case \"end\":\n                                    return _context50.stop();\n                            }\n                        }\n                    }, _callee50, this);\n                }));\n                function _queryFlagReports() {\n                    return _queryFlagReports2.apply(this, arguments);\n                }\n                return _queryFlagReports;\n            }()\n        },\n        {\n            key: \"_reviewFlagReport\",\n            value: function() {\n                var _reviewFlagReport2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee51(id, reviewResult) {\n                    var options, _args51 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee51$(_context51) {\n                        while(1){\n                            switch(_context51.prev = _context51.next){\n                                case 0:\n                                    options = _args51.length > 2 && _args51[2] !== undefined ? _args51[2] : {};\n                                    _context51.next = 3;\n                                    return this.patch(this.baseURL + \"/moderation/reports/\".concat(id), _objectSpread({\n                                        review_result: reviewResult\n                                    }, options));\n                                case 3:\n                                    return _context51.abrupt(\"return\", _context51.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context51.stop();\n                            }\n                        }\n                    }, _callee51, this);\n                }));\n                function _reviewFlagReport(_x63, _x64) {\n                    return _reviewFlagReport2.apply(this, arguments);\n                }\n                return _reviewFlagReport;\n            }()\n        },\n        {\n            key: \"unblockMessage\",\n            value: function() {\n                var _unblockMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee52(targetMessageID) {\n                    var options, _args52 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee52$(_context52) {\n                        while(1){\n                            switch(_context52.prev = _context52.next){\n                                case 0:\n                                    options = _args52.length > 1 && _args52[1] !== undefined ? _args52[1] : {};\n                                    _context52.next = 3;\n                                    return this.post(this.baseURL + \"/moderation/unblock_message\", _objectSpread({\n                                        target_message_id: targetMessageID\n                                    }, options));\n                                case 3:\n                                    return _context52.abrupt(\"return\", _context52.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context52.stop();\n                            }\n                        }\n                    }, _callee52, this);\n                }));\n                function unblockMessage(_x65) {\n                    return _unblockMessage.apply(this, arguments);\n                }\n                return unblockMessage;\n            }() // alias for backwards compatibility\n        },\n        {\n            key: \"markChannelsRead\",\n            value: /**\n     * markChannelsRead - marks channels read -\n     * it accepts a map of cid:messageid pairs, if messageid is empty, the whole channel will be marked as read\n     *\n     * @param {MarkChannelsReadOptions <StreamChatGenerics>} [data]\n     *\n     * @return {Promise<APIResponse>}\n     */ function() {\n                var _markChannelsRead = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee53() {\n                    var data, _args53 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee53$(_context53) {\n                        while(1){\n                            switch(_context53.prev = _context53.next){\n                                case 0:\n                                    data = _args53.length > 0 && _args53[0] !== undefined ? _args53[0] : {};\n                                    _context53.next = 3;\n                                    return this.post(this.baseURL + \"/channels/read\", _objectSpread({}, data));\n                                case 3:\n                                case \"end\":\n                                    return _context53.stop();\n                            }\n                        }\n                    }, _callee53, this);\n                }));\n                function markChannelsRead() {\n                    return _markChannelsRead.apply(this, arguments);\n                }\n                return markChannelsRead;\n            }()\n        },\n        {\n            key: \"createCommand\",\n            value: function createCommand(data) {\n                return this.post(this.baseURL + \"/commands\", data);\n            }\n        },\n        {\n            key: \"getCommand\",\n            value: function getCommand(name) {\n                return this.get(this.baseURL + \"/commands/\".concat(name));\n            }\n        },\n        {\n            key: \"updateCommand\",\n            value: function updateCommand(name, data) {\n                return this.put(this.baseURL + \"/commands/\".concat(name), data);\n            }\n        },\n        {\n            key: \"deleteCommand\",\n            value: function deleteCommand(name) {\n                return this.delete(this.baseURL + \"/commands/\".concat(name));\n            }\n        },\n        {\n            key: \"listCommands\",\n            value: function listCommands() {\n                return this.get(this.baseURL + \"/commands\");\n            }\n        },\n        {\n            key: \"createChannelType\",\n            value: function createChannelType(data) {\n                var channelData = _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1___default()({}, {\n                    commands: [\n                        \"all\"\n                    ]\n                }, data);\n                return this.post(this.baseURL + \"/channeltypes\", channelData);\n            }\n        },\n        {\n            key: \"getChannelType\",\n            value: function getChannelType(channelType) {\n                return this.get(this.baseURL + \"/channeltypes/\".concat(channelType));\n            }\n        },\n        {\n            key: \"updateChannelType\",\n            value: function updateChannelType(channelType, data) {\n                return this.put(this.baseURL + \"/channeltypes/\".concat(channelType), data);\n            }\n        },\n        {\n            key: \"deleteChannelType\",\n            value: function deleteChannelType(channelType) {\n                return this.delete(this.baseURL + \"/channeltypes/\".concat(channelType));\n            }\n        },\n        {\n            key: \"listChannelTypes\",\n            value: function listChannelTypes() {\n                return this.get(this.baseURL + \"/channeltypes\");\n            }\n        },\n        {\n            key: \"translateMessage\",\n            value: function() {\n                var _translateMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee54(messageId, language) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee54$(_context54) {\n                        while(1){\n                            switch(_context54.prev = _context54.next){\n                                case 0:\n                                    _context54.next = 2;\n                                    return this.post(this.baseURL + \"/messages/\".concat(messageId, \"/translate\"), {\n                                        language: language\n                                    });\n                                case 2:\n                                    return _context54.abrupt(\"return\", _context54.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context54.stop();\n                            }\n                        }\n                    }, _callee54, this);\n                }));\n                function translateMessage(_x66, _x67) {\n                    return _translateMessage.apply(this, arguments);\n                }\n                return translateMessage;\n            }()\n        },\n        {\n            key: \"_normalizeExpiration\",\n            value: function _normalizeExpiration(timeoutOrExpirationDate) {\n                var pinExpires = null;\n                if (typeof timeoutOrExpirationDate === \"number\") {\n                    var now = new Date();\n                    now.setSeconds(now.getSeconds() + timeoutOrExpirationDate);\n                    pinExpires = now.toISOString();\n                } else if (isString(timeoutOrExpirationDate)) {\n                    pinExpires = timeoutOrExpirationDate;\n                } else if (timeoutOrExpirationDate instanceof Date) {\n                    pinExpires = timeoutOrExpirationDate.toISOString();\n                }\n                return pinExpires;\n            }\n        },\n        {\n            key: \"_validateAndGetMessageId\",\n            value: function _validateAndGetMessageId(messageOrMessageId, errorText) {\n                var messageId;\n                if (typeof messageOrMessageId === \"string\") {\n                    messageId = messageOrMessageId;\n                } else {\n                    if (!messageOrMessageId.id) {\n                        throw Error(errorText);\n                    }\n                    messageId = messageOrMessageId.id;\n                }\n                return messageId;\n            }\n        },\n        {\n            key: \"pinMessage\",\n            value: function pinMessage(messageOrMessageId, timeoutOrExpirationDate, pinnedBy, pinnedAt) {\n                var messageId = this._validateAndGetMessageId(messageOrMessageId, \"Please specify the message id when calling unpinMessage\");\n                return this.partialUpdateMessage(messageId, {\n                    set: {\n                        pinned: true,\n                        pin_expires: this._normalizeExpiration(timeoutOrExpirationDate),\n                        pinned_at: this._normalizeExpiration(pinnedAt)\n                    }\n                }, pinnedBy);\n            }\n        },\n        {\n            key: \"unpinMessage\",\n            value: function unpinMessage(messageOrMessageId, userId) {\n                var messageId = this._validateAndGetMessageId(messageOrMessageId, \"Please specify the message id when calling unpinMessage\");\n                return this.partialUpdateMessage(messageId, {\n                    set: {\n                        pinned: false\n                    }\n                }, userId);\n            }\n        },\n        {\n            key: \"updateMessage\",\n            value: function() {\n                var _updateMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee55(message, userId, options) {\n                    var clonedMessage, reservedMessageFields;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee55$(_context55) {\n                        while(1){\n                            switch(_context55.prev = _context55.next){\n                                case 0:\n                                    if (message.id) {\n                                        _context55.next = 2;\n                                        break;\n                                    }\n                                    throw Error(\"Please specify the message id when calling updateMessage\");\n                                case 2:\n                                    clonedMessage = _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1___default()({}, message);\n                                    delete clonedMessage.id;\n                                    reservedMessageFields = [\n                                        \"command\",\n                                        \"created_at\",\n                                        \"html\",\n                                        \"latest_reactions\",\n                                        \"own_reactions\",\n                                        \"quoted_message\",\n                                        \"reaction_counts\",\n                                        \"reply_count\",\n                                        \"type\",\n                                        \"updated_at\",\n                                        \"user\",\n                                        \"__html\"\n                                    ];\n                                    reservedMessageFields.forEach(function(item) {\n                                        if (clonedMessage[item] != null) {\n                                            delete clonedMessage[item];\n                                        }\n                                    });\n                                    if (userId != null) {\n                                        if (isString(userId)) {\n                                            clonedMessage.user_id = userId;\n                                        } else {\n                                            clonedMessage.user = {\n                                                id: userId.id\n                                            };\n                                        }\n                                    }\n                                    /**\n                 * Server always expects mentioned_users to be array of string. We are adding extra check, just in case\n                 * SDK missed this conversion.\n                 */ if (Array.isArray(clonedMessage.mentioned_users) && !isString(clonedMessage.mentioned_users[0])) {\n                                        clonedMessage.mentioned_users = clonedMessage.mentioned_users.map(function(mu) {\n                                            return mu.id;\n                                        });\n                                    }\n                                    _context55.next = 10;\n                                    return this.post(this.baseURL + \"/messages/\".concat(message.id), _objectSpread({\n                                        message: clonedMessage\n                                    }, options));\n                                case 10:\n                                    return _context55.abrupt(\"return\", _context55.sent);\n                                case 11:\n                                case \"end\":\n                                    return _context55.stop();\n                            }\n                        }\n                    }, _callee55, this);\n                }));\n                function updateMessage(_x68, _x69, _x70) {\n                    return _updateMessage.apply(this, arguments);\n                }\n                return updateMessage;\n            }()\n        },\n        {\n            key: \"partialUpdateMessage\",\n            value: function() {\n                var _partialUpdateMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee56(id, partialMessageObject, userId, options) {\n                    var user;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee56$(_context56) {\n                        while(1){\n                            switch(_context56.prev = _context56.next){\n                                case 0:\n                                    if (id) {\n                                        _context56.next = 2;\n                                        break;\n                                    }\n                                    throw Error(\"Please specify the message id when calling partialUpdateMessage\");\n                                case 2:\n                                    user = userId;\n                                    if (userId != null && isString(userId)) {\n                                        user = {\n                                            id: userId\n                                        };\n                                    }\n                                    _context56.next = 6;\n                                    return this.put(this.baseURL + \"/messages/\".concat(id), _objectSpread(_objectSpread(_objectSpread({}, partialMessageObject), options), {}, {\n                                        user: user\n                                    }));\n                                case 6:\n                                    return _context56.abrupt(\"return\", _context56.sent);\n                                case 7:\n                                case \"end\":\n                                    return _context56.stop();\n                            }\n                        }\n                    }, _callee56, this);\n                }));\n                function partialUpdateMessage(_x71, _x72, _x73, _x74) {\n                    return _partialUpdateMessage.apply(this, arguments);\n                }\n                return partialUpdateMessage;\n            }()\n        },\n        {\n            key: \"deleteMessage\",\n            value: function() {\n                var _deleteMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee57(messageID, hardDelete) {\n                    var params;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee57$(_context57) {\n                        while(1){\n                            switch(_context57.prev = _context57.next){\n                                case 0:\n                                    params = {};\n                                    if (hardDelete) {\n                                        params = {\n                                            hard: true\n                                        };\n                                    }\n                                    _context57.next = 4;\n                                    return this.delete(this.baseURL + \"/messages/\".concat(messageID), params);\n                                case 4:\n                                    return _context57.abrupt(\"return\", _context57.sent);\n                                case 5:\n                                case \"end\":\n                                    return _context57.stop();\n                            }\n                        }\n                    }, _callee57, this);\n                }));\n                function deleteMessage(_x75, _x76) {\n                    return _deleteMessage.apply(this, arguments);\n                }\n                return deleteMessage;\n            }()\n        },\n        {\n            key: \"undeleteMessage\",\n            value: function() {\n                var _undeleteMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee58(messageID, userID) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee58$(_context58) {\n                        while(1){\n                            switch(_context58.prev = _context58.next){\n                                case 0:\n                                    _context58.next = 2;\n                                    return this.post(this.baseURL + \"/messages/\".concat(messageID, \"/undelete\"), {\n                                        undeleted_by: userID\n                                    });\n                                case 2:\n                                    return _context58.abrupt(\"return\", _context58.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context58.stop();\n                            }\n                        }\n                    }, _callee58, this);\n                }));\n                function undeleteMessage(_x77, _x78) {\n                    return _undeleteMessage.apply(this, arguments);\n                }\n                return undeleteMessage;\n            }()\n        },\n        {\n            key: \"getMessage\",\n            value: function() {\n                var _getMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee59(messageID, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee59$(_context59) {\n                        while(1){\n                            switch(_context59.prev = _context59.next){\n                                case 0:\n                                    _context59.next = 2;\n                                    return this.get(this.baseURL + \"/messages/\".concat(encodeURIComponent(messageID)), _objectSpread({}, options));\n                                case 2:\n                                    return _context59.abrupt(\"return\", _context59.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context59.stop();\n                            }\n                        }\n                    }, _callee59, this);\n                }));\n                function getMessage(_x79, _x80) {\n                    return _getMessage.apply(this, arguments);\n                }\n                return getMessage;\n            }()\n        },\n        {\n            key: \"queryThreads\",\n            value: function() {\n                var _queryThreads = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee60(options) {\n                    var _this5 = this;\n                    var opts, res;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee60$(_context60) {\n                        while(1){\n                            switch(_context60.prev = _context60.next){\n                                case 0:\n                                    opts = _objectSpread({\n                                        limit: 10,\n                                        participant_limit: 10,\n                                        reply_limit: 3,\n                                        watch: true\n                                    }, options);\n                                    _context60.next = 3;\n                                    return this.post(this.baseURL + \"/threads\", opts);\n                                case 3:\n                                    res = _context60.sent;\n                                    return _context60.abrupt(\"return\", {\n                                        threads: res.threads.map(function(thread) {\n                                            return new Thread(_this5, thread);\n                                        }),\n                                        next: res.next\n                                    });\n                                case 5:\n                                case \"end\":\n                                    return _context60.stop();\n                            }\n                        }\n                    }, _callee60, this);\n                }));\n                function queryThreads(_x81) {\n                    return _queryThreads.apply(this, arguments);\n                }\n                return queryThreads;\n            }()\n        },\n        {\n            key: \"getThread\",\n            value: function() {\n                var _getThread = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee61(messageId) {\n                    var options, opts, res, _args61 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee61$(_context61) {\n                        while(1){\n                            switch(_context61.prev = _context61.next){\n                                case 0:\n                                    options = _args61.length > 1 && _args61[1] !== undefined ? _args61[1] : {};\n                                    if (messageId) {\n                                        _context61.next = 3;\n                                        break;\n                                    }\n                                    throw Error(\"Please specify the message id when calling partialUpdateThread\");\n                                case 3:\n                                    opts = _objectSpread({\n                                        participant_limit: 100,\n                                        reply_limit: 3,\n                                        watch: true\n                                    }, options);\n                                    _context61.next = 6;\n                                    return this.get(this.baseURL + \"/threads/\".concat(messageId), opts);\n                                case 6:\n                                    res = _context61.sent;\n                                    return _context61.abrupt(\"return\", new Thread(this, res.thread));\n                                case 8:\n                                case \"end\":\n                                    return _context61.stop();\n                            }\n                        }\n                    }, _callee61, this);\n                }));\n                function getThread(_x82) {\n                    return _getThread.apply(this, arguments);\n                }\n                return getThread;\n            }()\n        },\n        {\n            key: \"partialUpdateThread\",\n            value: function() {\n                var _partialUpdateThread = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee62(messageId, partialThreadObject) {\n                    var reservedThreadFields, _key5;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee62$(_context62) {\n                        while(1){\n                            switch(_context62.prev = _context62.next){\n                                case 0:\n                                    if (messageId) {\n                                        _context62.next = 2;\n                                        break;\n                                    }\n                                    throw Error(\"Please specify the message id when calling partialUpdateThread\");\n                                case 2:\n                                    // check for reserved fields from ThreadResponse type within partialThreadObject's set and unset.\n                                    // Throw error if any of the reserved field is found.\n                                    reservedThreadFields = [\n                                        \"created_at\",\n                                        \"id\",\n                                        \"last_message_at\",\n                                        \"type\",\n                                        \"updated_at\",\n                                        \"user\",\n                                        \"reply_count\",\n                                        \"participants\",\n                                        \"channel\"\n                                    ];\n                                    _context62.t0 = _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().keys(_objectSpread(_objectSpread({}, partialThreadObject.set), partialThreadObject.unset));\n                                case 4:\n                                    if ((_context62.t1 = _context62.t0()).done) {\n                                        _context62.next = 10;\n                                        break;\n                                    }\n                                    _key5 = _context62.t1.value;\n                                    if (!reservedThreadFields.includes(_key5)) {\n                                        _context62.next = 8;\n                                        break;\n                                    }\n                                    throw Error(\"You cannot set \".concat(_key5, \" field on Thread object. \").concat(_key5, \" is reserved for server-side use. Please omit \").concat(_key5, \" from your set object.\"));\n                                case 8:\n                                    _context62.next = 4;\n                                    break;\n                                case 10:\n                                    _context62.next = 12;\n                                    return this.patch(this.baseURL + \"/threads/\".concat(messageId), partialThreadObject);\n                                case 12:\n                                    return _context62.abrupt(\"return\", _context62.sent);\n                                case 13:\n                                case \"end\":\n                                    return _context62.stop();\n                            }\n                        }\n                    }, _callee62, this);\n                }));\n                function partialUpdateThread(_x83, _x84) {\n                    return _partialUpdateThread.apply(this, arguments);\n                }\n                return partialUpdateThread;\n            }()\n        },\n        {\n            key: \"getUserAgent\",\n            value: function getUserAgent() {\n                return this.userAgent || \"stream-chat-javascript-client-\".concat(this.node ? \"node\" : \"browser\", \"-\", \"8.25.1\");\n            }\n        },\n        {\n            key: \"setUserAgent\",\n            value: function setUserAgent(userAgent) {\n                this.userAgent = userAgent;\n            }\n        },\n        {\n            key: \"_enrichAxiosOptions\",\n            value: function _enrichAxiosOptions() {\n                var _options$headers;\n                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n                    params: {},\n                    headers: {},\n                    config: {}\n                };\n                var token = this._getToken();\n                var authorization = token ? {\n                    Authorization: token\n                } : undefined;\n                var signal = null;\n                if (this.nextRequestAbortController !== null) {\n                    signal = this.nextRequestAbortController.signal;\n                    this.nextRequestAbortController = null;\n                }\n                if (!((_options$headers = options.headers) !== null && _options$headers !== void 0 && _options$headers[\"x-client-request-id\"])) {\n                    options.headers = _objectSpread(_objectSpread({}, options.headers), {}, {\n                        \"x-client-request-id\": randomId()\n                    });\n                }\n                var _ref9 = this.options.axiosRequestConfig || {}, axiosRequestConfigParams = _ref9.params, axiosRequestConfigHeaders = _ref9.headers, axiosRequestConfigRest = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3___default()(_ref9, _excluded2);\n                return _objectSpread(_objectSpread(_objectSpread({\n                    params: _objectSpread(_objectSpread({\n                        user_id: this.userID,\n                        connection_id: this._getConnectionID(),\n                        api_key: this.key\n                    }, options.params), axiosRequestConfigParams || {}),\n                    headers: _objectSpread(_objectSpread(_objectSpread({}, authorization), {}, {\n                        \"stream-auth-type\": this.getAuthType(),\n                        \"X-Stream-Client\": this.getUserAgent()\n                    }, options.headers), axiosRequestConfigHeaders || {})\n                }, signal ? {\n                    signal: signal\n                } : {}), options.config), axiosRequestConfigRest || {});\n            }\n        },\n        {\n            key: \"_getToken\",\n            value: function _getToken() {\n                if (!this.tokenManager || this.anonymous) return null;\n                return this.tokenManager.getToken();\n            }\n        },\n        {\n            key: \"_startCleaning\",\n            value: function _startCleaning() {\n                var that = this;\n                if (this.cleaningIntervalRef != null) {\n                    return;\n                }\n                this.cleaningIntervalRef = setInterval(function() {\n                    // call clean on the channel, used for calling the stop.typing event etc.\n                    for(var _i3 = 0, _Object$values2 = Object.values(that.activeChannels); _i3 < _Object$values2.length; _i3++){\n                        var _channel7 = _Object$values2[_i3];\n                        _channel7.clean();\n                    }\n                }, 500);\n            }\n        },\n        {\n            key: \"verifyWebhook\",\n            value: /**\n     * checks signature of a request\n     * @param {string | Buffer} rawBody\n     * @param {string} signature from HTTP header\n     * @returns {boolean}\n     */ function verifyWebhook(requestBody, xSignature) {\n                return !!this.secret && CheckSignature(requestBody, this.secret, xSignature);\n            }\n        },\n        {\n            key: \"getPermission\",\n            value: function getPermission(name) {\n                return this.get(\"\".concat(this.baseURL, \"/permissions/\").concat(name));\n            }\n        },\n        {\n            key: \"createPermission\",\n            value: function createPermission(permissionData) {\n                return this.post(\"\".concat(this.baseURL, \"/permissions\"), _objectSpread({}, permissionData));\n            }\n        },\n        {\n            key: \"updatePermission\",\n            value: function updatePermission(id, permissionData) {\n                return this.put(\"\".concat(this.baseURL, \"/permissions/\").concat(id), _objectSpread({}, permissionData));\n            }\n        },\n        {\n            key: \"deletePermission\",\n            value: function deletePermission(name) {\n                return this.delete(\"\".concat(this.baseURL, \"/permissions/\").concat(name));\n            }\n        },\n        {\n            key: \"listPermissions\",\n            value: function listPermissions() {\n                return this.get(\"\".concat(this.baseURL, \"/permissions\"));\n            }\n        },\n        {\n            key: \"createRole\",\n            value: function createRole(name) {\n                return this.post(\"\".concat(this.baseURL, \"/roles\"), {\n                    name: name\n                });\n            }\n        },\n        {\n            key: \"listRoles\",\n            value: function listRoles() {\n                return this.get(\"\".concat(this.baseURL, \"/roles\"));\n            }\n        },\n        {\n            key: \"deleteRole\",\n            value: function deleteRole(name) {\n                return this.delete(\"\".concat(this.baseURL, \"/roles/\").concat(name));\n            }\n        },\n        {\n            key: \"sync\",\n            value: function sync(channel_cids, last_sync_at) {\n                var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                return this.post(\"\".concat(this.baseURL, \"/sync\"), _objectSpread({\n                    channel_cids: channel_cids,\n                    last_sync_at: last_sync_at\n                }, options));\n            }\n        },\n        {\n            key: \"sendUserCustomEvent\",\n            value: function() {\n                var _sendUserCustomEvent = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee63(targetUserID, event) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee63$(_context63) {\n                        while(1){\n                            switch(_context63.prev = _context63.next){\n                                case 0:\n                                    _context63.next = 2;\n                                    return this.post(\"\".concat(this.baseURL, \"/users/\").concat(targetUserID, \"/event\"), {\n                                        event: event\n                                    });\n                                case 2:\n                                    return _context63.abrupt(\"return\", _context63.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context63.stop();\n                            }\n                        }\n                    }, _callee63, this);\n                }));\n                function sendUserCustomEvent(_x85, _x86) {\n                    return _sendUserCustomEvent.apply(this, arguments);\n                }\n                return sendUserCustomEvent;\n            }()\n        },\n        {\n            key: \"createBlockList\",\n            value: function createBlockList(blockList) {\n                return this.post(\"\".concat(this.baseURL, \"/blocklists\"), blockList);\n            }\n        },\n        {\n            key: \"listBlockLists\",\n            value: function listBlockLists() {\n                return this.get(\"\".concat(this.baseURL, \"/blocklists\"));\n            }\n        },\n        {\n            key: \"getBlockList\",\n            value: function getBlockList(name) {\n                return this.get(\"\".concat(this.baseURL, \"/blocklists/\").concat(name));\n            }\n        },\n        {\n            key: \"updateBlockList\",\n            value: function updateBlockList(name, data) {\n                return this.put(\"\".concat(this.baseURL, \"/blocklists/\").concat(name), data);\n            }\n        },\n        {\n            key: \"deleteBlockList\",\n            value: function deleteBlockList(name) {\n                return this.delete(\"\".concat(this.baseURL, \"/blocklists/\").concat(name));\n            }\n        },\n        {\n            key: \"exportChannels\",\n            value: function exportChannels(request) {\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var payload = _objectSpread({\n                    channels: request\n                }, options);\n                return this.post(\"\".concat(this.baseURL, \"/export_channels\"), payload);\n            }\n        },\n        {\n            key: \"exportUsers\",\n            value: function exportUsers(request) {\n                return this.post(\"\".concat(this.baseURL, \"/export/users\"), request);\n            }\n        },\n        {\n            key: \"exportChannel\",\n            value: function exportChannel(request, options) {\n                return this.exportChannels([\n                    request\n                ], options);\n            }\n        },\n        {\n            key: \"getExportChannelStatus\",\n            value: function getExportChannelStatus(id) {\n                return this.get(\"\".concat(this.baseURL, \"/export_channels/\").concat(id));\n            }\n        },\n        {\n            key: \"campaign\",\n            value: function campaign(idOrData, data) {\n                if (idOrData && _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_2___default()(idOrData) === \"object\") {\n                    return new Campaign(this, null, idOrData);\n                }\n                return new Campaign(this, idOrData, data);\n            }\n        },\n        {\n            key: \"segment\",\n            value: function segment(type, idOrData, data) {\n                if (typeof idOrData === \"string\") {\n                    return new Segment(this, type, idOrData, data);\n                }\n                return new Segment(this, type, null, idOrData);\n            }\n        },\n        {\n            key: \"validateServerSideAuth\",\n            value: function validateServerSideAuth() {\n                if (!this.secret) {\n                    throw new Error(\"Campaigns is a server-side only feature. Please initialize the client with a secret to use this feature.\");\n                }\n            }\n        },\n        {\n            key: \"createSegment\",\n            value: function() {\n                var _createSegment = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee64(type, id, data) {\n                    var body;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee64$(_context64) {\n                        while(1){\n                            switch(_context64.prev = _context64.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    body = _objectSpread({\n                                        id: id,\n                                        type: type\n                                    }, data);\n                                    return _context64.abrupt(\"return\", this.post(this.baseURL + \"/segments\", body));\n                                case 3:\n                                case \"end\":\n                                    return _context64.stop();\n                            }\n                        }\n                    }, _callee64, this);\n                }));\n                function createSegment(_x87, _x88, _x89) {\n                    return _createSegment.apply(this, arguments);\n                }\n                return createSegment;\n            }()\n        },\n        {\n            key: \"createUserSegment\",\n            value: function() {\n                var _createUserSegment = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee65(id, data) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee65$(_context65) {\n                        while(1){\n                            switch(_context65.prev = _context65.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context65.abrupt(\"return\", this.createSegment(\"user\", id, data));\n                                case 2:\n                                case \"end\":\n                                    return _context65.stop();\n                            }\n                        }\n                    }, _callee65, this);\n                }));\n                function createUserSegment(_x90, _x91) {\n                    return _createUserSegment.apply(this, arguments);\n                }\n                return createUserSegment;\n            }()\n        },\n        {\n            key: \"createChannelSegment\",\n            value: function() {\n                var _createChannelSegment = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee66(id, data) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee66$(_context66) {\n                        while(1){\n                            switch(_context66.prev = _context66.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context66.abrupt(\"return\", this.createSegment(\"channel\", id, data));\n                                case 2:\n                                case \"end\":\n                                    return _context66.stop();\n                            }\n                        }\n                    }, _callee66, this);\n                }));\n                function createChannelSegment(_x92, _x93) {\n                    return _createChannelSegment.apply(this, arguments);\n                }\n                return createChannelSegment;\n            }()\n        },\n        {\n            key: \"getSegment\",\n            value: function() {\n                var _getSegment = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee67(id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee67$(_context67) {\n                        while(1){\n                            switch(_context67.prev = _context67.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context67.abrupt(\"return\", this.get(this.baseURL + \"/segments/\".concat(id)));\n                                case 2:\n                                case \"end\":\n                                    return _context67.stop();\n                            }\n                        }\n                    }, _callee67, this);\n                }));\n                function getSegment(_x94) {\n                    return _getSegment.apply(this, arguments);\n                }\n                return getSegment;\n            }()\n        },\n        {\n            key: \"updateSegment\",\n            value: function() {\n                var _updateSegment = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee68(id, data) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee68$(_context68) {\n                        while(1){\n                            switch(_context68.prev = _context68.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context68.abrupt(\"return\", this.put(this.baseURL + \"/segments/\".concat(id), data));\n                                case 2:\n                                case \"end\":\n                                    return _context68.stop();\n                            }\n                        }\n                    }, _callee68, this);\n                }));\n                function updateSegment(_x95, _x96) {\n                    return _updateSegment.apply(this, arguments);\n                }\n                return updateSegment;\n            }()\n        },\n        {\n            key: \"addSegmentTargets\",\n            value: function() {\n                var _addSegmentTargets = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee69(id, targets) {\n                    var body;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee69$(_context69) {\n                        while(1){\n                            switch(_context69.prev = _context69.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    body = {\n                                        target_ids: targets\n                                    };\n                                    return _context69.abrupt(\"return\", this.post(this.baseURL + \"/segments/\".concat(id, \"/addtargets\"), body));\n                                case 3:\n                                case \"end\":\n                                    return _context69.stop();\n                            }\n                        }\n                    }, _callee69, this);\n                }));\n                function addSegmentTargets(_x97, _x98) {\n                    return _addSegmentTargets.apply(this, arguments);\n                }\n                return addSegmentTargets;\n            }()\n        },\n        {\n            key: \"querySegmentTargets\",\n            value: function() {\n                var _querySegmentTargets = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee70(id) {\n                    var filter, sort, options, _args70 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee70$(_context70) {\n                        while(1){\n                            switch(_context70.prev = _context70.next){\n                                case 0:\n                                    filter = _args70.length > 1 && _args70[1] !== undefined ? _args70[1] : {};\n                                    sort = _args70.length > 2 && _args70[2] !== undefined ? _args70[2] : [];\n                                    options = _args70.length > 3 && _args70[3] !== undefined ? _args70[3] : {};\n                                    this.validateServerSideAuth();\n                                    return _context70.abrupt(\"return\", this.post(this.baseURL + \"/segments/\".concat(id, \"/targets/query\"), _objectSpread({\n                                        filter: filter || {},\n                                        sort: sort || []\n                                    }, options)));\n                                case 5:\n                                case \"end\":\n                                    return _context70.stop();\n                            }\n                        }\n                    }, _callee70, this);\n                }));\n                function querySegmentTargets(_x99) {\n                    return _querySegmentTargets.apply(this, arguments);\n                }\n                return querySegmentTargets;\n            }()\n        },\n        {\n            key: \"removeSegmentTargets\",\n            value: function() {\n                var _removeSegmentTargets = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee71(id, targets) {\n                    var body;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee71$(_context71) {\n                        while(1){\n                            switch(_context71.prev = _context71.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    body = {\n                                        target_ids: targets\n                                    };\n                                    return _context71.abrupt(\"return\", this.post(this.baseURL + \"/segments/\".concat(id, \"/deletetargets\"), body));\n                                case 3:\n                                case \"end\":\n                                    return _context71.stop();\n                            }\n                        }\n                    }, _callee71, this);\n                }));\n                function removeSegmentTargets(_x100, _x101) {\n                    return _removeSegmentTargets.apply(this, arguments);\n                }\n                return removeSegmentTargets;\n            }()\n        },\n        {\n            key: \"querySegments\",\n            value: function() {\n                var _querySegments = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee72(filter, sort) {\n                    var options, _args72 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee72$(_context72) {\n                        while(1){\n                            switch(_context72.prev = _context72.next){\n                                case 0:\n                                    options = _args72.length > 2 && _args72[2] !== undefined ? _args72[2] : {};\n                                    this.validateServerSideAuth();\n                                    return _context72.abrupt(\"return\", this.post(this.baseURL + \"/segments/query\", _objectSpread({\n                                        filter: filter,\n                                        sort: sort\n                                    }, options)));\n                                case 3:\n                                case \"end\":\n                                    return _context72.stop();\n                            }\n                        }\n                    }, _callee72, this);\n                }));\n                function querySegments(_x102, _x103) {\n                    return _querySegments.apply(this, arguments);\n                }\n                return querySegments;\n            }()\n        },\n        {\n            key: \"deleteSegment\",\n            value: function() {\n                var _deleteSegment = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee73(id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee73$(_context73) {\n                        while(1){\n                            switch(_context73.prev = _context73.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context73.abrupt(\"return\", this.delete(this.baseURL + \"/segments/\".concat(id)));\n                                case 2:\n                                case \"end\":\n                                    return _context73.stop();\n                            }\n                        }\n                    }, _callee73, this);\n                }));\n                function deleteSegment(_x104) {\n                    return _deleteSegment.apply(this, arguments);\n                }\n                return deleteSegment;\n            }()\n        },\n        {\n            key: \"segmentTargetExists\",\n            value: function() {\n                var _segmentTargetExists = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee74(segmentId, targetId) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee74$(_context74) {\n                        while(1){\n                            switch(_context74.prev = _context74.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context74.abrupt(\"return\", this.get(this.baseURL + \"/segments/\".concat(segmentId, \"/target/\").concat(targetId)));\n                                case 2:\n                                case \"end\":\n                                    return _context74.stop();\n                            }\n                        }\n                    }, _callee74, this);\n                }));\n                function segmentTargetExists(_x105, _x106) {\n                    return _segmentTargetExists.apply(this, arguments);\n                }\n                return segmentTargetExists;\n            }()\n        },\n        {\n            key: \"createCampaign\",\n            value: function() {\n                var _createCampaign = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee75(params) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee75$(_context75) {\n                        while(1){\n                            switch(_context75.prev = _context75.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context75.abrupt(\"return\", this.post(this.baseURL + \"/campaigns\", _objectSpread({}, params)));\n                                case 2:\n                                case \"end\":\n                                    return _context75.stop();\n                            }\n                        }\n                    }, _callee75, this);\n                }));\n                function createCampaign(_x107) {\n                    return _createCampaign.apply(this, arguments);\n                }\n                return createCampaign;\n            }()\n        },\n        {\n            key: \"getCampaign\",\n            value: function() {\n                var _getCampaign = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee76(id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee76$(_context76) {\n                        while(1){\n                            switch(_context76.prev = _context76.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context76.abrupt(\"return\", this.get(this.baseURL + \"/campaigns/\".concat(id)));\n                                case 2:\n                                case \"end\":\n                                    return _context76.stop();\n                            }\n                        }\n                    }, _callee76, this);\n                }));\n                function getCampaign(_x108) {\n                    return _getCampaign.apply(this, arguments);\n                }\n                return getCampaign;\n            }()\n        },\n        {\n            key: \"startCampaign\",\n            value: function() {\n                var _startCampaign = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee77(id, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee77$(_context77) {\n                        while(1){\n                            switch(_context77.prev = _context77.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context77.abrupt(\"return\", this.post(this.baseURL + \"/campaigns/\".concat(id, \"/start\"), {\n                                        scheduled_for: options === null || options === void 0 ? void 0 : options.scheduledFor,\n                                        stop_at: options === null || options === void 0 ? void 0 : options.stopAt\n                                    }));\n                                case 2:\n                                case \"end\":\n                                    return _context77.stop();\n                            }\n                        }\n                    }, _callee77, this);\n                }));\n                function startCampaign(_x109, _x110) {\n                    return _startCampaign.apply(this, arguments);\n                }\n                return startCampaign;\n            }()\n        },\n        {\n            key: \"queryCampaigns\",\n            value: function() {\n                var _queryCampaigns = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee78(filter, sort, options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee78$(_context78) {\n                        while(1){\n                            switch(_context78.prev = _context78.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    _context78.next = 3;\n                                    return this.post(this.baseURL + \"/campaigns/query\", _objectSpread({\n                                        filter: filter,\n                                        sort: sort\n                                    }, options || {}));\n                                case 3:\n                                    return _context78.abrupt(\"return\", _context78.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context78.stop();\n                            }\n                        }\n                    }, _callee78, this);\n                }));\n                function queryCampaigns(_x111, _x112, _x113) {\n                    return _queryCampaigns.apply(this, arguments);\n                }\n                return queryCampaigns;\n            }()\n        },\n        {\n            key: \"updateCampaign\",\n            value: function() {\n                var _updateCampaign = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee79(id, params) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee79$(_context79) {\n                        while(1){\n                            switch(_context79.prev = _context79.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context79.abrupt(\"return\", this.put(this.baseURL + \"/campaigns/\".concat(id), params));\n                                case 2:\n                                case \"end\":\n                                    return _context79.stop();\n                            }\n                        }\n                    }, _callee79, this);\n                }));\n                function updateCampaign(_x114, _x115) {\n                    return _updateCampaign.apply(this, arguments);\n                }\n                return updateCampaign;\n            }()\n        },\n        {\n            key: \"deleteCampaign\",\n            value: function() {\n                var _deleteCampaign = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee80(id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee80$(_context80) {\n                        while(1){\n                            switch(_context80.prev = _context80.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context80.abrupt(\"return\", this.delete(this.baseURL + \"/campaigns/\".concat(id)));\n                                case 2:\n                                case \"end\":\n                                    return _context80.stop();\n                            }\n                        }\n                    }, _callee80, this);\n                }));\n                function deleteCampaign(_x116) {\n                    return _deleteCampaign.apply(this, arguments);\n                }\n                return deleteCampaign;\n            }()\n        },\n        {\n            key: \"stopCampaign\",\n            value: function() {\n                var _stopCampaign = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee81(id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee81$(_context81) {\n                        while(1){\n                            switch(_context81.prev = _context81.next){\n                                case 0:\n                                    this.validateServerSideAuth();\n                                    return _context81.abrupt(\"return\", this.post(this.baseURL + \"/campaigns/\".concat(id, \"/stop\")));\n                                case 2:\n                                case \"end\":\n                                    return _context81.stop();\n                            }\n                        }\n                    }, _callee81, this);\n                }));\n                function stopCampaign(_x117) {\n                    return _stopCampaign.apply(this, arguments);\n                }\n                return stopCampaign;\n            }()\n        },\n        {\n            key: \"enrichURL\",\n            value: function() {\n                var _enrichURL = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee82(url) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee82$(_context82) {\n                        while(1){\n                            switch(_context82.prev = _context82.next){\n                                case 0:\n                                    return _context82.abrupt(\"return\", this.get(this.baseURL + \"/og\", {\n                                        url: url\n                                    }));\n                                case 1:\n                                case \"end\":\n                                    return _context82.stop();\n                            }\n                        }\n                    }, _callee82, this);\n                }));\n                function enrichURL(_x118) {\n                    return _enrichURL.apply(this, arguments);\n                }\n                return enrichURL;\n            }()\n        },\n        {\n            key: \"getTask\",\n            value: function() {\n                var _getTask = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee83(id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee83$(_context83) {\n                        while(1){\n                            switch(_context83.prev = _context83.next){\n                                case 0:\n                                    return _context83.abrupt(\"return\", this.get(\"\".concat(this.baseURL, \"/tasks/\").concat(id)));\n                                case 1:\n                                case \"end\":\n                                    return _context83.stop();\n                            }\n                        }\n                    }, _callee83, this);\n                }));\n                function getTask(_x119) {\n                    return _getTask.apply(this, arguments);\n                }\n                return getTask;\n            }()\n        },\n        {\n            key: \"deleteChannels\",\n            value: function() {\n                var _deleteChannels = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee84(cids) {\n                    var options, _args84 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee84$(_context84) {\n                        while(1){\n                            switch(_context84.prev = _context84.next){\n                                case 0:\n                                    options = _args84.length > 1 && _args84[1] !== undefined ? _args84[1] : {};\n                                    _context84.next = 3;\n                                    return this.post(this.baseURL + \"/channels/delete\", _objectSpread({\n                                        cids: cids\n                                    }, options));\n                                case 3:\n                                    return _context84.abrupt(\"return\", _context84.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context84.stop();\n                            }\n                        }\n                    }, _callee84, this);\n                }));\n                function deleteChannels(_x120) {\n                    return _deleteChannels.apply(this, arguments);\n                }\n                return deleteChannels;\n            }()\n        },\n        {\n            key: \"deleteUsers\",\n            value: function() {\n                var _deleteUsers = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee85(user_ids) {\n                    var options, _args85 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee85$(_context85) {\n                        while(1){\n                            switch(_context85.prev = _context85.next){\n                                case 0:\n                                    options = _args85.length > 1 && _args85[1] !== undefined ? _args85[1] : {};\n                                    if (!(typeof options.user !== \"undefined\" && ![\n                                        \"soft\",\n                                        \"hard\",\n                                        \"pruning\"\n                                    ].includes(options.user))) {\n                                        _context85.next = 3;\n                                        break;\n                                    }\n                                    throw new Error(\"Invalid delete user options. user must be one of [soft hard pruning]\");\n                                case 3:\n                                    if (!(typeof options.conversations !== \"undefined\" && ![\n                                        \"soft\",\n                                        \"hard\"\n                                    ].includes(options.conversations))) {\n                                        _context85.next = 5;\n                                        break;\n                                    }\n                                    throw new Error(\"Invalid delete user options. conversations must be one of [soft hard]\");\n                                case 5:\n                                    if (!(typeof options.messages !== \"undefined\" && ![\n                                        \"soft\",\n                                        \"hard\",\n                                        \"pruning\"\n                                    ].includes(options.messages))) {\n                                        _context85.next = 7;\n                                        break;\n                                    }\n                                    throw new Error(\"Invalid delete user options. messages must be one of [soft hard pruning]\");\n                                case 7:\n                                    _context85.next = 9;\n                                    return this.post(this.baseURL + \"/users/delete\", _objectSpread({\n                                        user_ids: user_ids\n                                    }, options));\n                                case 9:\n                                    return _context85.abrupt(\"return\", _context85.sent);\n                                case 10:\n                                case \"end\":\n                                    return _context85.stop();\n                            }\n                        }\n                    }, _callee85, this);\n                }));\n                function deleteUsers(_x121) {\n                    return _deleteUsers.apply(this, arguments);\n                }\n                return deleteUsers;\n            }()\n        },\n        {\n            key: \"_createImportURL\",\n            value: function() {\n                var _createImportURL2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee86(filename) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee86$(_context86) {\n                        while(1){\n                            switch(_context86.prev = _context86.next){\n                                case 0:\n                                    _context86.next = 2;\n                                    return this.post(this.baseURL + \"/import_urls\", {\n                                        filename: filename\n                                    });\n                                case 2:\n                                    return _context86.abrupt(\"return\", _context86.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context86.stop();\n                            }\n                        }\n                    }, _callee86, this);\n                }));\n                function _createImportURL(_x122) {\n                    return _createImportURL2.apply(this, arguments);\n                }\n                return _createImportURL;\n            }()\n        },\n        {\n            key: \"_createImport\",\n            value: function() {\n                var _createImport2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee87(path) {\n                    var options, _args87 = arguments;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee87$(_context87) {\n                        while(1){\n                            switch(_context87.prev = _context87.next){\n                                case 0:\n                                    options = _args87.length > 1 && _args87[1] !== undefined ? _args87[1] : {\n                                        mode: \"upsert\"\n                                    };\n                                    _context87.next = 3;\n                                    return this.post(this.baseURL + \"/imports\", _objectSpread({\n                                        path: path\n                                    }, options));\n                                case 3:\n                                    return _context87.abrupt(\"return\", _context87.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context87.stop();\n                            }\n                        }\n                    }, _callee87, this);\n                }));\n                function _createImport(_x123) {\n                    return _createImport2.apply(this, arguments);\n                }\n                return _createImport;\n            }()\n        },\n        {\n            key: \"_getImport\",\n            value: function() {\n                var _getImport2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee88(id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee88$(_context88) {\n                        while(1){\n                            switch(_context88.prev = _context88.next){\n                                case 0:\n                                    _context88.next = 2;\n                                    return this.get(this.baseURL + \"/imports/\".concat(id));\n                                case 2:\n                                    return _context88.abrupt(\"return\", _context88.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context88.stop();\n                            }\n                        }\n                    }, _callee88, this);\n                }));\n                function _getImport(_x124) {\n                    return _getImport2.apply(this, arguments);\n                }\n                return _getImport;\n            }()\n        },\n        {\n            key: \"_listImports\",\n            value: function() {\n                var _listImports2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee89(options) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee89$(_context89) {\n                        while(1){\n                            switch(_context89.prev = _context89.next){\n                                case 0:\n                                    _context89.next = 2;\n                                    return this.get(this.baseURL + \"/imports\", options);\n                                case 2:\n                                    return _context89.abrupt(\"return\", _context89.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context89.stop();\n                            }\n                        }\n                    }, _callee89, this);\n                }));\n                function _listImports(_x125) {\n                    return _listImports2.apply(this, arguments);\n                }\n                return _listImports;\n            }()\n        },\n        {\n            key: \"upsertPushProvider\",\n            value: function() {\n                var _upsertPushProvider = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee90(pushProvider) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee90$(_context90) {\n                        while(1){\n                            switch(_context90.prev = _context90.next){\n                                case 0:\n                                    _context90.next = 2;\n                                    return this.post(this.baseURL + \"/push_providers\", {\n                                        push_provider: pushProvider\n                                    });\n                                case 2:\n                                    return _context90.abrupt(\"return\", _context90.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context90.stop();\n                            }\n                        }\n                    }, _callee90, this);\n                }));\n                function upsertPushProvider(_x126) {\n                    return _upsertPushProvider.apply(this, arguments);\n                }\n                return upsertPushProvider;\n            }()\n        },\n        {\n            key: \"deletePushProvider\",\n            value: function() {\n                var _deletePushProvider = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee91(_ref10) {\n                    var type, name;\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee91$(_context91) {\n                        while(1){\n                            switch(_context91.prev = _context91.next){\n                                case 0:\n                                    type = _ref10.type, name = _ref10.name;\n                                    _context91.next = 3;\n                                    return this.delete(this.baseURL + \"/push_providers/\".concat(type, \"/\").concat(name));\n                                case 3:\n                                    return _context91.abrupt(\"return\", _context91.sent);\n                                case 4:\n                                case \"end\":\n                                    return _context91.stop();\n                            }\n                        }\n                    }, _callee91, this);\n                }));\n                function deletePushProvider(_x127) {\n                    return _deletePushProvider.apply(this, arguments);\n                }\n                return deletePushProvider;\n            }()\n        },\n        {\n            key: \"listPushProviders\",\n            value: function() {\n                var _listPushProviders = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee92() {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee92$(_context92) {\n                        while(1){\n                            switch(_context92.prev = _context92.next){\n                                case 0:\n                                    _context92.next = 2;\n                                    return this.get(this.baseURL + \"/push_providers\");\n                                case 2:\n                                    return _context92.abrupt(\"return\", _context92.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context92.stop();\n                            }\n                        }\n                    }, _callee92, this);\n                }));\n                function listPushProviders() {\n                    return _listPushProviders.apply(this, arguments);\n                }\n                return listPushProviders;\n            }()\n        },\n        {\n            key: \"createAbortControllerForNextRequest\",\n            value: function createAbortControllerForNextRequest() {\n                return this.nextRequestAbortController = new AbortController();\n            }\n        },\n        {\n            key: \"commitMessage\",\n            value: function() {\n                var _commitMessage = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().mark(function _callee93(id) {\n                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_9___default().wrap(function _callee93$(_context93) {\n                        while(1){\n                            switch(_context93.prev = _context93.next){\n                                case 0:\n                                    _context93.next = 2;\n                                    return this.post(this.baseURL + \"/messages/\".concat(id, \"/commit\"));\n                                case 2:\n                                    return _context93.abrupt(\"return\", _context93.sent);\n                                case 3:\n                                case \"end\":\n                                    return _context93.stop();\n                            }\n                        }\n                    }, _callee93, this);\n                }));\n                function commitMessage(_x128) {\n                    return _commitMessage.apply(this, arguments);\n                }\n                return commitMessage;\n            }()\n        }\n    ], [\n        {\n            key: \"getInstance\",\n            value: function getInstance(key, secretOrOptions, options) {\n                if (!StreamChat._instance) {\n                    if (typeof secretOrOptions === \"string\") {\n                        StreamChat._instance = new StreamChat(key, secretOrOptions, options);\n                    } else {\n                        StreamChat._instance = new StreamChat(key, secretOrOptions);\n                    }\n                }\n                return StreamChat._instance;\n            }\n        }\n    ]);\n    return StreamChat;\n}();\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(StreamChat, \"_instance\", void 0);\nvar EVENT_MAP = {\n    \"channel.created\": true,\n    \"channel.deleted\": true,\n    \"channel.hidden\": true,\n    \"channel.kicked\": true,\n    \"channel.muted\": true,\n    \"channel.truncated\": true,\n    \"channel.unmuted\": true,\n    \"channel.updated\": true,\n    \"channel.visible\": true,\n    \"health.check\": true,\n    \"member.added\": true,\n    \"member.removed\": true,\n    \"member.updated\": true,\n    \"message.deleted\": true,\n    \"message.new\": true,\n    \"message.read\": true,\n    \"message.updated\": true,\n    \"message.undeleted\": true,\n    \"notification.added_to_channel\": true,\n    \"notification.channel_deleted\": true,\n    \"notification.channel_mutes_updated\": true,\n    \"notification.channel_truncated\": true,\n    \"notification.invite_accepted\": true,\n    \"notification.invite_rejected\": true,\n    \"notification.invited\": true,\n    \"notification.mark_read\": true,\n    \"notification.mark_unread\": true,\n    \"notification.message_new\": true,\n    \"notification.mutes_updated\": true,\n    \"notification.removed_from_channel\": true,\n    \"notification.thread_message_new\": true,\n    \"reaction.deleted\": true,\n    \"reaction.new\": true,\n    \"reaction.updated\": true,\n    \"typing.start\": true,\n    \"typing.stop\": true,\n    \"user.banned\": true,\n    \"user.deleted\": true,\n    \"user.presence.changed\": true,\n    \"user.unbanned\": true,\n    \"user.unread_message_reminder\": true,\n    \"user.updated\": true,\n    \"user.watching.start\": true,\n    \"user.watching.stop\": true,\n    // local events\n    \"channels.queried\": true,\n    \"connection.changed\": true,\n    \"connection.recovered\": true,\n    \"transport.changed\": true,\n    \"capabilities.changed\": true\n};\nvar Allow = \"Allow\";\nvar Deny = \"Deny\";\nvar AnyResource = [\n    \"*\"\n];\nvar AnyRole = [\n    \"*\"\n];\nvar MaxPriority = 999;\nvar MinPriority = 1; // deprecated permission object class, you should use the new permission system v2 and use permissions\n// defined in BuiltinPermissions to configure your channel types\nvar Permission = function Permission(name, priority) {\n    var resources = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : AnyResource;\n    var roles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : AnyRole;\n    var owner = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var action = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Allow;\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_6___default()(this, Permission);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"name\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"action\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"owner\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"priority\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"resources\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_8___default()(this, \"roles\", void 0);\n    this.name = name;\n    this.action = action;\n    this.owner = owner;\n    this.priority = priority;\n    this.resources = resources;\n    this.roles = roles;\n}; // deprecated\nvar AllowAll = new Permission(\"Allow all\", MaxPriority, AnyResource, AnyRole, false, Allow); // deprecated\nvar DenyAll = new Permission(\"Deny all\", MinPriority, AnyResource, AnyRole, false, Deny);\nvar BuiltinRoles = {\n    Admin: \"admin\",\n    Anonymous: \"anonymous\",\n    ChannelMember: \"channel_member\",\n    ChannelModerator: \"channel_moderator\",\n    Guest: \"guest\",\n    User: \"user\"\n};\nvar BuiltinPermissions = {\n    AddLinks: \"Add Links\",\n    BanUser: \"Ban User\",\n    CreateChannel: \"Create Channel\",\n    CreateMessage: \"Create Message\",\n    CreateReaction: \"Create Reaction\",\n    DeleteAnyAttachment: \"Delete Any Attachment\",\n    DeleteAnyChannel: \"Delete Any Channel\",\n    DeleteAnyMessage: \"Delete Any Message\",\n    DeleteAnyReaction: \"Delete Any Reaction\",\n    DeleteOwnAttachment: \"Delete Own Attachment\",\n    DeleteOwnChannel: \"Delete Own Channel\",\n    DeleteOwnMessage: \"Delete Own Message\",\n    DeleteOwnReaction: \"Delete Own Reaction\",\n    ReadAnyChannel: \"Read Any Channel\",\n    ReadOwnChannel: \"Read Own Channel\",\n    RunMessageAction: \"Run Message Action\",\n    UpdateAnyChannel: \"Update Any Channel\",\n    UpdateAnyMessage: \"Update Any Message\",\n    UpdateMembersAnyChannel: \"Update Members Any Channel\",\n    UpdateMembersOwnChannel: \"Update Members Own Channel\",\n    UpdateOwnChannel: \"Update Own Channel\",\n    UpdateOwnMessage: \"Update Own Message\",\n    UploadAttachment: \"Upload Attachment\",\n    UseFrozenChannel: \"Send messages and reactions to frozen channels\"\n};\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/stream-chat/dist/index.es.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/stream-chat/node_modules/isomorphic-ws/node.js":
/*!*********************************************************************!*\
  !*** ./node_modules/stream-chat/node_modules/isomorphic-ws/node.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = __webpack_require__(/*! ws */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/index.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdHJlYW0tY2hhdC9ub2RlX21vZHVsZXMvaXNvbW9ycGhpYy13cy9ub2RlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLHNIQUE4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rldi1maW5kZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWNoYXQvbm9kZV9tb2R1bGVzL2lzb21vcnBoaWMtd3Mvbm9kZS5qcz8zYzM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ3dzJyk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/stream-chat/node_modules/isomorphic-ws/node.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/stream-chat/node_modules/ws/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/stream-chat/node_modules/ws/index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst WebSocket = __webpack_require__(/*! ./lib/websocket */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/websocket.js\");\n\nWebSocket.createWebSocketStream = __webpack_require__(/*! ./lib/stream */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/stream.js\");\nWebSocket.Server = __webpack_require__(/*! ./lib/websocket-server */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/websocket-server.js\");\nWebSocket.Receiver = __webpack_require__(/*! ./lib/receiver */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/receiver.js\");\nWebSocket.Sender = __webpack_require__(/*! ./lib/sender */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/sender.js\");\n\nmodule.exports = WebSocket;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdHJlYW0tY2hhdC9ub2RlX21vZHVsZXMvd3MvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCLG1CQUFPLENBQUMscUdBQWlCOztBQUUzQyxrQ0FBa0MsbUJBQU8sQ0FBQywrRkFBYztBQUN4RCxtQkFBbUIsbUJBQU8sQ0FBQyxtSEFBd0I7QUFDbkQscUJBQXFCLG1CQUFPLENBQUMsbUdBQWdCO0FBQzdDLG1CQUFtQixtQkFBTyxDQUFDLCtGQUFjOztBQUV6QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rldi1maW5kZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWNoYXQvbm9kZV9tb2R1bGVzL3dzL2luZGV4LmpzP2E5OTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBXZWJTb2NrZXQgPSByZXF1aXJlKCcuL2xpYi93ZWJzb2NrZXQnKTtcblxuV2ViU29ja2V0LmNyZWF0ZVdlYlNvY2tldFN0cmVhbSA9IHJlcXVpcmUoJy4vbGliL3N0cmVhbScpO1xuV2ViU29ja2V0LlNlcnZlciA9IHJlcXVpcmUoJy4vbGliL3dlYnNvY2tldC1zZXJ2ZXInKTtcbldlYlNvY2tldC5SZWNlaXZlciA9IHJlcXVpcmUoJy4vbGliL3JlY2VpdmVyJyk7XG5XZWJTb2NrZXQuU2VuZGVyID0gcmVxdWlyZSgnLi9saWIvc2VuZGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV2ViU29ja2V0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/stream-chat/node_modules/ws/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/buffer-util.js":
/*!*********************************************************************!*\
  !*** ./node_modules/stream-chat/node_modules/ws/lib/buffer-util.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/constants.js\");\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nfunction concat(list, totalLength) {\n  if (list.length === 0) return EMPTY_BUFFER;\n  if (list.length === 1) return list[0];\n\n  const target = Buffer.allocUnsafe(totalLength);\n  let offset = 0;\n\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i];\n    target.set(buf, offset);\n    offset += buf.length;\n  }\n\n  if (offset < totalLength) return target.slice(0, offset);\n\n  return target;\n}\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nfunction _mask(source, mask, output, offset, length) {\n  for (let i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nfunction _unmask(buffer, mask) {\n  // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n  const length = buffer.length;\n  for (let i = 0; i < length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */\nfunction toArrayBuffer(buf) {\n  if (buf.byteLength === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n}\n\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */\nfunction toBuffer(data) {\n  toBuffer.readOnly = true;\n\n  if (Buffer.isBuffer(data)) return data;\n\n  let buf;\n\n  if (data instanceof ArrayBuffer) {\n    buf = Buffer.from(data);\n  } else if (ArrayBuffer.isView(data)) {\n    buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n  } else {\n    buf = Buffer.from(data);\n    toBuffer.readOnly = false;\n  }\n\n  return buf;\n}\n\ntry {\n  const bufferUtil = __webpack_require__(/*! bufferutil */ \"?6549\");\n  const bu = bufferUtil.BufferUtil || bufferUtil;\n\n  module.exports = {\n    concat,\n    mask(source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);\n      else bu.mask(source, mask, output, offset, length);\n    },\n    toArrayBuffer,\n    toBuffer,\n    unmask(buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);\n      else bu.unmask(buffer, mask);\n    }\n  };\n} catch (e) /* istanbul ignore next */ {\n  module.exports = {\n    concat,\n    mask: _mask,\n    toArrayBuffer,\n    toBuffer,\n    unmask: _unmask\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdHJlYW0tY2hhdC9ub2RlX21vZHVsZXMvd3MvbGliL2J1ZmZlci11dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFFBQVEsZUFBZSxFQUFFLG1CQUFPLENBQUMsaUdBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLFFBQVE7QUFDbkIsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsWUFBWTtBQUM5QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFlBQVk7QUFDOUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLGFBQWE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsWUFBWSxRQUFRO0FBQ3BCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMseUJBQVk7QUFDekM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGV2LWZpbmRlci8uL25vZGVfbW9kdWxlcy9zdHJlYW0tY2hhdC9ub2RlX21vZHVsZXMvd3MvbGliL2J1ZmZlci11dGlsLmpzPzljOWMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB7IEVNUFRZX0JVRkZFUiB9ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcblxuLyoqXG4gKiBNZXJnZXMgYW4gYXJyYXkgb2YgYnVmZmVycyBpbnRvIGEgbmV3IGJ1ZmZlci5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcltdfSBsaXN0IFRoZSBhcnJheSBvZiBidWZmZXJzIHRvIGNvbmNhdFxuICogQHBhcmFtIHtOdW1iZXJ9IHRvdGFsTGVuZ3RoIFRoZSB0b3RhbCBsZW5ndGggb2YgYnVmZmVycyBpbiB0aGUgbGlzdFxuICogQHJldHVybiB7QnVmZmVyfSBUaGUgcmVzdWx0aW5nIGJ1ZmZlclxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBjb25jYXQobGlzdCwgdG90YWxMZW5ndGgpIHtcbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSByZXR1cm4gRU1QVFlfQlVGRkVSO1xuICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHJldHVybiBsaXN0WzBdO1xuXG4gIGNvbnN0IHRhcmdldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSh0b3RhbExlbmd0aCk7XG4gIGxldCBvZmZzZXQgPSAwO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGJ1ZiA9IGxpc3RbaV07XG4gICAgdGFyZ2V0LnNldChidWYsIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IGJ1Zi5sZW5ndGg7XG4gIH1cblxuICBpZiAob2Zmc2V0IDwgdG90YWxMZW5ndGgpIHJldHVybiB0YXJnZXQuc2xpY2UoMCwgb2Zmc2V0KTtcblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIE1hc2tzIGEgYnVmZmVyIHVzaW5nIHRoZSBnaXZlbiBtYXNrLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyfSBzb3VyY2UgVGhlIGJ1ZmZlciB0byBtYXNrXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbWFzayBUaGUgbWFzayB0byB1c2VcbiAqIEBwYXJhbSB7QnVmZmVyfSBvdXRwdXQgVGhlIGJ1ZmZlciB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IFRoZSBvZmZzZXQgYXQgd2hpY2ggdG8gc3RhcnQgd3JpdGluZ1xuICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCBUaGUgbnVtYmVyIG9mIGJ5dGVzIHRvIG1hc2suXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIF9tYXNrKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgb3V0cHV0W29mZnNldCArIGldID0gc291cmNlW2ldIF4gbWFza1tpICYgM107XG4gIH1cbn1cblxuLyoqXG4gKiBVbm1hc2tzIGEgYnVmZmVyIHVzaW5nIHRoZSBnaXZlbiBtYXNrLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byB1bm1hc2tcbiAqIEBwYXJhbSB7QnVmZmVyfSBtYXNrIFRoZSBtYXNrIHRvIHVzZVxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBfdW5tYXNrKGJ1ZmZlciwgbWFzaykge1xuICAvLyBSZXF1aXJlZCB1bnRpbCBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzkwMDYgaXMgcmVzb2x2ZWQuXG4gIGNvbnN0IGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBidWZmZXJbaV0gXj0gbWFza1tpICYgM107XG4gIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGJ1ZmZlciB0byBhbiBgQXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWYgVGhlIGJ1ZmZlciB0byBjb252ZXJ0XG4gKiBAcmV0dXJuIHtBcnJheUJ1ZmZlcn0gQ29udmVydGVkIGJ1ZmZlclxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB0b0FycmF5QnVmZmVyKGJ1Zikge1xuICBpZiAoYnVmLmJ5dGVMZW5ndGggPT09IGJ1Zi5idWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgIHJldHVybiBidWYuYnVmZmVyO1xuICB9XG5cbiAgcmV0dXJuIGJ1Zi5idWZmZXIuc2xpY2UoYnVmLmJ5dGVPZmZzZXQsIGJ1Zi5ieXRlT2Zmc2V0ICsgYnVmLmJ5dGVMZW5ndGgpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBkYXRhYCB0byBhIGBCdWZmZXJgLlxuICpcbiAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgZGF0YSB0byBjb252ZXJ0XG4gKiBAcmV0dXJuIHtCdWZmZXJ9IFRoZSBidWZmZXJcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn1cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdG9CdWZmZXIoZGF0YSkge1xuICB0b0J1ZmZlci5yZWFkT25seSA9IHRydWU7XG5cbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkgcmV0dXJuIGRhdGE7XG5cbiAgbGV0IGJ1ZjtcblxuICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgYnVmID0gQnVmZmVyLmZyb20oZGF0YSk7XG4gIH0gZWxzZSBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKSB7XG4gICAgYnVmID0gQnVmZmVyLmZyb20oZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoKTtcbiAgfSBlbHNlIHtcbiAgICBidWYgPSBCdWZmZXIuZnJvbShkYXRhKTtcbiAgICB0b0J1ZmZlci5yZWFkT25seSA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGJ1Zjtcbn1cblxudHJ5IHtcbiAgY29uc3QgYnVmZmVyVXRpbCA9IHJlcXVpcmUoJ2J1ZmZlcnV0aWwnKTtcbiAgY29uc3QgYnUgPSBidWZmZXJVdGlsLkJ1ZmZlclV0aWwgfHwgYnVmZmVyVXRpbDtcblxuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBjb25jYXQsXG4gICAgbWFzayhzb3VyY2UsIG1hc2ssIG91dHB1dCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgIGlmIChsZW5ndGggPCA0OCkgX21hc2soc291cmNlLCBtYXNrLCBvdXRwdXQsIG9mZnNldCwgbGVuZ3RoKTtcbiAgICAgIGVsc2UgYnUubWFzayhzb3VyY2UsIG1hc2ssIG91dHB1dCwgb2Zmc2V0LCBsZW5ndGgpO1xuICAgIH0sXG4gICAgdG9BcnJheUJ1ZmZlcixcbiAgICB0b0J1ZmZlcixcbiAgICB1bm1hc2soYnVmZmVyLCBtYXNrKSB7XG4gICAgICBpZiAoYnVmZmVyLmxlbmd0aCA8IDMyKSBfdW5tYXNrKGJ1ZmZlciwgbWFzayk7XG4gICAgICBlbHNlIGJ1LnVubWFzayhidWZmZXIsIG1hc2spO1xuICAgIH1cbiAgfTtcbn0gY2F0Y2ggKGUpIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgY29uY2F0LFxuICAgIG1hc2s6IF9tYXNrLFxuICAgIHRvQXJyYXlCdWZmZXIsXG4gICAgdG9CdWZmZXIsXG4gICAgdW5tYXNrOiBfdW5tYXNrXG4gIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/buffer-util.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/constants.js":
/*!*******************************************************************!*\
  !*** ./node_modules/stream-chat/node_modules/ws/lib/constants.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = {\n  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\n  kStatusCode: Symbol('status-code'),\n  kWebSocket: Symbol('websocket'),\n  EMPTY_BUFFER: Buffer.alloc(0),\n  NOOP: () => {}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdHJlYW0tY2hhdC9ub2RlX21vZHVsZXMvd3MvbGliL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGV2LWZpbmRlci8uL25vZGVfbW9kdWxlcy9zdHJlYW0tY2hhdC9ub2RlX21vZHVsZXMvd3MvbGliL2NvbnN0YW50cy5qcz9jODMxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEJJTkFSWV9UWVBFUzogWydub2RlYnVmZmVyJywgJ2FycmF5YnVmZmVyJywgJ2ZyYWdtZW50cyddLFxuICBHVUlEOiAnMjU4RUFGQTUtRTkxNC00N0RBLTk1Q0EtQzVBQjBEQzg1QjExJyxcbiAga1N0YXR1c0NvZGU6IFN5bWJvbCgnc3RhdHVzLWNvZGUnKSxcbiAga1dlYlNvY2tldDogU3ltYm9sKCd3ZWJzb2NrZXQnKSxcbiAgRU1QVFlfQlVGRkVSOiBCdWZmZXIuYWxsb2MoMCksXG4gIE5PT1A6ICgpID0+IHt9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/constants.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/event-target.js":
/*!**********************************************************************!*\
  !*** ./node_modules/stream-chat/node_modules/ws/lib/event-target.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("\n\n/**\n * Class representing an event.\n *\n * @private\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was\n   *     dispatched\n   */\n  constructor(type, target) {\n    this.target = target;\n    this.type = type;\n  }\n}\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */\n  constructor(data, target) {\n    super('message', target);\n\n    this.data = data;\n  }\n}\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being\n   *     closed\n   * @param {String} reason A human-readable string explaining why the\n   *     connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */\n  constructor(code, reason, target) {\n    super('close', target);\n\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n    this.reason = reason;\n    this.code = code;\n  }\n}\n\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */\nclass OpenEvent extends Event {\n  /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */\n  constructor(target) {\n    super('open', target);\n  }\n}\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n * @private\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {Object} error The error that generated this event\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */\n  constructor(error, target) {\n    super('error', target);\n\n    this.message = error.message;\n    this.error = error;\n  }\n}\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean`` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener(type, listener, options) {\n    if (typeof listener !== 'function') return;\n\n    function onMessage(data) {\n      listener.call(this, new MessageEvent(data, this));\n    }\n\n    function onClose(code, message) {\n      listener.call(this, new CloseEvent(code, message, this));\n    }\n\n    function onError(error) {\n      listener.call(this, new ErrorEvent(error, this));\n    }\n\n    function onOpen() {\n      listener.call(this, new OpenEvent(this));\n    }\n\n    const method = options && options.once ? 'once' : 'on';\n\n    if (type === 'message') {\n      onMessage._listener = listener;\n      this[method](type, onMessage);\n    } else if (type === 'close') {\n      onClose._listener = listener;\n      this[method](type, onClose);\n    } else if (type === 'error') {\n      onError._listener = listener;\n      this[method](type, onError);\n    } else if (type === 'open') {\n      onOpen._listener = listener;\n      this[method](type, onOpen);\n    } else {\n      this[method](type, listener);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */\n  removeEventListener(type, listener) {\n    const listeners = this.listeners(type);\n\n    for (let i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\n        this.removeListener(type, listeners[i]);\n      }\n    }\n  }\n};\n\nmodule.exports = EventTarget;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdHJlYW0tY2hhdC9ub2RlX21vZHVsZXMvd3MvbGliL2V2ZW50LXRhcmdldC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxzQ0FBc0M7QUFDbkQsYUFBYSxXQUFXO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBLGFBQWEsV0FBVztBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFdBQVc7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxVQUFVO0FBQ3ZCLGFBQWEsUUFBUTtBQUNyQjtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGV2LWZpbmRlci8uL25vZGVfbW9kdWxlcy9zdHJlYW0tY2hhdC9ub2RlX21vZHVsZXMvd3MvbGliL2V2ZW50LXRhcmdldC5qcz8yYmJhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYW4gZXZlbnQuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgRXZlbnQge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGBFdmVudGAuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IEEgcmVmZXJlbmNlIHRvIHRoZSB0YXJnZXQgdG8gd2hpY2ggdGhlIGV2ZW50IHdhc1xuICAgKiAgICAgZGlzcGF0Y2hlZFxuICAgKi9cbiAgY29uc3RydWN0b3IodHlwZSwgdGFyZ2V0KSB7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgfVxufVxuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIG1lc3NhZ2UgZXZlbnQuXG4gKlxuICogQGV4dGVuZHMgRXZlbnRcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIE1lc3NhZ2VFdmVudCBleHRlbmRzIEV2ZW50IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBgTWVzc2FnZUV2ZW50YC5cbiAgICpcbiAgICogQHBhcmFtIHsoU3RyaW5nfEJ1ZmZlcnxBcnJheUJ1ZmZlcnxCdWZmZXJbXSl9IGRhdGEgVGhlIHJlY2VpdmVkIGRhdGFcbiAgICogQHBhcmFtIHtXZWJTb2NrZXR9IHRhcmdldCBBIHJlZmVyZW5jZSB0byB0aGUgdGFyZ2V0IHRvIHdoaWNoIHRoZSBldmVudCB3YXNcbiAgICogICAgIGRpc3BhdGNoZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRhdGEsIHRhcmdldCkge1xuICAgIHN1cGVyKCdtZXNzYWdlJywgdGFyZ2V0KTtcblxuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gIH1cbn1cblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBjbG9zZSBldmVudC5cbiAqXG4gKiBAZXh0ZW5kcyBFdmVudFxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgQ2xvc2VFdmVudCBleHRlbmRzIEV2ZW50IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBgQ2xvc2VFdmVudGAuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlIFRoZSBzdGF0dXMgY29kZSBleHBsYWluaW5nIHdoeSB0aGUgY29ubmVjdGlvbiBpcyBiZWluZ1xuICAgKiAgICAgY2xvc2VkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSByZWFzb24gQSBodW1hbi1yZWFkYWJsZSBzdHJpbmcgZXhwbGFpbmluZyB3aHkgdGhlXG4gICAqICAgICBjb25uZWN0aW9uIGlzIGNsb3NpbmdcbiAgICogQHBhcmFtIHtXZWJTb2NrZXR9IHRhcmdldCBBIHJlZmVyZW5jZSB0byB0aGUgdGFyZ2V0IHRvIHdoaWNoIHRoZSBldmVudCB3YXNcbiAgICogICAgIGRpc3BhdGNoZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvZGUsIHJlYXNvbiwgdGFyZ2V0KSB7XG4gICAgc3VwZXIoJ2Nsb3NlJywgdGFyZ2V0KTtcblxuICAgIHRoaXMud2FzQ2xlYW4gPSB0YXJnZXQuX2Nsb3NlRnJhbWVSZWNlaXZlZCAmJiB0YXJnZXQuX2Nsb3NlRnJhbWVTZW50O1xuICAgIHRoaXMucmVhc29uID0gcmVhc29uO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gIH1cbn1cblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYW4gb3BlbiBldmVudC5cbiAqXG4gKiBAZXh0ZW5kcyBFdmVudFxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgT3BlbkV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGBPcGVuRXZlbnRgLlxuICAgKlxuICAgKiBAcGFyYW0ge1dlYlNvY2tldH0gdGFyZ2V0IEEgcmVmZXJlbmNlIHRvIHRoZSB0YXJnZXQgdG8gd2hpY2ggdGhlIGV2ZW50IHdhc1xuICAgKiAgICAgZGlzcGF0Y2hlZFxuICAgKi9cbiAgY29uc3RydWN0b3IodGFyZ2V0KSB7XG4gICAgc3VwZXIoJ29wZW4nLCB0YXJnZXQpO1xuICB9XG59XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGFuIGVycm9yIGV2ZW50LlxuICpcbiAqIEBleHRlbmRzIEV2ZW50XG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBFcnJvckV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGBFcnJvckV2ZW50YC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGVycm9yIFRoZSBlcnJvciB0aGF0IGdlbmVyYXRlZCB0aGlzIGV2ZW50XG4gICAqIEBwYXJhbSB7V2ViU29ja2V0fSB0YXJnZXQgQSByZWZlcmVuY2UgdG8gdGhlIHRhcmdldCB0byB3aGljaCB0aGUgZXZlbnQgd2FzXG4gICAqICAgICBkaXNwYXRjaGVkXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlcnJvciwgdGFyZ2V0KSB7XG4gICAgc3VwZXIoJ2Vycm9yJywgdGFyZ2V0KTtcblxuICAgIHRoaXMubWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG4gICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBwcm92aWRlcyBtZXRob2RzIGZvciBlbXVsYXRpbmcgdGhlIGBFdmVudFRhcmdldGAgaW50ZXJmYWNlLiBJdCdzIG5vdFxuICogbWVhbnQgdG8gYmUgdXNlZCBkaXJlY3RseS5cbiAqXG4gKiBAbWl4aW5cbiAqL1xuY29uc3QgRXZlbnRUYXJnZXQgPSB7XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhbiBldmVudCBsaXN0ZW5lci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBldmVudCB0eXBlIHRvIGxpc3RlbiBmb3JcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIHRvIGFkZFxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIEFuIG9wdGlvbnMgb2JqZWN0IHNwZWNpZmllcyBjaGFyYWN0ZXJpc3RpY3MgYWJvdXRcbiAgICogICAgIHRoZSBldmVudCBsaXN0ZW5lclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm9uY2U9ZmFsc2VdIEEgYEJvb2xlYW5gYCBpbmRpY2F0aW5nIHRoYXQgdGhlXG4gICAqICAgICBsaXN0ZW5lciBzaG91bGQgYmUgaW52b2tlZCBhdCBtb3N0IG9uY2UgYWZ0ZXIgYmVpbmcgYWRkZWQuIElmIGB0cnVlYCxcbiAgICogICAgIHRoZSBsaXN0ZW5lciB3b3VsZCBiZSBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgd2hlbiBpbnZva2VkLlxuICAgKiBAcHVibGljXG4gICAqL1xuICBhZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xuXG4gICAgZnVuY3Rpb24gb25NZXNzYWdlKGRhdGEpIHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgbmV3IE1lc3NhZ2VFdmVudChkYXRhLCB0aGlzKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25DbG9zZShjb2RlLCBtZXNzYWdlKSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIG5ldyBDbG9zZUV2ZW50KGNvZGUsIG1lc3NhZ2UsIHRoaXMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkVycm9yKGVycm9yKSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIG5ldyBFcnJvckV2ZW50KGVycm9yLCB0aGlzKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25PcGVuKCkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBuZXcgT3BlbkV2ZW50KHRoaXMpKTtcbiAgICB9XG5cbiAgICBjb25zdCBtZXRob2QgPSBvcHRpb25zICYmIG9wdGlvbnMub25jZSA/ICdvbmNlJyA6ICdvbic7XG5cbiAgICBpZiAodHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICBvbk1lc3NhZ2UuX2xpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgICB0aGlzW21ldGhvZF0odHlwZSwgb25NZXNzYWdlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdjbG9zZScpIHtcbiAgICAgIG9uQ2xvc2UuX2xpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgICB0aGlzW21ldGhvZF0odHlwZSwgb25DbG9zZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgICBvbkVycm9yLl9saXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgICAgdGhpc1ttZXRob2RdKHR5cGUsIG9uRXJyb3IpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29wZW4nKSB7XG4gICAgICBvbk9wZW4uX2xpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgICB0aGlzW21ldGhvZF0odHlwZSwgb25PcGVuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpc1ttZXRob2RdKHR5cGUsIGxpc3RlbmVyKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBldmVudCBsaXN0ZW5lci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBldmVudCB0eXBlIHRvIHJlbW92ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgdG8gcmVtb3ZlXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycyh0eXBlKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobGlzdGVuZXJzW2ldID09PSBsaXN0ZW5lciB8fCBsaXN0ZW5lcnNbaV0uX2xpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50VGFyZ2V0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/event-target.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/extension.js":
/*!*******************************************************************!*\
  !*** ./node_modules/stream-chat/node_modules/ws/lib/extension.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("\n\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\n];\n\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */\nfunction push(dest, name, elem) {\n  if (dest[name] === undefined) dest[name] = [elem];\n  else dest[name].push(elem);\n}\n\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */\nfunction parse(header) {\n  const offers = Object.create(null);\n\n  if (header === undefined || header === '') return offers;\n\n  let params = Object.create(null);\n  let mustUnescape = false;\n  let isEscaping = false;\n  let inQuotes = false;\n  let extensionName;\n  let paramName;\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (; i < header.length; i++) {\n    const code = header.charCodeAt(i);\n\n    if (extensionName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20 /* ' ' */ || code === 0x09 /* '\\t' */) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        const name = header.slice(start, end);\n        if (code === 0x2c) {\n          push(offers, name, params);\n          params = Object.create(null);\n        } else {\n          extensionName = name;\n        }\n\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20 || code === 0x09) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        push(params, header.slice(start, end), true);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        start = end = -1;\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\n        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n      // The value of a quoted-string after unescaping must conform to the\n      // token ABNF, so only token characters are valid.\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n      //\n      if (isEscaping) {\n        if (tokenChars[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n        isEscaping = false;\n      } else if (inQuotes) {\n        if (tokenChars[code] === 1) {\n          if (start === -1) start = i;\n        } else if (code === 0x22 /* '\"' */ && start !== -1) {\n          inQuotes = false;\n          end = i;\n        } else if (code === 0x5c /* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n      } else if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        let value = header.slice(start, end);\n        if (mustUnescape) {\n          value = value.replace(/\\\\/g, '');\n          mustUnescape = false;\n        }\n        push(params, paramName, value);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n\n  if (start === -1 || inQuotes) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  if (end === -1) end = i;\n  const token = header.slice(start, end);\n  if (extensionName === undefined) {\n    push(offers, token, params);\n  } else {\n    if (paramName === undefined) {\n      push(params, token, true);\n    } else if (mustUnescape) {\n      push(params, paramName, token.replace(/\\\\/g, ''));\n    } else {\n      push(params, paramName, token);\n    }\n    push(offers, extensionName, params);\n  }\n\n  return offers;\n}\n\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */\nfunction format(extensions) {\n  return Object.keys(extensions)\n    .map((extension) => {\n      let configurations = extensions[extension];\n      if (!Array.isArray(configurations)) configurations = [configurations];\n      return configurations\n        .map((params) => {\n          return [extension]\n            .concat(\n              Object.keys(params).map((k) => {\n                let values = params[k];\n                if (!Array.isArray(values)) values = [values];\n                return values\n                  .map((v) => (v === true ? k : `${k}=${v}`))\n                  .join('; ');\n              })\n            )\n            .join('; ');\n        })\n        .join(', ');\n    })\n    .join(', ');\n}\n\nmodule.exports = { format, parse };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/extension.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/limiter.js":
/*!*****************************************************************!*\
  !*** ./node_modules/stream-chat/node_modules/ws/lib/limiter.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("\n\nconst kDone = Symbol('kDone');\nconst kRun = Symbol('kRun');\n\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\nclass Limiter {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */\n  constructor(concurrency) {\n    this[kDone] = () => {\n      this.pending--;\n      this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n\n  /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */\n  add(job) {\n    this.jobs.push(job);\n    this[kRun]();\n  }\n\n  /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */\n  [kRun]() {\n    if (this.pending === this.concurrency) return;\n\n    if (this.jobs.length) {\n      const job = this.jobs.shift();\n\n      this.pending++;\n      job(this[kDone]);\n    }\n  }\n}\n\nmodule.exports = Limiter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdHJlYW0tY2hhdC9ub2RlX21vZHVsZXMvd3MvbGliL2xpbWl0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXYtZmluZGVyLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1jaGF0L25vZGVfbW9kdWxlcy93cy9saWIvbGltaXRlci5qcz9hN2Y2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3Qga0RvbmUgPSBTeW1ib2woJ2tEb25lJyk7XG5jb25zdCBrUnVuID0gU3ltYm9sKCdrUnVuJyk7XG5cbi8qKlxuICogQSB2ZXJ5IHNpbXBsZSBqb2IgcXVldWUgd2l0aCBhZGp1c3RhYmxlIGNvbmN1cnJlbmN5LiBBZGFwdGVkIGZyb21cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9TVFJNTC9hc3luYy1saW1pdGVyXG4gKi9cbmNsYXNzIExpbWl0ZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBgTGltaXRlcmAuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uY3VycmVuY3k9SW5maW5pdHldIFRoZSBtYXhpbXVtIG51bWJlciBvZiBqb2JzIGFsbG93ZWRcbiAgICogICAgIHRvIHJ1biBjb25jdXJyZW50bHlcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbmN1cnJlbmN5KSB7XG4gICAgdGhpc1trRG9uZV0gPSAoKSA9PiB7XG4gICAgICB0aGlzLnBlbmRpbmctLTtcbiAgICAgIHRoaXNba1J1bl0oKTtcbiAgICB9O1xuICAgIHRoaXMuY29uY3VycmVuY3kgPSBjb25jdXJyZW5jeSB8fCBJbmZpbml0eTtcbiAgICB0aGlzLmpvYnMgPSBbXTtcbiAgICB0aGlzLnBlbmRpbmcgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBqb2IgdG8gdGhlIHF1ZXVlLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBqb2IgVGhlIGpvYiB0byBydW5cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgYWRkKGpvYikge1xuICAgIHRoaXMuam9icy5wdXNoKGpvYik7XG4gICAgdGhpc1trUnVuXSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBqb2IgZnJvbSB0aGUgcXVldWUgYW5kIHJ1bnMgaXQgaWYgcG9zc2libGUuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBba1J1bl0oKSB7XG4gICAgaWYgKHRoaXMucGVuZGluZyA9PT0gdGhpcy5jb25jdXJyZW5jeSkgcmV0dXJuO1xuXG4gICAgaWYgKHRoaXMuam9icy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGpvYiA9IHRoaXMuam9icy5zaGlmdCgpO1xuXG4gICAgICB0aGlzLnBlbmRpbmcrKztcbiAgICAgIGpvYih0aGlzW2tEb25lXSk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGltaXRlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/limiter.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/permessage-deflate.js":
/*!****************************************************************************!*\
  !*** ./node_modules/stream-chat/node_modules/ws/lib/permessage-deflate.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\n\nconst bufferUtil = __webpack_require__(/*! ./buffer-util */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/buffer-util.js\");\nconst Limiter = __webpack_require__(/*! ./limiter */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/limiter.js\");\nconst { kStatusCode, NOOP } = __webpack_require__(/*! ./constants */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/constants.js\");\n\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst kPerMessageDeflate = Symbol('permessage-deflate');\nconst kTotalLength = Symbol('total-length');\nconst kCallback = Symbol('callback');\nconst kBuffers = Symbol('buffers');\nconst kError = Symbol('error');\n\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n\n/**\n * permessage-deflate implementation.\n */\nclass PerMessageDeflate {\n  /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */\n  constructor(options, isServer, maxPayload) {\n    this._maxPayload = maxPayload | 0;\n    this._options = options || {};\n    this._threshold =\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\n    this._isServer = !!isServer;\n    this._deflate = null;\n    this._inflate = null;\n\n    this.params = null;\n\n    if (!zlibLimiter) {\n      const concurrency =\n        this._options.concurrencyLimit !== undefined\n          ? this._options.concurrencyLimit\n          : 10;\n      zlibLimiter = new Limiter(concurrency);\n    }\n  }\n\n  /**\n   * @type {String}\n   */\n  static get extensionName() {\n    return 'permessage-deflate';\n  }\n\n  /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */\n  offer() {\n    const params = {};\n\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n\n    return params;\n  }\n\n  /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */\n  accept(configurations) {\n    configurations = this.normalizeParams(configurations);\n\n    this.params = this._isServer\n      ? this.acceptAsServer(configurations)\n      : this.acceptAsClient(configurations);\n\n    return this.params;\n  }\n\n  /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */\n  cleanup() {\n    if (this._inflate) {\n      this._inflate.close();\n      this._inflate = null;\n    }\n\n    if (this._deflate) {\n      const callback = this._deflate[kCallback];\n\n      this._deflate.close();\n      this._deflate = null;\n\n      if (callback) {\n        callback(\n          new Error(\n            'The deflate stream was closed while data was being processed'\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsServer(offers) {\n    const opts = this._options;\n    const accepted = offers.find((params) => {\n      if (\n        (opts.serverNoContextTakeover === false &&\n          params.server_no_context_takeover) ||\n        (params.server_max_window_bits &&\n          (opts.serverMaxWindowBits === false ||\n            (typeof opts.serverMaxWindowBits === 'number' &&\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\n        (typeof opts.clientMaxWindowBits === 'number' &&\n          !params.client_max_window_bits)\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!accepted) {\n      throw new Error('None of the extension offers can be accepted');\n    }\n\n    if (opts.serverNoContextTakeover) {\n      accepted.server_no_context_takeover = true;\n    }\n    if (opts.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n    if (typeof opts.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\n    }\n    if (typeof opts.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\n    } else if (\n      accepted.client_max_window_bits === true ||\n      opts.clientMaxWindowBits === false\n    ) {\n      delete accepted.client_max_window_bits;\n    }\n\n    return accepted;\n  }\n\n  /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsClient(response) {\n    const params = response[0];\n\n    if (\n      this._options.clientNoContextTakeover === false &&\n      params.client_no_context_takeover\n    ) {\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n    }\n\n    if (!params.client_max_window_bits) {\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      }\n    } else if (\n      this._options.clientMaxWindowBits === false ||\n      (typeof this._options.clientMaxWindowBits === 'number' &&\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\n    ) {\n      throw new Error(\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\n      );\n    }\n\n    return params;\n  }\n\n  /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */\n  normalizeParams(configurations) {\n    configurations.forEach((params) => {\n      Object.keys(params).forEach((key) => {\n        let value = params[key];\n\n        if (value.length > 1) {\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\n        }\n\n        value = value[0];\n\n        if (key === 'client_max_window_bits') {\n          if (value !== true) {\n            const num = +value;\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(\n                `Invalid value for parameter \"${key}\": ${value}`\n              );\n            }\n            value = num;\n          } else if (!this._isServer) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else if (key === 'server_max_window_bits') {\n          const num = +value;\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n          value = num;\n        } else if (\n          key === 'client_no_context_takeover' ||\n          key === 'server_no_context_takeover'\n        ) {\n          if (value !== true) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else {\n          throw new Error(`Unknown parameter \"${key}\"`);\n        }\n\n        params[key] = value;\n      });\n    });\n\n    return configurations;\n  }\n\n  /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  decompress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._decompress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {Buffer} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  compress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._compress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _decompress(data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._inflate = zlib.createInflateRaw({\n        ...this._options.zlibInflateOptions,\n        windowBits\n      });\n      this._inflate[kPerMessageDeflate] = this;\n      this._inflate[kTotalLength] = 0;\n      this._inflate[kBuffers] = [];\n      this._inflate.on('error', inflateOnError);\n      this._inflate.on('data', inflateOnData);\n    }\n\n    this._inflate[kCallback] = callback;\n\n    this._inflate.write(data);\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      const err = this._inflate[kError];\n\n      if (err) {\n        this._inflate.close();\n        this._inflate = null;\n        callback(err);\n        return;\n      }\n\n      const data = bufferUtil.concat(\n        this._inflate[kBuffers],\n        this._inflate[kTotalLength]\n      );\n\n      if (this._inflate._readableState.endEmitted) {\n        this._inflate.close();\n        this._inflate = null;\n      } else {\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n          this._inflate.reset();\n        }\n      }\n\n      callback(null, data);\n    });\n  }\n\n  /**\n   * Compress data.\n   *\n   * @param {Buffer} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _compress(data, fin, callback) {\n    const endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._deflate = zlib.createDeflateRaw({\n        ...this._options.zlibDeflateOptions,\n        windowBits\n      });\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      //\n      // An `'error'` event is emitted, only on Node.js < 10.0.0, if the\n      // `zlib.DeflateRaw` instance is closed while data is being processed.\n      // This can happen if `PerMessageDeflate#cleanup()` is called at the wrong\n      // time due to an abnormal WebSocket closure.\n      //\n      this._deflate.on('error', NOOP);\n      this._deflate.on('data', deflateOnData);\n    }\n\n    this._deflate[kCallback] = callback;\n\n    this._deflate.write(data);\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      if (!this._deflate) {\n        //\n        // The deflate stream was closed while data was being processed.\n        //\n        return;\n      }\n\n      let data = bufferUtil.concat(\n        this._deflate[kBuffers],\n        this._deflate[kTotalLength]\n      );\n\n      if (fin) data = data.slice(0, data.length - 4);\n\n      //\n      // Ensure that the callback will not be called again in\n      // `PerMessageDeflate#cleanup()`.\n      //\n      this._deflate[kCallback] = null;\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n        this._deflate.reset();\n      }\n\n      callback(null, data);\n    });\n  }\n}\n\nmodule.exports = PerMessageDeflate;\n\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction deflateOnData(chunk) {\n  this[kBuffers].push(chunk);\n  this[kTotalLength] += chunk.length;\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction inflateOnData(chunk) {\n  this[kTotalLength] += chunk.length;\n\n  if (\n    this[kPerMessageDeflate]._maxPayload < 1 ||\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\n  ) {\n    this[kBuffers].push(chunk);\n    return;\n  }\n\n  this[kError] = new RangeError('Max payload size exceeded');\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\n  this[kError][kStatusCode] = 1009;\n  this.removeListener('data', inflateOnData);\n  this.reset();\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */\nfunction inflateOnError(err) {\n  //\n  // There is no need to call `Zlib#close()` as the handle is automatically\n  // closed when an error is emitted.\n  //\n  this[kPerMessageDeflate]._inflate = null;\n  err[kStatusCode] = 1007;\n  this[kCallback](err);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/permessage-deflate.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/receiver.js":
/*!******************************************************************!*\
  !*** ./node_modules/stream-chat/node_modules/ws/lib/receiver.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/permessage-deflate.js\");\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  kStatusCode,\n  kWebSocket\n} = __webpack_require__(/*! ./constants */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/constants.js\");\nconst { concat, toArrayBuffer, unmask } = __webpack_require__(/*! ./buffer-util */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/buffer-util.js\");\nconst { isValidStatusCode, isValidUTF8 } = __webpack_require__(/*! ./validation */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/validation.js\");\n\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\n\n/**\n * HyBi Receiver implementation.\n *\n * @extends Writable\n */\nclass Receiver extends Writable {\n  /**\n   * Creates a Receiver instance.\n   *\n   * @param {String} [binaryType=nodebuffer] The type for binary data\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   * @param {Boolean} [isServer=false] Specifies whether to operate in client or\n   *     server mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */\n  constructor(binaryType, extensions, isServer, maxPayload) {\n    super();\n\n    this._binaryType = binaryType || BINARY_TYPES[0];\n    this[kWebSocket] = undefined;\n    this._extensions = extensions || {};\n    this._isServer = !!isServer;\n    this._maxPayload = maxPayload | 0;\n\n    this._bufferedBytes = 0;\n    this._buffers = [];\n\n    this._compressed = false;\n    this._payloadLength = 0;\n    this._mask = undefined;\n    this._fragmented = 0;\n    this._masked = false;\n    this._fin = false;\n    this._opcode = 0;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragments = [];\n\n    this._state = GET_INFO;\n    this._loop = false;\n  }\n\n  /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   * @private\n   */\n  _write(chunk, encoding, cb) {\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n\n    this._bufferedBytes += chunk.length;\n    this._buffers.push(chunk);\n    this.startLoop(cb);\n  }\n\n  /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */\n  consume(n) {\n    this._bufferedBytes -= n;\n\n    if (n === this._buffers[0].length) return this._buffers.shift();\n\n    if (n < this._buffers[0].length) {\n      const buf = this._buffers[0];\n      this._buffers[0] = buf.slice(n);\n      return buf.slice(0, n);\n    }\n\n    const dst = Buffer.allocUnsafe(n);\n\n    do {\n      const buf = this._buffers[0];\n      const offset = dst.length - n;\n\n      if (n >= buf.length) {\n        dst.set(this._buffers.shift(), offset);\n      } else {\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n        this._buffers[0] = buf.slice(n);\n      }\n\n      n -= buf.length;\n    } while (n > 0);\n\n    return dst;\n  }\n\n  /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  startLoop(cb) {\n    let err;\n    this._loop = true;\n\n    do {\n      switch (this._state) {\n        case GET_INFO:\n          err = this.getInfo();\n          break;\n        case GET_PAYLOAD_LENGTH_16:\n          err = this.getPayloadLength16();\n          break;\n        case GET_PAYLOAD_LENGTH_64:\n          err = this.getPayloadLength64();\n          break;\n        case GET_MASK:\n          this.getMask();\n          break;\n        case GET_DATA:\n          err = this.getData(cb);\n          break;\n        default:\n          // `INFLATING`\n          this._loop = false;\n          return;\n      }\n    } while (this._loop);\n\n    cb(err);\n  }\n\n  /**\n   * Reads the first two bytes of a frame.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getInfo() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(2);\n\n    if ((buf[0] & 0x30) !== 0x00) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'RSV2 and RSV3 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_2_3'\n      );\n    }\n\n    const compressed = (buf[0] & 0x40) === 0x40;\n\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'RSV1 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_1'\n      );\n    }\n\n    this._fin = (buf[0] & 0x80) === 0x80;\n    this._opcode = buf[0] & 0x0f;\n    this._payloadLength = buf[1] & 0x7f;\n\n    if (this._opcode === 0x00) {\n      if (compressed) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n      }\n\n      if (!this._fragmented) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'invalid opcode 0',\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n      }\n\n      this._opcode = this._fragmented;\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n      if (this._fragmented) {\n        this._loop = false;\n        return error(\n          RangeError,\n          `invalid opcode ${this._opcode}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n      }\n\n      this._compressed = compressed;\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n      if (!this._fin) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'FIN must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_FIN'\n        );\n      }\n\n      if (compressed) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n      }\n\n      if (this._payloadLength > 0x7d) {\n        this._loop = false;\n        return error(\n          RangeError,\n          `invalid payload length ${this._payloadLength}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n      }\n    } else {\n      this._loop = false;\n      return error(\n        RangeError,\n        `invalid opcode ${this._opcode}`,\n        true,\n        1002,\n        'WS_ERR_INVALID_OPCODE'\n      );\n    }\n\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n    this._masked = (buf[1] & 0x80) === 0x80;\n\n    if (this._isServer) {\n      if (!this._masked) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'MASK must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_MASK'\n        );\n      }\n    } else if (this._masked) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'MASK must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_MASK'\n      );\n    }\n\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n    else return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+16).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength16() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    this._payloadLength = this.consume(2).readUInt16BE(0);\n    return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+64).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength64() {\n    if (this._bufferedBytes < 8) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(8);\n    const num = buf.readUInt32BE(0);\n\n    //\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n    // if payload length is greater than this number.\n    //\n    if (num > Math.pow(2, 53 - 32) - 1) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\n        false,\n        1009,\n        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'\n      );\n    }\n\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n    return this.haveLength();\n  }\n\n  /**\n   * Payload length has been read.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  haveLength() {\n    if (this._payloadLength && this._opcode < 0x08) {\n      this._totalPayloadLength += this._payloadLength;\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'Max payload size exceeded',\n          false,\n          1009,\n          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n        );\n      }\n    }\n\n    if (this._masked) this._state = GET_MASK;\n    else this._state = GET_DATA;\n  }\n\n  /**\n   * Reads mask bytes.\n   *\n   * @private\n   */\n  getMask() {\n    if (this._bufferedBytes < 4) {\n      this._loop = false;\n      return;\n    }\n\n    this._mask = this.consume(4);\n    this._state = GET_DATA;\n  }\n\n  /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  getData(cb) {\n    let data = EMPTY_BUFFER;\n\n    if (this._payloadLength) {\n      if (this._bufferedBytes < this._payloadLength) {\n        this._loop = false;\n        return;\n      }\n\n      data = this.consume(this._payloadLength);\n      if (this._masked) unmask(data, this._mask);\n    }\n\n    if (this._opcode > 0x07) return this.controlMessage(data);\n\n    if (this._compressed) {\n      this._state = INFLATING;\n      this.decompress(data, cb);\n      return;\n    }\n\n    if (data.length) {\n      //\n      // This message is not compressed so its lenght is the sum of the payload\n      // length of all fragments.\n      //\n      this._messageLength = this._totalPayloadLength;\n      this._fragments.push(data);\n    }\n\n    return this.dataMessage();\n  }\n\n  /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */\n  decompress(data, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\n      if (err) return cb(err);\n\n      if (buf.length) {\n        this._messageLength += buf.length;\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n          return cb(\n            error(\n              RangeError,\n              'Max payload size exceeded',\n              false,\n              1009,\n              'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n            )\n          );\n        }\n\n        this._fragments.push(buf);\n      }\n\n      const er = this.dataMessage();\n      if (er) return cb(er);\n\n      this.startLoop(cb);\n    });\n  }\n\n  /**\n   * Handles a data message.\n   *\n   * @return {(Error|undefined)} A possible error\n   * @private\n   */\n  dataMessage() {\n    if (this._fin) {\n      const messageLength = this._messageLength;\n      const fragments = this._fragments;\n\n      this._totalPayloadLength = 0;\n      this._messageLength = 0;\n      this._fragmented = 0;\n      this._fragments = [];\n\n      if (this._opcode === 2) {\n        let data;\n\n        if (this._binaryType === 'nodebuffer') {\n          data = concat(fragments, messageLength);\n        } else if (this._binaryType === 'arraybuffer') {\n          data = toArrayBuffer(concat(fragments, messageLength));\n        } else {\n          data = fragments;\n        }\n\n        this.emit('message', data);\n      } else {\n        const buf = concat(fragments, messageLength);\n\n        if (!isValidUTF8(buf)) {\n          this._loop = false;\n          return error(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n        }\n\n        this.emit('message', buf.toString());\n      }\n    }\n\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  controlMessage(data) {\n    if (this._opcode === 0x08) {\n      this._loop = false;\n\n      if (data.length === 0) {\n        this.emit('conclude', 1005, '');\n        this.end();\n      } else if (data.length === 1) {\n        return error(\n          RangeError,\n          'invalid payload length 1',\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n      } else {\n        const code = data.readUInt16BE(0);\n\n        if (!isValidStatusCode(code)) {\n          return error(\n            RangeError,\n            `invalid status code ${code}`,\n            true,\n            1002,\n            'WS_ERR_INVALID_CLOSE_CODE'\n          );\n        }\n\n        const buf = data.slice(2);\n\n        if (!isValidUTF8(buf)) {\n          return error(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n        }\n\n        this.emit('conclude', code, buf.toString());\n        this.end();\n      }\n    } else if (this._opcode === 0x09) {\n      this.emit('ping', data);\n    } else {\n      this.emit('pong', data);\n    }\n\n    this._state = GET_INFO;\n  }\n}\n\nmodule.exports = Receiver;\n\n/**\n * Builds an error object.\n *\n * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n * @param {String} message The error message\n * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n *     `message`\n * @param {Number} statusCode The status code\n * @param {String} errorCode The exposed error code\n * @return {(Error|RangeError)} The error\n * @private\n */\nfunction error(ErrorCtor, message, prefix, statusCode, errorCode) {\n  const err = new ErrorCtor(\n    prefix ? `Invalid WebSocket frame: ${message}` : message\n  );\n\n  Error.captureStackTrace(err, error);\n  err.code = errorCode;\n  err[kStatusCode] = statusCode;\n  return err;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/receiver.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/sender.js":
/*!****************************************************************!*\
  !*** ./node_modules/stream-chat/node_modules/ws/lib/sender.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls$\" }] */\n\n\n\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { randomFillSync } = __webpack_require__(/*! crypto */ \"crypto\");\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/permessage-deflate.js\");\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/constants.js\");\nconst { isValidStatusCode } = __webpack_require__(/*! ./validation */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/validation.js\");\nconst { mask: applyMask, toBuffer } = __webpack_require__(/*! ./buffer-util */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/buffer-util.js\");\n\nconst mask = Buffer.alloc(4);\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   */\n  constructor(socket, extensions) {\n    this._extensions = extensions || {};\n    this._socket = socket;\n\n    this._firstFragment = true;\n    this._compress = false;\n\n    this._bufferedBytes = 0;\n    this._deflating = false;\n    this._queue = [];\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {Buffer} data The data to frame\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {Buffer[]} The framed data as a list of `Buffer` instances\n   * @public\n   */\n  static frame(data, options) {\n    const merge = options.mask && options.readOnly;\n    let offset = options.mask ? 6 : 2;\n    let payloadLength = data.length;\n\n    if (data.length >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (data.length > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);\n\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    target[1] = payloadLength;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(data.length, 2);\n    } else if (payloadLength === 127) {\n      target.writeUInt32BE(0, 2);\n      target.writeUInt32BE(data.length, 6);\n    }\n\n    if (!options.mask) return [target, data];\n\n    randomFillSync(mask, 0, 4);\n\n    target[1] |= 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (merge) {\n      applyMask(data, mask, target, offset, data.length);\n      return [target];\n    }\n\n    applyMask(data, mask, data, 0, data.length);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {String} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  close(code, data, mask, cb) {\n    let buf;\n\n    if (code === undefined) {\n      buf = EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || data === '') {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0);\n    } else {\n      const length = Buffer.byteLength(data);\n\n      if (length > 123) {\n        throw new RangeError('The message must not be greater than 123 bytes');\n      }\n\n      buf = Buffer.allocUnsafe(2 + length);\n      buf.writeUInt16BE(code, 0);\n      buf.write(data, 2);\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doClose, buf, mask, cb]);\n    } else {\n      this.doClose(buf, mask, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a close message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  doClose(data, mask, cb) {\n    this.sendFrame(\n      Sender.frame(data, {\n        fin: true,\n        rsv1: false,\n        opcode: 0x08,\n        mask,\n        readOnly: false\n      }),\n      cb\n    );\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  ping(data, mask, cb) {\n    const buf = toBuffer(data);\n\n    if (buf.length > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doPing, buf, mask, toBuffer.readOnly, cb]);\n    } else {\n      this.doPing(buf, mask, toBuffer.readOnly, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a ping message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  doPing(data, mask, readOnly, cb) {\n    this.sendFrame(\n      Sender.frame(data, {\n        fin: true,\n        rsv1: false,\n        opcode: 0x09,\n        mask,\n        readOnly\n      }),\n      cb\n    );\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  pong(data, mask, cb) {\n    const buf = toBuffer(data);\n\n    if (buf.length > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doPong, buf, mask, toBuffer.readOnly, cb]);\n    } else {\n      this.doPong(buf, mask, toBuffer.readOnly, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a pong message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  doPong(data, mask, readOnly, cb) {\n    this.sendFrame(\n      Sender.frame(data, {\n        fin: true,\n        rsv1: false,\n        opcode: 0x0a,\n        mask,\n        readOnly\n      }),\n      cb\n    );\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  send(data, options, cb) {\n    const buf = toBuffer(data);\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    let opcode = options.binary ? 2 : 1;\n    let rsv1 = options.compress;\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (rsv1 && perMessageDeflate) {\n        rsv1 = buf.length >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    if (perMessageDeflate) {\n      const opts = {\n        fin: options.fin,\n        rsv1,\n        opcode,\n        mask: options.mask,\n        readOnly: toBuffer.readOnly\n      };\n\n      if (this._deflating) {\n        this.enqueue([this.dispatch, buf, this._compress, opts, cb]);\n      } else {\n        this.dispatch(buf, this._compress, opts, cb);\n      }\n    } else {\n      this.sendFrame(\n        Sender.frame(buf, {\n          fin: options.fin,\n          rsv1: false,\n          opcode,\n          mask: options.mask,\n          readOnly: toBuffer.readOnly\n        }),\n        cb\n      );\n    }\n  }\n\n  /**\n   * Dispatches a data message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    this._bufferedBytes += data.length;\n    this._deflating = true;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      if (this._socket.destroyed) {\n        const err = new Error(\n          'The socket was closed while data was being compressed'\n        );\n\n        if (typeof cb === 'function') cb(err);\n\n        for (let i = 0; i < this._queue.length; i++) {\n          const callback = this._queue[i][4];\n\n          if (typeof callback === 'function') callback(err);\n        }\n\n        return;\n      }\n\n      this._bufferedBytes -= data.length;\n      this._deflating = false;\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue() {\n    while (!this._deflating && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[1].length;\n      Reflect.apply(params[0], this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue(params) {\n    this._bufferedBytes += params[1].length;\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.cork();\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n      this._socket.uncork();\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\n\nmodule.exports = Sender;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/sender.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/stream.js":
/*!****************************************************************!*\
  !*** ./node_modules/stream-chat/node_modules/ws/lib/stream.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst { Duplex } = __webpack_require__(/*! stream */ \"stream\");\n\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */\nfunction createWebSocketStream(ws, options) {\n  let resumeOnReceiverDrain = true;\n  let terminateOnDestroy = true;\n\n  function receiverOnDrain() {\n    if (resumeOnReceiverDrain) ws._socket.resume();\n  }\n\n  if (ws.readyState === ws.CONNECTING) {\n    ws.once('open', function open() {\n      ws._receiver.removeAllListeners('drain');\n      ws._receiver.on('drain', receiverOnDrain);\n    });\n  } else {\n    ws._receiver.removeAllListeners('drain');\n    ws._receiver.on('drain', receiverOnDrain);\n  }\n\n  const duplex = new Duplex({\n    ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n\n  ws.on('message', function message(msg) {\n    if (!duplex.push(msg)) {\n      resumeOnReceiverDrain = false;\n      ws._socket.pause();\n    }\n  });\n\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return;\n\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n    //\n    // - If the `'error'` event is emitted before the `'open'` event, then\n    //   `ws.terminate()` is a noop as no socket is assigned.\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\n    //   event of the `Receiver` object. The listener already closes the\n    //   connection by calling `ws.close()`. This allows a close frame to be\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\n    //   then the close frame might not be sent.\n    terminateOnDestroy = false;\n    duplex.destroy(err);\n  });\n\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n\n    duplex.push(null);\n  });\n\n  duplex._destroy = function (err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n\n    let called = false;\n\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n\n    if (terminateOnDestroy) ws.terminate();\n  };\n\n  duplex._final = function (callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    }\n\n    // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n    if (ws._socket === null) return;\n\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n      ws.close();\n    }\n  };\n\n  duplex._read = function () {\n    if (\n      (ws.readyState === ws.OPEN || ws.readyState === ws.CLOSING) &&\n      !resumeOnReceiverDrain\n    ) {\n      resumeOnReceiverDrain = true;\n      if (!ws._receiver._writableState.needDrain) ws._socket.resume();\n    }\n  };\n\n  duplex._write = function (chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n\n    ws.send(chunk, callback);\n  };\n\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\n\nmodule.exports = createWebSocketStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/stream.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/validation.js":
/*!********************************************************************!*\
  !*** ./node_modules/stream-chat/node_modules/ws/lib/validation.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */\nfunction isValidStatusCode(code) {\n  return (\n    (code >= 1000 &&\n      code <= 1014 &&\n      code !== 1004 &&\n      code !== 1005 &&\n      code !== 1006) ||\n    (code >= 3000 && code <= 4999)\n  );\n}\n\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */\nfunction _isValidUTF8(buf) {\n  const len = buf.length;\n  let i = 0;\n\n  while (i < len) {\n    if ((buf[i] & 0x80) === 0) {\n      // 0xxxxxxx\n      i++;\n    } else if ((buf[i] & 0xe0) === 0xc0) {\n      // 110xxxxx 10xxxxxx\n      if (\n        i + 1 === len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i] & 0xfe) === 0xc0 // Overlong\n      ) {\n        return false;\n      }\n\n      i += 2;\n    } else if ((buf[i] & 0xf0) === 0xe0) {\n      // 1110xxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 2 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong\n        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)\n      ) {\n        return false;\n      }\n\n      i += 3;\n    } else if ((buf[i] & 0xf8) === 0xf0) {\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 3 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i + 3] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong\n        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||\n        buf[i] > 0xf4 // > U+10FFFF\n      ) {\n        return false;\n      }\n\n      i += 4;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ntry {\n  let isValidUTF8 = __webpack_require__(/*! utf-8-validate */ \"?7ac6\");\n\n  /* istanbul ignore if */\n  if (typeof isValidUTF8 === 'object') {\n    isValidUTF8 = isValidUTF8.Validation.isValidUTF8; // utf-8-validate@<3.0.0\n  }\n\n  module.exports = {\n    isValidStatusCode,\n    isValidUTF8(buf) {\n      return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);\n    }\n  };\n} catch (e) /* istanbul ignore next */ {\n  module.exports = {\n    isValidStatusCode,\n    isValidUTF8: _isValidUTF8\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdHJlYW0tY2hhdC9ub2RlX21vZHVsZXMvd3MvbGliL3ZhbGlkYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLFNBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLDZCQUFnQjs7QUFFNUM7QUFDQTtBQUNBLHNEQUFzRDtBQUN0RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rldi1maW5kZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWNoYXQvbm9kZV9tb2R1bGVzL3dzL2xpYi92YWxpZGF0aW9uLmpzPzBkNmYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0YXR1cyBjb2RlIGlzIGFsbG93ZWQgaW4gYSBjbG9zZSBmcmFtZS5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gY29kZSBUaGUgc3RhdHVzIGNvZGVcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgc3RhdHVzIGNvZGUgaXMgdmFsaWQsIGVsc2UgYGZhbHNlYFxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBpc1ZhbGlkU3RhdHVzQ29kZShjb2RlKSB7XG4gIHJldHVybiAoXG4gICAgKGNvZGUgPj0gMTAwMCAmJlxuICAgICAgY29kZSA8PSAxMDE0ICYmXG4gICAgICBjb2RlICE9PSAxMDA0ICYmXG4gICAgICBjb2RlICE9PSAxMDA1ICYmXG4gICAgICBjb2RlICE9PSAxMDA2KSB8fFxuICAgIChjb2RlID49IDMwMDAgJiYgY29kZSA8PSA0OTk5KVxuICApO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIGJ1ZmZlciBjb250YWlucyBvbmx5IGNvcnJlY3QgVVRGLTguXG4gKiBQb3J0ZWQgZnJvbSBodHRwczovL3d3dy5jbC5jYW0uYWMudWsvJTdFbWdrMjUvdWNzL3V0ZjhfY2hlY2suYyBieVxuICogTWFya3VzIEt1aG4uXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZiBUaGUgYnVmZmVyIHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgYGJ1ZmAgY29udGFpbnMgb25seSBjb3JyZWN0IFVURi04LCBlbHNlIGBmYWxzZWBcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gX2lzVmFsaWRVVEY4KGJ1Zikge1xuICBjb25zdCBsZW4gPSBidWYubGVuZ3RoO1xuICBsZXQgaSA9IDA7XG5cbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICBpZiAoKGJ1ZltpXSAmIDB4ODApID09PSAwKSB7XG4gICAgICAvLyAweHh4eHh4eFxuICAgICAgaSsrO1xuICAgIH0gZWxzZSBpZiAoKGJ1ZltpXSAmIDB4ZTApID09PSAweGMwKSB7XG4gICAgICAvLyAxMTB4eHh4eCAxMHh4eHh4eFxuICAgICAgaWYgKFxuICAgICAgICBpICsgMSA9PT0gbGVuIHx8XG4gICAgICAgIChidWZbaSArIDFdICYgMHhjMCkgIT09IDB4ODAgfHxcbiAgICAgICAgKGJ1ZltpXSAmIDB4ZmUpID09PSAweGMwIC8vIE92ZXJsb25nXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpICs9IDI7XG4gICAgfSBlbHNlIGlmICgoYnVmW2ldICYgMHhmMCkgPT09IDB4ZTApIHtcbiAgICAgIC8vIDExMTB4eHh4IDEweHh4eHh4IDEweHh4eHh4XG4gICAgICBpZiAoXG4gICAgICAgIGkgKyAyID49IGxlbiB8fFxuICAgICAgICAoYnVmW2kgKyAxXSAmIDB4YzApICE9PSAweDgwIHx8XG4gICAgICAgIChidWZbaSArIDJdICYgMHhjMCkgIT09IDB4ODAgfHxcbiAgICAgICAgKGJ1ZltpXSA9PT0gMHhlMCAmJiAoYnVmW2kgKyAxXSAmIDB4ZTApID09PSAweDgwKSB8fCAvLyBPdmVybG9uZ1xuICAgICAgICAoYnVmW2ldID09PSAweGVkICYmIChidWZbaSArIDFdICYgMHhlMCkgPT09IDB4YTApIC8vIFN1cnJvZ2F0ZSAoVStEODAwIC0gVStERkZGKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaSArPSAzO1xuICAgIH0gZWxzZSBpZiAoKGJ1ZltpXSAmIDB4ZjgpID09PSAweGYwKSB7XG4gICAgICAvLyAxMTExMHh4eCAxMHh4eHh4eCAxMHh4eHh4eCAxMHh4eHh4eFxuICAgICAgaWYgKFxuICAgICAgICBpICsgMyA+PSBsZW4gfHxcbiAgICAgICAgKGJ1ZltpICsgMV0gJiAweGMwKSAhPT0gMHg4MCB8fFxuICAgICAgICAoYnVmW2kgKyAyXSAmIDB4YzApICE9PSAweDgwIHx8XG4gICAgICAgIChidWZbaSArIDNdICYgMHhjMCkgIT09IDB4ODAgfHxcbiAgICAgICAgKGJ1ZltpXSA9PT0gMHhmMCAmJiAoYnVmW2kgKyAxXSAmIDB4ZjApID09PSAweDgwKSB8fCAvLyBPdmVybG9uZ1xuICAgICAgICAoYnVmW2ldID09PSAweGY0ICYmIGJ1ZltpICsgMV0gPiAweDhmKSB8fFxuICAgICAgICBidWZbaV0gPiAweGY0IC8vID4gVSsxMEZGRkZcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGkgKz0gNDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG50cnkge1xuICBsZXQgaXNWYWxpZFVURjggPSByZXF1aXJlKCd1dGYtOC12YWxpZGF0ZScpO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodHlwZW9mIGlzVmFsaWRVVEY4ID09PSAnb2JqZWN0Jykge1xuICAgIGlzVmFsaWRVVEY4ID0gaXNWYWxpZFVURjguVmFsaWRhdGlvbi5pc1ZhbGlkVVRGODsgLy8gdXRmLTgtdmFsaWRhdGVAPDMuMC4wXG4gIH1cblxuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBpc1ZhbGlkU3RhdHVzQ29kZSxcbiAgICBpc1ZhbGlkVVRGOChidWYpIHtcbiAgICAgIHJldHVybiBidWYubGVuZ3RoIDwgMTUwID8gX2lzVmFsaWRVVEY4KGJ1ZikgOiBpc1ZhbGlkVVRGOChidWYpO1xuICAgIH1cbiAgfTtcbn0gY2F0Y2ggKGUpIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaXNWYWxpZFN0YXR1c0NvZGUsXG4gICAgaXNWYWxpZFVURjg6IF9pc1ZhbGlkVVRGOFxuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/validation.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/websocket-server.js":
/*!**************************************************************************!*\
  !*** ./node_modules/stream-chat/node_modules/ws/lib/websocket-server.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls|https$\" }] */\n\n\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { createHash } = __webpack_require__(/*! crypto */ \"crypto\");\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/permessage-deflate.js\");\nconst WebSocket = __webpack_require__(/*! ./websocket */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/websocket.js\");\nconst { format, parse } = __webpack_require__(/*! ./extension */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/extension.js\");\nconst { GUID, kWebSocket } = __webpack_require__(/*! ./constants */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/constants.js\");\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [callback] A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = {\n      maxPayload: 100 * 1024 * 1024,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      ...options\n    };\n\n    if (\n      (options.port == null && !options.server && !options.noServer) ||\n      (options.port != null && (options.server || options.noServer)) ||\n      (options.server && options.noServer)\n    ) {\n      throw new TypeError(\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\n          'must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      const emitConnection = this.emit.bind(this, 'connection');\n\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, emitConnection);\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) this.clients = new Set();\n    this.options = options;\n    this._state = RUNNING;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Close the server.\n   *\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  close(cb) {\n    if (cb) this.once('close', cb);\n\n    if (this._state === CLOSED) {\n      process.nextTick(emitClose, this);\n      return;\n    }\n\n    if (this._state === CLOSING) return;\n    this._state = CLOSING;\n\n    //\n    // Terminate all associated clients.\n    //\n    if (this.clients) {\n      for (const client of this.clients) client.terminate();\n    }\n\n    const server = this._server;\n\n    if (server) {\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // Close the http server if it was internally created.\n      //\n      if (this.options.port != null) {\n        server.close(emitClose.bind(undefined, this));\n        return;\n      }\n    }\n\n    process.nextTick(emitClose, this);\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key =\n      req.headers['sec-websocket-key'] !== undefined\n        ? req.headers['sec-websocket-key'].trim()\n        : false;\n    const version = +req.headers['sec-websocket-version'];\n    const extensions = {};\n\n    if (\n      req.method !== 'GET' ||\n      req.headers.upgrade.toLowerCase() !== 'websocket' ||\n      !key ||\n      !keyRegex.test(key) ||\n      (version !== 8 && version !== 13) ||\n      !this.shouldHandle(req)\n    ) {\n      return abortHandshake(socket, 400);\n    }\n\n    if (this.options.perMessageDeflate) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = parse(req.headers['sec-websocket-extensions']);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.socket.authorized || req.socket.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(key, extensions, req, socket, head, cb);\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(key, extensions, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Object} extensions The accepted extensions\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n  completeUpgrade(key, extensions, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error(\n        'server.handleUpgrade() was called more than once with the same ' +\n          'socket, possibly due to a misconfiguration'\n      );\n    }\n\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new WebSocket(null);\n    let protocol = req.headers['sec-websocket-protocol'];\n\n    if (protocol) {\n      protocol = protocol.split(',').map(trim);\n\n      //\n      // Optionally call external protocol selection handler.\n      //\n      if (this.options.handleProtocols) {\n        protocol = this.options.handleProtocols(protocol, req);\n      } else {\n        protocol = protocol[0];\n      }\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws._protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, this.options.maxPayload);\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => this.clients.delete(ws));\n    }\n\n    cb(ws, req);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server._state = CLOSED;\n  server.emit('close');\n}\n\n/**\n * Handle premature socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    headers = {\n      Connection: 'close',\n      'Content-Type': 'text/html',\n      'Content-Length': Buffer.byteLength(message),\n      ...headers\n    };\n\n    socket.write(\n      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n        Object.keys(headers)\n          .map((h) => `${h}: ${headers[h]}`)\n          .join('\\r\\n') +\n        '\\r\\n\\r\\n' +\n        message\n    );\n  }\n\n  socket.removeListener('error', socketOnError);\n  socket.destroy();\n}\n\n/**\n * Remove whitespace characters from both ends of a string.\n *\n * @param {String} str The string\n * @return {String} A new string representing `str` stripped of whitespace\n *     characters from both its beginning and end\n * @private\n */\nfunction trim(str) {\n  return str.trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/websocket-server.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/websocket.js":
/*!*******************************************************************!*\
  !*** ./node_modules/stream-chat/node_modules/ws/lib/websocket.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Readable$\" }] */\n\n\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { randomBytes, createHash } = __webpack_require__(/*! crypto */ \"crypto\");\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\nconst { URL } = __webpack_require__(/*! url */ \"url\");\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/permessage-deflate.js\");\nconst Receiver = __webpack_require__(/*! ./receiver */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/receiver.js\");\nconst Sender = __webpack_require__(/*! ./sender */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/sender.js\");\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = __webpack_require__(/*! ./constants */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/constants.js\");\nconst { addEventListener, removeEventListener } = __webpack_require__(/*! ./event-target */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/event-target.js\");\nconst { format, parse } = __webpack_require__(/*! ./extension */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/extension.js\");\nconst { toBuffer } = __webpack_require__(/*! ./buffer-util */ \"(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/buffer-util.js\");\n\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst protocolVersions = [8, 13];\nconst closeTimeout = 30 * 1000;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this._binaryType = BINARY_TYPES[0];\n    this._closeCode = 1006;\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = '';\n    this._closeTimer = null;\n    this._extensions = {};\n    this._protocol = '';\n    this._readyState = WebSocket.CONNECTING;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (Array.isArray(protocols)) {\n        protocols = protocols.join(', ');\n      } else if (typeof protocols === 'object' && protocols !== null) {\n        options = protocols;\n        protocols = undefined;\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._isServer = true;\n    }\n  }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n\n    return this._socket._writableState.length + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onclose() {\n    return undefined;\n  }\n\n  /* istanbul ignore next */\n  set onclose(listener) {}\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onerror() {\n    return undefined;\n  }\n\n  /* istanbul ignore next */\n  set onerror(listener) {}\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onopen() {\n    return undefined;\n  }\n\n  /* istanbul ignore next */\n  set onopen(listener) {}\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onmessage() {\n    return undefined;\n  }\n\n  /* istanbul ignore next */\n  set onmessage(listener) {}\n\n  /**\n   * @type {String}\n   */\n  get protocol() {\n    return this._protocol;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get readyState() {\n    return this._readyState;\n  }\n\n  /**\n   * @type {String}\n   */\n  get url() {\n    return this._url;\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Number} [maxPayload=0] The maximum allowed message size\n   * @private\n   */\n  setSocket(socket, head, maxPayload) {\n    const receiver = new Receiver(\n      this.binaryType,\n      this._extensions,\n      this._isServer,\n      maxPayload\n    );\n\n    this._sender = new Sender(socket, this._extensions);\n    this._receiver = receiver;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    socket.setTimeout(0);\n    socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this._readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    if (!this._socket) {\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this._readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {String} [data] A string explaining why the connection is closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (\n        this._closeFrameSent &&\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\n      ) {\n        this._socket.end();\n      }\n\n      return;\n    }\n\n    this._readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (\n        this._closeFrameReceived ||\n        this._receiver._writableState.errorEmitted\n      ) {\n        this._socket.end();\n      }\n    });\n\n    //\n    // Specify a timeout for the closing handshake to complete.\n    //\n    this._closeTimer = setTimeout(\n      this._socket.destroy.bind(this._socket),\n      closeTimeout\n    );\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this._socket) {\n      this._readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n[\n  'binaryType',\n  'bufferedAmount',\n  'extensions',\n  'protocol',\n  'readyState',\n  'url'\n].forEach((property) => {\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    enumerable: true,\n    get() {\n      const listeners = this.listeners(method);\n      for (let i = 0; i < listeners.length; i++) {\n        if (listeners[i]._listener) return listeners[i]._listener;\n      }\n\n      return undefined;\n    },\n    set(listener) {\n      const listeners = this.listeners(method);\n      for (let i = 0; i < listeners.length; i++) {\n        //\n        // Remove only the listeners added via `addEventListener`.\n        //\n        if (listeners[i]._listener) this.removeListener(method, listeners[i]);\n      }\n      this.addEventListener(method, listener);\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {String} [protocols] The subprotocols\n * @param {Object} [options] Connection options\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    createConnection: undefined,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: undefined,\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  let parsedUrl;\n\n  if (address instanceof URL) {\n    parsedUrl = address;\n    websocket._url = address.href;\n  } else {\n    parsedUrl = new URL(address);\n    websocket._url = address;\n  }\n\n  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';\n\n  if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {\n    const err = new Error(`Invalid URL: ${websocket.url}`);\n\n    if (websocket._redirects === 0) {\n      throw err;\n    } else {\n      emitErrorAndClose(websocket, err);\n      return;\n    }\n  }\n\n  const isSecure =\n    parsedUrl.protocol === 'wss:' || parsedUrl.protocol === 'https:';\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const get = isSecure ? https.get : http.get;\n  let perMessageDeflate;\n\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket',\n    ...opts.headers\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\n      false,\n      opts.maxPayload\n    );\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols) {\n    opts.headers['Sec-WebSocket-Protocol'] = protocols;\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isUnixSocket) {\n    const parts = opts.path.split(':');\n\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  if (opts.followRedirects) {\n    if (websocket._redirects === 0) {\n      websocket._originalUnixSocket = isUnixSocket;\n      websocket._originalSecure = isSecure;\n      websocket._originalHostOrSocketPath = isUnixSocket\n        ? opts.socketPath\n        : parsedUrl.host;\n\n      const headers = options && options.headers;\n\n      //\n      // Shallow copy the user provided options so that headers can be changed\n      // without mutating the original object.\n      //\n      options = { ...options, headers: {} };\n\n      if (headers) {\n        for (const [key, value] of Object.entries(headers)) {\n          options.headers[key.toLowerCase()] = value;\n        }\n      }\n    } else {\n      const isSameHost = isUnixSocket\n        ? websocket._originalUnixSocket\n          ? opts.socketPath === websocket._originalHostOrSocketPath\n          : false\n        : websocket._originalUnixSocket\n        ? false\n        : parsedUrl.host === websocket._originalHostOrSocketPath;\n\n      if (!isSameHost || (websocket._originalSecure && !isSecure)) {\n        //\n        // Match curl 7.77.0 behavior and drop the following headers. These\n        // headers are also dropped when following a redirect to a subdomain.\n        //\n        delete opts.headers.authorization;\n        delete opts.headers.cookie;\n\n        if (!isSameHost) delete opts.headers.host;\n\n        opts.auth = undefined;\n      }\n    }\n\n    //\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n    // If the `Authorization` header is set, then there is nothing to do as it\n    // will take precedence.\n    //\n    if (opts.auth && !options.headers.authorization) {\n      options.headers.authorization =\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\n    }\n  }\n\n  let req = (websocket._req = get(opts));\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', (err) => {\n    if (req === null || req.aborted) return;\n\n    req = websocket._req = null;\n    emitErrorAndClose(websocket, err);\n  });\n\n  req.on('response', (res) => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (\n      location &&\n      opts.followRedirects &&\n      statusCode >= 300 &&\n      statusCode < 400\n    ) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n\n      let addr;\n\n      try {\n        addr = new URL(location, address);\n      } catch (err) {\n        emitErrorAndClose(websocket, err);\n        return;\n      }\n\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(\n        websocket,\n        req,\n        `Unexpected server response: ${res.statusCode}`\n      );\n    }\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the `upgrade`\n    // event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n\n    req = websocket._req = null;\n\n    if (res.headers.upgrade.toLowerCase() !== 'websocket') {\n      abortHandshake(websocket, socket, 'Invalid Upgrade header');\n      return;\n    }\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    const protList = (protocols || '').split(/, */);\n    let protError;\n\n    if (!protocols && serverProt) {\n      protError = 'Server sent a subprotocol but none was requested';\n    } else if (protocols && !serverProt) {\n      protError = 'Server sent no subprotocol';\n    } else if (serverProt && !protList.includes(serverProt)) {\n      protError = 'Server sent an invalid subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket._protocol = serverProt;\n\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n\n    if (secWebSocketExtensions !== undefined) {\n      if (!perMessageDeflate) {\n        const message =\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\n          'was requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      let extensions;\n\n      try {\n        extensions = parse(secWebSocketExtensions);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      const extensionNames = Object.keys(extensions);\n\n      if (extensionNames.length) {\n        if (\n          extensionNames.length !== 1 ||\n          extensionNames[0] !== PerMessageDeflate.extensionName\n        ) {\n          const message =\n            'Server indicated an extension that was not requested';\n          abortHandshake(websocket, socket, message);\n          return;\n        }\n\n        try {\n          perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n        } catch (err) {\n          const message = 'Invalid Sec-WebSocket-Extensions header';\n          abortHandshake(websocket, socket, message);\n          return;\n        }\n\n        websocket._extensions[PerMessageDeflate.extensionName] =\n          perMessageDeflate;\n      }\n    }\n\n    websocket.setSocket(socket, head, opts.maxPayload);\n  });\n}\n\n/**\n * Emit the `'error'` and `'close'` event.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {Error} The error to emit\n * @private\n */\nfunction emitErrorAndClose(websocket, err) {\n  websocket._readyState = WebSocket.CLOSING;\n  websocket.emit('error', err);\n  websocket.emitClose();\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n\n  if (!options.servername && options.servername !== '') {\n    options.servername = net.isIP(options.host) ? '' : options.host;\n  }\n\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket._readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream.abort();\n\n    if (stream.socket && !stream.socket.destroyed) {\n      //\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n      // called after the request completed. See\n      // https://github.com/websockets/ws/issues/1869.\n      //\n      stream.socket.destroy();\n    }\n\n    stream.once('abort', websocket.emitClose.bind(websocket));\n    websocket.emit('error', err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = toBuffer(data).length;\n\n    //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\n    else websocket._bufferedAmount += length;\n  }\n\n  if (cb) {\n    const err = new Error(\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\n        `(${readyStates[websocket.readyState]})`\n    );\n    cb(err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {String} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (websocket._socket[kWebSocket] === undefined) return;\n\n  websocket._socket.removeListener('data', socketOnData);\n  process.nextTick(resume, websocket._socket);\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  this[kWebSocket]._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._socket[kWebSocket] !== undefined) {\n    websocket._socket.removeListener('data', socketOnData);\n\n    //\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n    // https://github.com/websockets/ws/issues/1940.\n    //\n    process.nextTick(resume, websocket._socket);\n\n    websocket.close(err[kStatusCode]);\n  }\n\n  websocket.emit('error', err);\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The message\n * @private\n */\nfunction receiverOnMessage(data) {\n  this[kWebSocket].emit('message', data);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  websocket.pong(data, !websocket._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */\nfunction resume(stream) {\n  stream.resume();\n}\n\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('data', socketOnData);\n  this.removeListener('end', socketOnEnd);\n\n  websocket._readyState = WebSocket.CLOSING;\n\n  let chunk;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk.\n  //\n  if (\n    !this._readableState.endEmitted &&\n    !websocket._closeFrameReceived &&\n    !websocket._receiver._writableState.errorEmitted &&\n    (chunk = websocket._socket.read()) !== null\n  ) {\n    websocket._receiver.write(chunk);\n  }\n\n  websocket._receiver.end();\n\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket._readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  if (websocket) {\n    websocket._readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdHJlYW0tY2hhdC9ub2RlX21vZHVsZXMvd3MvbGliL3dlYnNvY2tldC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0MsbUNBQW1DOztBQUU1RDs7QUFFYixxQkFBcUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNyQyxjQUFjLG1CQUFPLENBQUMsb0JBQU87QUFDN0IsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCLFlBQVksbUJBQU8sQ0FBQyxnQkFBSztBQUN6QixZQUFZLG1CQUFPLENBQUMsZ0JBQUs7QUFDekIsUUFBUSwwQkFBMEIsRUFBRSxtQkFBTyxDQUFDLHNCQUFRO0FBQ3BELFFBQVEsV0FBVyxFQUFFLG1CQUFPLENBQUMsc0JBQVE7QUFDckMsUUFBUSxNQUFNLEVBQUUsbUJBQU8sQ0FBQyxnQkFBSzs7QUFFN0IsMEJBQTBCLG1CQUFPLENBQUMsbUhBQXNCO0FBQ3hELGlCQUFpQixtQkFBTyxDQUFDLCtGQUFZO0FBQ3JDLGVBQWUsbUJBQU8sQ0FBQywyRkFBVTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLGlHQUFhO0FBQ3pCLFFBQVEsd0NBQXdDLEVBQUUsbUJBQU8sQ0FBQyx1R0FBZ0I7QUFDMUUsUUFBUSxnQkFBZ0IsRUFBRSxtQkFBTyxDQUFDLGlHQUFhO0FBQy9DLFFBQVEsV0FBVyxFQUFFLG1CQUFPLENBQUMscUdBQWU7O0FBRTVDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGNBQWM7QUFDM0IsYUFBYSxtQkFBbUI7QUFDaEMsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHlCQUF5QjtBQUN0QztBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxHQUFHO0FBQ2hCLGFBQWEsU0FBUztBQUN0QixhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsR0FBRztBQUNoQixhQUFhLFNBQVM7QUFDdEIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLEdBQUc7QUFDaEIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsU0FBUztBQUN0QjtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBLGFBQWEsU0FBUztBQUN0QixhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsa0JBQWtCO0FBQzNFLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxPQUFPO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQkFBc0I7QUFDNUM7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esc0JBQXNCLHNCQUFzQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCLFdBQVcsY0FBYztBQUN6QixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsa0JBQWtCO0FBQzdCO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUNBQXVDLHNCQUFzQjtBQUM3RCxnQ0FBZ0MsNEJBQTRCO0FBQzVEO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLDBDQUEwQyxjQUFjOztBQUV4RDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1CQUFtQixHQUFHLG1CQUFtQjtBQUM1RDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjs7QUFFbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxlQUFlO0FBQ3REO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFdBQVc7QUFDdEIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLFlBQVk7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLGVBQWU7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCLFdBQVcsNENBQTRDO0FBQ3ZEO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QixXQUFXLEdBQUc7QUFDZCxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJDQUEyQyxzQkFBc0I7QUFDakUsWUFBWSxrQ0FBa0M7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9CQUFvQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxzQ0FBc0M7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rldi1maW5kZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWNoYXQvbm9kZV9tb2R1bGVzL3dzL2xpYi93ZWJzb2NrZXQuanM/NDA0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFtcImVycm9yXCIsIHsgXCJ2YXJzSWdub3JlUGF0dGVyblwiOiBcIl5SZWFkYWJsZSRcIiB9XSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuY29uc3QgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpO1xuY29uc3QgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbmNvbnN0IG5ldCA9IHJlcXVpcmUoJ25ldCcpO1xuY29uc3QgdGxzID0gcmVxdWlyZSgndGxzJyk7XG5jb25zdCB7IHJhbmRvbUJ5dGVzLCBjcmVhdGVIYXNoIH0gPSByZXF1aXJlKCdjcnlwdG8nKTtcbmNvbnN0IHsgUmVhZGFibGUgfSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuY29uc3QgeyBVUkwgfSA9IHJlcXVpcmUoJ3VybCcpO1xuXG5jb25zdCBQZXJNZXNzYWdlRGVmbGF0ZSA9IHJlcXVpcmUoJy4vcGVybWVzc2FnZS1kZWZsYXRlJyk7XG5jb25zdCBSZWNlaXZlciA9IHJlcXVpcmUoJy4vcmVjZWl2ZXInKTtcbmNvbnN0IFNlbmRlciA9IHJlcXVpcmUoJy4vc2VuZGVyJyk7XG5jb25zdCB7XG4gIEJJTkFSWV9UWVBFUyxcbiAgRU1QVFlfQlVGRkVSLFxuICBHVUlELFxuICBrU3RhdHVzQ29kZSxcbiAga1dlYlNvY2tldCxcbiAgTk9PUFxufSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XG5jb25zdCB7IGFkZEV2ZW50TGlzdGVuZXIsIHJlbW92ZUV2ZW50TGlzdGVuZXIgfSA9IHJlcXVpcmUoJy4vZXZlbnQtdGFyZ2V0Jyk7XG5jb25zdCB7IGZvcm1hdCwgcGFyc2UgfSA9IHJlcXVpcmUoJy4vZXh0ZW5zaW9uJyk7XG5jb25zdCB7IHRvQnVmZmVyIH0gPSByZXF1aXJlKCcuL2J1ZmZlci11dGlsJyk7XG5cbmNvbnN0IHJlYWR5U3RhdGVzID0gWydDT05ORUNUSU5HJywgJ09QRU4nLCAnQ0xPU0lORycsICdDTE9TRUQnXTtcbmNvbnN0IHByb3RvY29sVmVyc2lvbnMgPSBbOCwgMTNdO1xuY29uc3QgY2xvc2VUaW1lb3V0ID0gMzAgKiAxMDAwO1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIFdlYlNvY2tldC5cbiAqXG4gKiBAZXh0ZW5kcyBFdmVudEVtaXR0ZXJcbiAqL1xuY2xhc3MgV2ViU29ja2V0IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBgV2ViU29ja2V0YC5cbiAgICpcbiAgICogQHBhcmFtIHsoU3RyaW5nfFVSTCl9IGFkZHJlc3MgVGhlIFVSTCB0byB3aGljaCB0byBjb25uZWN0XG4gICAqIEBwYXJhbSB7KFN0cmluZ3xTdHJpbmdbXSl9IFtwcm90b2NvbHNdIFRoZSBzdWJwcm90b2NvbHNcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBDb25uZWN0aW9uIG9wdGlvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKGFkZHJlc3MsIHByb3RvY29scywgb3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9iaW5hcnlUeXBlID0gQklOQVJZX1RZUEVTWzBdO1xuICAgIHRoaXMuX2Nsb3NlQ29kZSA9IDEwMDY7XG4gICAgdGhpcy5fY2xvc2VGcmFtZVJlY2VpdmVkID0gZmFsc2U7XG4gICAgdGhpcy5fY2xvc2VGcmFtZVNlbnQgPSBmYWxzZTtcbiAgICB0aGlzLl9jbG9zZU1lc3NhZ2UgPSAnJztcbiAgICB0aGlzLl9jbG9zZVRpbWVyID0gbnVsbDtcbiAgICB0aGlzLl9leHRlbnNpb25zID0ge307XG4gICAgdGhpcy5fcHJvdG9jb2wgPSAnJztcbiAgICB0aGlzLl9yZWFkeVN0YXRlID0gV2ViU29ja2V0LkNPTk5FQ1RJTkc7XG4gICAgdGhpcy5fcmVjZWl2ZXIgPSBudWxsO1xuICAgIHRoaXMuX3NlbmRlciA9IG51bGw7XG4gICAgdGhpcy5fc29ja2V0ID0gbnVsbDtcblxuICAgIGlmIChhZGRyZXNzICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl9idWZmZXJlZEFtb3VudCA9IDA7XG4gICAgICB0aGlzLl9pc1NlcnZlciA9IGZhbHNlO1xuICAgICAgdGhpcy5fcmVkaXJlY3RzID0gMDtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvdG9jb2xzKSkge1xuICAgICAgICBwcm90b2NvbHMgPSBwcm90b2NvbHMuam9pbignLCAnKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvY29scyA9PT0gJ29iamVjdCcgJiYgcHJvdG9jb2xzICE9PSBudWxsKSB7XG4gICAgICAgIG9wdGlvbnMgPSBwcm90b2NvbHM7XG4gICAgICAgIHByb3RvY29scyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgaW5pdEFzQ2xpZW50KHRoaXMsIGFkZHJlc3MsIHByb3RvY29scywgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2lzU2VydmVyID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBkZXZpYXRlcyBmcm9tIHRoZSBXSEFUV0cgaW50ZXJmYWNlIHNpbmNlIHdzIGRvZXNuJ3Qgc3VwcG9ydCB0aGVcbiAgICogcmVxdWlyZWQgZGVmYXVsdCBcImJsb2JcIiB0eXBlIChpbnN0ZWFkIHdlIGRlZmluZSBhIGN1c3RvbSBcIm5vZGVidWZmZXJcIlxuICAgKiB0eXBlKS5cbiAgICpcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIGdldCBiaW5hcnlUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9iaW5hcnlUeXBlO1xuICB9XG5cbiAgc2V0IGJpbmFyeVR5cGUodHlwZSkge1xuICAgIGlmICghQklOQVJZX1RZUEVTLmluY2x1ZGVzKHR5cGUpKSByZXR1cm47XG5cbiAgICB0aGlzLl9iaW5hcnlUeXBlID0gdHlwZTtcblxuICAgIC8vXG4gICAgLy8gQWxsb3cgdG8gY2hhbmdlIGBiaW5hcnlUeXBlYCBvbiB0aGUgZmx5LlxuICAgIC8vXG4gICAgaWYgKHRoaXMuX3JlY2VpdmVyKSB0aGlzLl9yZWNlaXZlci5fYmluYXJ5VHlwZSA9IHR5cGU7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIGdldCBidWZmZXJlZEFtb3VudCgpIHtcbiAgICBpZiAoIXRoaXMuX3NvY2tldCkgcmV0dXJuIHRoaXMuX2J1ZmZlcmVkQW1vdW50O1xuXG4gICAgcmV0dXJuIHRoaXMuX3NvY2tldC5fd3JpdGFibGVTdGF0ZS5sZW5ndGggKyB0aGlzLl9zZW5kZXIuX2J1ZmZlcmVkQnl0ZXM7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIGdldCBleHRlbnNpb25zKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9leHRlbnNpb25zKS5qb2luKCk7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgKi9cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgZ2V0IG9uY2xvc2UoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHNldCBvbmNsb3NlKGxpc3RlbmVyKSB7fVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAqL1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBnZXQgb25lcnJvcigpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgc2V0IG9uZXJyb3IobGlzdGVuZXIpIHt9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICovXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGdldCBvbm9wZW4oKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHNldCBvbm9wZW4obGlzdGVuZXIpIHt9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICovXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGdldCBvbm1lc3NhZ2UoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHNldCBvbm1lc3NhZ2UobGlzdGVuZXIpIHt9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBnZXQgcHJvdG9jb2woKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3RvY29sO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICBnZXQgcmVhZHlTdGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZHlTdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKi9cbiAgZ2V0IHVybCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdXJsO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB1cCB0aGUgc29ja2V0IGFuZCB0aGUgaW50ZXJuYWwgcmVzb3VyY2VzLlxuICAgKlxuICAgKiBAcGFyYW0geyhuZXQuU29ja2V0fHRscy5Tb2NrZXQpfSBzb2NrZXQgVGhlIG5ldHdvcmsgc29ja2V0IGJldHdlZW4gdGhlXG4gICAqICAgICBzZXJ2ZXIgYW5kIGNsaWVudFxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gaGVhZCBUaGUgZmlyc3QgcGFja2V0IG9mIHRoZSB1cGdyYWRlZCBzdHJlYW1cbiAgICogQHBhcmFtIHtOdW1iZXJ9IFttYXhQYXlsb2FkPTBdIFRoZSBtYXhpbXVtIGFsbG93ZWQgbWVzc2FnZSBzaXplXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzZXRTb2NrZXQoc29ja2V0LCBoZWFkLCBtYXhQYXlsb2FkKSB7XG4gICAgY29uc3QgcmVjZWl2ZXIgPSBuZXcgUmVjZWl2ZXIoXG4gICAgICB0aGlzLmJpbmFyeVR5cGUsXG4gICAgICB0aGlzLl9leHRlbnNpb25zLFxuICAgICAgdGhpcy5faXNTZXJ2ZXIsXG4gICAgICBtYXhQYXlsb2FkXG4gICAgKTtcblxuICAgIHRoaXMuX3NlbmRlciA9IG5ldyBTZW5kZXIoc29ja2V0LCB0aGlzLl9leHRlbnNpb25zKTtcbiAgICB0aGlzLl9yZWNlaXZlciA9IHJlY2VpdmVyO1xuICAgIHRoaXMuX3NvY2tldCA9IHNvY2tldDtcblxuICAgIHJlY2VpdmVyW2tXZWJTb2NrZXRdID0gdGhpcztcbiAgICBzb2NrZXRba1dlYlNvY2tldF0gPSB0aGlzO1xuXG4gICAgcmVjZWl2ZXIub24oJ2NvbmNsdWRlJywgcmVjZWl2ZXJPbkNvbmNsdWRlKTtcbiAgICByZWNlaXZlci5vbignZHJhaW4nLCByZWNlaXZlck9uRHJhaW4pO1xuICAgIHJlY2VpdmVyLm9uKCdlcnJvcicsIHJlY2VpdmVyT25FcnJvcik7XG4gICAgcmVjZWl2ZXIub24oJ21lc3NhZ2UnLCByZWNlaXZlck9uTWVzc2FnZSk7XG4gICAgcmVjZWl2ZXIub24oJ3BpbmcnLCByZWNlaXZlck9uUGluZyk7XG4gICAgcmVjZWl2ZXIub24oJ3BvbmcnLCByZWNlaXZlck9uUG9uZyk7XG5cbiAgICBzb2NrZXQuc2V0VGltZW91dCgwKTtcbiAgICBzb2NrZXQuc2V0Tm9EZWxheSgpO1xuXG4gICAgaWYgKGhlYWQubGVuZ3RoID4gMCkgc29ja2V0LnVuc2hpZnQoaGVhZCk7XG5cbiAgICBzb2NrZXQub24oJ2Nsb3NlJywgc29ja2V0T25DbG9zZSk7XG4gICAgc29ja2V0Lm9uKCdkYXRhJywgc29ja2V0T25EYXRhKTtcbiAgICBzb2NrZXQub24oJ2VuZCcsIHNvY2tldE9uRW5kKTtcbiAgICBzb2NrZXQub24oJ2Vycm9yJywgc29ja2V0T25FcnJvcik7XG5cbiAgICB0aGlzLl9yZWFkeVN0YXRlID0gV2ViU29ja2V0Lk9QRU47XG4gICAgdGhpcy5lbWl0KCdvcGVuJyk7XG4gIH1cblxuICAvKipcbiAgICogRW1pdCB0aGUgYCdjbG9zZSdgIGV2ZW50LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZW1pdENsb3NlKCkge1xuICAgIGlmICghdGhpcy5fc29ja2V0KSB7XG4gICAgICB0aGlzLl9yZWFkeVN0YXRlID0gV2ViU29ja2V0LkNMT1NFRDtcbiAgICAgIHRoaXMuZW1pdCgnY2xvc2UnLCB0aGlzLl9jbG9zZUNvZGUsIHRoaXMuX2Nsb3NlTWVzc2FnZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V4dGVuc2lvbnNbUGVyTWVzc2FnZURlZmxhdGUuZXh0ZW5zaW9uTmFtZV0pIHtcbiAgICAgIHRoaXMuX2V4dGVuc2lvbnNbUGVyTWVzc2FnZURlZmxhdGUuZXh0ZW5zaW9uTmFtZV0uY2xlYW51cCgpO1xuICAgIH1cblxuICAgIHRoaXMuX3JlY2VpdmVyLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBXZWJTb2NrZXQuQ0xPU0VEO1xuICAgIHRoaXMuZW1pdCgnY2xvc2UnLCB0aGlzLl9jbG9zZUNvZGUsIHRoaXMuX2Nsb3NlTWVzc2FnZSk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgYSBjbG9zaW5nIGhhbmRzaGFrZS5cbiAgICpcbiAgICogICAgICAgICAgKy0tLS0tLS0tLS0rICAgKy0tLS0tLS0tLS0tKyAgICstLS0tLS0tLS0tK1xuICAgKiAgICAgLSAtIC18d3MuY2xvc2UoKXwtLT58Y2xvc2UgZnJhbWV8LS0+fHdzLmNsb3NlKCl8LSAtIC1cbiAgICogICAgfCAgICAgKy0tLS0tLS0tLS0rICAgKy0tLS0tLS0tLS0tKyAgICstLS0tLS0tLS0tKyAgICAgfFxuICAgKiAgICAgICAgICArLS0tLS0tLS0tLSsgICArLS0tLS0tLS0tLS0rICAgICAgICAgfFxuICAgKiBDTE9TSU5HICB8d3MuY2xvc2UoKXw8LS18Y2xvc2UgZnJhbWV8PC0tKy0tLS0tKyAgICAgICBDTE9TSU5HXG4gICAqICAgICAgICAgICstLS0tLS0tLS0tKyAgICstLS0tLS0tLS0tLSsgICB8XG4gICAqICAgIHwgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICB8ICAgKy0tLSsgICAgICAgIHxcbiAgICogICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSstLT58ZmlufCAtIC0gLSAtXG4gICAqICAgIHwgICAgICAgICArLS0tKyAgICAgICAgICAgICAgICAgICAgICB8ICAgKy0tLStcbiAgICogICAgIC0gLSAtIC0gLXxmaW58PC0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAgICogICAgICAgICAgICAgICstLS0rXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbY29kZV0gU3RhdHVzIGNvZGUgZXhwbGFpbmluZyB3aHkgdGhlIGNvbm5lY3Rpb24gaXMgY2xvc2luZ1xuICAgKiBAcGFyYW0ge1N0cmluZ30gW2RhdGFdIEEgc3RyaW5nIGV4cGxhaW5pbmcgd2h5IHRoZSBjb25uZWN0aW9uIGlzIGNsb3NpbmdcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY2xvc2UoY29kZSwgZGF0YSkge1xuICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5DTE9TRUQpIHJldHVybjtcbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuQ09OTkVDVElORykge1xuICAgICAgY29uc3QgbXNnID0gJ1dlYlNvY2tldCB3YXMgY2xvc2VkIGJlZm9yZSB0aGUgY29ubmVjdGlvbiB3YXMgZXN0YWJsaXNoZWQnO1xuICAgICAgcmV0dXJuIGFib3J0SGFuZHNoYWtlKHRoaXMsIHRoaXMuX3JlcSwgbXNnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuQ0xPU0lORykge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLl9jbG9zZUZyYW1lU2VudCAmJlxuICAgICAgICAodGhpcy5fY2xvc2VGcmFtZVJlY2VpdmVkIHx8IHRoaXMuX3JlY2VpdmVyLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZClcbiAgICAgICkge1xuICAgICAgICB0aGlzLl9zb2NrZXQuZW5kKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9yZWFkeVN0YXRlID0gV2ViU29ja2V0LkNMT1NJTkc7XG4gICAgdGhpcy5fc2VuZGVyLmNsb3NlKGNvZGUsIGRhdGEsICF0aGlzLl9pc1NlcnZlciwgKGVycikgPT4ge1xuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgaGFuZGxlZCBieSB0aGUgYCdlcnJvcidgIGxpc3RlbmVyIG9uIHRoZSBzb2NrZXQuIFdlIG9ubHlcbiAgICAgIC8vIHdhbnQgdG8ga25vdyBpZiB0aGUgY2xvc2UgZnJhbWUgaGFzIGJlZW4gc2VudCBoZXJlLlxuICAgICAgLy9cbiAgICAgIGlmIChlcnIpIHJldHVybjtcblxuICAgICAgdGhpcy5fY2xvc2VGcmFtZVNlbnQgPSB0cnVlO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuX2Nsb3NlRnJhbWVSZWNlaXZlZCB8fFxuICAgICAgICB0aGlzLl9yZWNlaXZlci5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWRcbiAgICAgICkge1xuICAgICAgICB0aGlzLl9zb2NrZXQuZW5kKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvL1xuICAgIC8vIFNwZWNpZnkgYSB0aW1lb3V0IGZvciB0aGUgY2xvc2luZyBoYW5kc2hha2UgdG8gY29tcGxldGUuXG4gICAgLy9cbiAgICB0aGlzLl9jbG9zZVRpbWVyID0gc2V0VGltZW91dChcbiAgICAgIHRoaXMuX3NvY2tldC5kZXN0cm95LmJpbmQodGhpcy5fc29ja2V0KSxcbiAgICAgIGNsb3NlVGltZW91dFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZCBhIHBpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gW2RhdGFdIFRoZSBkYXRhIHRvIHNlbmRcbiAgICogQHBhcmFtIHtCb29sZWFufSBbbWFza10gSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRvIG1hc2sgYGRhdGFgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYl0gQ2FsbGJhY2sgd2hpY2ggaXMgZXhlY3V0ZWQgd2hlbiB0aGUgcGluZyBpcyBzZW50XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHBpbmcoZGF0YSwgbWFzaywgY2IpIHtcbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuQ09OTkVDVElORykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdXZWJTb2NrZXQgaXMgbm90IG9wZW46IHJlYWR5U3RhdGUgMCAoQ09OTkVDVElORyknKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNiID0gZGF0YTtcbiAgICAgIGRhdGEgPSBtYXNrID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1hc2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNiID0gbWFzaztcbiAgICAgIG1hc2sgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnbnVtYmVyJykgZGF0YSA9IGRhdGEudG9TdHJpbmcoKTtcblxuICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgIT09IFdlYlNvY2tldC5PUEVOKSB7XG4gICAgICBzZW5kQWZ0ZXJDbG9zZSh0aGlzLCBkYXRhLCBjYik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG1hc2sgPT09IHVuZGVmaW5lZCkgbWFzayA9ICF0aGlzLl9pc1NlcnZlcjtcbiAgICB0aGlzLl9zZW5kZXIucGluZyhkYXRhIHx8IEVNUFRZX0JVRkZFUiwgbWFzaywgY2IpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgYSBwb25nLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IFtkYXRhXSBUaGUgZGF0YSB0byBzZW5kXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW21hc2tdIEluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB0byBtYXNrIGBkYXRhYFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2JdIENhbGxiYWNrIHdoaWNoIGlzIGV4ZWN1dGVkIHdoZW4gdGhlIHBvbmcgaXMgc2VudFxuICAgKiBAcHVibGljXG4gICAqL1xuICBwb25nKGRhdGEsIG1hc2ssIGNiKSB7XG4gICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0LkNPTk5FQ1RJTkcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignV2ViU29ja2V0IGlzIG5vdCBvcGVuOiByZWFkeVN0YXRlIDAgKENPTk5FQ1RJTkcpJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYiA9IGRhdGE7XG4gICAgICBkYXRhID0gbWFzayA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtYXNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYiA9IG1hc2s7XG4gICAgICBtYXNrID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ251bWJlcicpIGRhdGEgPSBkYXRhLnRvU3RyaW5nKCk7XG5cbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlICE9PSBXZWJTb2NrZXQuT1BFTikge1xuICAgICAgc2VuZEFmdGVyQ2xvc2UodGhpcywgZGF0YSwgY2IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChtYXNrID09PSB1bmRlZmluZWQpIG1hc2sgPSAhdGhpcy5faXNTZXJ2ZXI7XG4gICAgdGhpcy5fc2VuZGVyLnBvbmcoZGF0YSB8fCBFTVBUWV9CVUZGRVIsIG1hc2ssIGNiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIGEgZGF0YSBtZXNzYWdlLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1lc3NhZ2UgdG8gc2VuZFxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuY29tcHJlc3NdIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBjb21wcmVzc1xuICAgKiAgICAgYGRhdGFgXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuYmluYXJ5XSBTcGVjaWZpZXMgd2hldGhlciBgZGF0YWAgaXMgYmluYXJ5IG9yXG4gICAqICAgICB0ZXh0XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZmluPXRydWVdIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBmcmFnbWVudCBpcyB0aGVcbiAgICogICAgIGxhc3Qgb25lXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMubWFza10gU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIG1hc2sgYGRhdGFgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYl0gQ2FsbGJhY2sgd2hpY2ggaXMgZXhlY3V0ZWQgd2hlbiBkYXRhIGlzIHdyaXR0ZW4gb3V0XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHNlbmQoZGF0YSwgb3B0aW9ucywgY2IpIHtcbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuQ09OTkVDVElORykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdXZWJTb2NrZXQgaXMgbm90IG9wZW46IHJlYWR5U3RhdGUgMCAoQ09OTkVDVElORyknKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNiID0gb3B0aW9ucztcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdudW1iZXInKSBkYXRhID0gZGF0YS50b1N0cmluZygpO1xuXG4gICAgaWYgKHRoaXMucmVhZHlTdGF0ZSAhPT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgICAgIHNlbmRBZnRlckNsb3NlKHRoaXMsIGRhdGEsIGNiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBvcHRzID0ge1xuICAgICAgYmluYXJ5OiB0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycsXG4gICAgICBtYXNrOiAhdGhpcy5faXNTZXJ2ZXIsXG4gICAgICBjb21wcmVzczogdHJ1ZSxcbiAgICAgIGZpbjogdHJ1ZSxcbiAgICAgIC4uLm9wdGlvbnNcbiAgICB9O1xuXG4gICAgaWYgKCF0aGlzLl9leHRlbnNpb25zW1Blck1lc3NhZ2VEZWZsYXRlLmV4dGVuc2lvbk5hbWVdKSB7XG4gICAgICBvcHRzLmNvbXByZXNzID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5fc2VuZGVyLnNlbmQoZGF0YSB8fCBFTVBUWV9CVUZGRVIsIG9wdHMsIGNiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JjaWJseSBjbG9zZSB0aGUgY29ubmVjdGlvbi5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdGVybWluYXRlKCkge1xuICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5DTE9TRUQpIHJldHVybjtcbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuQ09OTkVDVElORykge1xuICAgICAgY29uc3QgbXNnID0gJ1dlYlNvY2tldCB3YXMgY2xvc2VkIGJlZm9yZSB0aGUgY29ubmVjdGlvbiB3YXMgZXN0YWJsaXNoZWQnO1xuICAgICAgcmV0dXJuIGFib3J0SGFuZHNoYWtlKHRoaXMsIHRoaXMuX3JlcSwgbXNnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fc29ja2V0KSB7XG4gICAgICB0aGlzLl9yZWFkeVN0YXRlID0gV2ViU29ja2V0LkNMT1NJTkc7XG4gICAgICB0aGlzLl9zb2NrZXQuZGVzdHJveSgpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBjb25zdGFudCB7TnVtYmVyfSBDT05ORUNUSU5HXG4gKiBAbWVtYmVyb2YgV2ViU29ja2V0XG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXZWJTb2NrZXQsICdDT05ORUNUSU5HJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICB2YWx1ZTogcmVhZHlTdGF0ZXMuaW5kZXhPZignQ09OTkVDVElORycpXG59KTtcblxuLyoqXG4gKiBAY29uc3RhbnQge051bWJlcn0gQ09OTkVDVElOR1xuICogQG1lbWJlcm9mIFdlYlNvY2tldC5wcm90b3R5cGVcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdlYlNvY2tldC5wcm90b3R5cGUsICdDT05ORUNUSU5HJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICB2YWx1ZTogcmVhZHlTdGF0ZXMuaW5kZXhPZignQ09OTkVDVElORycpXG59KTtcblxuLyoqXG4gKiBAY29uc3RhbnQge051bWJlcn0gT1BFTlxuICogQG1lbWJlcm9mIFdlYlNvY2tldFxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV2ViU29ja2V0LCAnT1BFTicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgdmFsdWU6IHJlYWR5U3RhdGVzLmluZGV4T2YoJ09QRU4nKVxufSk7XG5cbi8qKlxuICogQGNvbnN0YW50IHtOdW1iZXJ9IE9QRU5cbiAqIEBtZW1iZXJvZiBXZWJTb2NrZXQucHJvdG90eXBlXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXZWJTb2NrZXQucHJvdG90eXBlLCAnT1BFTicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgdmFsdWU6IHJlYWR5U3RhdGVzLmluZGV4T2YoJ09QRU4nKVxufSk7XG5cbi8qKlxuICogQGNvbnN0YW50IHtOdW1iZXJ9IENMT1NJTkdcbiAqIEBtZW1iZXJvZiBXZWJTb2NrZXRcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdlYlNvY2tldCwgJ0NMT1NJTkcnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIHZhbHVlOiByZWFkeVN0YXRlcy5pbmRleE9mKCdDTE9TSU5HJylcbn0pO1xuXG4vKipcbiAqIEBjb25zdGFudCB7TnVtYmVyfSBDTE9TSU5HXG4gKiBAbWVtYmVyb2YgV2ViU29ja2V0LnByb3RvdHlwZVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV2ViU29ja2V0LnByb3RvdHlwZSwgJ0NMT1NJTkcnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIHZhbHVlOiByZWFkeVN0YXRlcy5pbmRleE9mKCdDTE9TSU5HJylcbn0pO1xuXG4vKipcbiAqIEBjb25zdGFudCB7TnVtYmVyfSBDTE9TRURcbiAqIEBtZW1iZXJvZiBXZWJTb2NrZXRcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdlYlNvY2tldCwgJ0NMT1NFRCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgdmFsdWU6IHJlYWR5U3RhdGVzLmluZGV4T2YoJ0NMT1NFRCcpXG59KTtcblxuLyoqXG4gKiBAY29uc3RhbnQge051bWJlcn0gQ0xPU0VEXG4gKiBAbWVtYmVyb2YgV2ViU29ja2V0LnByb3RvdHlwZVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV2ViU29ja2V0LnByb3RvdHlwZSwgJ0NMT1NFRCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgdmFsdWU6IHJlYWR5U3RhdGVzLmluZGV4T2YoJ0NMT1NFRCcpXG59KTtcblxuW1xuICAnYmluYXJ5VHlwZScsXG4gICdidWZmZXJlZEFtb3VudCcsXG4gICdleHRlbnNpb25zJyxcbiAgJ3Byb3RvY29sJyxcbiAgJ3JlYWR5U3RhdGUnLFxuICAndXJsJ1xuXS5mb3JFYWNoKChwcm9wZXJ0eSkgPT4ge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV2ViU29ja2V0LnByb3RvdHlwZSwgcHJvcGVydHksIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn0pO1xuXG4vL1xuLy8gQWRkIHRoZSBgb25vcGVuYCwgYG9uZXJyb3JgLCBgb25jbG9zZWAsIGFuZCBgb25tZXNzYWdlYCBhdHRyaWJ1dGVzLlxuLy8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2NvbW1zLmh0bWwjdGhlLXdlYnNvY2tldC1pbnRlcmZhY2Vcbi8vXG5bJ29wZW4nLCAnZXJyb3InLCAnY2xvc2UnLCAnbWVzc2FnZSddLmZvckVhY2goKG1ldGhvZCkgPT4ge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV2ViU29ja2V0LnByb3RvdHlwZSwgYG9uJHttZXRob2R9YCwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMobWV0aG9kKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lcnNbaV0uX2xpc3RlbmVyKSByZXR1cm4gbGlzdGVuZXJzW2ldLl9saXN0ZW5lcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIHNldChsaXN0ZW5lcikge1xuICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMobWV0aG9kKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIFJlbW92ZSBvbmx5IHRoZSBsaXN0ZW5lcnMgYWRkZWQgdmlhIGBhZGRFdmVudExpc3RlbmVyYC5cbiAgICAgICAgLy9cbiAgICAgICAgaWYgKGxpc3RlbmVyc1tpXS5fbGlzdGVuZXIpIHRoaXMucmVtb3ZlTGlzdGVuZXIobWV0aG9kLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgfVxuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG1ldGhvZCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSk7XG59KTtcblxuV2ViU29ja2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcjtcbldlYlNvY2tldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IHJlbW92ZUV2ZW50TGlzdGVuZXI7XG5cbm1vZHVsZS5leHBvcnRzID0gV2ViU29ja2V0O1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBXZWJTb2NrZXQgY2xpZW50LlxuICpcbiAqIEBwYXJhbSB7V2ViU29ja2V0fSB3ZWJzb2NrZXQgVGhlIGNsaWVudCB0byBpbml0aWFsaXplXG4gKiBAcGFyYW0geyhTdHJpbmd8VVJMKX0gYWRkcmVzcyBUaGUgVVJMIHRvIHdoaWNoIHRvIGNvbm5lY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBbcHJvdG9jb2xzXSBUaGUgc3VicHJvdG9jb2xzXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIENvbm5lY3Rpb24gb3B0aW9uc1xuICogQHBhcmFtIHsoQm9vbGVhbnxPYmplY3QpfSBbb3B0aW9ucy5wZXJNZXNzYWdlRGVmbGF0ZT10cnVlXSBFbmFibGUvZGlzYWJsZVxuICogICAgIHBlcm1lc3NhZ2UtZGVmbGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmhhbmRzaGFrZVRpbWVvdXRdIFRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGVcbiAqICAgICBoYW5kc2hha2UgcmVxdWVzdFxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnByb3RvY29sVmVyc2lvbj0xM10gVmFsdWUgb2YgdGhlXG4gKiAgICAgYFNlYy1XZWJTb2NrZXQtVmVyc2lvbmAgaGVhZGVyXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMub3JpZ2luXSBWYWx1ZSBvZiB0aGUgYE9yaWdpbmAgb3JcbiAqICAgICBgU2VjLVdlYlNvY2tldC1PcmlnaW5gIGhlYWRlclxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLm1heFBheWxvYWQ9MTA0ODU3NjAwXSBUaGUgbWF4aW11bSBhbGxvd2VkIG1lc3NhZ2VcbiAqICAgICBzaXplXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmZvbGxvd1JlZGlyZWN0cz1mYWxzZV0gV2hldGhlciBvciBub3QgdG8gZm9sbG93XG4gKiAgICAgcmVkaXJlY3RzXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubWF4UmVkaXJlY3RzPTEwXSBUaGUgbWF4aW11bSBudW1iZXIgb2YgcmVkaXJlY3RzXG4gKiAgICAgYWxsb3dlZFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaW5pdEFzQ2xpZW50KHdlYnNvY2tldCwgYWRkcmVzcywgcHJvdG9jb2xzLCBvcHRpb25zKSB7XG4gIGNvbnN0IG9wdHMgPSB7XG4gICAgcHJvdG9jb2xWZXJzaW9uOiBwcm90b2NvbFZlcnNpb25zWzFdLFxuICAgIG1heFBheWxvYWQ6IDEwMCAqIDEwMjQgKiAxMDI0LFxuICAgIHBlck1lc3NhZ2VEZWZsYXRlOiB0cnVlLFxuICAgIGZvbGxvd1JlZGlyZWN0czogZmFsc2UsXG4gICAgbWF4UmVkaXJlY3RzOiAxMCxcbiAgICAuLi5vcHRpb25zLFxuICAgIGNyZWF0ZUNvbm5lY3Rpb246IHVuZGVmaW5lZCxcbiAgICBzb2NrZXRQYXRoOiB1bmRlZmluZWQsXG4gICAgaG9zdG5hbWU6IHVuZGVmaW5lZCxcbiAgICBwcm90b2NvbDogdW5kZWZpbmVkLFxuICAgIHRpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICBtZXRob2Q6IHVuZGVmaW5lZCxcbiAgICBob3N0OiB1bmRlZmluZWQsXG4gICAgcGF0aDogdW5kZWZpbmVkLFxuICAgIHBvcnQ6IHVuZGVmaW5lZFxuICB9O1xuXG4gIGlmICghcHJvdG9jb2xWZXJzaW9ucy5pbmNsdWRlcyhvcHRzLnByb3RvY29sVmVyc2lvbikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgIGBVbnN1cHBvcnRlZCBwcm90b2NvbCB2ZXJzaW9uOiAke29wdHMucHJvdG9jb2xWZXJzaW9ufSBgICtcbiAgICAgICAgYChzdXBwb3J0ZWQgdmVyc2lvbnM6ICR7cHJvdG9jb2xWZXJzaW9ucy5qb2luKCcsICcpfSlgXG4gICAgKTtcbiAgfVxuXG4gIGxldCBwYXJzZWRVcmw7XG5cbiAgaWYgKGFkZHJlc3MgaW5zdGFuY2VvZiBVUkwpIHtcbiAgICBwYXJzZWRVcmwgPSBhZGRyZXNzO1xuICAgIHdlYnNvY2tldC5fdXJsID0gYWRkcmVzcy5ocmVmO1xuICB9IGVsc2Uge1xuICAgIHBhcnNlZFVybCA9IG5ldyBVUkwoYWRkcmVzcyk7XG4gICAgd2Vic29ja2V0Ll91cmwgPSBhZGRyZXNzO1xuICB9XG5cbiAgY29uc3QgaXNVbml4U29ja2V0ID0gcGFyc2VkVXJsLnByb3RvY29sID09PSAnd3MrdW5peDonO1xuXG4gIGlmICghcGFyc2VkVXJsLmhvc3QgJiYgKCFpc1VuaXhTb2NrZXQgfHwgIXBhcnNlZFVybC5wYXRobmFtZSkpIHtcbiAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoYEludmFsaWQgVVJMOiAke3dlYnNvY2tldC51cmx9YCk7XG5cbiAgICBpZiAod2Vic29ja2V0Ll9yZWRpcmVjdHMgPT09IDApIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdEVycm9yQW5kQ2xvc2Uod2Vic29ja2V0LCBlcnIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGlzU2VjdXJlID1cbiAgICBwYXJzZWRVcmwucHJvdG9jb2wgPT09ICd3c3M6JyB8fCBwYXJzZWRVcmwucHJvdG9jb2wgPT09ICdodHRwczonO1xuICBjb25zdCBkZWZhdWx0UG9ydCA9IGlzU2VjdXJlID8gNDQzIDogODA7XG4gIGNvbnN0IGtleSA9IHJhbmRvbUJ5dGVzKDE2KS50b1N0cmluZygnYmFzZTY0Jyk7XG4gIGNvbnN0IGdldCA9IGlzU2VjdXJlID8gaHR0cHMuZ2V0IDogaHR0cC5nZXQ7XG4gIGxldCBwZXJNZXNzYWdlRGVmbGF0ZTtcblxuICBvcHRzLmNyZWF0ZUNvbm5lY3Rpb24gPSBpc1NlY3VyZSA/IHRsc0Nvbm5lY3QgOiBuZXRDb25uZWN0O1xuICBvcHRzLmRlZmF1bHRQb3J0ID0gb3B0cy5kZWZhdWx0UG9ydCB8fCBkZWZhdWx0UG9ydDtcbiAgb3B0cy5wb3J0ID0gcGFyc2VkVXJsLnBvcnQgfHwgZGVmYXVsdFBvcnQ7XG4gIG9wdHMuaG9zdCA9IHBhcnNlZFVybC5ob3N0bmFtZS5zdGFydHNXaXRoKCdbJylcbiAgICA/IHBhcnNlZFVybC5ob3N0bmFtZS5zbGljZSgxLCAtMSlcbiAgICA6IHBhcnNlZFVybC5ob3N0bmFtZTtcbiAgb3B0cy5oZWFkZXJzID0ge1xuICAgICdTZWMtV2ViU29ja2V0LVZlcnNpb24nOiBvcHRzLnByb3RvY29sVmVyc2lvbixcbiAgICAnU2VjLVdlYlNvY2tldC1LZXknOiBrZXksXG4gICAgQ29ubmVjdGlvbjogJ1VwZ3JhZGUnLFxuICAgIFVwZ3JhZGU6ICd3ZWJzb2NrZXQnLFxuICAgIC4uLm9wdHMuaGVhZGVyc1xuICB9O1xuICBvcHRzLnBhdGggPSBwYXJzZWRVcmwucGF0aG5hbWUgKyBwYXJzZWRVcmwuc2VhcmNoO1xuICBvcHRzLnRpbWVvdXQgPSBvcHRzLmhhbmRzaGFrZVRpbWVvdXQ7XG5cbiAgaWYgKG9wdHMucGVyTWVzc2FnZURlZmxhdGUpIHtcbiAgICBwZXJNZXNzYWdlRGVmbGF0ZSA9IG5ldyBQZXJNZXNzYWdlRGVmbGF0ZShcbiAgICAgIG9wdHMucGVyTWVzc2FnZURlZmxhdGUgIT09IHRydWUgPyBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlIDoge30sXG4gICAgICBmYWxzZSxcbiAgICAgIG9wdHMubWF4UGF5bG9hZFxuICAgICk7XG4gICAgb3B0cy5oZWFkZXJzWydTZWMtV2ViU29ja2V0LUV4dGVuc2lvbnMnXSA9IGZvcm1hdCh7XG4gICAgICBbUGVyTWVzc2FnZURlZmxhdGUuZXh0ZW5zaW9uTmFtZV06IHBlck1lc3NhZ2VEZWZsYXRlLm9mZmVyKClcbiAgICB9KTtcbiAgfVxuICBpZiAocHJvdG9jb2xzKSB7XG4gICAgb3B0cy5oZWFkZXJzWydTZWMtV2ViU29ja2V0LVByb3RvY29sJ10gPSBwcm90b2NvbHM7XG4gIH1cbiAgaWYgKG9wdHMub3JpZ2luKSB7XG4gICAgaWYgKG9wdHMucHJvdG9jb2xWZXJzaW9uIDwgMTMpIHtcbiAgICAgIG9wdHMuaGVhZGVyc1snU2VjLVdlYlNvY2tldC1PcmlnaW4nXSA9IG9wdHMub3JpZ2luO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRzLmhlYWRlcnMuT3JpZ2luID0gb3B0cy5vcmlnaW47XG4gICAgfVxuICB9XG4gIGlmIChwYXJzZWRVcmwudXNlcm5hbWUgfHwgcGFyc2VkVXJsLnBhc3N3b3JkKSB7XG4gICAgb3B0cy5hdXRoID0gYCR7cGFyc2VkVXJsLnVzZXJuYW1lfToke3BhcnNlZFVybC5wYXNzd29yZH1gO1xuICB9XG5cbiAgaWYgKGlzVW5peFNvY2tldCkge1xuICAgIGNvbnN0IHBhcnRzID0gb3B0cy5wYXRoLnNwbGl0KCc6Jyk7XG5cbiAgICBvcHRzLnNvY2tldFBhdGggPSBwYXJ0c1swXTtcbiAgICBvcHRzLnBhdGggPSBwYXJ0c1sxXTtcbiAgfVxuXG4gIGlmIChvcHRzLmZvbGxvd1JlZGlyZWN0cykge1xuICAgIGlmICh3ZWJzb2NrZXQuX3JlZGlyZWN0cyA9PT0gMCkge1xuICAgICAgd2Vic29ja2V0Ll9vcmlnaW5hbFVuaXhTb2NrZXQgPSBpc1VuaXhTb2NrZXQ7XG4gICAgICB3ZWJzb2NrZXQuX29yaWdpbmFsU2VjdXJlID0gaXNTZWN1cmU7XG4gICAgICB3ZWJzb2NrZXQuX29yaWdpbmFsSG9zdE9yU29ja2V0UGF0aCA9IGlzVW5peFNvY2tldFxuICAgICAgICA/IG9wdHMuc29ja2V0UGF0aFxuICAgICAgICA6IHBhcnNlZFVybC5ob3N0O1xuXG4gICAgICBjb25zdCBoZWFkZXJzID0gb3B0aW9ucyAmJiBvcHRpb25zLmhlYWRlcnM7XG5cbiAgICAgIC8vXG4gICAgICAvLyBTaGFsbG93IGNvcHkgdGhlIHVzZXIgcHJvdmlkZWQgb3B0aW9ucyBzbyB0aGF0IGhlYWRlcnMgY2FuIGJlIGNoYW5nZWRcbiAgICAgIC8vIHdpdGhvdXQgbXV0YXRpbmcgdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgIC8vXG4gICAgICBvcHRpb25zID0geyAuLi5vcHRpb25zLCBoZWFkZXJzOiB7fSB9O1xuXG4gICAgICBpZiAoaGVhZGVycykge1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhoZWFkZXJzKSkge1xuICAgICAgICAgIG9wdGlvbnMuaGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpc1NhbWVIb3N0ID0gaXNVbml4U29ja2V0XG4gICAgICAgID8gd2Vic29ja2V0Ll9vcmlnaW5hbFVuaXhTb2NrZXRcbiAgICAgICAgICA/IG9wdHMuc29ja2V0UGF0aCA9PT0gd2Vic29ja2V0Ll9vcmlnaW5hbEhvc3RPclNvY2tldFBhdGhcbiAgICAgICAgICA6IGZhbHNlXG4gICAgICAgIDogd2Vic29ja2V0Ll9vcmlnaW5hbFVuaXhTb2NrZXRcbiAgICAgICAgPyBmYWxzZVxuICAgICAgICA6IHBhcnNlZFVybC5ob3N0ID09PSB3ZWJzb2NrZXQuX29yaWdpbmFsSG9zdE9yU29ja2V0UGF0aDtcblxuICAgICAgaWYgKCFpc1NhbWVIb3N0IHx8ICh3ZWJzb2NrZXQuX29yaWdpbmFsU2VjdXJlICYmICFpc1NlY3VyZSkpIHtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gTWF0Y2ggY3VybCA3Ljc3LjAgYmVoYXZpb3IgYW5kIGRyb3AgdGhlIGZvbGxvd2luZyBoZWFkZXJzLiBUaGVzZVxuICAgICAgICAvLyBoZWFkZXJzIGFyZSBhbHNvIGRyb3BwZWQgd2hlbiBmb2xsb3dpbmcgYSByZWRpcmVjdCB0byBhIHN1YmRvbWFpbi5cbiAgICAgICAgLy9cbiAgICAgICAgZGVsZXRlIG9wdHMuaGVhZGVycy5hdXRob3JpemF0aW9uO1xuICAgICAgICBkZWxldGUgb3B0cy5oZWFkZXJzLmNvb2tpZTtcblxuICAgICAgICBpZiAoIWlzU2FtZUhvc3QpIGRlbGV0ZSBvcHRzLmhlYWRlcnMuaG9zdDtcblxuICAgICAgICBvcHRzLmF1dGggPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBNYXRjaCBjdXJsIDcuNzcuMCBiZWhhdmlvciBhbmQgbWFrZSB0aGUgZmlyc3QgYEF1dGhvcml6YXRpb25gIGhlYWRlciB3aW4uXG4gICAgLy8gSWYgdGhlIGBBdXRob3JpemF0aW9uYCBoZWFkZXIgaXMgc2V0LCB0aGVuIHRoZXJlIGlzIG5vdGhpbmcgdG8gZG8gYXMgaXRcbiAgICAvLyB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAgICAvL1xuICAgIGlmIChvcHRzLmF1dGggJiYgIW9wdGlvbnMuaGVhZGVycy5hdXRob3JpemF0aW9uKSB7XG4gICAgICBvcHRpb25zLmhlYWRlcnMuYXV0aG9yaXphdGlvbiA9XG4gICAgICAgICdCYXNpYyAnICsgQnVmZmVyLmZyb20ob3B0cy5hdXRoKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgfVxuICB9XG5cbiAgbGV0IHJlcSA9ICh3ZWJzb2NrZXQuX3JlcSA9IGdldChvcHRzKSk7XG5cbiAgaWYgKG9wdHMudGltZW91dCkge1xuICAgIHJlcS5vbigndGltZW91dCcsICgpID0+IHtcbiAgICAgIGFib3J0SGFuZHNoYWtlKHdlYnNvY2tldCwgcmVxLCAnT3BlbmluZyBoYW5kc2hha2UgaGFzIHRpbWVkIG91dCcpO1xuICAgIH0pO1xuICB9XG5cbiAgcmVxLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICBpZiAocmVxID09PSBudWxsIHx8IHJlcS5hYm9ydGVkKSByZXR1cm47XG5cbiAgICByZXEgPSB3ZWJzb2NrZXQuX3JlcSA9IG51bGw7XG4gICAgZW1pdEVycm9yQW5kQ2xvc2Uod2Vic29ja2V0LCBlcnIpO1xuICB9KTtcblxuICByZXEub24oJ3Jlc3BvbnNlJywgKHJlcykgPT4ge1xuICAgIGNvbnN0IGxvY2F0aW9uID0gcmVzLmhlYWRlcnMubG9jYXRpb247XG4gICAgY29uc3Qgc3RhdHVzQ29kZSA9IHJlcy5zdGF0dXNDb2RlO1xuXG4gICAgaWYgKFxuICAgICAgbG9jYXRpb24gJiZcbiAgICAgIG9wdHMuZm9sbG93UmVkaXJlY3RzICYmXG4gICAgICBzdGF0dXNDb2RlID49IDMwMCAmJlxuICAgICAgc3RhdHVzQ29kZSA8IDQwMFxuICAgICkge1xuICAgICAgaWYgKCsrd2Vic29ja2V0Ll9yZWRpcmVjdHMgPiBvcHRzLm1heFJlZGlyZWN0cykge1xuICAgICAgICBhYm9ydEhhbmRzaGFrZSh3ZWJzb2NrZXQsIHJlcSwgJ01heGltdW0gcmVkaXJlY3RzIGV4Y2VlZGVkJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVxLmFib3J0KCk7XG5cbiAgICAgIGxldCBhZGRyO1xuXG4gICAgICB0cnkge1xuICAgICAgICBhZGRyID0gbmV3IFVSTChsb2NhdGlvbiwgYWRkcmVzcyk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgZW1pdEVycm9yQW5kQ2xvc2Uod2Vic29ja2V0LCBlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGluaXRBc0NsaWVudCh3ZWJzb2NrZXQsIGFkZHIsIHByb3RvY29scywgb3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmICghd2Vic29ja2V0LmVtaXQoJ3VuZXhwZWN0ZWQtcmVzcG9uc2UnLCByZXEsIHJlcykpIHtcbiAgICAgIGFib3J0SGFuZHNoYWtlKFxuICAgICAgICB3ZWJzb2NrZXQsXG4gICAgICAgIHJlcSxcbiAgICAgICAgYFVuZXhwZWN0ZWQgc2VydmVyIHJlc3BvbnNlOiAke3Jlcy5zdGF0dXNDb2RlfWBcbiAgICAgICk7XG4gICAgfVxuICB9KTtcblxuICByZXEub24oJ3VwZ3JhZGUnLCAocmVzLCBzb2NrZXQsIGhlYWQpID0+IHtcbiAgICB3ZWJzb2NrZXQuZW1pdCgndXBncmFkZScsIHJlcyk7XG5cbiAgICAvL1xuICAgIC8vIFRoZSB1c2VyIG1heSBoYXZlIGNsb3NlZCB0aGUgY29ubmVjdGlvbiBmcm9tIGEgbGlzdGVuZXIgb2YgdGhlIGB1cGdyYWRlYFxuICAgIC8vIGV2ZW50LlxuICAgIC8vXG4gICAgaWYgKHdlYnNvY2tldC5yZWFkeVN0YXRlICE9PSBXZWJTb2NrZXQuQ09OTkVDVElORykgcmV0dXJuO1xuXG4gICAgcmVxID0gd2Vic29ja2V0Ll9yZXEgPSBudWxsO1xuXG4gICAgaWYgKHJlcy5oZWFkZXJzLnVwZ3JhZGUudG9Mb3dlckNhc2UoKSAhPT0gJ3dlYnNvY2tldCcpIHtcbiAgICAgIGFib3J0SGFuZHNoYWtlKHdlYnNvY2tldCwgc29ja2V0LCAnSW52YWxpZCBVcGdyYWRlIGhlYWRlcicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRpZ2VzdCA9IGNyZWF0ZUhhc2goJ3NoYTEnKVxuICAgICAgLnVwZGF0ZShrZXkgKyBHVUlEKVxuICAgICAgLmRpZ2VzdCgnYmFzZTY0Jyk7XG5cbiAgICBpZiAocmVzLmhlYWRlcnNbJ3NlYy13ZWJzb2NrZXQtYWNjZXB0J10gIT09IGRpZ2VzdCkge1xuICAgICAgYWJvcnRIYW5kc2hha2Uod2Vic29ja2V0LCBzb2NrZXQsICdJbnZhbGlkIFNlYy1XZWJTb2NrZXQtQWNjZXB0IGhlYWRlcicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNlcnZlclByb3QgPSByZXMuaGVhZGVyc1snc2VjLXdlYnNvY2tldC1wcm90b2NvbCddO1xuICAgIGNvbnN0IHByb3RMaXN0ID0gKHByb3RvY29scyB8fCAnJykuc3BsaXQoLywgKi8pO1xuICAgIGxldCBwcm90RXJyb3I7XG5cbiAgICBpZiAoIXByb3RvY29scyAmJiBzZXJ2ZXJQcm90KSB7XG4gICAgICBwcm90RXJyb3IgPSAnU2VydmVyIHNlbnQgYSBzdWJwcm90b2NvbCBidXQgbm9uZSB3YXMgcmVxdWVzdGVkJztcbiAgICB9IGVsc2UgaWYgKHByb3RvY29scyAmJiAhc2VydmVyUHJvdCkge1xuICAgICAgcHJvdEVycm9yID0gJ1NlcnZlciBzZW50IG5vIHN1YnByb3RvY29sJztcbiAgICB9IGVsc2UgaWYgKHNlcnZlclByb3QgJiYgIXByb3RMaXN0LmluY2x1ZGVzKHNlcnZlclByb3QpKSB7XG4gICAgICBwcm90RXJyb3IgPSAnU2VydmVyIHNlbnQgYW4gaW52YWxpZCBzdWJwcm90b2NvbCc7XG4gICAgfVxuXG4gICAgaWYgKHByb3RFcnJvcikge1xuICAgICAgYWJvcnRIYW5kc2hha2Uod2Vic29ja2V0LCBzb2NrZXQsIHByb3RFcnJvcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHNlcnZlclByb3QpIHdlYnNvY2tldC5fcHJvdG9jb2wgPSBzZXJ2ZXJQcm90O1xuXG4gICAgY29uc3Qgc2VjV2ViU29ja2V0RXh0ZW5zaW9ucyA9IHJlcy5oZWFkZXJzWydzZWMtd2Vic29ja2V0LWV4dGVuc2lvbnMnXTtcblxuICAgIGlmIChzZWNXZWJTb2NrZXRFeHRlbnNpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghcGVyTWVzc2FnZURlZmxhdGUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9XG4gICAgICAgICAgJ1NlcnZlciBzZW50IGEgU2VjLVdlYlNvY2tldC1FeHRlbnNpb25zIGhlYWRlciBidXQgbm8gZXh0ZW5zaW9uICcgK1xuICAgICAgICAgICd3YXMgcmVxdWVzdGVkJztcbiAgICAgICAgYWJvcnRIYW5kc2hha2Uod2Vic29ja2V0LCBzb2NrZXQsIG1lc3NhZ2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBleHRlbnNpb25zO1xuXG4gICAgICB0cnkge1xuICAgICAgICBleHRlbnNpb25zID0gcGFyc2Uoc2VjV2ViU29ja2V0RXh0ZW5zaW9ucyk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdJbnZhbGlkIFNlYy1XZWJTb2NrZXQtRXh0ZW5zaW9ucyBoZWFkZXInO1xuICAgICAgICBhYm9ydEhhbmRzaGFrZSh3ZWJzb2NrZXQsIHNvY2tldCwgbWVzc2FnZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXh0ZW5zaW9uTmFtZXMgPSBPYmplY3Qua2V5cyhleHRlbnNpb25zKTtcblxuICAgICAgaWYgKGV4dGVuc2lvbk5hbWVzLmxlbmd0aCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgZXh0ZW5zaW9uTmFtZXMubGVuZ3RoICE9PSAxIHx8XG4gICAgICAgICAgZXh0ZW5zaW9uTmFtZXNbMF0gIT09IFBlck1lc3NhZ2VEZWZsYXRlLmV4dGVuc2lvbk5hbWVcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3QgbWVzc2FnZSA9XG4gICAgICAgICAgICAnU2VydmVyIGluZGljYXRlZCBhbiBleHRlbnNpb24gdGhhdCB3YXMgbm90IHJlcXVlc3RlZCc7XG4gICAgICAgICAgYWJvcnRIYW5kc2hha2Uod2Vic29ja2V0LCBzb2NrZXQsIG1lc3NhZ2UpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcGVyTWVzc2FnZURlZmxhdGUuYWNjZXB0KGV4dGVuc2lvbnNbUGVyTWVzc2FnZURlZmxhdGUuZXh0ZW5zaW9uTmFtZV0pO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zdCBtZXNzYWdlID0gJ0ludmFsaWQgU2VjLVdlYlNvY2tldC1FeHRlbnNpb25zIGhlYWRlcic7XG4gICAgICAgICAgYWJvcnRIYW5kc2hha2Uod2Vic29ja2V0LCBzb2NrZXQsIG1lc3NhZ2UpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHdlYnNvY2tldC5fZXh0ZW5zaW9uc1tQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXSA9XG4gICAgICAgICAgcGVyTWVzc2FnZURlZmxhdGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgd2Vic29ja2V0LnNldFNvY2tldChzb2NrZXQsIGhlYWQsIG9wdHMubWF4UGF5bG9hZCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEVtaXQgdGhlIGAnZXJyb3InYCBhbmQgYCdjbG9zZSdgIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7V2ViU29ja2V0fSB3ZWJzb2NrZXQgVGhlIFdlYlNvY2tldCBpbnN0YW5jZVxuICogQHBhcmFtIHtFcnJvcn0gVGhlIGVycm9yIHRvIGVtaXRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVtaXRFcnJvckFuZENsb3NlKHdlYnNvY2tldCwgZXJyKSB7XG4gIHdlYnNvY2tldC5fcmVhZHlTdGF0ZSA9IFdlYlNvY2tldC5DTE9TSU5HO1xuICB3ZWJzb2NrZXQuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB3ZWJzb2NrZXQuZW1pdENsb3NlKCk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgYG5ldC5Tb2NrZXRgIGFuZCBpbml0aWF0ZSBhIGNvbm5lY3Rpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQ29ubmVjdGlvbiBvcHRpb25zXG4gKiBAcmV0dXJuIHtuZXQuU29ja2V0fSBUaGUgbmV3bHkgY3JlYXRlZCBzb2NrZXQgdXNlZCB0byBzdGFydCB0aGUgY29ubmVjdGlvblxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbmV0Q29ubmVjdChvcHRpb25zKSB7XG4gIG9wdGlvbnMucGF0aCA9IG9wdGlvbnMuc29ja2V0UGF0aDtcbiAgcmV0dXJuIG5ldC5jb25uZWN0KG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGB0bHMuVExTU29ja2V0YCBhbmQgaW5pdGlhdGUgYSBjb25uZWN0aW9uLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIENvbm5lY3Rpb24gb3B0aW9uc1xuICogQHJldHVybiB7dGxzLlRMU1NvY2tldH0gVGhlIG5ld2x5IGNyZWF0ZWQgc29ja2V0IHVzZWQgdG8gc3RhcnQgdGhlIGNvbm5lY3Rpb25cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHRsc0Nvbm5lY3Qob3B0aW9ucykge1xuICBvcHRpb25zLnBhdGggPSB1bmRlZmluZWQ7XG5cbiAgaWYgKCFvcHRpb25zLnNlcnZlcm5hbWUgJiYgb3B0aW9ucy5zZXJ2ZXJuYW1lICE9PSAnJykge1xuICAgIG9wdGlvbnMuc2VydmVybmFtZSA9IG5ldC5pc0lQKG9wdGlvbnMuaG9zdCkgPyAnJyA6IG9wdGlvbnMuaG9zdDtcbiAgfVxuXG4gIHJldHVybiB0bHMuY29ubmVjdChvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBBYm9ydCB0aGUgaGFuZHNoYWtlIGFuZCBlbWl0IGFuIGVycm9yLlxuICpcbiAqIEBwYXJhbSB7V2ViU29ja2V0fSB3ZWJzb2NrZXQgVGhlIFdlYlNvY2tldCBpbnN0YW5jZVxuICogQHBhcmFtIHsoaHR0cC5DbGllbnRSZXF1ZXN0fG5ldC5Tb2NrZXR8dGxzLlNvY2tldCl9IHN0cmVhbSBUaGUgcmVxdWVzdCB0b1xuICogICAgIGFib3J0IG9yIHRoZSBzb2NrZXQgdG8gZGVzdHJveVxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2VcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFib3J0SGFuZHNoYWtlKHdlYnNvY2tldCwgc3RyZWFtLCBtZXNzYWdlKSB7XG4gIHdlYnNvY2tldC5fcmVhZHlTdGF0ZSA9IFdlYlNvY2tldC5DTE9TSU5HO1xuXG4gIGNvbnN0IGVyciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyLCBhYm9ydEhhbmRzaGFrZSk7XG5cbiAgaWYgKHN0cmVhbS5zZXRIZWFkZXIpIHtcbiAgICBzdHJlYW0uYWJvcnQoKTtcblxuICAgIGlmIChzdHJlYW0uc29ja2V0ICYmICFzdHJlYW0uc29ja2V0LmRlc3Ryb3llZCkge1xuICAgICAgLy9cbiAgICAgIC8vIE9uIE5vZGUuanMgPj0gMTQuMy4wIGByZXF1ZXN0LmFib3J0KClgIGRvZXMgbm90IGRlc3Ryb3kgdGhlIHNvY2tldCBpZlxuICAgICAgLy8gY2FsbGVkIGFmdGVyIHRoZSByZXF1ZXN0IGNvbXBsZXRlZC4gU2VlXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9pc3N1ZXMvMTg2OS5cbiAgICAgIC8vXG4gICAgICBzdHJlYW0uc29ja2V0LmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICBzdHJlYW0ub25jZSgnYWJvcnQnLCB3ZWJzb2NrZXQuZW1pdENsb3NlLmJpbmQod2Vic29ja2V0KSk7XG4gICAgd2Vic29ja2V0LmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgfSBlbHNlIHtcbiAgICBzdHJlYW0uZGVzdHJveShlcnIpO1xuICAgIHN0cmVhbS5vbmNlKCdlcnJvcicsIHdlYnNvY2tldC5lbWl0LmJpbmQod2Vic29ja2V0LCAnZXJyb3InKSk7XG4gICAgc3RyZWFtLm9uY2UoJ2Nsb3NlJywgd2Vic29ja2V0LmVtaXRDbG9zZS5iaW5kKHdlYnNvY2tldCkpO1xuICB9XG59XG5cbi8qKlxuICogSGFuZGxlIGNhc2VzIHdoZXJlIHRoZSBgcGluZygpYCwgYHBvbmcoKWAsIG9yIGBzZW5kKClgIG1ldGhvZHMgYXJlIGNhbGxlZFxuICogd2hlbiB0aGUgYHJlYWR5U3RhdGVgIGF0dHJpYnV0ZSBpcyBgQ0xPU0lOR2Agb3IgYENMT1NFRGAuXG4gKlxuICogQHBhcmFtIHtXZWJTb2NrZXR9IHdlYnNvY2tldCBUaGUgV2ViU29ja2V0IGluc3RhbmNlXG4gKiBAcGFyYW0geyp9IFtkYXRhXSBUaGUgZGF0YSB0byBzZW5kXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2JdIENhbGxiYWNrXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZW5kQWZ0ZXJDbG9zZSh3ZWJzb2NrZXQsIGRhdGEsIGNiKSB7XG4gIGlmIChkYXRhKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gdG9CdWZmZXIoZGF0YSkubGVuZ3RoO1xuXG4gICAgLy9cbiAgICAvLyBUaGUgYF9idWZmZXJlZEFtb3VudGAgcHJvcGVydHkgaXMgdXNlZCBvbmx5IHdoZW4gdGhlIHBlZXIgaXMgYSBjbGllbnQgYW5kXG4gICAgLy8gdGhlIG9wZW5pbmcgaGFuZHNoYWtlIGZhaWxzLiBVbmRlciB0aGVzZSBjaXJjdW1zdGFuY2VzLCBpbiBmYWN0LCB0aGVcbiAgICAvLyBgc2V0U29ja2V0KClgIG1ldGhvZCBpcyBub3QgY2FsbGVkLCBzbyB0aGUgYF9zb2NrZXRgIGFuZCBgX3NlbmRlcmBcbiAgICAvLyBwcm9wZXJ0aWVzIGFyZSBzZXQgdG8gYG51bGxgLlxuICAgIC8vXG4gICAgaWYgKHdlYnNvY2tldC5fc29ja2V0KSB3ZWJzb2NrZXQuX3NlbmRlci5fYnVmZmVyZWRCeXRlcyArPSBsZW5ndGg7XG4gICAgZWxzZSB3ZWJzb2NrZXQuX2J1ZmZlcmVkQW1vdW50ICs9IGxlbmd0aDtcbiAgfVxuXG4gIGlmIChjYikge1xuICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihcbiAgICAgIGBXZWJTb2NrZXQgaXMgbm90IG9wZW46IHJlYWR5U3RhdGUgJHt3ZWJzb2NrZXQucmVhZHlTdGF0ZX0gYCArXG4gICAgICAgIGAoJHtyZWFkeVN0YXRlc1t3ZWJzb2NrZXQucmVhZHlTdGF0ZV19KWBcbiAgICApO1xuICAgIGNiKGVycik7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgbGlzdGVuZXIgb2YgdGhlIGBSZWNlaXZlcmAgYCdjb25jbHVkZSdgIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlIFRoZSBzdGF0dXMgY29kZVxuICogQHBhcmFtIHtTdHJpbmd9IHJlYXNvbiBUaGUgcmVhc29uIGZvciBjbG9zaW5nXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZWNlaXZlck9uQ29uY2x1ZGUoY29kZSwgcmVhc29uKSB7XG4gIGNvbnN0IHdlYnNvY2tldCA9IHRoaXNba1dlYlNvY2tldF07XG5cbiAgd2Vic29ja2V0Ll9jbG9zZUZyYW1lUmVjZWl2ZWQgPSB0cnVlO1xuICB3ZWJzb2NrZXQuX2Nsb3NlTWVzc2FnZSA9IHJlYXNvbjtcbiAgd2Vic29ja2V0Ll9jbG9zZUNvZGUgPSBjb2RlO1xuXG4gIGlmICh3ZWJzb2NrZXQuX3NvY2tldFtrV2ViU29ja2V0XSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgd2Vic29ja2V0Ll9zb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBzb2NrZXRPbkRhdGEpO1xuICBwcm9jZXNzLm5leHRUaWNrKHJlc3VtZSwgd2Vic29ja2V0Ll9zb2NrZXQpO1xuXG4gIGlmIChjb2RlID09PSAxMDA1KSB3ZWJzb2NrZXQuY2xvc2UoKTtcbiAgZWxzZSB3ZWJzb2NrZXQuY2xvc2UoY29kZSwgcmVhc29uKTtcbn1cblxuLyoqXG4gKiBUaGUgbGlzdGVuZXIgb2YgdGhlIGBSZWNlaXZlcmAgYCdkcmFpbidgIGV2ZW50LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlY2VpdmVyT25EcmFpbigpIHtcbiAgdGhpc1trV2ViU29ja2V0XS5fc29ja2V0LnJlc3VtZSgpO1xufVxuXG4vKipcbiAqIFRoZSBsaXN0ZW5lciBvZiB0aGUgYFJlY2VpdmVyYCBgJ2Vycm9yJ2AgZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoUmFuZ2VFcnJvcnxFcnJvcil9IGVyciBUaGUgZW1pdHRlZCBlcnJvclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVjZWl2ZXJPbkVycm9yKGVycikge1xuICBjb25zdCB3ZWJzb2NrZXQgPSB0aGlzW2tXZWJTb2NrZXRdO1xuXG4gIGlmICh3ZWJzb2NrZXQuX3NvY2tldFtrV2ViU29ja2V0XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgd2Vic29ja2V0Ll9zb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBzb2NrZXRPbkRhdGEpO1xuXG4gICAgLy9cbiAgICAvLyBPbiBOb2RlLmpzIDwgMTQuMC4wIHRoZSBgJ2Vycm9yJ2AgZXZlbnQgaXMgZW1pdHRlZCBzeW5jaHJvbm91c2x5LiBTZWVcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9pc3N1ZXMvMTk0MC5cbiAgICAvL1xuICAgIHByb2Nlc3MubmV4dFRpY2socmVzdW1lLCB3ZWJzb2NrZXQuX3NvY2tldCk7XG5cbiAgICB3ZWJzb2NrZXQuY2xvc2UoZXJyW2tTdGF0dXNDb2RlXSk7XG4gIH1cblxuICB3ZWJzb2NrZXQuZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG4vKipcbiAqIFRoZSBsaXN0ZW5lciBvZiB0aGUgYFJlY2VpdmVyYCBgJ2ZpbmlzaCdgIGV2ZW50LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlY2VpdmVyT25GaW5pc2goKSB7XG4gIHRoaXNba1dlYlNvY2tldF0uZW1pdENsb3NlKCk7XG59XG5cbi8qKlxuICogVGhlIGxpc3RlbmVyIG9mIHRoZSBgUmVjZWl2ZXJgIGAnbWVzc2FnZSdgIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xCdWZmZXJ8QXJyYXlCdWZmZXJ8QnVmZmVyW10pfSBkYXRhIFRoZSBtZXNzYWdlXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZWNlaXZlck9uTWVzc2FnZShkYXRhKSB7XG4gIHRoaXNba1dlYlNvY2tldF0uZW1pdCgnbWVzc2FnZScsIGRhdGEpO1xufVxuXG4vKipcbiAqIFRoZSBsaXN0ZW5lciBvZiB0aGUgYFJlY2VpdmVyYCBgJ3BpbmcnYCBldmVudC5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcn0gZGF0YSBUaGUgZGF0YSBpbmNsdWRlZCBpbiB0aGUgcGluZyBmcmFtZVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVjZWl2ZXJPblBpbmcoZGF0YSkge1xuICBjb25zdCB3ZWJzb2NrZXQgPSB0aGlzW2tXZWJTb2NrZXRdO1xuXG4gIHdlYnNvY2tldC5wb25nKGRhdGEsICF3ZWJzb2NrZXQuX2lzU2VydmVyLCBOT09QKTtcbiAgd2Vic29ja2V0LmVtaXQoJ3BpbmcnLCBkYXRhKTtcbn1cblxuLyoqXG4gKiBUaGUgbGlzdGVuZXIgb2YgdGhlIGBSZWNlaXZlcmAgYCdwb25nJ2AgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGRhdGEgVGhlIGRhdGEgaW5jbHVkZWQgaW4gdGhlIHBvbmcgZnJhbWVcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlY2VpdmVyT25Qb25nKGRhdGEpIHtcbiAgdGhpc1trV2ViU29ja2V0XS5lbWl0KCdwb25nJywgZGF0YSk7XG59XG5cbi8qKlxuICogUmVzdW1lIGEgcmVhZGFibGUgc3RyZWFtXG4gKlxuICogQHBhcmFtIHtSZWFkYWJsZX0gc3RyZWFtIFRoZSByZWFkYWJsZSBzdHJlYW1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0pIHtcbiAgc3RyZWFtLnJlc3VtZSgpO1xufVxuXG4vKipcbiAqIFRoZSBsaXN0ZW5lciBvZiB0aGUgYG5ldC5Tb2NrZXRgIGAnY2xvc2UnYCBldmVudC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzb2NrZXRPbkNsb3NlKCkge1xuICBjb25zdCB3ZWJzb2NrZXQgPSB0aGlzW2tXZWJTb2NrZXRdO1xuXG4gIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgc29ja2V0T25DbG9zZSk7XG4gIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBzb2NrZXRPbkRhdGEpO1xuICB0aGlzLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBzb2NrZXRPbkVuZCk7XG5cbiAgd2Vic29ja2V0Ll9yZWFkeVN0YXRlID0gV2ViU29ja2V0LkNMT1NJTkc7XG5cbiAgbGV0IGNodW5rO1xuXG4gIC8vXG4gIC8vIFRoZSBjbG9zZSBmcmFtZSBtaWdodCBub3QgaGF2ZSBiZWVuIHJlY2VpdmVkIG9yIHRoZSBgJ2VuZCdgIGV2ZW50IGVtaXR0ZWQsXG4gIC8vIGZvciBleGFtcGxlLCBpZiB0aGUgc29ja2V0IHdhcyBkZXN0cm95ZWQgZHVlIHRvIGFuIGVycm9yLiBFbnN1cmUgdGhhdCB0aGVcbiAgLy8gYHJlY2VpdmVyYCBzdHJlYW0gaXMgY2xvc2VkIGFmdGVyIHdyaXRpbmcgYW55IHJlbWFpbmluZyBidWZmZXJlZCBkYXRhIHRvXG4gIC8vIGl0LiBJZiB0aGUgcmVhZGFibGUgc2lkZSBvZiB0aGUgc29ja2V0IGlzIGluIGZsb3dpbmcgbW9kZSB0aGVuIHRoZXJlIGlzIG5vXG4gIC8vIGJ1ZmZlcmVkIGRhdGEgYXMgZXZlcnl0aGluZyBoYXMgYmVlbiBhbHJlYWR5IHdyaXR0ZW4gYW5kIGByZWFkYWJsZS5yZWFkKClgXG4gIC8vIHdpbGwgcmV0dXJuIGBudWxsYC4gSWYgaW5zdGVhZCwgdGhlIHNvY2tldCBpcyBwYXVzZWQsIGFueSBwb3NzaWJsZSBidWZmZXJlZFxuICAvLyBkYXRhIHdpbGwgYmUgcmVhZCBhcyBhIHNpbmdsZSBjaHVuay5cbiAgLy9cbiAgaWYgKFxuICAgICF0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQgJiZcbiAgICAhd2Vic29ja2V0Ll9jbG9zZUZyYW1lUmVjZWl2ZWQgJiZcbiAgICAhd2Vic29ja2V0Ll9yZWNlaXZlci5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgJiZcbiAgICAoY2h1bmsgPSB3ZWJzb2NrZXQuX3NvY2tldC5yZWFkKCkpICE9PSBudWxsXG4gICkge1xuICAgIHdlYnNvY2tldC5fcmVjZWl2ZXIud3JpdGUoY2h1bmspO1xuICB9XG5cbiAgd2Vic29ja2V0Ll9yZWNlaXZlci5lbmQoKTtcblxuICB0aGlzW2tXZWJTb2NrZXRdID0gdW5kZWZpbmVkO1xuXG4gIGNsZWFyVGltZW91dCh3ZWJzb2NrZXQuX2Nsb3NlVGltZXIpO1xuXG4gIGlmIChcbiAgICB3ZWJzb2NrZXQuX3JlY2VpdmVyLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkIHx8XG4gICAgd2Vic29ja2V0Ll9yZWNlaXZlci5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWRcbiAgKSB7XG4gICAgd2Vic29ja2V0LmVtaXRDbG9zZSgpO1xuICB9IGVsc2Uge1xuICAgIHdlYnNvY2tldC5fcmVjZWl2ZXIub24oJ2Vycm9yJywgcmVjZWl2ZXJPbkZpbmlzaCk7XG4gICAgd2Vic29ja2V0Ll9yZWNlaXZlci5vbignZmluaXNoJywgcmVjZWl2ZXJPbkZpbmlzaCk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgbGlzdGVuZXIgb2YgdGhlIGBuZXQuU29ja2V0YCBgJ2RhdGEnYCBldmVudC5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcn0gY2h1bmsgQSBjaHVuayBvZiBkYXRhXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzb2NrZXRPbkRhdGEoY2h1bmspIHtcbiAgaWYgKCF0aGlzW2tXZWJTb2NrZXRdLl9yZWNlaXZlci53cml0ZShjaHVuaykpIHtcbiAgICB0aGlzLnBhdXNlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgbGlzdGVuZXIgb2YgdGhlIGBuZXQuU29ja2V0YCBgJ2VuZCdgIGV2ZW50LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNvY2tldE9uRW5kKCkge1xuICBjb25zdCB3ZWJzb2NrZXQgPSB0aGlzW2tXZWJTb2NrZXRdO1xuXG4gIHdlYnNvY2tldC5fcmVhZHlTdGF0ZSA9IFdlYlNvY2tldC5DTE9TSU5HO1xuICB3ZWJzb2NrZXQuX3JlY2VpdmVyLmVuZCgpO1xuICB0aGlzLmVuZCgpO1xufVxuXG4vKipcbiAqIFRoZSBsaXN0ZW5lciBvZiB0aGUgYG5ldC5Tb2NrZXRgIGAnZXJyb3InYCBldmVudC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzb2NrZXRPbkVycm9yKCkge1xuICBjb25zdCB3ZWJzb2NrZXQgPSB0aGlzW2tXZWJTb2NrZXRdO1xuXG4gIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgc29ja2V0T25FcnJvcik7XG4gIHRoaXMub24oJ2Vycm9yJywgTk9PUCk7XG5cbiAgaWYgKHdlYnNvY2tldCkge1xuICAgIHdlYnNvY2tldC5fcmVhZHlTdGF0ZSA9IFdlYlNvY2tldC5DTE9TSU5HO1xuICAgIHRoaXMuZGVzdHJveSgpO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/stream-chat/node_modules/ws/lib/websocket.js\n");

/***/ })

};
;